(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
      }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }return n[o].exports;
  }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
})({ 1: [function (require, module, exports) {
    'use strict';

    var http;
    var ajaxReq = function () {};
    ajaxReq.http = null;
    ajaxReq.postSerializer = null;
    ajaxReq.SERVERURL = "https://rpc.myetherwallet.com/api.mew";
    ajaxReq.COINMARKETCAPAPI = "https://coinmarketcap-nexuist.rhcloud.com/api/";
    ajaxReq.pendingPosts = [];
    ajaxReq.config = {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
    };
    ajaxReq.getCurrentBlock = function (isClassic, callback) {
      this.post({
        currentBlock: '',
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.getBalance = function (addr, isClassic, callback) {
      this.post({
        balance: addr,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.getTransactionData = function (addr, isClassic, callback) {
      this.post({
        txdata: addr,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.sendRawTx = function (rawTx, isClassic, callback) {
      this.post({
        rawtx: rawTx,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.getEstimatedGas = function (txobj, isClassic, callback) {
      this.post({
        estimatedGas: txobj,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.getEthCall = function (txobj, isClassic, callback) {
      this.post({
        ethCall: txobj,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.getTraceCall = function (txobj, isClassic, callback) {
      this.post({
        traceCall: txobj,
        isClassic: isClassic
      }, callback);
    };
    ajaxReq.queuePost = function () {
      var data = this.pendingPosts[0].data;
      var callback = this.pendingPosts[0].callback;
      this.http.post(this.SERVERURL, this.postSerializer(data), this.config).then(function (data) {
        callback(data.data);
        ajaxReq.pendingPosts.splice(0, 1);
        if (ajaxReq.pendingPosts.length > 0) ajaxReq.queuePost();
      });
    };
    ajaxReq.post = function (data, callback) {
      this.pendingPosts.push({
        data: data,
        callback: callback
      });
      if (this.pendingPosts.length == 1) this.queuePost();
    };
    ajaxReq.getETHvalue = function (callback) {
      var prefix = "eth";
      this.http.get(this.COINMARKETCAPAPI + prefix).then(function (data) {
        data = data['data']['price'];
        var priceObj = {
          usd: data['usd'].toFixed(6),
          eur: data['eur'].toFixed(6),
          btc: data['btc'].toFixed(6)
        };
        callback(priceObj);
      });
    };
    module.exports = ajaxReq;
  }, {}], 2: [function (require, module, exports) {
    'use strict';

    var addWalletCtrl = function ($scope, $sce) {
      $scope.showBtnGen = $scope.showBtnUnlock = $scope.showBtnAdd = $scope.showBtnAddWallet = $scope.showAddWallet = $scope.requireFPass = $scope.requirePPass = $scope.showPassTxt = false;
      $scope.nickNames = [];
      $scope.filePassword = $scope.fileContent = "";
      $scope.wallet = null;
      $scope.addAccount = {
        address: "",
        nickName: "",
        encStr: "",
        password: ""
      };
      $scope.onPrivKeyChange = function () {
        $scope.addWalletStats = "";
        $scope.requirePPass = $scope.manualprivkey.length == 128 || $scope.manualprivkey.length == 132;
        $scope.showBtnUnlock = $scope.manualprivkey.length == 64;
      };
      $scope.onPrivKeyPassChange = function () {
        $scope.showBtnUnlock = $scope.privPassword.length > 6;
      };
      $scope.showContent = function ($fileContent) {
        $scope.fileStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[5] + document.getElementById('fselector').files[0].name));
        try {
          $scope.requireFPass = Wallet.walletRequirePass($fileContent);
          $scope.showBtnUnlock = !$scope.requireFPass;
          $scope.fileContent = $fileContent;
        } catch (e) {
          $scope.fileStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
      $scope.openFileDialog = function ($fileContent) {
        $scope.addWalletStats = "";
        document.getElementById('fselector').click();
      };
      $scope.onFilePassChange = function () {
        $scope.showBtnUnlock = $scope.filePassword.length > 1;
      };
      $scope.decryptWallet = function () {
        $scope.wallet = null;
        $scope.addWalletStats = "";
        try {
          if ($scope.walletType == "pasteprivkey" && $scope.requirePPass) {
            $scope.wallet = Wallet.fromMyEtherWalletKey($scope.manualprivkey, $scope.privPassword);
            $scope.addAccount.password = $scope.privPassword;
          } else if ($scope.walletType == "pasteprivkey" && !$scope.requirePPass) {
            $scope.wallet = new Wallet($scope.manualprivkey);
            $scope.addAccount.password = '';
          } else if ($scope.walletType == "fileupload") {
            $scope.wallet = Wallet.getWalletFromPrivKeyFile($scope.fileContent, $scope.filePassword);
            $scope.addAccount.password = $scope.filePassword;
          }
          $scope.addAccount.address = $scope.wallet.getAddressString();
        } catch (e) {
          $scope.addWalletStats = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[6] + e));
        }
        if ($scope.wallet != null) {
          $scope.addWalletStats = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[1]));
          $scope.showAddWallet = true;
          $scope.showPassTxt = $scope.addAccount.password == '';
          $scope.setBalance();
        }
      };
      $scope.setNickNames = function () {
        cxFuncs.getAllNickNames(function (nicks) {
          $scope.nickNames = nicks;
        });
      };
      $scope.setNickNames();
      $scope.newWalletChange = function (varStatus, shwbtn) {
        if ($scope.addAccount.nickName != "" && $scope.nickNames.indexOf($scope.addAccount.nickName) == -1 && $scope.addAccount.password.length > 8) $scope[shwbtn] = true;else $scope[shwbtn] = false;
        if ($scope.nickNames.indexOf($scope.addAccount.nickName) !== -1) $scope[varStatus] = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[13]));else $scope[varStatus] = "";
      };
      $scope.watchOnlyChange = function () {
        if ($scope.addAccount.address != "" && $scope.addAccount.nickName != "" && $scope.nickNames.indexOf($scope.addAccount.nickName) == -1 && ethFuncs.validateEtherAddress($scope.addAccount.address)) $scope.showBtnAdd = true;else $scope.showBtnAdd = false;
        if ($scope.addAccount.address != "" && !ethFuncs.validateEtherAddress($scope.addAccount.address)) $scope.watchOnlyStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[5]));else if ($scope.nickNames.indexOf($scope.addAccount.nickName) !== -1) $scope.watchOnlyStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[13]));else $scope.watchOnlyStatus = "";
      };
      $scope.addWatchOnly = function () {
        if ($scope.nickNames.indexOf($scope.addAccount.nickName) !== -1) {
          $scope.addWalletStats = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[13]));
          return;
        }
        cxFuncs.addWatchOnlyAddress($scope.addAccount.address, $scope.addAccount.nickName, function () {
          if (chrome.runtime.lastError) {
            $scope.addWalletStats = $sce.trustAsHtml(globalFuncs.getDangerText(chrome.runtime.lastError.message));
          } else {
            $scope.addWalletStats = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[3] + $scope.addAccount.address));
            $scope.setNickNames();
          }
          $scope.$apply();
        });
      };
      $scope.isStrongPass = function (pass) {
        return pass.length > 3;
      };
      $scope.$watch('walletType', function () {
        $scope.showBtnGen = $scope.showBtnUnlock = $scope.showBtnAdd = $scope.showAddWallet = false;
        $scope.addNewNick = $scope.addNewPass = "";
        $scope.addWalletStats = "";
      });
      $scope.addWalletToStorage = function (status) {
        if ($scope.nickNames.indexOf($scope.addAccount.nickName) !== -1) {
          $scope[status] = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[13]));
          return;
        } else if ($scope.nickNames.indexOf(ethUtil.toChecksumAddress($scope.addAccount.address)) !== -1) {
          $scope[status] = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[16]));
          return;
        }
        cxFuncs.addWalletToStorage($scope.addAccount.address, $scope.addAccount.encStr, $scope.addAccount.nickName, function () {
          if (chrome.runtime.lastError) {
            $scope[status] = $sce.trustAsHtml(globalFuncs.getDangerText(chrome.runtime.lastError.message));
          } else {
            $scope[status] = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[3] + $scope.addAccount.address));
            $scope.setNickNames();
          }
          $scope.$apply();
        });
      };
      $scope.importWalletToStorage = function () {
        var wStr = $scope.wallet.toV3($scope.addAccount.password, {
          kdf: globalFuncs.kdf,
          n: globalFuncs.scrypt.n
        });
        $scope.addAccount.encStr = JSON.stringify(wStr);
        $scope.addWalletToStorage('addStatus');
      };
      $scope.generateWallet = function () {
        var wallet = Wallet.generate(false);
        var wStr = wallet.toV3($scope.addAccount.password, {
          kdf: globalFuncs.kdf,
          n: globalFuncs.scrypt.n
        });
        $scope.addAccount.encStr = JSON.stringify(wStr);
        $scope.addAccount.address = wallet.getAddressString();
        $scope.addWalletToStorage('addWalletStats');
      };
      $scope.setBalance = function () {
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
      };
    };
    module.exports = addWalletCtrl;
  }, {}], 3: [function (require, module, exports) {
    'use strict';

    var cxDecryptWalletCtrl = function ($scope, $sce, walletService) {
      $scope.allWallets = [];
      $scope.selectedWallet = $scope.password = "";
      $scope.setAllWallets = function () {
        cxFuncs.getWalletsArr(function (wlts) {
          $scope.allWallets = wlts;
          $scope.updateBalance();
          $scope.$apply();
        });
      };
      $scope.updateBalance = function () {
        for (var i = 0; i < $scope.allWallets.length; i++) {
          $scope.setBalance($scope.allWallets[i].addr, i);
        }
      };
      $scope.setBalance = function (address, id) {
        ajaxReq.getBalance(address, false, function (data) {
          if (data.error) {
            $scope.allWallets[id].balance = data.msg;
          } else {
            $scope.allWallets[id].balance = etherUnits.toEther(data.data.balance, 'wei');
          }
        });
      };
      $scope.setAllWallets();
      $scope.getPrivFromAdd = function () {
        if ($scope.selectedWallet == "") throw globalFuncs.errorMsgs[5];
        for (var i = 0; i < $scope.allWallets.length; i++) {
          if ($scope.allWallets[i].addr == $scope.selectedWallet) return $scope.allWallets[i].priv;
        }
        throw globalFuncs.errorMsgs[14];
      };
      $scope.decryptWallet = function () {
        $scope.wallet = null;
        $scope.decryptStatus = "";
        try {
          var priv = $scope.getPrivFromAdd();
          if (priv.length == 132) $scope.wallet = Wallet.fromMyEtherWalletKey(priv, $scope.password);else $scope.wallet = Wallet.getWalletFromPrivKeyFile(priv, $scope.password);
          walletService.password = $scope.password;
          walletService.wallet = $scope.wallet;
        } catch (e) {
          $scope.decryptStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[6] + ":" + e));
        }
        if ($scope.wallet != null) $scope.decryptStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[1]));
      };
    };
    module.exports = cxDecryptWalletCtrl;
  }, {}], 4: [function (require, module, exports) {
    'use strict';

    var mainPopCtrl = function ($scope, $sce) {
      $scope.allWallets = [];
      $scope.allWatchOnly = [];
      $scope.setAllWallets = function () {
        cxFuncs.getWalletsArr(function (wlts) {
          $scope.allWallets = wlts;
          $scope.updateBalance('allWallets');
        });
        cxFuncs.getWatchOnlyArr(function (wlts) {
          $scope.allWatchOnly = wlts;
          $scope.updateBalance('allWatchOnly');
          $scope.$apply();
        });
      };
      $scope.updateBalance = function (varWal) {
        for (var i = 0; i < $scope[varWal].length; i++) {
          $scope.setBalance($scope[varWal][i].addr, i, varWal);
        }
      };
      $scope.setBalance = function (address, id, varWal) {
        ajaxReq.getBalance(address, false, function (data) {
          if (data.error) {
            $scope[varWal][id].balance = data.msg;
          } else {
            $scope[varWal][id].balance = etherUnits.toEther(data.data.balance, 'wei');
            $scope[varWal][id].balanceR = new BigNumber($scope[varWal][id].balance).toPrecision(5);
          }
        });
      };
      $scope.setAllWallets();
    };
    module.exports = mainPopCtrl;
  }, {}], 5: [function (require, module, exports) {
    'use strict';

    var myWalletsCtrl = function ($scope, $sce) {
      $scope.editModal = new Modal(document.getElementById('editWallet'));
      $scope.viewModal = new Modal(document.getElementById('viewWalletDetails'));
      $scope.removeModal = new Modal(document.getElementById('removeWallet'));
      $scope.allWallets = [];
      $scope.allWatchOnly = [];
      $scope.nickNames = [];
      $scope.fiatVal = {
        usd: 0,
        eur: 0,
        btc: 0
      };
      $scope.viewWallet = {};
      $scope.setNickNames = function () {
        cxFuncs.getAllNickNames(function (nicks) {
          $scope.nickNames = nicks;
        });
      };
      $scope.setAllWallets = function () {
        cxFuncs.getWalletsArr(function (wlts) {
          $scope.allWallets = wlts;
          $scope.updateBalance('allWallets');
          $scope.setTokens('allWallets');
        });
        cxFuncs.getWatchOnlyArr(function (wlts) {
          $scope.allWatchOnly = wlts;
          $scope.updateBalance('allWatchOnly');
          $scope.setTokens('allWatchOnly');
        });
      };
      $scope.setTokens = function (varWal) {
        for (var j = 0; j < $scope[varWal].length; j++) {
          $scope.tokens = Token.popTokens;
          $scope[varWal][j].tokens = [];
          for (var i = 0; i < $scope.tokens.length; i++) {
            $scope[varWal][j].tokens.push(new Token($scope.tokens[i].address, $scope[varWal][j].addr, $scope.tokens[i].symbol, $scope.tokens[i].decimal));
          }
          var storedTokens = localStorage.getItem("localTokens") != null ? JSON.parse(localStorage.getItem("localTokens")) : [];
          for (var i = 0; i < storedTokens.length; i++) {
            $scope[varWal][j].tokens.push(new Token(storedTokens[i].contractAddress, $scope[varWal][j].addr, globalFuncs.stripTags(storedTokens[i].symbol), storedTokens[i].decimal));
          }
        }
      };
      $scope.updateBalance = function (varWal) {
        for (var i = 0; i < $scope[varWal].length; i++) {
          $scope.setBalance($scope[varWal][i].addr, i, varWal);
        }
      };
      $scope.setBalance = function (address, id, varWal) {
        ajaxReq.getBalance(address, false, function (data) {
          if (data.error) {
            $scope[varWal][id].balance = data.msg;
          } else {
            $scope[varWal][id].balance = etherUnits.toEther(data.data.balance, 'wei');
            $scope[varWal][id].balanceR = new BigNumber($scope[varWal][id].balance).toPrecision(5);
            $scope[varWal][id].usd = etherUnits.toFiat($scope[varWal][id].balance, 'ether', $scope.fiatVal.usd);
            $scope[varWal][id].eur = etherUnits.toFiat($scope[varWal][id].balance, 'ether', $scope.fiatVal.eur);
            $scope[varWal][id].btc = etherUnits.toFiat($scope[varWal][id].balance, 'ether', $scope.fiatVal.btc);
          }
        });
      };
      $scope.setViewWalletObj = function (val, type) {
        var vtype = 'allWallets';
        if (type == 'watchOnly') vtype = 'allWatchOnly';
        $scope.viewWallet = {
          nick: $scope[vtype][val].nick,
          addr: $scope[vtype][val].addr,
          id: val,
          type: type
        };
      };
      $scope.editMWallet = function (val, type) {
        $scope.setViewWalletObj(val, type);
        $scope.editModal.open();
      };
      $scope.editSave = function () {
        if ($scope.nickNames.indexOf($scope.viewWallet.nick) !== -1) {
          $scope.editStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[13]));
          return;
        } else {
          cxFuncs.editNickName($scope.viewWallet.addr, $scope.viewWallet.nick, function () {
            if (chrome.runtime.lastError) $scope.editStatus = $sce.trustAsHtml(globalFuncs.getDangerText(chrome.runtime.lastError.message));else {
              $scope.setAllWallets();
              $scope.setNickNames();
              $scope.editModal.close();
            }
          });
        }
      };
      $scope.viewMWallet = function (val, type) {
        $scope.setViewWalletObj(val, type);
        $scope.viewModal.open();
      };
      $scope.decryptWallet = function () {
        $scope.wallet = null;
        $scope.viewStatus = "";
        try {
          var priv = $scope.allWallets[$scope.viewWallet.id].priv;
          if (priv.length == 132) $scope.wallet = Wallet.fromMyEtherWalletKey(priv, $scope.password);else $scope.wallet = Wallet.getWalletFromPrivKeyFile(priv, $scope.password);
          $scope.viewModal.close();
          $scope.setWalletInfo();
          $scope.password = "";
        } catch (e) {
          $scope.viewStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[6] + ":" + e));
        }
      };
      $scope.printQRCode = function () {
        globalFuncs.printPaperWallets(JSON.stringify([{
          address: $scope.wallet.getAddressString(),
          private: $scope.wallet.getPrivateKeyString()
        }]));
      };
      $scope.resetWallet = function () {
        $scope.wallet = null;
        $scope.blob = $scope.blobEnc = $scope.password = "";
      };
      $scope.setWalletInfo = function () {
        $scope.blob = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toJSON());
        if ($scope.password != '') {
          $scope.blobEnc = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toV3($scope.password, {
            kdf: globalFuncs.kdf,
            n: globalFuncs.scrypt.n
          }));
          $scope.encFileName = $scope.wallet.getV3Filename();
        }
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
      };
      $scope.deleteWalletMsg = function (val, type) {
        $scope.setViewWalletObj(val, type);
        $scope.removeModal.open();
      };
      $scope.deleteWallet = function () {
        cxFuncs.deleteAccount($scope.viewWallet.addr, function () {
          $scope.setAllWallets();
          $scope.setNickNames();
          $scope.removeModal.close();
        });
      };
      ajaxReq.getETHvalue(function (data) {
        $scope.fiatVal.usd = data.usd;
        $scope.fiatVal.eur = data.eur;
        $scope.fiatVal.btc = data.btc;
        $scope.setAllWallets();
      });
      $scope.setNickNames();
    };
    module.exports = myWalletsCtrl;
  }, {}], 6: [function (require, module, exports) {
    'use strict';

    var quickSendCtrl = function ($scope, $sce) {
      $scope.allWallets = [];
      $scope.selectedWallet = "";
      $scope.showConfirm = false;
      $scope.tx = {
        gasLimit: globalFuncs.defaultTxGasLimit,
        data: "",
        to: "",
        unit: "ether",
        value: "",
        nonce: null,
        gasPrice: null,
        donate: false
      };
      $scope.setAllWallets = function () {
        cxFuncs.getWalletsArr(function (wlts) {
          $scope.allWallets = wlts;
          $scope.updateBalance('allWallets');
        });
      };
      $scope.updateBalance = function (varWal) {
        for (var i = 0; i < $scope[varWal].length; i++) {
          $scope.setBalance($scope[varWal][i].addr, i, varWal);
        }
      };
      $scope.setBalance = function (address, id, varWal) {
        ajaxReq.getBalance(address, false, function (data) {
          if (data.error) {
            $scope[varWal][id].balance = data.msg;
          } else {
            $scope[varWal][id].balance = etherUnits.toEther(data.data.balance, 'wei');
            $scope[varWal][id].balanceR = new BigNumber($scope[varWal][id].balance).toPrecision(5);
          }
        });
      };
      $scope.validateAddress = function () {
        if (ethFuncs.validateEtherAddress($scope.tx.to)) {
          $scope.validateAddressStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[0]));
        } else {
          $scope.validateAddressStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[5]));
        }
      };
      $scope.transferAllBalance = function () {
        $scope.wallet = {};
        $scope.wallet.getAddressString = function () {
          return $scope.allWallets[$scope.selectedWallet].addr;
        };
        uiFuncs.transferAllBalance($scope.wallet.getAddressString(), $scope.tx.gasLimit, false, function (resp) {
          if (!resp.isError) {
            $scope.tx.unit = resp.unit;
            $scope.tx.value = resp.value;
          } else {
            $scope.validateTxStatus = $sce.trustAsHtml(resp.error);
          }
        });
      };
      $scope.prepTX = function () {
        try {
          if (!ethFuncs.validateEtherAddress($scope.tx.to)) throw globalFuncs.errorMsgs[5];else if (!globalFuncs.isNumeric($scope.tx.value) || parseFloat($scope.tx.value) < 0) throw globalFuncs.errorMsgs[7];
          $scope.showConfirm = true;
        } catch (e) {
          $scope.prepTXStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
      $scope.unlockAndSend = function () {
        try {
          $scope.decryptWallet();
          var txData = uiFuncs.getTxData($scope);
          uiFuncs.generateTx(txData, false, function (rawTx) {
            if (!rawTx.isError) {
              uiFuncs.sendTx(rawTx.signedTx, false, function (resp) {
                if (!resp.isError) {
                  $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<br />" + resp.data + "<br /><a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'> ETH TX via EtherScan.io </a>"));
                  $scope.setBalance();
                } else {
                  $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
                }
              });
              $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
            } else {
              $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(rawTx.error));
            }
          });
        } catch (e) {
          $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
      $scope.decryptWallet = function () {
        $scope.wallet = null;
        $scope.validateTxStatus = "";
        $scope.wallet = Wallet.getWalletFromPrivKeyFile($scope.allWallets[$scope.selectedWallet].priv, $scope.password);
      };
      $scope.setAllWallets();
    };
    module.exports = quickSendCtrl;
  }, {}], 7: [function (require, module, exports) {
    'use strict';

    var bulkGenCtrl = function ($scope) {
      $scope.showWallets = false;
      $scope.genWallets = function () {
        if ($scope.amount == '' || $scope.amount != parseInt($scope.amount, 10)) alert(globalFuncs.errorMsgs[0]);else {
          $scope.wallets = [];
          var csv = '';var txt = '';
          $scope.jsonWallets = [];
          for (var i = 0; i < $scope.amount; i++) {
            var tWallet = Wallet.generate(false);
            csv += tWallet.getChecksumAddressString() + ',' + tWallet.getPrivateKeyString() + '\n';
            txt += tWallet.getChecksumAddressString() + '\t' + tWallet.getPrivateKeyString() + '\n';
            $scope.jsonWallets.push({
              address: tWallet.getChecksumAddressString(),
              private: tWallet.getPrivateKeyString()
            });
            $scope.wallets.push(tWallet);
          }
          $scope.showWallets = true;
          $scope.bJSON = globalFuncs.getBlob("text/json;charset=UTF-8", JSON.stringify($scope.jsonWallets));
          $scope.bTXT = globalFuncs.getBlob("text/plain;charset=UTF-8", txt);
          $scope.bCSV = globalFuncs.getBlob("text/csv;charset=UTF-8", csv);
        }
      };
      $scope.printQRCode = function () {
        globalFuncs.printPaperWallets(JSON.stringify($scope.jsonWallets));
      };
    };
    module.exports = bulkGenCtrl;
  }, {}], 8: [function (require, module, exports) {
    'use strict';

    var decryptWalletCtrl = function ($scope, $sce, walletService) {
      $scope.walletType = "";
      $scope.requireFPass = $scope.requirePPass = $scope.showFDecrypt = $scope.showPDecrypt = false;
      $scope.filePassword = "";
      $scope.fileContent = "";
      $scope.Validator = Validator;
      $scope.showContent = function ($fileContent) {
        $scope.fileStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[5] + document.getElementById('fselector').files[0].name));
        try {
          $scope.requireFPass = Wallet.walletRequirePass($fileContent);
          $scope.showFDecrypt = !$scope.requireFPass;
          $scope.fileContent = $fileContent;
        } catch (e) {
          $scope.fileStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
      $scope.openFileDialog = function ($fileContent) {
        document.getElementById('fselector').click();
      };
      $scope.onFilePassChange = function () {
        $scope.showFDecrypt = $scope.filePassword.length > 3;
      };
      $scope.onPrivKeyChange = function () {
        $scope.requirePPass = $scope.manualprivkey.length == 128 || $scope.manualprivkey.length == 132;
        $scope.showPDecrypt = $scope.manualprivkey.length == 64;
      };
      $scope.onPrivKeyPassChange = function () {
        $scope.showPDecrypt = $scope.privPassword.length > 6;
      };
      $scope.decryptWallet = function () {
        $scope.wallet = null;
        $scope.decryptStatus = "";
        try {
          if ($scope.showPDecrypt && $scope.requirePPass) {
            $scope.wallet = Wallet.fromMyEtherWalletKey($scope.manualprivkey, $scope.privPassword);
            walletService.password = $scope.privPassword;
          } else if ($scope.showPDecrypt && !$scope.requirePPass) {
            $scope.wallet = new Wallet($scope.manualprivkey);
            walletService.password = '';
          } else if ($scope.showFDecrypt) {
            $scope.wallet = Wallet.getWalletFromPrivKeyFile($scope.fileContent, $scope.filePassword);
            walletService.password = $scope.filePassword;
          }
          walletService.wallet = $scope.wallet;
        } catch (e) {
          $scope.decryptStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[6] + e));
        }
        if ($scope.wallet != null) $scope.decryptStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[1]));
      };
    };
    module.exports = decryptWalletCtrl;
  }, {}], 9: [function (require, module, exports) {
    'use strict';

    var deployContractCtrl = function ($scope, $sce, walletService) {
      $scope.sendTxModal = new Modal(document.getElementById('sendTransaction'));
      $scope.tx = {
        gasLimit: '',
        data: '',
        to: '',
        unit: "ether",
        value: 0,
        nonce: null,
        gasPrice: null
      };
      $scope.Validator = Validator;
      $scope.showRaw = false;
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
      });
      $scope.$watch('tx', function (newValue, oldValue) {
        $scope.showRaw = false;
      }, true);
      $scope.$watch('[tx.data]', function () {
        if ($scope.Validator.isValidHex($scope.tx.data) && $scope.tx.data != '') {
          if ($scope.estimateTimer) clearTimeout($scope.estimateTimer);
          $scope.estimateTimer = setTimeout(function () {
            $scope.estimateGasLimit();
          }, 500);
        }
      }, true);
      $scope.estimateGasLimit = function () {
        var estObj = {
          from: globalFuncs.donateAddress,
          value: '0x00',
          data: ethFuncs.sanitizeHex($scope.tx.data)
        };
        ethFuncs.estimateGas(estObj, false, function (data) {
          if (!data.error) $scope.tx.gasLimit = data.data;
        });
      };
      $scope.generateTx = function () {
        try {
          if ($scope.wallet == null) throw globalFuncs.errorMsgs[3];else if (!ethFuncs.validateHexString($scope.tx.data)) throw globalFuncs.errorMsgs[9];else if (!globalFuncs.isNumeric($scope.tx.gasLimit) || parseFloat($scope.tx.gasLimit) <= 0) throw globalFuncs.errorMsgs[8];
          $scope.tx.data = ethFuncs.sanitizeHex($scope.tx.data);
          ajaxReq.getTransactionData($scope.wallet.getAddressString(), false, function (data) {
            if (data.error) throw data.msg;
            data = data.data;
            $scope.tx.to = '0xCONTRACT';
            $scope.tx.contractAddr = ethFuncs.getDeteministicContractAddress($scope.wallet.getAddressString(), data.nonce);
            var txData = uiFuncs.getTxData($scope);
            uiFuncs.generateTx(txData, false, function (rawTx) {
              if (!rawTx.isError) {
                $scope.rawTx = rawTx.rawTx;
                $scope.signedTx = rawTx.signedTx;
                $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
                $scope.showRaw = true;
              } else {
                $scope.showRaw = false;
                $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(rawTx.error));
              }
            });
          });
        } catch (e) {
          $scope.deployContractStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
      $scope.sendTx = function () {
        $scope.sendTxModal.close();
        uiFuncs.sendTx($scope.signedTx, false, function (resp) {
          if (!resp.isError) {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<br />" + resp.data + "<br /><a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'> ETH TX via EtherScan.io </a> & Contract Address <a href='http://etherscan.io/address/" + $scope.tx.contractAddr + "' target='_blank'>" + $scope.tx.contractAddr + "</a>"));
          } else {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
          }
        });
      };
    };
    module.exports = deployContractCtrl;
  }, {}], 10: [function (require, module, exports) {
    'use strict';

    var digixCtrl = function ($scope, $sce, walletService) {
      $scope.sendTxModal = new Modal(document.getElementById('sendTransaction'));
      walletService.wallet = null;
      walletService.password = '';
      $scope.showSend = true;
      $scope.showRaw = false;
      $scope.digixContract = "0xf0160428a8552ac9bb7e050d90eeade4ddd52843";
      $scope.digixUserInfo = "0x1959a002";
      $scope.digixClaim = "0x4e71d92d";
      $scope.tx = {
        gasLimit: globalFuncs.digixClaimTxGasLimit,
        data: $scope.digixClaim,
        to: $scope.digixContract,
        unit: "ether",
        value: 0,
        nonce: null,
        gasPrice: null,
        donate: false
      };
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.setBalance();
      });
      $scope.validateAddress = function (address, status) {
        if (ethFuncs.validateEtherAddress(address)) {
          $scope[status] = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[0]));
        } else {
          $scope[status] = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[5]));
        }
      };
      $scope.setBalance = function () {
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
        var userInfo = ethFuncs.getDataObj($scope.digixContract, $scope.digixUserInfo, [ethFuncs.getNakedAddress($scope.wallet.getAddressString())]);
        ajaxReq.getEthCall(userInfo, false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            var digixObj = $scope.processDigixInfo(data.data);
            $scope.centsTotal = digixObj.centstotal;
            $scope.weiTotal = digixObj.weitotal;
            $scope.shareTotal = digixObj.share;
            $scope.badgesTotal = digixObj.badges;
            $scope.claimedTotal = digixObj.claimed.toString();
          }
        });
      };
      $scope.processDigixInfo = function (data) {
        data = data.replace('0x', '');
        var values = data.match(/.{1,64}/g);
        var digixObj = {
          centstotal: new BigNumber('0x' + values[0]).div(100).toString(),
          weitotal: new BigNumber('0x' + values[1]).div(etherUnits.getValueOfUnit('ether')).toString(),
          share: new BigNumber('0x' + values[2]).div(etherUnits.getValueOfUnit('gwei')).toString(),
          badges: new BigNumber('0x' + values[3]).toString(),
          claimed: new BigNumber('0x' + values[4]).toString() == '1'
        };
        return digixObj;
      };
      $scope.generateTx = function () {
        uiFuncs.generateTx(uiFuncs.getTxData($scope), false, function (rawTx) {
          if (!rawTx.isError) {
            $scope.rawTx = rawTx.rawTx;
            $scope.signedTx = rawTx.signedTx;
            $scope.showRaw = true;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
          } else {
            $scope.showRaw = false;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(rawTx.error));
          }
        });
      };
      $scope.sendTx = function () {
        $scope.sendTxModal.close();
        uiFuncs.sendTx($scope.signedTx, false, function (resp) {
          if (!resp.isError) {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'>" + resp.data + "</a>"));
            $scope.setBalance();
          } else {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
          }
        });
      };
      $scope.onDonateClick = function () {
        $scope.tokenTx.to = globalFuncs.donateAddress;
        $scope.tokenTx.value = "0.5";
        $scope.tx.donate = true;
        $scope.validateAddress();
      };
    };
    module.exports = digixCtrl;
  }, {}], 11: [function (require, module, exports) {
    'use strict';

    var footerCtrl = function ($scope) {
      $scope.footerModal = new Modal(document.getElementById('disclaimerModal'));
      $scope.ethBlockNumber = "loading";
      $scope.etcBlockNumber = "loading";
      $scope.showBlocks = window.location.protocol == "https:";
      $scope.setBlockNumbers = function () {
        if (!$scope.showBlocks) return;
        ajaxReq.getCurrentBlock(false, function (data) {
          $scope.ethBlockNumber = data.data;
        });
        ajaxReq.getCurrentBlock(true, function (data) {
          $scope.etcBlockNumber = data.data;
        });
      };
      $scope.setBlockNumbers();
      setInterval($scope.setBlockNumbers, 3000);
    };
    module.exports = footerCtrl;
  }, {}], 12: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var sendOfflineTxCtrl = function ($scope, $sce, walletService) {
        walletService.wallet = null;
        walletService.password = '';
        $scope.showAdvance = false;
        $scope.showRaw = false;
        $scope.showWalletInfo = false;
        $scope.gasPriceDec = 0;
        $scope.nonceDec = 0;
        $scope.tx = {
          gasLimit: globalFuncs.defaultTxGasLimit,
          from: "",
          data: "",
          to: "",
          unit: "ether",
          value: '',
          nonce: null,
          gasPrice: null,
          donate: false
        };
        $scope.$watch(function () {
          if (walletService.wallet == null) return null;
          return walletService.wallet.getAddressString();
        }, function () {
          if (walletService.wallet == null) return;
          $scope.wallet = walletService.wallet;
        });
        $scope.getWalletInfo = function () {
          if (ethFuncs.validateEtherAddress($scope.tx.from)) {
            ajaxReq.getTransactionData($scope.tx.from, false, function (data) {
              if (data.error) throw data.msg;
              data = data.data;
              $scope.gasPriceDec = ethFuncs.hexToDecimal(ethFuncs.sanitizeHex(ethFuncs.addTinyMoreToGas(data.gasprice)));
              $scope.nonceDec = ethFuncs.hexToDecimal(data.nonce);
              $scope.showWalletInfo = true;
            });
          }
        };
        $scope.$watch('tx', function () {
          $scope.showRaw = false;
          $scope.sendTxStatus = "";
        }, true);
        $scope.validateAddress = function (address, status) {
          if (ethFuncs.validateEtherAddress(address)) {
            $scope[status] = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[0]));
          } else {
            $scope[status] = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[5]));
          }
        };
        $scope.generateTx = function () {
          try {
            if (!ethFuncs.validateEtherAddress($scope.tx.to)) throw globalFuncs.errorMsgs[5];else if (!globalFuncs.isNumeric($scope.tx.value) || parseFloat($scope.tx.value) < 0) throw globalFuncs.errorMsgs[7];else if (!globalFuncs.isNumeric($scope.gasPriceDec) || parseFloat($scope.gasPriceDec) <= 0) throw globalFuncs.errorMsgs[10];else if (!globalFuncs.isNumeric($scope.nonceDec) || parseFloat($scope.nonceDec) < 0) throw globalFuncs.errorMsgs[11];else if (!globalFuncs.isNumeric($scope.tx.gasLimit) || parseFloat($scope.tx.gasLimit) <= 0) throw globalFuncs.errorMsgs[8];else if (!ethFuncs.validateHexString($scope.tx.data)) throw globalFuncs.errorMsgs[9];
            var rawTx = {
              nonce: ethFuncs.sanitizeHex(ethFuncs.decimalToHex($scope.nonceDec)),
              gasPrice: ethFuncs.sanitizeHex(ethFuncs.decimalToHex($scope.gasPriceDec)),
              gasLimit: ethFuncs.sanitizeHex(ethFuncs.decimalToHex($scope.tx.gasLimit)),
              to: ethFuncs.sanitizeHex($scope.tx.to),
              value: ethFuncs.sanitizeHex(ethFuncs.decimalToHex(etherUnits.toWei($scope.tx.value, $scope.tx.unit))),
              data: ethFuncs.sanitizeHex($scope.tx.data)
            };
            var eTx = new ethUtil.Tx(rawTx);
            eTx.sign(new Buffer($scope.wallet.getPrivateKeyString(), 'hex'));
            $scope.rawTx = JSON.stringify(rawTx);
            $scope.signedTx = '0x' + eTx.serialize().toString('hex');
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
          } catch (e) {
            $scope.showRaw = false;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
          }
        };
        $scope.confirmSendTx = function () {
          try {
            if ($scope.signedTx == "" || !ethFuncs.validateHexString($scope.signedTx)) throw globalFuncs.errorMsgs[12];
            var eTx = new ethUtil.Tx($scope.signedTx);
            $scope.tx.to = '0x' + eTx.to.toString('hex');
            $scope.tx.value = eTx.value.toString('hex') != '' ? etherUnits.toEther('0x' + eTx.value.toString('hex'), 'wei') : 0;
            $scope.tx.unit = 'ether';
            new Modal(document.getElementById('sendTransactionOffline')).open();
          } catch (e) {
            $scope.offlineTxPublishStatus = $sce.trustAsHtml(globalFuncs.getDangerText(e));
          }
        };
        $scope.sendTx = function () {
          new Modal(document.getElementById('sendTransactionOffline')).close();
          ajaxReq.sendRawTx($scope.signedTx, false, function (data) {
            if (data.error) {
              $scope.offlineTxPublishStatus = $sce.trustAsHtml(globalFuncs.getDangerText(data.msg));
            } else {
              $scope.offlineTxPublishStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + " " + data.data));
            }
          });
        };
      };
      module.exports = sendOfflineTxCtrl;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 13: [function (require, module, exports) {
    'use strict';

    var sendTxCtrl = function ($scope, $sce, walletService) {
      $scope.sendTxModal = new Modal(document.getElementById('sendTransaction'));
      $scope.txInfoModal = new Modal(document.getElementById('txInfoModal'));
      walletService.wallet = null;
      walletService.password = '';
      $scope.showAdvance = false;
      $scope.showRaw = false;
      $scope.replayContract = "0xaa1a6e3e6ef20068f7f8d8c835d2d22fd5116444";
      $scope.splitHex = "0x0f2c9329";
      $scope.Validator = Validator;
      $scope.tx = {
        gasLimit: globalFuncs.urlGet('gaslimit') == null ? globalFuncs.defaultTxGasLimit : globalFuncs.urlGet('gaslimit'),
        data: globalFuncs.urlGet('data') == null ? "" : globalFuncs.urlGet('data'),
        to: globalFuncs.urlGet('to') == null ? "" : globalFuncs.urlGet('to'),
        unit: "ether",
        value: globalFuncs.urlGet('value') == null ? "" : globalFuncs.urlGet('value'),
        nonce: null,
        gasPrice: null,
        donate: false,
        sendMode: globalFuncs.urlGet('sendMode') == null ? 0 : globalFuncs.urlGet('value')
      };
      globalFuncs.urlGet('gaslimit') == null ? '' : $scope.showAdvance = true;
      globalFuncs.urlGet('data') == null ? '' : $scope.showAdvance = true;
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.setBalance();
      });
      $scope.$watch('[tx.to,tx.value,tx.data,tx.sendMode]', function () {
        if ($scope.Validator.isValidAddress($scope.tx.to) && $scope.Validator.isPositiveNumber($scope.tx.value) && $scope.Validator.isValidHex($scope.tx.data)) {
          if ($scope.estimateTimer) clearTimeout($scope.estimateTimer);
          $scope.estimateTimer = setTimeout(function () {
            $scope.estimateGasLimit();
          }, 500);
        }
      }, true);
      $scope.estimateGasLimit = function () {
        var estObj = {
          to: $scope.tx.to,
          from: $scope.wallet.getAddressString(),
          value: ethFuncs.sanitizeHex(ethFuncs.decimalToHex(etherUnits.toWei($scope.tx.value, $scope.tx.unit)))
        };
        if ($scope.tx.data != "") estObj.data = ethFuncs.sanitizeHex($scope.tx.data);
        if ($scope.tx.sendMode == 1) estObj.data = $scope.splitHex + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.tx.to), 64) + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.wallet.getAddressString()), 64);else if ($scope.tx.sendMode == 2) estObj.data = $scope.splitHex + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.wallet.getAddressString()), 64) + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.tx.to), 64);
        if ($scope.tx.sendMode != 0) estObj.to = $scope.replayContract;
        ethFuncs.estimateGas(estObj, $scope.tx.sendMode == 2, function (data) {
          if (!data.error) $scope.tx.gasLimit = data.data;
        });
      };
      $scope.setBalance = function () {
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
        ajaxReq.getBalance($scope.wallet.getAddressString(), true, function (data) {
          if (data.error) {
            $scope.etcBalance = data.msg;
          } else {
            $scope.etcBalance = etherUnits.toEther(data.data.balance, 'wei');
          }
        });
      };
      $scope.$watch('tx', function (newValue, oldValue) {
        $scope.showRaw = false;
        $scope.sendTxStatus = "";
        if (oldValue.sendMode != newValue.sendMode && newValue.sendMode == 0) {
          $scope.tx.data = "";
          $scope.tx.gasLimit = globalFuncs.defaultTxGasLimit;
        }
      }, true);
      $scope.validateAddress = function () {
        return ethFuncs.validateEtherAddress($scope.tx.to);
      };
      $scope.toggleShowAdvance = function () {
        $scope.showAdvance = !$scope.showAdvance;
      };
      $scope.onDonateClick = function () {
        $scope.tx.to = globalFuncs.donateAddress;
        $scope.tx.value = "0.5";
        $scope.tx.donate = true;
      };
      $scope.generateTx = function () {
        if (!ethFuncs.validateEtherAddress($scope.tx.to)) {
          $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[5]));
          return;
        }
        var txData = uiFuncs.getTxData($scope);
        if ($scope.tx.sendMode != 0) {
          txData.to = $scope.replayContract;
          if ($scope.tx.sendMode == 1) txData.data = $scope.splitHex + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.tx.to), 64) + ethFuncs.padLeft(ethFuncs.getNakedAddress(txData.from), 64);else if ($scope.tx.sendMode == 2) txData.data = $scope.splitHex + ethFuncs.padLeft(ethFuncs.getNakedAddress(txData.from), 64) + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.tx.to), 64);
        }
        uiFuncs.generateTx(txData, $scope.tx.sendMode == 2, function (rawTx) {
          if (!rawTx.isError) {
            $scope.rawTx = rawTx.rawTx;
            $scope.signedTx = rawTx.signedTx;
            $scope.showRaw = true;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
          } else {
            $scope.showRaw = false;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(rawTx.error));
          }
        });
      };
      $scope.sendTx = function () {
        $scope.sendTxModal.close();
        uiFuncs.sendTx($scope.signedTx, $scope.tx.sendMode == 2, function (resp) {
          if (!resp.isError) {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<br />" + resp.data + "<br /><a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'> ETH TX via EtherScan.io </a> & <a href='http://gastracker.io/tx/" + resp.data + "' target='_blank'> ETC TX via GasTracker.io</a>"));
            $scope.setBalance();
          } else {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
          }
        });
      };
      $scope.transferAllBalance = function () {
        uiFuncs.transferAllBalance($scope.wallet.getAddressString(), $scope.tx.gasLimit, $scope.tx.sendMode == 2, function (resp) {
          if (!resp.isError) {
            $scope.tx.unit = resp.unit;
            $scope.tx.value = resp.value;
          } else {
            $scope.showRaw = false;
            $scope.validateTxStatus = $sce.trustAsHtml(resp.error);
          }
        });
      };
    };
    module.exports = sendTxCtrl;
  }, {}], 14: [function (require, module, exports) {
    'use strict';

    var tabsCtrl = function ($scope, globalService, $translate) {
      $scope.tabNames = globalService.tabs;
      $scope.curLang = "English";
      var hval = window.location.hash;
      if (document.getElementById("langDrop")) document.getElementById("langDrop").setAttribute("style", "");
      $scope.setArrowVisibility = function () {
        setTimeout(function () {
          $scope.showLeftArrow = false;
          $scope.showRightArrow = !(document.querySelectorAll(".nav-inner")[0].clientWidth <= document.querySelectorAll(".nav-scroll")[0].clientWidth);
          $scope.$apply();
        }, 200);
      };
      $scope.setArrowVisibility();
      $scope.setTab = function (hval) {
        if (hval != "") {
          hval = hval.replace("#", '');
          for (var key in $scope.tabNames) {
            if ($scope.tabNames[key].url == hval) {
              $scope.activeTab = globalService.currentTab = $scope.tabNames[key].id;
              break;
            }
            $scope.activeTab = globalService.currentTab;
          }
        } else {
          $scope.activeTab = globalService.currentTab;
        }
      };
      $scope.setTab(hval);
      $scope.tabClick = function (id) {
        $scope.activeTab = globalService.currentTab = id;
        for (var key in $scope.tabNames) {
          if ($scope.tabNames[key].id == id) location.hash = $scope.tabNames[key].url;
        }
      };
      $scope.setLanguageVal = function (id, varName, pos) {
        $translate(id).then(function (paragraph) {
          globalFuncs[varName][pos] = paragraph;
        }, function (translationId) {
          globalFuncs[varName][pos] = translationId;
        });
      };
      $scope.setErrorMsgLanguage = function () {
        for (var i = 0; i < globalFuncs.errorMsgs.length; i++) $scope.setLanguageVal('ERROR_' + (i + 1), 'errorMsgs', i);
        for (var i = 0; i < globalFuncs.successMsgs.length; i++) $scope.setLanguageVal('SUCCESS_' + (i + 1), 'successMsgs', i);
      };
      $scope.setGethErrMsgLanguage = function () {
        globalFuncs.gethErrorMsgs = {};
        for (var s in globalFuncs.gethErrors) {
          var key = globalFuncs.gethErrors[s];
          if (key.indexOf("GETH_") === 0) {
            $scope.setLanguageVal(key, 'gethErrorMsgs', key);
          }
        }
      };
      $scope.changeLanguage = function (key, value) {
        $translate.use(key);
        $scope.setErrorMsgLanguage();
        $scope.setGethErrMsgLanguage();
        $scope.curLang = value;
        $scope.setArrowVisibility();
        $scope.dropdown = false;
        localStorage.setItem("language", JSON.stringify({
          key: key,
          value: value
        }));
      };
      $scope.setLanguageFromStorage = function () {
        var lang = localStorage.getItem('language');
        if (lang == null) return;
        lang = JSON.parse(lang);
        var key = globalFuncs.stripTags(lang.key);
        var value = globalFuncs.stripTags(lang.value);
        $scope.changeLanguage(key, value);
      };
      $scope.setLanguageFromStorage();
      $scope.setHash = function (hash) {
        location.hash = hash;
        $scope.setTab(hash);
        $scope.$apply();
      };
      $scope.scrollHoverIn = function (isLeft, val) {
        clearInterval($scope.sHoverTimer);
        $scope.sHoverTimer = setInterval(function () {
          if (isLeft) $scope.scrollLeft(val);else $scope.scrollRight(val);
        }, 20);
      };
      $scope.scrollHoverOut = function () {
        clearInterval($scope.sHoverTimer);
      };
      $scope.setOnScrollArrows = function () {
        var ele = document.querySelectorAll(".nav-scroll")[0];
        $scope.showLeftArrow = ele.scrollLeft > 0;
        $scope.showRightArrow = document.querySelectorAll(".nav-inner")[0].clientWidth > ele.clientWidth + ele.scrollLeft;
        $scope.$apply();
      };
      $scope.scrollLeft = function (val) {
        var ele = document.querySelectorAll(".nav-scroll")[0];
        ele.scrollLeft -= val;
      };
      $scope.scrollRight = function (val) {
        var ele = document.querySelectorAll(".nav-scroll")[0];
        ele.scrollLeft += val;
      };
      angular.element(document.querySelectorAll(".nav-scroll")[0]).bind('scroll', $scope.setOnScrollArrows);
      globalFuncs.changeHash = $scope.setHash;
    };
    module.exports = tabsCtrl;
  }, {}], 15: [function (require, module, exports) {
    'use strict';

    var theDaoCtrl = function ($scope, $sce, walletService) {
      $scope.curTab = "withdrawETC";
      $scope.withdrawModal = new Modal(document.getElementById('withdrawTransaction'));
      $scope.withdrawModalETC = new Modal(document.getElementById('withdrawTransactionETC'));
      $scope.withdrawExtraBModal = new Modal(document.getElementById('withdrawExtraBalance'));
      walletService.wallet = null;
      walletService.password = '';
      $scope.showAdvance = false;
      $scope.showRaw = false;
      $scope.slockitContract = "0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413"; //0xd838f9c9792bf8398e1f5fbfbd3b43c5a86445aa
      $scope.withdrawContract = "0xbf4ed7b27f1d666546e30d74d50d173d20bca754"; //0xd838f9c9792bf8398e1f5fbfbd3b43c5a86445aa
      $scope.daoCContract = "0x180826b05452ce96e157f0708c43381fee64a6b8";
      $scope.daoWithdrawContract = "0x9f5304da62a5408416ea58a17a92611019bd5ce3";
      $scope.eBWithdrawContract = "0x755cdba6AE4F479f7164792B318b2a06c759833B";
      $scope.eBTokenContract = "0x5c40eF6f527f4FbA68368774E6130cE6515123f2";
      $scope.hexCodes = {
        balanceOf: "0x70a08231",
        daoWithdraw: "0x3ccfd60b",
        approveWithdraw: "0x095ea7b3",
        withdrawDAOC: "0xf3fef3a3",
        numETChex: "0x02ef6c86"
      };
      $scope.Validator = Validator;
      $scope.tx = {
        gasLimit: 100000,
        data: '',
        to: $scope.slockitContract,
        unit: "ether",
        value: 0,
        nonce: null,
        gasPrice: null,
        donate: false
      };
      $scope.daoC = {
        to: '',
        donation: null
      };
      $scope.token = {
        balance: 0,
        DCbalance: 0,
        balanceEth: 0,
        DCbalanceEth: 0,
        balanceBN: 0,
        eBTokenBalance: 0,
        eBEthBalance: 0,
        eBBalanceBN: 0
      };
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.daoC.to = $scope.wallet.getChecksumAddressString();
        $scope.setBalance();
      });
      $scope.setBalance = function () {
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
        var userInfo = ethFuncs.getDataObj($scope.slockitContract, $scope.hexCodes.balanceOf, [ethFuncs.getNakedAddress($scope.wallet.getAddressString())]);
        ajaxReq.getEthCall(userInfo, false, function (data) {
          if (!data.error) {
            $scope.token.balance = new BigNumber(data.data).div(etherUnits.getValueOfUnit('milli') * 10).toString();
            $scope.token.balanceEth = new BigNumber($scope.token.balance).div(100).toString();
            $scope.token.balanceBN = new BigNumber(data.data).toString();
          }
        });
        var userInfo = ethFuncs.getDataObj($scope.eBTokenContract, $scope.hexCodes.balanceOf, [ethFuncs.getNakedAddress($scope.wallet.getAddressString())]);
        ajaxReq.getEthCall(userInfo, false, function (data) {
          if (!data.error) {
            $scope.token.eBTokenBalance = new BigNumber(data.data).div(etherUnits.getValueOfUnit('milli') * 10).toString();
            $scope.token.eBEthBalance = new BigNumber($scope.token.eBTokenBalance).div(100).toString();
            $scope.token.eBBalanceBN = new BigNumber(data.data).toString();
          }
        });
        var userInfo = ethFuncs.getDataObj($scope.daoCContract, $scope.hexCodes.balanceOf, [ethFuncs.getNakedAddress($scope.wallet.getAddressString())]);
        ajaxReq.getEthCall(userInfo, true, function (data) {
          if (!data.error) {
            $scope.token.DCbalance = new BigNumber(data.data).div(etherUnits.getValueOfUnit('milli') * 10).toString();
          }
        });
        var userInfo = ethFuncs.getDataObj($scope.daoWithdrawContract, $scope.hexCodes.numETChex, [ethFuncs.getNakedAddress($scope.wallet.getAddressString())]);
        ajaxReq.getEthCall(userInfo, true, function (data) {
          if (!data.error) {
            $scope.token.DCbalanceEth = new BigNumber(data.data).div(etherUnits.getValueOfUnit('milli') * 1000).toString();
          }
        });
        ajaxReq.getBalance($scope.wallet.getAddressString(), true, function (data) {
          if (data.error) {
            $scope.etcBalance = data.msg;
          } else {
            $scope.etcBalance = etherUnits.toEther(data.data.balance, 'wei');
          }
        });
      };
      $scope.$watch('curTab', function () {
        $scope.tx.data = '';
        $scope.showRaw = $scope.showProposal = false;
      });
      $scope.$watch('[tx,curTab]', function () {
        $scope.showRaw = false;
        $scope.sendTxStatus = "";
        $scope.withdrawTxStatus = "";
      }, true);
      $scope.generateAndSendWithdrawTx = function (tokenContract, withdrawContract, balanceBN, modal) {
        $scope.tx.to = tokenContract;
        $scope.tx.data = $scope.hexCodes.approveWithdraw + ethFuncs.padLeft(ethFuncs.getNakedAddress(withdrawContract), 64) + ethFuncs.padLeft(new BigNumber(balanceBN).toString(16), 64);
        $scope.tx.value = 0;
        uiFuncs.generateTx(uiFuncs.getTxData($scope), false, function (rawTx) {
          uiFuncs.sendTx(rawTx.signedTx, false, function (resp) {
            if (resp.isError) {
              $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
            } else {
              $scope.sendTxStatus = $sce.trustAsHtml("Please Wait");
              var approveTx = resp.data;
              setTimeout(function () {
                $scope.tx.to = withdrawContract;
                $scope.tx.data = $scope.hexCodes.daoWithdraw;
                uiFuncs.generateTx(uiFuncs.getTxData($scope), false, function (rawTx) {
                  uiFuncs.sendTx(rawTx.signedTx, false, function (resp) {
                    if (resp.isError) {
                      $scope.withdrawTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(data.error));
                    } else {
                      $scope.sendTxStatus = $sce.trustAsHtml("Approval Transaction: " + globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<a href='http://etherscan.io/tx/" + approveTx + "' target='_blank'>" + approveTx + "</a>"));
                      $scope.withdrawTxStatus = $sce.trustAsHtml("Withdrawal Transaction: " + globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'>" + resp.data + "</a>"));
                      $scope.setBalance();
                    }
                  });
                });
              }, 3000);
            }
          });
        });
        $scope[modal].close();
      };
      $scope.generateAndWithdrawDAOC = function () {
        if (!Validator.isPositiveNumber($scope.daoC.donation)) {
          $scope.withdrawETCTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(globalFuncs.errorMsgs[0]));
          return;
        }
        $scope.tx.to = $scope.daoWithdrawContract;
        $scope.tx.data = $scope.hexCodes.withdrawDAOC + ethFuncs.padLeft(ethFuncs.getNakedAddress($scope.daoC.to), 64) + ethFuncs.padLeft(new BigNumber($scope.daoC.donation).toString(16), 64);
        $scope.tx.value = 0;
        uiFuncs.generateTx(uiFuncs.getTxData($scope), true, function (rawTx) {
          uiFuncs.sendTx(rawTx.signedTx, true, function (resp) {
            if (resp.isError) {
              $scope.withdrawETCTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
            } else {
              $scope.withdrawETCTxStatus = $sce.trustAsHtml("Withdrawal Transaction: " + globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<a href='http://gastracker.io/tx/" + resp.data + "' target='_blank'> ETC TX via GasTracker.io</a>"));
              $scope.setBalance();
            }
          });
        });
        $scope.withdrawModalETC.close();
      };
    };
    module.exports = theDaoCtrl;
  }, {}], 16: [function (require, module, exports) {
    'use strict';

    var tokenCtrl = function ($scope, $sce, walletService) {
      $scope.sendTxModal = new Modal(document.getElementById('sendTransaction'));
      walletService.wallet = null;
      walletService.password = '';
      $scope.tokens = Token.popTokens;
      $scope.Validator = Validator;
      $scope.tokenTx = {
        to: '',
        value: 0,
        id: 0,
        gasLimit: 150000
      };
      $scope.localToken = {
        contractAdd: "",
        symbol: "",
        decimals: ""
      };
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.setBalance();
        $scope.setTokens();
      });
      $scope.setTokens = function () {
        $scope.tokenObjs = [];
        for (var i = 0; i < $scope.tokens.length; i++) {
          $scope.tokenObjs.push(new Token($scope.tokens[i].address, $scope.wallet.getAddressString(), $scope.tokens[i].symbol, $scope.tokens[i].decimal));
        }
        var storedTokens = localStorage.getItem("localTokens") != null ? JSON.parse(localStorage.getItem("localTokens")) : [];
        for (var i = 0; i < storedTokens.length; i++) {
          $scope.tokenObjs.push(new Token(storedTokens[i].contractAddress, $scope.wallet.getAddressString(), globalFuncs.stripTags(storedTokens[i].symbol), storedTokens[i].decimal));
        }
        $scope.tokenTx.id = 0;
      };
      $scope.$watch('[tokenTx.to,tokenTx.value,tokenTx.id]', function () {
        if ($scope.tokenObjs !== undefined && $scope.tokenObjs[$scope.tokenTx.id] !== undefined && $scope.Validator.isValidAddress($scope.tokenTx.to) && $scope.Validator.isPositiveNumber($scope.tokenTx.value)) {
          if ($scope.estimateTimer) clearTimeout($scope.estimateTimer);
          $scope.estimateTimer = setTimeout(function () {
            $scope.estimateGasLimit();
          }, 500);
        }
      }, true);
      $scope.estimateGasLimit = function () {
        var estObj = {
          to: $scope.tokenObjs[$scope.tokenTx.id].getContractAddress(),
          from: $scope.wallet.getAddressString(),
          value: '0x00',
          data: $scope.tokenObjs[$scope.tokenTx.id].getData($scope.tokenTx.to, $scope.tokenTx.value).data
        };
        ethFuncs.estimateGas(estObj, false, function (data) {
          if (!data.error) $scope.tokenTx.gasLimit = data.data;
        });
      };
      $scope.setBalance = function () {
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
        ajaxReq.getBalance($scope.wallet.getAddressString(), true, function (data) {
          if (data.error) {
            $scope.etcBalance = data.msg;
          } else {
            $scope.etcBalance = etherUnits.toEther(data.data.balance, 'wei');
          }
        });
      };
      $scope.onDonateClick = function () {
        $scope.tokenTx.to = globalFuncs.donateAddress;
        $scope.tokenTx.value = "50";
      };
      $scope.generateTokenTx = function () {
        var tokenData = $scope.tokenObjs[$scope.tokenTx.id].getData($scope.tokenTx.to, $scope.tokenTx.value);
        if (tokenData.isError) {
          $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(tokenData.error));
          return;
        }
        tokenData = tokenData.data;
        uiFuncs.generateTx({
          to: $scope.tokenObjs[$scope.tokenTx.id].getContractAddress(),
          value: 0,
          unit: 'ether',
          gasLimit: $scope.tokenTx.gasLimit,
          data: tokenData,
          from: $scope.wallet.getAddressString(),
          privKey: $scope.wallet.getPrivateKeyString()
        }, false, function (rawTx) {
          if (!rawTx.isError) {
            $scope.rawTx = rawTx.rawTx;
            $scope.signedTx = rawTx.signedTx;
            $scope.showRaw = true;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(''));
          } else {
            $scope.showRaw = false;
            $scope.validateTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(rawTx.error));
          }
        });
      };
      $scope.sendTx = function () {
        $scope.sendTxModal.close();
        uiFuncs.sendTx($scope.signedTx, false, function (resp) {
          if (!resp.isError) {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getSuccessText(globalFuncs.successMsgs[2] + "<a href='http://etherscan.io/tx/" + resp.data + "' target='_blank'>" + resp.data + "</a>"));
            $scope.setBalance();
            $scope.tokenObjs[$scope.tokenTx.id].setBalance();
          } else {
            $scope.sendTxStatus = $sce.trustAsHtml(globalFuncs.getDangerText(resp.error));
          }
        });
      };
      $scope.saveTokenToLocal = function () {
        try {
          if (!ethFuncs.validateEtherAddress($scope.localToken.contractAdd)) throw globalFuncs.errorMsgs[5];else if (!globalFuncs.isNumeric($scope.localToken.decimals) || parseFloat($scope.localToken.decimals) < 0) throw globalFuncs.errorMsgs[7];else if (!globalFuncs.isAlphaNumeric($scope.localToken.symbol) || $scope.localToken.symbol == "") throw globalFuncs.errorMsgs[19];
          var storedTokens = localStorage.getItem("localTokens") != null ? JSON.parse(localStorage.getItem("localTokens")) : [];
          storedTokens.push({
            contractAddress: $scope.localToken.contractAdd,
            symbol: $scope.localToken.symbol,
            decimal: parseInt($scope.localToken.decimals)
          });
          $scope.localToken = {
            contractAdd: "",
            symbol: "",
            decimals: ""
          };
          localStorage.setItem("localTokens", JSON.stringify(storedTokens));
          $scope.setTokens();
          $scope.validateLocalToken = $sce.trustAsHtml('');
        } catch (e) {
          $scope.validateLocalToken = $sce.trustAsHtml(globalFuncs.getDangerText(e));
        }
      };
    };
    module.exports = tokenCtrl;
  }, {}], 17: [function (require, module, exports) {
    'use strict';

    var viewCtrl = function ($scope, globalService) {
      $scope.globalService = globalService;
    };
    module.exports = viewCtrl;
  }, {}], 18: [function (require, module, exports) {
    'use strict';

    var viewWalletCtrl = function ($scope, walletService) {
      walletService.wallet = null;
      walletService.password = '';
      $scope.$watch(function () {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
      }, function () {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.showEnc = walletService.password != '';
        $scope.blob = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toJSON());
        if (walletService.password != '') {
          $scope.blobEnc = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toV3(walletService.password, {
            kdf: globalFuncs.kdf,
            n: globalFuncs.scrypt.n
          }));
          $scope.encFileName = $scope.wallet.getV3Filename();
        }
        ajaxReq.getBalance($scope.wallet.getAddressString(), false, function (data) {
          if (data.error) {
            $scope.etherBalance = data.msg;
          } else {
            $scope.etherBalance = etherUnits.toEther(data.data.balance, 'wei');
            ajaxReq.getETHvalue(function (data) {
              $scope.usdBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.usd);
              $scope.eurBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.eur);
              $scope.btcBalance = etherUnits.toFiat($scope.etherBalance, 'ether', data.btc);
            });
          }
        });
        $scope.setTokens();
      });
      $scope.setTokens = function () {
        $scope.tokenObjs = [];
        $scope.tokens = Token.popTokens;
        for (var i = 0; i < $scope.tokens.length; i++) {
          $scope.tokenObjs.push(new Token($scope.tokens[i].address, $scope.wallet.getAddressString(), $scope.tokens[i].symbol, $scope.tokens[i].decimal));
        }
        var storedTokens = localStorage.getItem("localTokens") != null ? JSON.parse(localStorage.getItem("localTokens")) : [];
        for (var i = 0; i < storedTokens.length; i++) {
          $scope.tokenObjs.push(new Token(storedTokens[i].contractAddress, $scope.wallet.getAddressString(), globalFuncs.stripTags(storedTokens[i].symbol), storedTokens[i].decimal));
        }
      };
      $scope.printQRCode = function () {
        globalFuncs.printPaperWallets(JSON.stringify([{
          address: $scope.wallet.getAddressString(),
          private: $scope.wallet.getPrivateKeyString()
        }]));
      };
    };
    module.exports = viewWalletCtrl;
  }, {}], 19: [function (require, module, exports) {
    'use strict';

    var walletGenCtrl = function ($scope) {
      $scope.password = "";
      $scope.wallet = null;
      $scope.showWallet = false;
      $scope.blob = $scope.blobEnc = "";
      $scope.isDone = true;
      $scope.showPass = true;
      $scope.genNewWallet = function () {
        if (!$scope.isStrongPass()) {
          alert(globalFuncs.errorMsgs[1]);
        } else if ($scope.isDone) {
          $scope.isDone = false;
          $scope.wallet = Wallet.generate(false);
          $scope.showWallet = true;
          $scope.blob = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toJSON());
          $scope.blobEnc = globalFuncs.getBlob("text/json;charset=UTF-8", $scope.wallet.toV3($scope.password, {
            kdf: globalFuncs.kdf,
            n: globalFuncs.scrypt.n
          }));
          $scope.encFileName = $scope.wallet.getV3Filename();
          if (parent != null) parent.postMessage(JSON.stringify({ address: $scope.wallet.getAddressString(), checksumAddress: $scope.wallet.getChecksumAddressString() }), "*");
          $scope.isDone = true;
        }
      };
      $scope.printQRCode = function () {
        globalFuncs.printPaperWallets(JSON.stringify([{
          address: $scope.wallet.getAddressString(),
          private: $scope.wallet.getPrivateKeyString()
        }]));
      };
      $scope.isStrongPass = function () {
        return globalFuncs.isStrongPass($scope.password);
      };
    };
    module.exports = walletGenCtrl;
  }, {}], 20: [function (require, module, exports) {
    'use strict';

    var marked = require('marked');
    var myRenderer = new marked.Renderer();
    myRenderer.paragraph = function (text) {
      return text + '\n';
    };
    myRenderer.link = function (href, title, text) {
      if (this.options.sanitize) {
        try {
          var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
        } catch (e) {
          return '';
        }
        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
          return '';
        }
      }
      var out = '<a target="_blank" href="' + href + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += '>' + text + '</a>';
      return out;
    };
    marked.setOptions({
      renderer: myRenderer
    });
    module.exports = marked;
  }, { "marked": 163 }], 21: [function (require, module, exports) {
    'use strict';

    var cxFuncs = function () {};
    cxFuncs.storage = chrome.storage.sync;
    cxFuncs.getAllNickNames = function (callback) {
      var nickNames = [];
      this.storage.get(null, function (items) {
        for (var key in items) {
          if (items.hasOwnProperty(key)) {
            var tobj = JSON.parse(items[key]);
            if (tobj.type == 'wallet' || tobj.type == 'watchOnly') {
              nickNames.push(tobj.nick);
              nickNames.push(key);
            }
          }
        }
        callback(nickNames);
      });
    };
    cxFuncs.addWalletToStorage = function (address, encStr, nickname, callback) {
      nickname = nickname.replace(/(<([^>]+)>)/ig, "");
      var value = {
        nick: nickname,
        priv: encStr,
        type: 'wallet'
      };
      var keyname = ethUtil.toChecksumAddress(address);
      var obj = {};
      obj[keyname] = JSON.stringify(value);
      this.storage.set(obj, callback);
    };
    cxFuncs.addWatchOnlyAddress = function (address, nickname, callback) {
      nickname = nickname.replace(/(<([^>]+)>)/ig, "");
      var value = {
        nick: nickname,
        type: 'watchOnly'
      };
      var keyname = ethUtil.toChecksumAddress(address);;
      var obj = {};
      obj[keyname] = JSON.stringify(value);
      this.storage.set(obj, callback);
    };
    cxFuncs.getStorageArr = function (filter, callback) {
      var wallets = [];
      this.storage.get(null, function (items) {
        for (var key in items) {
          if (items.hasOwnProperty(key)) {
            var tobj = JSON.parse(items[key]);
            if (tobj.type == filter) {
              tobj['addr'] = key;
              wallets.push(tobj);
            }
          }
        }
        wallets.sort(function (a, b) {
          if (a.nick < b.nick) return -1;
          if (a.nick > b.nick) return 1;
          return 0;
        });
        callback(wallets);
      });
    };
    cxFuncs.getWalletsArr = function (callback) {
      this.getStorageArr('wallet', callback);
    };
    cxFuncs.getWatchOnlyArr = function (callback) {
      this.getStorageArr('watchOnly', callback);
    };
    cxFuncs.deleteAccount = function (address, callback) {
      this.storage.remove(address, function () {
        callback(address);
      });
    };
    cxFuncs.editNickName = function (address, newNick, callback) {
      newNick = newNick.replace(/(<([^>]+)>)/ig, "");
      this.storage.get(address, function (account) {
        var accountInfo = account[address];
        accountInfo = JSON.parse(accountInfo);
        accountInfo['nick'] = newNick;
        account[address] = JSON.stringify(accountInfo);
        cxFuncs.storage.set(account, function () {
          callback(newNick);
        });
      });
    };
    module.exports = cxFuncs;
  }, {}], 22: [function (require, module, exports) {
    'use strict';

    var QRCodeDrtv = function () {
      return function (scope, element, attrs) {
        var watchVar = attrs.watchVar;
        scope.$watch(watchVar, function () {
          var value = attrs.qrCode;
          element.empty();
          var delay = 0;
          if (element[0].clientWidth == 0) delay = 200;
          setTimeout(function () {
            new QRCode(element[0], {
              text: value,
              width: element[0].clientWidth,
              height: element[0].clientWidth,
              colorDark: "#000000",
              colorLight: "#ffffff",
              correctLevel: QRCode.CorrectLevel.H
            });
          }, delay);
        });
      };
    };
    module.exports = QRCodeDrtv;
  }, {}], 23: [function (require, module, exports) {
    'use strict';

    var blockiesDrtv = function () {
      return function (scope, element, attrs) {
        var watchVar = attrs.watchVar;
        scope.$watch(watchVar, function () {
          var address = attrs.blockieAddress;
          var content = ethFuncs.validateEtherAddress(address) ? globalFuncs.getBlockie(address) : '';
          element.css({
            'background-image': 'url(' + content + ')'
          });
        });
      };
    };
    module.exports = blockiesDrtv;
  }, {}], 24: [function (require, module, exports) {
    'use strict';

    var cxWalletDecryptDrtv = function () {
      return {
        restrict: "E",
        template: '<div class="row" ng-controller=\'cxDecryptWalletCtrl\'>\n \
      <div class="col-md-4 col-sm-6">\n \
        <h4 translate="decrypt_Select"> Select a Wallet: </h4>\n \
        <div class="radio" ng-repeat="twallet in allWallets  track by $index">\n \
          <label><input type="radio" name="selectedWallet" ng-model="$parent.selectedWallet" value="{{twallet.addr}}"> {{twallet.nick}} <small>({{twallet.balance}} Ether)</small> </label>\n \
        </div>\n \
      </div>\n \
      <div class="col-md-4 col-sm-6" ng-show="selectedWallet!=\'\'">\n \
        <h4 translate="ADD_Label_3"> Your wallet is encrypted. Please enter the password: </h4>\n \
        <input class="form-control" type="password" placeholder="{{ \'x_Password\' | translate }}" ng-model="password" >\n \
      </div>\n \
      <div class="col-md-4 col-sm-6" id="walletuploadbutton" ng-show="password.length>0">\n \
        <h4 id="uploadbtntxt-wallet" translate="ADD_Label_6"> Unlock Your Wallet:</h4>\n \
        <div class="form-group"><a ng-click="decryptWallet()" class="btn btn-primary btn-block" translate="ADD_Label_6_short">UNLOCK</a></div>\n \
        <div ng-bind-html="decryptStatus"></div>\n \
      </div>\n \
    </div>'
      };
    };
    module.exports = cxWalletDecryptDrtv;
  }, {}], 25: [function (require, module, exports) {
    'use strict';

    var fileReaderDrtv = function ($parse) {
      return {
        restrict: 'A',
        scope: false,
        link: function (scope, element, attrs) {
          var fn = $parse(attrs.onReadFile);
          element.on('change', function (onChangeEvent) {
            var reader = new FileReader();
            reader.onload = function (onLoadEvent) {
              scope.$apply(function () {
                fn(scope, {
                  $fileContent: onLoadEvent.target.result
                });
              });
            };
            reader.readAsText((onChangeEvent.srcElement || onChangeEvent.target).files[0]);
          });
        }
      };
    };
    module.exports = fileReaderDrtv;
  }, {}], 26: [function (require, module, exports) {
    'use strict';

    var walletDecryptDrtv = function () {
      return {
        restrict: "E",
        template: '<section class="row" ng-controller=\'decryptWalletCtrl\'>\n \
     <div class="col-md-4 col-sm-6">\n \
      <h4 translate="decrypt_Title"> Select the format of your private key: </h4>\n \
      <div class="radio">\n \
        <label>\n \
          <input type="radio" ng-model="walletType" value="fileupload"/><span translate="x_Keystore2">Keystore / JSON File</span></label>\n \
      </div>\n \
      <div class="radio">\n \
        <label>\n \
          <input type="radio" ng-model="walletType" value="pasteprivkey"/><span translate="x_PrivKey2">Private Key</span></label>\n \
      </div>\n \
    </div>\n \
    <div class="col-md-4 col-sm-6">\n \
      <!-- if selected upload -->\n \
      <div id="selectedUploadKey" ng-if="walletType==\'fileupload\'">\n \
        <h4 translate="ADD_Radio_2_alt">Select your wallet file:</h4>\n \
        <div class="form-group">\n \
          <input style="display:none;" type="file" on-read-file="showContent($fileContent)" id="fselector"/>\n \
          <a class="file-input btn btn-block btn-default btn-file marg-v-sm" ng-click="openFileDialog()" translate="ADD_Radio_2_short">SELECT WALLET FILE... </a>\n \
          <div id="fuploadStatus" ng-bind-html="fileStatus"></div>\n \
        </div>\n \
        <div class="form-group" ng-if="requireFPass">\n \
          <p translate="ADD_Label_3"> Your file is encrypted. Please enter the password: </p>\n \
          <input class="form-control" type="password" placeholder="{{ \'x_Password\' | translate }}" ng-model="$parent.$parent.filePassword" ng-class="Validator.isPasswordLenValid($parent.$parent.filePassword,0) ? \'is-valid\' : \'is-invalid\'" ng-change="onFilePassChange()" />\n \
        </div>\n \
      </div>\n \
      <!-- /if selected upload -->\n \
      <!-- if selected type key-->\n \
      <div id="selectedTypeKey" ng-if="walletType==\'pasteprivkey\'">\n \
        <h4 translate="ADD_Radio_3"> Paste / type your private key: </h4>\n \
        <div class="form-group">\n \
          <textarea rows="4" class="form-control" placeholder="{{ \'x_PrivKey2\' | translate }}" ng-model="$parent.$parent.manualprivkey" ng-class="Validator.isValidPrivKey($parent.$parent.manualprivkey.length) ? \'is-valid\' : \'is-invalid\'" ng-change="onPrivKeyChange()"></textarea>\n \
        </div>\n \
        <div class="form-group" ng-if="requirePPass">\n \
          <p translate="ADD_Label_3"> Your file is encrypted. Please enter the password: </p>\n \
          <input class="form-control" type="password" placeholder="{{ \'x_Password\' | translate }}" ng-model="$parent.$parent.privPassword" ng-class="Validator.isPasswordLenValid($parent.$parent.privPassword,0) ? \'is-valid\' : \'is-invalid\'" ng-change="onPrivKeyPassChange()">\n \
        </div>\n \
      </div>\n \
      <!-- /if selected type key-->\n \
    </div>\n \
    <div class="col-md-4 col-sm-6"   ng-show="showFDecrypt||showPDecrypt">\n \
      <h4 id="uploadbtntxt-wallet" ng-show="showFDecrypt" translate="ADD_Label_6"> Access Your Wallet:</h4>\n \
      <h4 id="uploadbtntxt-privkey" ng-show="showPDecrypt" translate="ADD_Label_6"> Access Your Wallet: </h4>\n \
      <div class="form-group"><a class="btn btn-primary btn-block btnAction" ng-show="showFDecrypt||showPDecrypt" ng-click="decryptWallet()" translate="ADD_Label_6_short">UNLOCK</a></div>\n \
      <div ng-bind-html="decryptStatus"></div>\n \
    </div>\n \
  </section>'
      };
    };
    module.exports = walletDecryptDrtv;
  }, {}], 27: [function (require, module, exports) {
    'use strict';

    var ethFuncs = function () {};
    ethFuncs.validateEtherAddress = function (address) {
      if (address.substring(0, 2) != "0x") return false;else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) return false;else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) return true;else return this.isChecksumAddress(address);
    };
    ethFuncs.isChecksumAddress = function (address) {
      return address == ethUtil.toChecksumAddress(address);
    };
    ethFuncs.validateHexString = function (str) {
      if (str == "") return true;
      str = str.substring(0, 2) == '0x' ? str.substring(2).toUpperCase() : str.toUpperCase();
      var re = /^[0-9A-F]+$/g;
      return re.test(str);
    };
    ethFuncs.sanitizeHex = function (hex) {
      hex = hex.substring(0, 2) == '0x' ? hex.substring(2) : hex;
      if (hex == "") return "";
      return '0x' + this.padLeftEven(hex);
    };
    ethFuncs.padLeftEven = function (hex) {
      hex = hex.length % 2 != 0 ? '0' + hex : hex;
      return hex;
    };
    ethFuncs.addTinyMoreToGas = function (hex) {
      hex = this.sanitizeHex(hex);
      return new BigNumber(hex).plus(etherUnits.getValueOfUnit('gwei')).toDigits(2).toString(16);
    };
    ethFuncs.decimalToHex = function (dec) {
      return new BigNumber(dec).toString(16);
    };
    ethFuncs.hexToDecimal = function (hex) {
      return new BigNumber(this.sanitizeHex(hex)).toString();
    };
    ethFuncs.contractOutToArray = function (hex) {
      hex = hex.replace('0x', '').match(/.{64}/g);
      for (var i = 0; i < hex.length; i++) {
        hex[i] = hex[i].replace(/^0+/, '');
        hex[i] = hex[i] == "" ? "0" : hex[i];
      }
      return hex;
    };
    ethFuncs.getNakedAddress = function (address) {
      return address.toLowerCase().replace('0x', '');
    };
    ethFuncs.getDeteministicContractAddress = function (address, nonce) {
      address = address.substring(0, 2) == '0x' ? address : '0x' + address;
      return '0x' + ethUtil.sha3(ethUtil.rlp.encode([address, nonce])).slice(12).toString('hex');
    };
    ethFuncs.padLeft = function (n, width, z) {
      z = z || '0';
      n = n + '';
      return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
    };
    ethFuncs.getDataObj = function (to, func, arrVals) {
      var val = "";
      for (var i = 0; i < arrVals.length; i++) val += this.padLeft(arrVals[i], 64);
      return {
        to: to,
        data: func + val
      };
    };
    ethFuncs.estimateGas = function (dataObj, isClassic, callback) {
      dataObj.gasPrice = '0x01';
      ajaxReq.getTraceCall(dataObj, isClassic, function (data) {
        if (data.error) {
          callback(data);
          return;
        }
        var calls = data.data.trace;
        var gasAssigned = new BigNumber(0);
        var maxGas = new BigNumber(50000000);
        for (var i = 0; i < calls.length; i++) {
          if (calls[i].result.failedCall !== undefined || calls[i].result.failedCreate !== undefined) {
            gasAssigned = new BigNumber(-1);
            break;
          }
          var cType = calls[i].action.create !== undefined ? 'create' : 'call';
          var gas = new BigNumber(calls[i].action[cType].gas).sub(new BigNumber(calls[i].result[cType].gasUsed));
          if (maxGas.sub(gas).gt(gasAssigned) && gas.gt(100000)) gasAssigned = maxGas.sub(gas);
        }
        callback({
          "error": false,
          "msg": "",
          "data": gasAssigned.toString()
        });
      });
    };
    module.exports = ethFuncs;
  }, {}], 28: [function (require, module, exports) {
    'use strict';

    var etherUnits = function () {};
    etherUnits.unitMap = {
      'wei': '1',
      'kwei': '1000',
      'ada': '1000',
      'femtoether': '1000',
      'mwei': '1000000',
      'babbage': '1000000',
      'picoether': '1000000',
      'gwei': '1000000000',
      'shannon': '1000000000',
      'nanoether': '1000000000',
      'nano': '1000000000',
      'szabo': '1000000000000',
      'microether': '1000000000000',
      'micro': '1000000000000',
      'finney': '1000000000000000',
      'milliether': '1000000000000000',
      'milli': '1000000000000000',
      'ether': '1000000000000000000',
      'kether': '1000000000000000000000',
      'grand': '1000000000000000000000',
      'einstein': '1000000000000000000000',
      'mether': '1000000000000000000000000',
      'gether': '1000000000000000000000000000',
      'tether': '1000000000000000000000000000000'
    };
    etherUnits.getValueOfUnit = function (unit) {
      unit = unit ? unit.toLowerCase() : 'ether';
      var unitValue = this.unitMap[unit];
      if (unitValue === undefined) {
        throw new Error(globalFuncs.errorMsgs[4] + JSON.stringify(this.unitMap, null, 2));
      }
      return new BigNumber(unitValue, 10);
    };
    etherUnits.fiatToWei = function (number, pricePerEther) {
      var returnValue = new BigNumber(String(number)).div(pricePerEther).times(this.getValueOfUnit('ether')).round(0);
      return returnValue.toString(10);
    };

    etherUnits.toFiat = function (number, unit, multi) {
      var returnValue = new BigNumber(this.toEther(number, unit)).times(multi).round(5);
      return returnValue.toString(10);
    };

    etherUnits.toEther = function (number, unit) {
      var returnValue = new BigNumber(this.toWei(number, unit)).div(this.getValueOfUnit('ether'));
      return returnValue.toString(10);
    };

    etherUnits.toWei = function (number, unit) {
      var returnValue = new BigNumber(String(number)).times(this.getValueOfUnit(unit));
      return returnValue.toString(10);
    };
    module.exports = etherUnits;
  }, {}], 29: [function (require, module, exports) {
    'use strict';

    var globalFuncs = function () {};
    globalFuncs.getBlockie = function (address) {
      return blockies.create({
        seed: address.toLowerCase(),
        size: 8,
        scale: 16
      }).toDataURL();
    };
    globalFuncs.printPaperWallets = function (strJson) {
      var win = window.open("about:blank", "_blank");
      var data = "<html><head><link rel=\"stylesheet\" href=\"css\/etherwallet-master.min.css\"\/><script type=\"text\/javascript\" src=\"js\/jquery-1.12.3.min.js\"><\/script><script type=\"text\/javascript\" src=\"js\/etherwallet-static.min.js\"><\/script><script type=\"text\/javascript\">function generateWallets(){ var json = JSON.parse($(\"#printwalletjson\").html()); for(var i=0;i<json.length;i++){ var walletTemplate = $(\'<div\/>\').append($(\"#print-container\").clone()); new QRCode($(walletTemplate).find(\"#paperwalletaddqr\")[0], {\t\t  text: json[i][\'address\'],\t\t  colorDark: \"#000000\",\t\t  colorLight: \"#ffffff\",\t\tcorrectLevel: QRCode.CorrectLevel.H\t   });       new QRCode($(walletTemplate).find(\"#paperwalletprivqr\")[0], {\t\t  text: json[i][\'private\'],\t\t  colorDark: \"#000000\",\t\t  colorLight: \"#ffffff\",\t\tcorrectLevel: QRCode.CorrectLevel.H\t }); $(walletTemplate).find(\"#paperwalletadd\").html(json[i][\'address\']);$(walletTemplate).find(\"#paperwalletpriv\").html(json[i][\'private\']); walletTemplate = $(walletTemplate).find(\"#print-container\").show();$(\"body\").append(walletTemplate); } setTimeout(function(){window.print();},2000);}<\/script><\/head><body><span id=\"printwalletjson\" style=\"display: none;\">{{WALLETJSON}}<\/span><div class=\"print-container\" style=\"display: none; margin-bottom: 50px;\" id=\"print-container\"><img src=\"images\/logo-1.png\" class=\"ether-logo-1\" height=\"100%\" width=\"auto\"\/><img src=\"images\/logo-2.png\" class=\"ether-logo-2\"\/> <img src=\"images\/ether-title.png\" height=\"100%\" width=\"auto\" class=\"print-title\"\/><div class=\"print-qr-code-1\"> <div id=\"paperwalletaddqr\"><\/div> <p class=\"print-text\" style=\"padding-top: 25px;\">YOUR ADDRESS<\/p><\/div><div class=\"print-notes\"><img src=\"images\/notes-bg.png\" width=\"90%;\" height=\"auto\" class=\"pull-left\" \/><p class=\"print-text\">AMOUNT \/ NOTES<\/p><\/div><div class=\"print-qr-code-2\"> <div id=\"paperwalletprivqr\"><\/div> <p class=\"print-text\" style=\"padding-top: 30px;\">YOUR PRIVATE KEY<\/p><\/div><div class=\"print-address-container\"><p><strong>Your Address:<\/strong><br \/><span id=\"paperwalletadd\"><\/span><\/p><p><strong>Your Private Key:<\/strong><br \/><span id=\"paperwalletpriv\"><\/span><\/p><\/div><\/div><\/body><\/html>";
      data = data.replace("{{WALLETJSON}}", strJson);
      win.document.write(data);
      win.document.write("<script>generateWallets();</script>");
    };
    globalFuncs.getBlob = function (mime, str) {
      var str = typeof str === 'object' ? JSON.stringify(str) : str;
      if (str == null) return '';
      var blob = new Blob([str], {
        type: mime
      });
      return window.URL.createObjectURL(blob);
    };
    globalFuncs.getSuccessText = function (str) {
      return '<p class="text-center text-success"><strong> ' + str + '</strong></p>';
    };
    globalFuncs.getDangerText = function (str) {
      return '<p class="text-center text-danger"><strong> ' + str + '</strong></p>';
    };
    globalFuncs.errorMsgs = ["Please enter valid amount.", "Your password must be at least 9 characters. Please ensure it is a strong password. ", "Sorry! We don\'t recognize this type of wallet file. ", "This is not a valid wallet file. ", "This unit doesn\'t exists, please use the one of the following units ", "Invalid address. ", "Invalid password. ", "Invalid amount. ", "Invalid gas limit. ", "Invalid data value. ", "Invalid gas amount. ", "Invalid nonce. ", "Invalid signed transaction. ", "A wallet with this nickname already exists. ", "Wallet not found. ", "Whoops. It doesnt look like a proposal with this ID exists yet or there is an error reading this proposal. ", "A wallet with this address already exists in storage. Please check your wallets page. ", "You need to have at least .001 ETH in your account to cover the cost of gas. Please add some ETH and try again. ", "All gas would be used on this transaction. This means you have already voted on this proposal or the debate period has ended.", "Invalid symbol"];
    globalFuncs.successMsgs = ["Valid address", "Wallet successfully decrypted", "Transaction submitted. TX ID: ", "Your wallet was successfully added: ", "You have successfully voted. Thank you for being an active participant in The DAO.", "File Selected: "];
    globalFuncs.gethErrors = {
      "Invalid sender": "GETH_InvalidSender",
      "Nonce too low": "GETH_Nonce",
      "Gas price too low for acceptance": "GETH_Cheap",
      "Insufficient balance": "GETH_Balance",
      "Account does not exist or account balance too low": "GETH_NonExistentAccount",
      "Insufficient funds for gas * price + value": "GETH_InsufficientFunds",
      "Intrinsic gas too low": "GETH_IntrinsicGas",
      "Exceeds block gas limit": "GETH_GasLimit",
      "Negative value": "GETH_NegativeValue" };
    globalFuncs.gethErrorMsgs = {};
    globalFuncs.getGethMsg = function (str) {
      if (str in this.gethErrors) {
        var key = this.gethErrors[str];
        if (key in this.gethErrorMsgs) {
          return this.gethErrorMsgs[key];
        }
      }
      return str;
    };
    globalFuncs.scrypt = {
      n: 1024
    };
    globalFuncs.postDelay = 300;
    globalFuncs.kdf = "scrypt";
    globalFuncs.defaultTxGasLimit = 21000;
    globalFuncs.digixClaimTxGasLimit = 150000;
    globalFuncs.donateAddress = "0x7cB57B5A97eAbe94205C07890BE4c1aD31E486A8";
    globalFuncs.isNumeric = function (n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };
    globalFuncs.urlGet = function (name) {
      if (name = new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)').exec(location.search)) return this.stripTags(decodeURIComponent(name[1]));
    };
    globalFuncs.stripTags = function (str) {
      var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
      while (SCRIPT_REGEX.test(str)) {
        str = str.replace(SCRIPT_REGEX, "");
      }
      return str;
    };
    globalFuncs.checkAndRedirectHTTPS = function () {
      var host = "myetherwallet.com";
      var githost = "kvhnuke.github.io";
      var githostw = "www.kvhnuke.github.io";
      var hostw = "www.myetherwallet.com";
      if ((host == window.location.host || githost == window.location.host || hostw == window.location.host || githostw == window.location.host) && window.location.protocol != "https:") window.location.protocol = "https";
    };
    globalFuncs.isStrongPass = function (password) {
      return password.length > 8;
    };
    globalFuncs.hexToAscii = function (hex) {
      return hex.match(/.{1,2}/g).map(function (v) {
        return String.fromCharCode(parseInt(v, 16));
      }).join('');
    };
    globalFuncs.isAlphaNumeric = function (value) {
      return !/[^a-zA-Z0-9]/.test(value);
    };
    module.exports = globalFuncs;
  }, {}], 30: [function (require, module, exports) {
    'use strict';

    var IS_CX = false;
    if (typeof chrome != 'undefined') IS_CX = chrome.windows === undefined ? false : true;
    var angular = require('angular');
    var angularTranslate = require('angular-translate');
    var angularTranslateErrorLog = require('angular-translate-handler-log');
    var angularSanitize = require('angular-sanitize');
    var BigNumber = require('bignumber.js');
    window.BigNumber = BigNumber;
    var marked = require('./customMarked');
    window.marked = marked;
    var ethUtil = require('ethereumjs-util');
    ethUtil.crypto = require('crypto');
    ethUtil.Tx = require('ethereumjs-tx');
    ethUtil.scrypt = require('scryptsy');
    ethUtil.uuid = require('uuid');
    window.ethUtil = ethUtil;
    var Wallet = require('./myetherwallet');
    window.Wallet = Wallet;
    var Token = require('./tokens');
    window.Token = Token;
    var globalFuncs = require('./globalFuncs');
    window.globalFuncs = globalFuncs;
    var uiFuncs = require('./uiFuncs');
    window.uiFuncs = uiFuncs;
    var etherUnits = require('./etherUnits');
    window.etherUnits = etherUnits;
    var ajaxReq = require('./ajaxReq');
    window.ajaxReq = ajaxReq;
    var ethFuncs = require('./ethFuncs');
    window.ethFuncs = ethFuncs;
    var Validator = require('./validator');
    window.Validator = Validator;
    var translate = require('./translations/translate.js');
    if (IS_CX) {
      var cxFuncs = require('./cxFuncs');
      window.cxFuncs = cxFuncs;
    }
    var tabsCtrl = require('./controllers/tabsCtrl');
    var viewCtrl = require('./controllers/viewCtrl');
    var walletGenCtrl = require('./controllers/walletGenCtrl');
    var bulkGenCtrl = require('./controllers/bulkGenCtrl');
    var decryptWalletCtrl = require('./controllers/decryptWalletCtrl');
    var viewWalletCtrl = require('./controllers/viewWalletCtrl');
    var sendTxCtrl = require('./controllers/sendTxCtrl');
    var deployContractCtrl = require('./controllers/deployContractCtrl');
    var digixCtrl = require('./controllers/digixCtrl');
    var theDaoCtrl = require('./controllers/theDaoCtrl');
    var tokenCtrl = require('./controllers/tokenCtrl');
    var footerCtrl = require('./controllers/footerCtrl');
    var sendOfflineTxCtrl = require('./controllers/sendOfflineTxCtrl');
    var globalService = require('./services/globalService');
    var walletService = require('./services/walletService');
    var blockiesDrtv = require('./directives/blockiesDrtv');
    var QRCodeDrtv = require('./directives/QRCodeDrtv');
    var walletDecryptDrtv = require('./directives/walletDecryptDrtv');
    var cxWalletDecryptDrtv = require('./directives/cxWalletDecryptDrtv');
    var fileReaderDrtv = require('./directives/fileReaderDrtv');
    if (IS_CX) {
      var addWalletCtrl = require('./controllers/CX/addWalletCtrl');
      var cxDecryptWalletCtrl = require('./controllers/CX/cxDecryptWalletCtrl');
      var myWalletsCtrl = require('./controllers/CX/myWalletsCtrl');
      var mainPopCtrl = require('./controllers/CX/mainPopCtrl');
      var quickSendCtrl = require('./controllers/CX/quickSendCtrl');
    }
    var app = angular.module('mewApp', ['pascalprecht.translate', 'ngSanitize']);
    app.config(['$compileProvider', function ($compileProvider) {
      $compileProvider.aHrefSanitizationWhitelist(/^\s*(|blob|https|):/);
    }]);
    app.config(['$translateProvider', function ($translateProvider) {
      $translateProvider.useMissingTranslationHandlerLog();
      new translate($translateProvider);
    }]);
    app.factory('globalService', ['$http', '$httpParamSerializerJQLike', globalService]);
    app.factory('walletService', walletService);
    app.directive('blockieAddress', blockiesDrtv);
    app.directive('qrCode', QRCodeDrtv);
    app.directive('onReadFile', fileReaderDrtv);
    app.directive('walletDecryptDrtv', walletDecryptDrtv);
    app.directive('cxWalletDecryptDrtv', cxWalletDecryptDrtv);
    app.controller('tabsCtrl', ['$scope', 'globalService', '$translate', tabsCtrl]);
    app.controller('viewCtrl', ['$scope', 'globalService', viewCtrl]);
    app.controller('walletGenCtrl', ['$scope', walletGenCtrl]);
    app.controller('bulkGenCtrl', ['$scope', bulkGenCtrl]);
    app.controller('decryptWalletCtrl', ['$scope', '$sce', 'walletService', decryptWalletCtrl]);
    app.controller('viewWalletCtrl', ['$scope', 'walletService', viewWalletCtrl]);
    app.controller('sendTxCtrl', ['$scope', '$sce', 'walletService', sendTxCtrl]);
    app.controller('deployContractCtrl', ['$scope', '$sce', 'walletService', deployContractCtrl]);
    app.controller('digixCtrl', ['$scope', '$sce', 'walletService', digixCtrl]);
    app.controller('theDaoCtrl', ['$scope', '$sce', 'walletService', theDaoCtrl]);
    app.controller('tokenCtrl', ['$scope', '$sce', 'walletService', tokenCtrl]);
    app.controller('footerCtrl', ['$scope', footerCtrl]);
    app.controller('sendOfflineTxCtrl', ['$scope', '$sce', 'walletService', sendOfflineTxCtrl]);
    if (IS_CX) {
      app.controller('addWalletCtrl', ['$scope', '$sce', addWalletCtrl]);
      app.controller('myWalletsCtrl', ['$scope', '$sce', myWalletsCtrl]);
      app.controller('mainPopCtrl', ['$scope', '$sce', mainPopCtrl]);
      app.controller('quickSendCtrl', ['$scope', '$sce', quickSendCtrl]);
      app.controller('cxDecryptWalletCtrl', ['$scope', '$sce', 'walletService', cxDecryptWalletCtrl]);
    }
  }, { "./ajaxReq": 1, "./controllers/CX/addWalletCtrl": 2, "./controllers/CX/cxDecryptWalletCtrl": 3, "./controllers/CX/mainPopCtrl": 4, "./controllers/CX/myWalletsCtrl": 5, "./controllers/CX/quickSendCtrl": 6, "./controllers/bulkGenCtrl": 7, "./controllers/decryptWalletCtrl": 8, "./controllers/deployContractCtrl": 9, "./controllers/digixCtrl": 10, "./controllers/footerCtrl": 11, "./controllers/sendOfflineTxCtrl": 12, "./controllers/sendTxCtrl": 13, "./controllers/tabsCtrl": 14, "./controllers/theDaoCtrl": 15, "./controllers/tokenCtrl": 16, "./controllers/viewCtrl": 17, "./controllers/viewWalletCtrl": 18, "./controllers/walletGenCtrl": 19, "./customMarked": 20, "./cxFuncs": 21, "./directives/QRCodeDrtv": 22, "./directives/blockiesDrtv": 23, "./directives/cxWalletDecryptDrtv": 24, "./directives/fileReaderDrtv": 25, "./directives/walletDecryptDrtv": 26, "./ethFuncs": 27, "./etherUnits": 28, "./globalFuncs": 29, "./myetherwallet": 31, "./services/globalService": 32, "./services/walletService": 33, "./tokens": 34, "./translations/translate.js": 49, "./uiFuncs": 52, "./validator": 53, "angular": 59, "angular-sanitize": 55, "angular-translate": 57, "angular-translate-handler-log": 56, "bignumber.js": 76, "crypto": 116, "ethereumjs-tx": 146, "ethereumjs-util": 147, "scryptsy": 194, "uuid": 216 }], 31: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var Wallet = function (priv) {
        this.privKey = priv.length == 32 ? priv : Buffer(priv, 'hex');
      };
      Wallet.generate = function (icapDirect) {
        if (icapDirect) {
          while (true) {
            var privKey = ethUtil.crypto.randomBytes(32);
            if (ethUtil.privateToAddress(privKey)[0] === 0) {
              return new Wallet(privKey);
            }
          }
        } else {
          return new Wallet(ethUtil.crypto.randomBytes(32));
        }
      };
      Wallet.prototype.getPrivateKey = function () {
        return this.privKey;
      };
      Wallet.prototype.getPrivateKeyString = function () {
        return this.getPrivateKey().toString('hex');
      };
      Wallet.prototype.getPublicKey = function () {
        return ethUtil.privateToPublic(this.privKey);
      };
      Wallet.prototype.getPublicKeyString = function () {
        return '0x' + this.getPublicKey().toString('hex');
      };
      Wallet.prototype.getAddress = function () {
        return ethUtil.privateToAddress(this.privKey);
      };
      Wallet.prototype.getAddressString = function () {
        return '0x' + this.getAddress().toString('hex');
      };
      Wallet.prototype.getChecksumAddressString = function () {
        return ethUtil.toChecksumAddress(this.getAddressString());
      };
      Wallet.fromPrivateKey = function (priv) {
        return new Wallet(priv);
      };
      Wallet.prototype.toV3 = function (password, opts) {
        opts = opts || {};
        var salt = opts.salt || ethUtil.crypto.randomBytes(32);
        var iv = opts.iv || ethUtil.crypto.randomBytes(16);
        var derivedKey;
        var kdf = opts.kdf || 'scrypt';
        var kdfparams = {
          dklen: opts.dklen || 32,
          salt: salt.toString('hex')
        };
        if (kdf === 'pbkdf2') {
          kdfparams.c = opts.c || 262144;
          kdfparams.prf = 'hmac-sha256';
          derivedKey = ethUtil.crypto.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
        } else if (kdf === 'scrypt') {
          // FIXME: support progress reporting callback
          kdfparams.n = opts.n || 262144;
          kdfparams.r = opts.r || 8;
          kdfparams.p = opts.p || 1;
          derivedKey = ethUtil.scrypt(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else {
          throw new Error('Unsupported kdf');
        }
        var cipher = ethUtil.crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
        if (!cipher) {
          throw new Error('Unsupported cipher');
        }
        var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);
        var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex')]));
        return {
          version: 3,
          id: ethUtil.uuid.v4({
            random: opts.uuid || ethUtil.crypto.randomBytes(16)
          }),
          address: this.getAddress().toString('hex'),
          Crypto: {
            ciphertext: ciphertext.toString('hex'),
            cipherparams: {
              iv: iv.toString('hex')
            },
            cipher: opts.cipher || 'aes-128-ctr',
            kdf: kdf,
            kdfparams: kdfparams,
            mac: mac.toString('hex')
          }
        };
      };
      Wallet.prototype.toJSON = function () {
        return {
          address: this.getAddressString(),
          checksumAddress: this.getChecksumAddressString(),
          privKey: this.getPrivateKeyString(),
          pubKey: this.getPublicKeyString(),
          publisher: "MyEtherWallet",
          encrypted: false,
          version: 2
        };
      };
      Wallet.fromMyEtherWallet = function (input, password) {
        var json = typeof input === 'object' ? input : JSON.parse(input);
        var privKey;
        if (!json.locked) {
          if (json.private.length !== 64) {
            throw new Error('Invalid private key length');
          }
          privKey = new Buffer(json.private, 'hex');
        } else {
          if (typeof password !== 'string') {
            throw new Error('Password required');
          }
          if (password.length < 7) {
            throw new Error('Password must be at least 7 characters');
          }
          var cipher = json.encrypted ? json.private.slice(0, 128) : json.private;
          cipher = Wallet.decodeCryptojsSalt(cipher);
          var evp = Wallet.evp_kdf(new Buffer(password), cipher.salt, {
            keysize: 32,
            ivsize: 16
          });
          var decipher = ethUtil.crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);
          privKey = Wallet.decipherBuffer(decipher, new Buffer(cipher.ciphertext));
          privKey = new Buffer(privKey.toString(), 'hex');
        }
        var wallet = new Wallet(privKey);
        if (wallet.getAddressString() !== json.address) {
          throw new Error('Invalid private key or address');
        }
        return wallet;
      };
      Wallet.fromMyEtherWalletV2 = function (input) {
        var json = typeof input === 'object' ? input : JSON.parse(input);
        if (json.privKey.length !== 64) {
          throw new Error('Invalid private key length');
        };
        var privKey = new Buffer(json.privKey, 'hex');
        return new Wallet(privKey);
      };
      Wallet.fromEthSale = function (input, password) {
        var json = typeof input === 'object' ? input : JSON.parse(input);
        var encseed = new Buffer(json.encseed, 'hex');
        var derivedKey = ethUtil.crypto.pbkdf2Sync(Buffer(password), Buffer(password), 2000, 32, 'sha256').slice(0, 16);
        var decipher = ethUtil.crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));
        var seed = Wallet.decipherBuffer(decipher, encseed.slice(16));
        var wallet = new Wallet(ethUtil.sha3(seed));
        if (wallet.getAddress().toString('hex') !== json.ethaddr) {
          throw new Error('Decoded key mismatch - possibly wrong passphrase');
        }
        return wallet;
      };
      Wallet.fromMyEtherWalletKey = function (input, password) {
        var cipher = input.slice(0, 128);
        cipher = Wallet.decodeCryptojsSalt(cipher);
        var evp = Wallet.evp_kdf(new Buffer(password), cipher.salt, {
          keysize: 32,
          ivsize: 16
        });
        var decipher = ethUtil.crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);
        var privKey = Wallet.decipherBuffer(decipher, new Buffer(cipher.ciphertext));
        privKey = new Buffer(privKey.toString(), 'hex');
        return new Wallet(privKey);
      };
      Wallet.fromV3 = function (input, password, nonStrict) {
        var json = typeof input === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);
        if (json.version !== 3) {
          throw new Error('Not a V3 wallet');
        }
        var derivedKey;
        var kdfparams;
        if (json.crypto.kdf === 'scrypt') {
          kdfparams = json.crypto.kdfparams;
          derivedKey = ethUtil.scrypt(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        } else if (json.crypto.kdf === 'pbkdf2') {
          kdfparams = json.crypto.kdfparams;
          if (kdfparams.prf !== 'hmac-sha256') {
            throw new Error('Unsupported parameters to PBKDF2');
          }
          derivedKey = ethUtil.crypto.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        } else {
          throw new Error('Unsupported key derivation scheme');
        }
        var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');
        var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));
        if (mac.toString('hex') !== json.crypto.mac) {
          throw new Error('Key derivation failed - possibly wrong passphrase');
        }
        var decipher = ethUtil.crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));
        var seed = Wallet.decipherBuffer(decipher, ciphertext, 'hex');
        return new Wallet(seed);
      };
      Wallet.prototype.toV3String = function (password, opts) {
        return JSON.stringify(this.toV3(password, opts));
      };
      Wallet.prototype.getV3Filename = function (timestamp) {
        var ts = timestamp ? new Date(timestamp) : new Date();
        return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');
      };
      Wallet.decipherBuffer = function (decipher, data) {
        return Buffer.concat([decipher.update(data), decipher.final()]);
      };
      Wallet.decodeCryptojsSalt = function (input) {
        var ciphertext = new Buffer(input, 'base64');
        if (ciphertext.slice(0, 8).toString() === 'Salted__') {
          return {
            salt: ciphertext.slice(8, 16),
            ciphertext: ciphertext.slice(16)
          };
        } else {
          return {
            ciphertext: ciphertext
          };
        }
      };
      Wallet.evp_kdf = function (data, salt, opts) {
        // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`

        function iter(block) {
          var hash = ethUtil.crypto.createHash(opts.digest || 'md5');
          hash.update(block);
          hash.update(data);
          hash.update(salt);
          block = hash.digest();
          for (var i = 1; i < (opts.count || 1); i++) {
            hash = ethUtil.crypto.createHash(opts.digest || 'md5');
            hash.update(block);
            block = hash.digest();
          }
          return block;
        }
        var keysize = opts.keysize || 16;
        var ivsize = opts.ivsize || 16;
        var ret = [];
        var i = 0;
        while (Buffer.concat(ret).length < keysize + ivsize) {
          ret[i] = iter(i === 0 ? new Buffer(0) : ret[i - 1]);
          i++;
        }
        var tmp = Buffer.concat(ret);
        return {
          key: tmp.slice(0, keysize),
          iv: tmp.slice(keysize, keysize + ivsize)
        };
      };
      Wallet.walletRequirePass = function (ethjson) {
        var jsonArr;
        try {
          jsonArr = JSON.parse(ethjson);
        } catch (err) {
          throw globalFuncs.errorMsgs[3];
        }
        if (jsonArr.encseed != null) return true;else if (jsonArr.Crypto != null || jsonArr.crypto != null) return true;else if (jsonArr.hash != null && jsonArr.locked) return true;else if (jsonArr.hash != null && !jsonArr.locked) return false;else if (jsonArr.publisher == "MyEtherWallet" && !jsonArr.encrypted) return false;else throw globalFuncs.errorMsgs[2];
      };
      Wallet.getWalletFromPrivKeyFile = function (strjson, password) {
        var jsonArr = JSON.parse(strjson);
        if (jsonArr.encseed != null) return Wallet.fromEthSale(strjson, password);else if (jsonArr.Crypto != null || jsonArr.crypto != null) return Wallet.fromV3(strjson, password, true);else if (jsonArr.hash != null) return Wallet.fromMyEtherWallet(strjson, password);else if (jsonArr.publisher == "MyEtherWallet") return Wallet.fromMyEtherWalletV2(strjson);else throw globalFuncs.errorMsgs[2];
      };
      module.exports = Wallet;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 32: [function (require, module, exports) {
    'use strict';

    var globalService = function ($http, $httpParamSerializerJQLike) {
      globalFuncs.checkAndRedirectHTTPS();
      ajaxReq.http = $http;
      ajaxReq.postSerializer = $httpParamSerializerJQLike;

      var tabs = {
        generateWallet: {
          id: 0,
          name: "NAV_GenerateWallet",
          url: "generate-wallet",
          mew: true,
          cx: false
        },
        bulkGenerate: {
          id: 1,
          name: "NAV_BulkGenerate",
          url: "bulk-generate",
          mew: false,
          cx: false
        },
        myWallet: {
          id: 2,
          name: "NAV_MyWallets",
          url: "my-wallet",
          mew: false,
          cx: true
        },
        addWallet: {
          id: 3,
          name: "NAV_AddWallet",
          url: "add-wallet",
          mew: false,
          cx: true
        },
        viewWalletInfo: {
          id: 4,
          name: "NAV_ViewWallet",
          url: "view-wallet-info",
          mew: true,
          cx: false
        },
        help: {
          id: 5,
          name: "NAV_Help",
          url: "help",
          mew: true,
          cx: true
        }
      };
      var currentTab = 0;
      if (typeof chrome != 'undefined') currentTab = chrome.windows === undefined ? 0 : 3;
      return {
        tabs: tabs,
        currentTab: currentTab
      };
    };
    module.exports = globalService;
  }, {}], 33: [function (require, module, exports) {
    'use strict';

    var walletService = function () {
      return {
        wallet: null,
        password: ''
      };
    };
    module.exports = walletService;
  }, {}], 34: [function (require, module, exports) {
    'use strict';

    var Token = function (contractAddress, userAddress, symbol, decimal) {
      this.contractAddress = contractAddress;
      this.userAddress = userAddress;
      this.symbol = symbol;;
      this.decimal = decimal;
      this.setBalance();
      this.balance = "loading";
    };
    Token.balanceHex = "0x70a08231";
    Token.transferHex = "0xa9059cbb";
    Token.popTokens = [{
      "address": "0x74c1e4b8cae59269ec1d85d3d4f324396048f4ac",
      "symbol": "BeerCoin 🍺 ",
      "decimal": 0
    }, {
      "address": "0xbb9bc244d798123fde783fcc1c72d3bb8c189413",
      "symbol": "DAO",
      "decimal": 16
    }, {
      "address": "0x5c40eF6f527f4FbA68368774E6130cE6515123f2",
      "symbol": "DAO extraBalance",
      "decimal": 0
    }, {
      "address": "0xe0b7927c4af23765cb51314a0e0521a9645f0e2a",
      "symbol": "DGD",
      "decimal": 9
    }, {
      "address": "0x54bda709fed875224eae569bb6817d96ef7ed9ad",
      "symbol": "DGDb",
      "decimal": 0
    }, {
      "address": "0xc66ea802717bfb9833400264dd12c2bceaa34a6d",
      "symbol": "MKR",
      "decimal": 18
    }, {
      "address": "0x45e42D659D9f9466cD5DF622506033145a9b89Bc",
      "symbol": "Nexium",
      "decimal": 3
    }, {
      "address": "0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7",
      "symbol": "Unicorn 🦄 ",
      "decimal": 0
    }, {
      "address": "0x4DF812F6064def1e5e029f1ca858777CC98D2D81",
      "symbol": "XAUR",
      "decimal": 8
    }];
    Token.prototype.getContractAddress = function () {
      return this.contractAddress;
    };
    Token.prototype.getUserAddress = function () {
      return this.userAddress;
    };
    Token.prototype.getSymbol = function () {
      return this.symbol;
    };
    Token.prototype.getDecimal = function () {
      return this.decimal;
    };
    Token.prototype.getBalance = function () {
      return this.balance;
    };
    Token.prototype.getBalanceBN = function () {
      return this.balanceBN;
    };
    Token.prototype.setBalance = function () {
      var balanceCall = ethFuncs.getDataObj(this.contractAddress, Token.balanceHex, [ethFuncs.getNakedAddress(this.userAddress)]);
      var parentObj = this;
      ajaxReq.getEthCall(balanceCall, false, function (data) {
        if (!data.error) {
          parentObj.balance = new BigNumber(data.data).div(new BigNumber(10).pow(parentObj.getDecimal())).toString();
          parentObj.balanceBN = new BigNumber(data.data).toString();
        }
      });
    };
    Token.prototype.getData = function (toAdd, value) {
      try {
        if (!ethFuncs.validateEtherAddress(toAdd)) throw globalFuncs.errorMsgs[5];else if (!globalFuncs.isNumeric(value) || parseFloat(value) < 0) throw globalFuncs.errorMsgs[7];
        var value = ethFuncs.padLeft(new BigNumber(value).times(new BigNumber(10).pow(this.getDecimal())).toString(16), 64);
        var toAdd = ethFuncs.padLeft(ethFuncs.getNakedAddress(toAdd), 64);
        var data = Token.transferHex + toAdd + value;
        return {
          isError: false,
          data: data
        };
      } catch (e) {
        return {
          isError: true,
          error: e
        };
      }
    };
    module.exports = Token;
  }, {}], 35: [function (require, module, exports) {
    // German
    'use strict';

    var de = function () {};
    de.code = 'de';
    de.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: 'Invalid sender',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas price too low for acceptance',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Account does not exist or account balance too low',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      /* Navigation*/
      NAV_YourWallets: 'Deine Wallets',
      NAV_AddWallet: 'Wallet hinzufügen',
      NAV_GenerateWallet: 'Wallet erstellen',
      NAV_BulkGenerate: 'Mehrere Wallets erstellen',
      NAV_SendEther: 'Sende Ether',
      NAV_SendTokens: 'Sende Tokens',
      NAV_Offline: 'Sende offline',
      NAV_WithdrawDAO: 'DAO Token entnehmen',
      DAO_TitleLong: 'DAO Token in ETH umwandeln',
      NAV_ClaimDGD: 'DGD geltend machen',
      DGD_TitleLong: 'DGD Token geltend machen',
      NAV_DeployContract: 'Vertrag aufstellen',
      NAV_MyWallets: 'Meine Wallets',
      NAV_ViewWallet: 'Wallet Infos anzeigen',
      NAV_Help: 'Hilfe',
      NAV_Contact: 'Kontakt',

      /* General */
      x_Wallet: 'Wallet',
      x_Password: 'Passwort',
      x_Download: 'Herunterladen',
      x_Address: 'Deine Adresse',
      x_Save: 'Sichern',
      x_Cancel: 'Abbrechen',
      x_AddessDesc: 'Dies ist deine "Kontonummer" oder dein "Öffentlicher Schlüssel". Du benötigst diese Adresse, wenn dir jemand Ether senden möchte. Das Icon ist eine einfache Möglichkeit, die Adresse zu überprüfen',
      x_PrivKey: 'Privater Schlüssel (unverschlüsselt)',
      x_PrivKey2: 'Privater Schlüssel',
      x_PrivKeyDesc: 'Dies ist die unverschlüsselte Textversion deines privaten Schlüssels, d. h. du benötigst kein Passwort. Wenn jemand über diesen unverschlüsselten privaten Schlüssel verfügt, hat er/sie ohne Passwort Zugang zu deinem Wallet. Es wird daher empfohlen, den privaten Schlüssel zu verschlüsseln.',
      x_Keystore: 'Keystore/JSON File (Empfohlen · Verschlüsselt · Im Mist/Geth-Format)',
      x_Keystore2: 'Keystore/JSON File',
      x_KeystoreDesc: 'Diese Keystore / JSON-Datei passt zu dem Format, das von Mist & Geth verwendet wird, sodass du diese Datei dort zukünftig einfach importieren kannst. Es ist empfehlenswert, diese Datei herunterzuladen und zu sichern.',
      x_Json: 'JSON-Datei (unverschlüsselt)',
      x_JsonDesc: 'Dies ist die unverschlüsselte Version deines privaten Schlüssels im JSON-Format. Du benötigst daher kein Passwort, aber jeder, der über diese JSON-Datei verfügt, hat ohne Passwort Zugang zu deinem Wallet und dem darin enthaltenen Ether.',
      x_PrintShort: 'Drucken',
      x_Print: 'Papier-Version des Wallets drucken',
      x_PrintDesc: 'ProTip: Klicke auf "Drucken" und sichere die Datei als PDF, auch wenn du keinen Drucker hast!',
      x_CSV: 'CSV-Datei (unverschlüsselt)',
      x_TXT: 'TXT-Datei (unverschlüsselt)',

      /* Header */
      MEW_Warning_1: 'Bitte prüfe stets die URL, bevor du auf dein Wallet zugreifst oder ein neues Wallet erzeugst. Vorsicht vor Phishing-Seiten!',
      CX_Warning_1: 'Stelle sicher, dass du über eine **externe Sicherung** von allen Wallets verfügst, die du hier speicherst. Es gibt viele Möglichkeiten, die dazu führen können, dass deine in dieser Chrome-Extension gespeicherten Daten verloren gehen, z.B. Deinstallation oder Neu-Installation. Diese Extension erleichert den Zugang zu deinen Wallets, ist jedoch keine empfohlene Möglichkeit, diese zu sichern.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet',
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extension',

      /* Footer */
      FOOTER_1: 'Ein quelloffenes, browserseitiges Werkzeug zur Erzeugung von Ethereum-Wallets und Versenden von Transaktionen.',
      FOOTER_1b: 'Erstellt von',
      FOOTER_2: 'Spenden sind herzlich willkommen:',
      FOOTER_3: 'Browserseitige Wallet-Erzeugung durch',
      FOOTER_4: 'Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Kontoinformation: ',
      sidebar_AccountAddr: 'Kontoadresse: ',
      sidebar_AccountBal: 'Kontostand: ',
      sidebar_TokenBal: 'Token Kontostand: ',
      sidebar_Equiv: 'Währungs-Gegenwerte: ',
      sidebar_TransHistory: 'Transaktions-Historie: ',
      sidebar_DGDBal: 'DGD Crowdsale Information:',
      sidebar_donation: 'MyEtherWallet ist ein freier, quelloffener Service, der deiner Privatsphäre und Sicherheit gewidmet ist. Je mehr Spenden wir erhalten, desto mehr Zeit können wir investieren, um neue Funktionen zu programmieren, dein Feedback zu verarbeiten und dir zu geben, was du dir wünschst. Wir sind nur zwei Leute, die die Welt ändern möchten. Hilfst du uns dabei?',
      sidebar_donate: 'Spenden',
      sidebar_thanks: 'Dankeschön!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Wie möchtst du auf dein Wallet zugreifen?',
      decrypt_Title: 'Wähle das Format deines privaten Schlüssels:',
      decrypt_Select: 'Wallet auswählen:',

      /* Add Wallet */
      ADD_Label_1: 'Was möchtest du tun?',
      ADD_Radio_1: 'Neues Wallet erstellen',
      ADD_Radio_2: 'Wallet-Datei auswählen (Keystore / JSON)',
      ADD_Radio_2_alt: 'Wallet-Datei auswählen: ',
      ADD_Radio_2_short: 'WALLET-DATEI AUSWÄHLEN...',
      ADD_Radio_3: 'Kopiere/Tippe deinen privaten Schlüssel ein',
      ADD_Radio_4: 'Kontoadresse zur Beobachtung hinzufügen',
      ADD_Label_2: 'Wähle ein Kürzel:',
      ADD_Label_3: 'Deine Datei ist verschlüsselt. Bitte gib das Passwort ein: ',
      ADD_Label_4: 'Kontoadresse zur Beobachtung hinzufügen',
      ADD_Warning_1: 'Du kannst unter dem "Wallet-Tab" eine Kontoadresse "beobachten", ohne den privaten Schlüssel hochzuladen. Du hast damit **keinen** Zugang zu diesem Wallet und kannst auch keinen Ether daraus versenden.',
      ADD_Label_5: 'Kontoadresse eingeben: ',
      ADD_Label_6: 'Wallet entsperren',
      ADD_Label_6_short: 'Entsperren',
      ADD_Label_7: 'Kontoadresse hinzufügen',

      /* Generate Wallets */
      GEN_desc: 'Wenn du mehrere Wallets auf einmal erstellen möchtest, kannst du dies hier tun: ',
      GEN_Label_1: 'Gib ein starkes Passwort ein (mindestens 9 Zeichen)',
      GEN_Placeholder_1: 'BITTE VERGISS NICHT dieses Passwort an einem sicheren Ort zu notieren!',
      GEN_SuccessMsg: 'Erfolgreich! Dein Wallet wurde erzeugt.',
      GEN_Warning: '**Du benötigst deine Keystore/JSON-Datei & das Passwort oder den privaten Schlüssel**, um künftig auf dein Wallet zugreifen zu können. Bitte sichere diese Datei daher auf einem externen Medium! Es gibt KEINE Möglichkeit, ein Wallet wiederherzustellen, wenn du diese Datei und das Passwort nicht sicherst. Lies die [Hilfe-Seite](https://www.myetherwallet.com/#help) für weitere Informationen.',
      GEN_Label_2: 'Sichere deine Keystore/JSON-Datei oder deinen privaten Schlüssel. Sichere auch dein Passwort!',
      GEN_Label_3: 'Sichere deine Kontoadresse.',
      GEN_Label_4: 'Drucke dein Papier-Wallet oder speichere einen QR-Code davon: (optional)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Anzahl zu generierender Wallets',
      BULK_Label_2: 'Wallets erstellen',
      BULK_SuccessMsg: 'Erfolgreich! Deine Wallets wurden erstellt.',

      /* Sending Ether and Tokens */
      SEND_addr: 'An Adresse: ',
      SEND_amount: 'Zu sendender Betrag: ',
      SEND_amount_short: 'Betrag',
      SEND_custom: 'Benutzerdefiniert',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Gesamten verfügbaren Saldo übertragen',
      SEND_generate: 'Erzeuge Transaktion',
      SEND_raw: 'Transaktion (Binärformat)',
      SEND_signed: 'Signierte Transaktion',
      SEND_trans: 'Sende Transaktion',
      SENDModal_Title: 'Achtung! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Du bist dabei, ',
      SENDModal_Content_2: ' an die Adresse ',
      SENDModal_Content_3: ' zu senden. Bis du sicher, dass du das willst?',
      SENDModal_Content_4: 'HINWEIS: Wenn du eine Fehlermeldung erhälst, musst du vermutlich deinen Ether-Saldo erhöhen, um die Gas-Kosten des Token-Versands zu bezahlen. Gas wird in Ether bezahlt.',
      SENDModal_No: 'Nein, ich möchte diesen Vorgang abbrechen!',
      SENDModal_Yes: 'Ja, ich bin mir sicher! Führe die Transaktion durch.',

      /* Tokens */
      TOKEN_Addr: 'Adresse: ',
      TOKEN_Symbol: 'Token-Symbol: ',
      TOKEN_Dec: 'Dezimalstellen: ',

      /* Send Transaction */
      TRANS_desc: 'Wenn du Token senden willst, nutze bitte die "Sende Tokens" Funktion',
      TRANS_warning: 'Wenn du die "Nur ETH" oder "Nur ETC" Funktionen benutzt, erfolgt die Transaktion über einen Vertrag. Einige Dienste haben ein Problem damit diese Transaktionen zu empfangen. Mehr lesen.',
      TRANS_standard: 'ETH (Standard Transaktion)',
      TRANS_eth: 'Nur ETH',
      TRANS_etc: 'Nur ETC',
      TRANS_advanced: '+Fortgeschritten: Daten hinzufügen ',
      TRANS_data: 'Daten: ',
      TRANS_gas: 'Gas: ',
      TRANS_sendInfo: 'Eine Standard Transaktion mit 21000 Gas kostet 0.000441 ETH. Wir zahlen einen minimal höheren Gaspreis von 0.000000021 ETH um zu garantieren, dass die Transaktion schnell bearbeitet wird. Wir erheben keine Transaktionsgebühren.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Nur ETH" und "Nur ETC" Transaktionen',
      TRANSModal_Content_0: 'Ein Hinweis zu den verschiedenen Transaktionen und Angeboten:',
      TRANSModal_Content_1: '**ETH (Standard Transaktion): ** Dies erzeugt eine Standard Transaktion direkt von einer Adresse zu einer anderen. Diese nutzt standardmässig 21000 Gas. Es ist gut möglich, dass alle Transaktionen dieser Art auf der ETC Blockchain wiederholt werden (Replay Attacke).',
      TRANSModal_Content_2: '**Nur ETH: ** Dies sendet die Transaktion so über [Timon Rapp\'s "replay protection contract" (wie von VB empfohlen)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), dass sie nur auf der **ETH** Blockchain ausgeführt wird.',
      TRANSModal_Content_3: '**Nur ETC: ** Dies sendet die Transaktion so über [Timon Rapp\'s "replay protection contract" (wie von VB empfohlen)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), dass sie nur auf der **ETC** Blockchain ausgeführt wird.',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Sende nur Standard Transaktionen. Wenn du die Transaktion über eine der "Nur" Funktionen versendest, musst du den Support kontaktieren um deinen Betrag oder eine Rückerstattung zu erhalten. [Du kannst auch Shapeshifts "split" Werkzeug ausprobieren.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Keine Probleme bekannt. Nutzen, was dir lieber ist',
      TRANSModal_Yes: 'Cool, jetzt hab ich\'s verstanden.',
      TRANSModal_No: 'Bitte was? Ich bin noch verwirrter. Ich brauche Hilfe',

      /* Offline Transaction */
      OFFLINE_Title: 'Erzeuge & sende Offline Transaktionen',
      OFFLINE_Desc: 'Offline Transaktionen können in drei Schritten erzeugt werden. Schritt 1 und 3 erledigst an einem Online Computer und Schritt 3 an einem Offline/abgeschirmten Computer. Dies stellt sicher, dass deine privaten Schlüssel nie ein mit dem Internet verbundenes Gerät berühren.',
      OFFLLINE_Step1_Title: 'Schritt 1: Informationen sammeln (Online Computer)',
      OFFLINE_Step1_Button: 'Informationen sammeln',
      OFFLINE_Step1_Label_1: 'Von Adresse: ',
      OFFLINE_Step1_Label_2: 'Hinweis: Dies ist die VON Adresse, nicht die AN Adresse. Die Nonce wird basierend auf dem Ursprungsaccount berechnet. Wenn du einen abgeschirmten Computer nutzt, wäre dies die Adresse deines "cold-storage".',
      OFFLINE_Step2_Title: 'Schritt 2: Transaktion generieren (Offline Computer)',
      OFFLINE_Step2_Label_1: 'An Adresse: ',
      OFFLINE_Step2_Label_2: 'Zu sendender Betrag:',
      OFFLINE_Step2_Label_3: 'Gaspreis ',
      OFFLINE_Step2_Label_3b: 'Dies wurde dir in Schritt 1 an deinem Online Computer angezeigt.',
      OFFLINE_Step2_Label_4: 'Gas Limit ',
      OFFLINE_Step2_Label_4b: '21000 ist das Standard Gas Limit. Wenn du Verträge oder Daten sendest, musst du diesen Wert eventuell anpassen. Alles ungenutzte Gas wird dir zurück gesendet.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Dies wurde dir in Schritt 1 an deinem Online Computer angezeigt.',
      OFFLINE_Step2_Label_6: 'Daten',
      OFFLINE_Step2_Label_6b: 'Dies ist optional. Daten werden meist in Transaktionen an Verträge verwendet.',
      OFFLINE_Step2_Label_7: 'Gib deine privaten Schlüssel ein.',
      OFFLINE_Step3_Title: 'Schritt 3: Transaktion senden/veröffentlichen (Online Computer)',
      OFFLINE_Step3_Label_1: 'Kopiere die signierte Transaktion aus Schritt 2 hier hinein und drücke "TRANSAKTION SENDEN".',

      /* DAO */
      DAO_bal1: 'Bei Block 1,919,999',
      DAO_bal2: 'momentan', // momentaner?
      DAO_TitleETH: 'DAO Token in ETH umwandeln',
      DAO_TitleETC: 'DAO Token in ETC umwandeln',
      DAO_ETC_Label_1: 'An welche Adresse möchtest du deine ETC gesendet haben?',
      DAO_ETC_Label_2: 'Die "White Hat Group" hat unermüdlich gearbeitet um deine ETC zurückzuholen. Wenn du möchtest, kannst du dich bedanken indem du einen Teil deiner ETC an sie spendest. ',
      DAO_Desc: 'Nutze diesen Tab um deine DAO Token in ETH auszuzahlen. Wenn du DAO Token verschicken willst, nutze bitten den "Sende Tokens" Tab',
      DAO_Inst: 'Ja, du musst einfach den großen roten Knopf drücken. Es ist so einfach.',
      DAO_Warning: 'Wenn du den Fehler "Zu geringer Kontostand um Gaskosten zu decken" erhälst, musst du einen kleinen ether Betrag auf dein Konto überweisen um die Kosten zu decken. Überweise 0.001 Ether an dieses Konto und versuche es erneut. ',
      DAOModal_Title: 'Nur zur Sicherheit...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Du bist dabei',
      DAOModal_2: 'DAO Token an',
      DAOModal_3: 'zu senden im Austausch für', // "in return for"

      /* Digix */
      DGD_Desc: 'Erhebe Anspruch auf deine DigixDAO (DGD) Token und Badges. Um dies zu tun, musst du bei dem Token Verkauf am 30./31. Mai 2016 teilgenommen haben. Falls du DGD versenden möchtest, nutze bitte den Sende Tokens Tab.',
      DGD_Label_1: 'Erwartete Gebühren:',
      DGD_Label_2: 'Maximal mögliche Gebühren:', /* Provided = Mögliche? */
      DGD_Label_3: 'Gaspreis:',
      DGD_Generate: 'Anspruch geltend machen',
      DGD_Content: 'Du bist dabei, deine DGD Token geltend zu machen.',

      /* Deploy Contracts */
      DEP_generate: 'Bytecode generieren',
      DEP_generated: 'Generierter Bytecode',
      DEP_signtx: 'Transaktion signieren',
      DEP_interface: 'Generiertes Interface',

      /* My Wallet */
      MYWAL_Nick: 'Wallet Spitzname',
      MYWAL_Address: 'Wallet Addresse',
      MYWAL_Bal: 'Guthaben',
      MYWAL_Edit: 'Bearbeiten',
      MYWAL_View: 'Ansehen',
      MYWAL_Remove: 'Löschen',
      MYWAL_RemoveWal: 'Wallet löschen:',
      MYWAL_WatchOnly: 'Deine Watch-Only Konten',
      MYWAL_Viewing: 'Du siehst Wallet: ',
      MYWAL_Hide: 'Wallet Info verstecken',
      MYWAL_Edit_2: 'Wallet bearbeiten: ',
      MYWAL_Name: 'Wallet Name',
      MYWAL_Content_1: 'Achtung! Du bist gerade dabei dein Wallet zu löschen: ',
      MYWAL_Content_2: 'Stelle sicher, dass du **die private Key/JSON Datei und das Passwort** deines Wallets gespeichert hast, bevor du es löschst.',
      MYWAL_Content_3: 'Wenn du dieses Wallet in Zukunft mit MyEtherWallet CX verwenden willst, musst du es mittels der privaten Key/JSON Datei und deinem Passwort manuell wieder hinzufügen.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Dies erlaubt dir den Download verschiedener Versionen deines privaten Schlüssel sowie das erneute Drucken deines Papier-Wallets. Es wird empfohlen, dies zu tun um [Deinen Account in Geth/Mist zu importieren.](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Zum Überprüfen deines Kontostands empfehlen wir, einen Blockchain Explorer wie [etherscan.io](http://etherscan.io/) zu verwenden.',
      VIEWWALLET_Subtitle_Short: 'Dies erlaubt dir den Download verschiedener Versionen deines privaten Schlüssel sowie das erneute Drucken deines Papier-Wallets. ',
      VIEWWALLET_SuccessMsg: 'Erfolgreich! Hier sind die Daten deines Wallets.',

      /* Chrome Extension */
      CX_error_1: 'Du hast keine Wallets gespeichert. Klicke ["Wallet hinzufügen"](/cx-wallet.html#add-wallet) um eines hinzuzufügen!',
      CX_quicksend: 'Senden', // Was "QuickSend". If no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Bitte gültigen Betrag eingeben',
      ERROR_2: 'Dein Passwort muss mindestens 9 Zeichen lang sein. Bitte wähle ein sicheres Passwort. ',
      ERROR_3: 'Oh oh! Wir haben den Typ der Wallet-Datei nicht erkannt. ',
      ERROR_4: 'Dies ist keine gültige Wallet-Datei. ',
      ERROR_5: 'Diese Einheit existiert nicht, bitte wähle eine dieser Einheiten aus ',
      ERROR_6: 'Ungültige Addresse. ',
      ERROR_7: 'Ungültiges Passwort. ',
      ERROR_8: 'Ungültiger Betrag. ',
      ERROR_9: 'Ungültiges Gaslimit. ',
      ERROR_10: 'Ungültiger Datenwert. ',
      ERROR_11: 'Ungültiger Gasbetrag. ',
      ERROR_12: 'Ungültige Nonce. ',
      ERROR_13: 'Ungültige unterzeichnete Transaktion. ',
      ERROR_14: 'Ein Wallet mit diesem Spitznamen existiert bereits. ',
      ERROR_15: 'Wallet nicht gefunden. ',
      ERROR_16: 'Es sieht nicht so aus als würde ein Proposal mit dieser ID existieren oder es gab einen Fehler beim Lesen des Proposal. ',
      ERROR_17: 'Es ist bereits ein Wallet mit dieser Adresse gespeichert. Bitte überprüfe die Seite deines Wallets. ',
      ERROR_18: 'Du brauchst zumindest 0.001 ETH in deinem Account um die Gaskosten zu decken. Bitte füge ETH hinzu und versuche es noch einmal. ',
      ERROR_19: 'Diese Transaktion würde dein gesamtes verbleibendes Gas verbrauchen. Das bedeutet, du hast bereits über dieses Proposal abgestimmt oder die Debattierphase ist zu Ende.',
      ERROR_20: 'Ungültiges Symbol',
      SUCCESS_1: 'Gültige Addresse',
      SUCCESS_2: 'Wallet erfolgreich entschlüsselt',
      SUCCESS_3: 'Transaktion übermittelt. TX ID: ',
      SUCCESS_4: 'Dein Wallet wurde erfolgreich hinzugefügt: ',
      SUCCESS_5: 'Du hast erfolgreich abgestimmt. Danke, dass du eine aktive Teilnehmerin/aktiver Teilnehmer am DAO bist.',
      SUCCESS_6: 'Ausgewählte Datei: ',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Vielen Dank an unsere ÜbersetzerInnen:',
      TranslatorName_1: 'christoph2806 · K ·',
      TranslatorAddr_1: '',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: '[mawalu](https://www.myetherwallet.com/?gaslimit=21000&to=0xA6e9A24981aFB71f96C7330618139a7B34BCdEc3&value=1.0#send-transaction) ·',
      TranslatorAddr_2: '0xA6e9A24981aFB71f96C7330618139a7B34BCdEc3',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: '[huhn_solo](https://www.myetherwallet.com/?gaslimit=21000&to=0x1DAd1765381460db9A44846cDfA6f74c65A06B77&value=1.0#send-transaction) · ',
      TranslatorAddr_3: '0x1DAd1765381460db9A44846cDfA6f74c65A06B77',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: '[FelixA](https://www.myetherwallet.com/?gaslimit=21000&to=0xb6999051b0Bfad32E192e107181E0ac72bE7EE3D&value=1.0#send-transaction) · ',
      TranslatorAddr_4: '0xb6999051b0Bfad32E192e107181E0ac72bE7EE3D ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: 'danielsun174 · ffidan61',
      TranslatorAddr_5: '',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Falls du vor dem **31.12.2015** ein Wallet generiert, oder das Repository heruntergeladen hast, bitte überprüfe deine Wallets &amp; lade eine neue Version des Repositories herunter. Klick für details.',
      HELP_Desc: 'Hast du das Gefühl etwas fehlt? Hast du eine andere Frage? [Schreib uns](mailto:myetherwallet@gmail.com) und wir werden nicht nur deine Frage beantworten, wir werden auch die Seite updaten, damit diese in der Zukunft noch einfacher zu bedienen sein wird!',
      HELP_Remind_Title: 'Ein paar Reminder',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, sowie einige der verwendeten Javascript Bibliotheken, die wir verwenden, befinden sich noch in Entwicklung.** Zwar haben wir alles umfassend getestet und es wurden erfolgeich tausende Wallets von Menschen aus aller Welt kreiert, jedoch bestimmt immer eine gewisse Gefahr, dass etwas unerwartetes passiert und dein Ether verloren geht. Bitte investiere nicht mehr als du verlieren kannst, und sei immer vorsichtig. Sollte etwas schlimmes passieren, **können wir uns leider nicht verantwortlich für einen Verlust zeichnen**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX sind keine "web wallets". Du erstellst keinen Account oder sendest uns Ether den wir halten. Alle Daten bleiben auf deinem Computer, bzw. Browser. Unser Auftrag ist es, dir das Erstellen, Speichern und Zugreifen auf deine Accounts zu vereinfachen, sowie dir eine simple Möglichkeit zur Interaktion mit der Blockchain zu bieten.',
      HELP_Remind_Desc_3: 'Falls du deinen privaten Schlüssel und Passwort nicht speicherst, gibt es keine Möglichkeit den Zugriff auf das Konto und die darauf befindlichen Mittel wieder herzustellen. Bitte erstelle Back-ups und speichere deine Zugriffsdaten an verschiedenen Orten &ndash; nicht nur deinem Computer!',

      HELP_0_Title: '0) Ich bin neu. Was soll ich machen?',
      HELP_0_Desc_1: 'MyEtherWallet bietet dir die Möglichkeit neue Wallets zu generieren, damit du deinen Ether selbst speichern kannst, und keine Exchange nutzen musst. Dieser Prozess findet ausschließlich auf deinem Computer statt. Daher bist auch **du dafür Verantwortlich, Back-ups zu erstellen** wenn du ein Wallet verwenden möchtest.',
      HELP_0_Desc_2: 'Erstelle ein neues Wallet.',
      HELP_0_Desc_3: 'Erstelle ein Back-up deines Wallets.',
      HELP_0_Desc_4: 'Verifiziere, dass du Zugriff auf dein neues Wallet hast und alle nötigen Informationen korrekt gespeichert sind.',
      HELP_0_Desc_5: 'Überweise Ether auf das neue Wallet.',

      HELP_1_Title: '1) Wie erstelle ich ein neues Wallet?',
      HELP_1_Desc_1: 'Geh zur "Wallet hinzufügen" Seite.',
      HELP_1_Desc_2: 'Geh zur "Wallet hinzufügen" Seite & wähle "Neues Wallet erstellen" aus.',
      HELP_1_Desc_3: 'Wähle ein starkes Passwort aus. Falls du glaubst, dass du es vergessen könntest, speichere es an einem sicheren Ort ab. Du benötigst das Passwort um Transaktionen zu tätigen.',
      HELP_1_Desc_4: 'Klicke auf "Wallet erstellen".',
      HELP_1_Desc_5: 'Dein Wallet wurde nun erstellt.',

      HELP_2a_Title: '2a) Wie speichere ich/erstelle Back-ups meines Wallets?',
      HELP_2a_Desc_1: 'Du solltest dein Wallet immer an verschiedenen physischen Orten abspeichern - beispielsweise auf einem USB-Stick und/oder einem Stück Papier.',
      HELP_2a_Desc_2: 'Speichere die Adresse. Du kannst sie für dich behalten oder mit anderen teilen. Auf diese Adresse können andere Ether an dich senden.',
      HELP_2a_Desc_3: 'Speiche verschiedene Versionen deines privaten Schlüssels. Teile ihn nicht mit jemand anderem. Dein privater Schlüssel ist notwendig, wenn du auf deinen Ether zugreifen willst, um eine Überweisung zu tätigen! Es gibt 3 Arten des privaten Schlüssels:',
      HELP_2a_Desc_4: 'Speichere deine Adresse, die verschiedenen Versionen des privaten Schlüssels, sowie eine PDF deines Papier-Wallets in einem Ordner. Speichere diesen auf deinem Computer und einem USB-Stick.',
      HELP_2a_Desc_5: 'Drucke das Wallet falls du einen Drucker hast. Andernfalls, schreibe deinen privaten Schlüssel und die Adresse auf ein Blatt Papier. Lagere dieses an einem sicheren Ort, abseits von deinem Computer und dem USB-Stick.',
      HELP_2a_Desc_6: 'Bitte denk daran, dass du den Verlust des Schlüssels aufgrund des Verlusts oder Versagen deiner Festplatte, des USB-Sticks oder dem Papier, selbst verhindern musst. Erwäge daher auch Situationen wie ein Feuer oder eine Überflutung.',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find you account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) Wie kann ich Ether von einer Wallet zur anderen senden?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) Wie kann ich Ether über MyEtherWallet CX senden?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) Wie kann ich MyEtherWallet.com offline/lokal starten? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Gehe zur GitHub Repo: github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Klick auf Download Zip oben rechts.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Entpacke es.',
      HELP_5_Desc_6: 'Starte mit einem Doppelklick `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and reply attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'Wenn du an einem PC bist:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = de;
  }, {}], 36: [function (require, module, exports) {
    // Greek
    'use strict';

    var el = function () {};
    el.code = 'el';
    el.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: 'Invalid sender',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas price too low for acceptance',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Account does not exist or account balance too low',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      HELP_12_Desc_15b: 'If you are on a PC:',
      SUCCESS_6: 'File Selected: ',
      FOOTER_4: 'Disclaimer',

      /* New - DAO ETC Withdrawal */
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'You are about to withdraw',
      DAOModal_2: 'DAO Tokens to',
      DAOModal_3: 'for', // "in return for"

      DAO_bal1: 'at block 1,919,999',
      DAO_bal2: 'current',
      DAO_TitleETH: 'Withdraw DAO For ETH',
      DAO_TitleETC: 'Withdraw DAO For ETC',
      DAO_ETC_Label_1: 'What address do you want your ETC to be sent to?',
      DAO_ETC_Label_2: 'The "White Hat Group" has been working tirelessly to get your ETC back to you. You can say "thank you" by donating a percentage of your withdrawal, if you choose to. ',

      /* New - Deploy Contracts */
      NAV_DeployContract: 'Deploy Contract',
      DEP_generate: 'Generate Bytecode',
      DEP_generated: 'Generated Bytecode',
      DEP_signtx: 'Sign Transaction',
      DEP_interface: 'Generated Interface',

      /* Navigation*/
      NAV_YourWallets: 'Τα Πορτοφόλια σας',
      NAV_AddWallet: 'Προσθήκη Πορτοφολιού',
      NAV_GenerateWallet: 'Δημηουργία Πορτοφολιού',
      NAV_BulkGenerate: 'Δημιουργία Πολλών Πορτοφολιών',
      NAV_SendEther: 'Αποστολή Ether',
      NAV_SendTokens: 'Αποστολή Tokens',
      NAV_Offline: 'Αποστολή εκτός Σύνδεσης',
      NAV_WithdrawDAO: 'Ανάληψη DAO',
      DAO_TitleLong: 'Ανάληψη των Dao Tokens σας ως ETH',
      NAV_ClaimDGD: 'Διεκδίκηση DGD',
      DGD_TitleLong: 'Διεκδικήστε τα DGD Tokens σας',
      NAV_MyWallets: 'Τα Πορτοφόλια μου',
      NAV_ViewWallet: 'Προβολή Πληροφοριών Πορτοφολιού',
      NAV_Help: 'Βοήθεια',
      NAV_Contact: 'Επικοινωνία',

      /* General */
      x_Wallet: 'Πορτοφόλι',
      x_Password: 'Κωδικός',
      x_Download: 'Λήψη',
      x_Address: 'Η Διεύθυνσή σας',
      x_Save: 'Αποθήκευση',
      x_Cancel: 'Ακύρωση',
      x_AddessDesc: 'Γνωστή και ως "Αριθμός Λογαριασμού" σας ή "Δημόσιο Κλειδί" σας. Αυτή δίνετε σε όσους επιθυμούν να σας στείλουν ether. Το εικονίδιο είναι ένας εύκολος τρόπος αναγνώρισης της διεύθυνσής σας.',
      x_PrivKey: 'Ιδιωτικό Κλειδί (μη κρυπτογραφημένο)',
      x_PrivKey2: 'Ιδιωτικό Κλειδί',
      x_PrivKeyDesc: 'Αυτό το κείμενο είναι η μη κρυπτογραφημένη εκδοχή του Ιδιωτικού Κλειδιού σας που σημαίνει ότι δεν απαιτείται κωδικός. Στην περίπτωση που κάποιος βρει το μη κρυπτογραφημένο Ιδιωτικό Κλειδί σας, έχει πρόσβαση στο πορτοφόλι σας χωρίς κωδικό. Για αυτόν τον λόγο, συνήθως συνιστώνται οι κρυπτογραφημένες εκδοχές.',
      x_Keystore: 'Αρχείο Keystore/JSON (Συνιστάται · Κρυπτογραφημένο · Μορφή Mist/Geth)',
      x_Keystore2: 'Αρχείο Keystore/JSON',
      x_KeystoreDesc: 'Αυτό το Αρχείο Keystore/JSON έχει την ίδια μορφή που χρησιμοποιείται από το Mist & Geth ώστε να μπορείτε εύκολα να το εισάγετε στο μέλλον. Είναι το συνιστώμενο αρχείο για λήψη και δημιουργία αντιγράφου ασφαλείας.',
      x_Json: 'Αρχείο JSON (μη κρυπτογραφημένο)',
      x_JsonDesc: 'Αυτή είναι η μη κρυπτογραφημένη, JSON μορφή του Ιδιωτικού Κλειδιού σας. Αυτό σημαίνει ότι δεν απαιτείται κωδικός όμως οποιοσδήποτε βρει το JSON σας έχει πρόσβαση στο πορτοφόλι και τα Ether σας χωρίς κωδικό.',
      x_PrintShort: 'Εκτύπωση',
      x_Print: 'Εκτύπωση Χάρτινου Πορτοφολιού',
      x_PrintDesc: 'Συμβουλή: Κλικάρετε "Εκτύπωση και Αποθήκευση ως PDF" ακόμη κι αν δεν έχετε εκτυπωτή!',
      x_CSV: 'Αρχείο CSV (μη κρυπτογραφημένο)',
      x_TXT: 'Αρχείο TXT (μη κρυπτογραφημένο)',

      /* Header */
      MEW_Warning_1: 'Πάντα να ελέγχετε την διεύθυνση URL προτού μπείτε στο πορτοφόλι σας ή δημιουργήσετε καινούριο πορτοφόλι. Προσοχή στις σελίδες ηλεκτρονικού ψαρέματος!',
      CX_Warning_1: 'Σιγουρευτείτε ότι έχετε **εξωτερικά αντίγραφα ασφαλείας** όλων των πορτοφολιών που αποθηκεύετε εδώ. Μπορούν να συμβούν διάφορα που θα προκαλούσαν απώλεια των δεδομένων σας σε αυτήν την επέκταση Chrome, συμπεριλαμβανομένης απεγκατάστασης και επανεγκατάστασης της επέκτασης. Αυτή η επέκταση είναι ένας τρόπος εύκολης πρόσβασης στα πορτοφόλια σας και **όχι** ένας τρόπος να δημηιουργήσετε αντίγραφα ασφαλείας τους.',
      MEW_Tagline: 'Ασφαλές Πορτοφόλι Ether Ανοιχτού Κώδικα JavaScript από την πλευρά του Πελάτη',
      CX_Tagline: 'Επέκταση Chrome για Ασφαλές Πορτοφόλι Ether Ανοιχτού Κώδικα JavaScript από την πλευρά του Πελάτη',

      /* Footer */
      FOOTER_1: 'Ένα εργαλείο ανοιχτού κώδικα, javascript, από πλευράς πελάτη για την δημιουργία Πορτοφολιών Ethereum & αποστολή συναλλαγών.',
      FOOTER_1b: 'Δημιουργήθηκε από',
      FOOTER_2: 'Εκτιμούμε πολύ τις δωρεές σας:',
      FOOTER_3: 'Δημιουργία Πορτοφολιών από πλευράς πελάτη από',

      /* Sidebar */
      sidebar_AccountInfo: 'Πληροφορίες Λογαριασμού: ',
      sidebar_AccountAddr: 'Διεύθυνση Λογαριασμού: ',
      sidebar_AccountBal: 'Υπόλοιπο Λογαριασμού: ',
      sidebar_TokenBal: 'Υπόλοιπο Token: ',
      sidebar_Equiv: 'Ισότιμες Αξίες: ',
      sidebar_TransHistory: 'Ιστορικό Συναλλαγών',
      sidebar_DGDBal: 'Πληροφορίες Προαγοράς DGD:',
      sidebar_donation: 'Το MyEtherWallet είναι μία δωρεάν υπηρεσία ανοιχτού κώδικα αφοσιωμένη στην ιδιωτικότητα και την ασφάλεια σας. Όσο περισσότερες δωρεές λαμβάνουμε, τόσο περισσότερο χρόνο αφιερώνουμε στη δημιουργία νέων χαρακτηριστικών καθώς και την αξιολόγηση και εφαρμογή όσων μας προτείνετε. Είμαστε απλά δύο άνθρωποι που προσπαθούν να αλλάξουν τον κόσμο. Θα μας βοηθήσετε; ',
      sidebar_donate: 'Δωρεά',
      sidebar_thanks: 'ΣΑΣ ΕΥΧΑΡΙΣΤΟΥΜΕ!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Πώς θα θέλατε να έχετε πρόσβαση στο Πορτοφόλι σας;',
      decrypt_Title: 'Επιλέξτε την μορφή του Ιδιωτικού Κλειδιού σας:',
      decrypt_Select: 'Επιλέξτε Πορτοφόλι:',

      /* Add Wallet */
      ADD_Label_1: 'Τι θα θέλατε να κάνετε;',
      ADD_Radio_1: 'Δημιουργία Νέου Πορτοφολιού',
      ADD_Radio_2: 'Επιλέξτε το αρχείο Πορτοφολιού σας (Keystore / JSON)',
      ADD_Radio_2_short: 'ΕΠΙΛΕΞΤΕ ΑΡΧΕΙΟ ΠΟΡΤΟΦΟΛΙΟΥ...',
      ADD_Radio_3: 'Επικολλήστε/Πληκτρολογήστε το Ιδιωτικό Κλειδί σας',
      ADD_Radio_4: 'Προσθήκη Λογαριασμού προς Παρακολούθηση',
      ADD_Label_2: 'Δημιουργία Ψευδωνύμου:',
      ADD_Label_3: 'Το πορτοφόλι σας είναι κρυπτογραφημένο. Παρακαλώ εισάγετε τον κωδικό: ',
      ADD_Label_4: 'Προσθήκη Λογαριασμού προς Παρακολούθηση',
      ADD_Warning_1: 'Μπορείτε να προσθέσετε έναν λογαριασμό προς "παρακολούθηση" στην καρτέλα πορτοφολιών χωρίς να ανεβάσετε ιδιωτικό κλειδί. Αυτό ** δεν ** σημαίνει ότι έχετε πρόσβαση στο πορτοφόλι, ούτε ότι μπορείτε να μεταφέρετε Ether από αυτό.',
      ADD_Label_5: 'Εισάγετε την Διεύθυνση: ',
      ADD_Label_6: 'Ξεκλειδώστε το Πορτοφόλι σας',
      ADD_Label_6_short: 'Ξεκλείδωμα',
      ADD_Label_7: 'Προσθήκη Λογαριασμού',

      /* Generate Wallets */
      GEN_desc: 'Αν επιθυμείτε να δημιουργήσετε πολλά πορτοφόλια, μπορείτε να το κάνετε εδώ:',
      GEN_Label_1: 'Εισάγετε ισχυρό κωδικό (τουλάχιστον 9 χαρακτήρες)',
      GEN_Placeholder_1: 'ΜΗΝ ξεχάσετε να τον αποθηκεύσετε!',
      GEN_SuccessMsg: 'Επιτυχία! Το πορτοφόλι σας δημιουργήθηκε.',
      GEN_Warning: 'Προκειμένου να έχετε πρόσβαση σε αυτό το πορτοφόλι στο μέλλον **είναι απαραίτητο το αρχείο Keystore/JSON & ο κωδικός ή το Ιδιωτικό Κλειδί σας**. Παρακαλούμε κρατήστε ένα εξωτερικό αντίγραφο ασφαλείας! Δεν υπάρχει τρόπος ανάκτησης ενός πορτοφολιού άν δεν το αποθηκέυσετε. Διαβάστε την σελίδα [Βοήθειας](https://www.myetherwallet.com/#help) για οδηγίες.',
      GEN_Label_2: 'Αποθηκεύστε το αρχέιο Keystore/JSON ή το Ιδιωτικό Κλειδί. Μην ξεχάσετε τον παραπάνω κωδικό.',
      GEN_Label_3: 'Αποθηκέυστε την Διεύθυνση σας.',
      GEN_Label_4: 'Εκτυπώστε το χάρτινο Πορτοφόλι σας ή αποθηκέυστε την εκδοχή με QR code. (προαιρετικό)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Αριθμός Πορτοφολιών για Δημιουργία',
      BULK_Label_2: 'Δημιουργία Πορτοφολιών',
      BULK_SuccessMsg: 'Επιτυχία! Τα πορτοφόλια σας δημιουργήθηκαν.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Προς Διεύθυνση: ',
      SEND_amount: 'Ποσό για αποστολή: ',
      SEND_amount_short: 'Ποσό',
      SEND_custom: 'Custom',
      SEND_gas: 'Gas',
      SEND_generate: 'Δημιουργία Υπογεγραμμένης Συναλλαγής',
      SEND_raw: 'Ακατέργαστη Συναλλαγή',
      SEND_signed: 'Υπογεγραμμένη Συναλλαγή',
      SEND_trans: 'Αποστολή Συναλλαγής',
      SEND_TransferTotal: 'Μεταφορά συνολικού διαθέσιμου υπολοίπου',
      SENDModal_Title: 'Προσοχή! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Πρόκειται να στείλετε',
      SENDModal_Content_2: 'στη διεύθυνση',
      SENDModal_Content_3: 'Είστε σίγουροι ότι θέλετε να το κάνετε;',
      SENDModal_Content_4: 'ΣΗΜΕΙΩΣΗ: Αν αντιμετωπίσετε σφάλμα, το πιο πιθανό χρειάζεται να προσθέσετε ether στον λογαριασμό σας για να καλύψετε το κόστος gas για την αποστολή token. Το gas πληρώνεται σε ether.',
      SENDModal_No: 'Όχι, θέλω να φύγω από εδώ!',
      SENDModal_Yes: 'Ναι, είμαι σίγουρος/η! Εκτελέστε την συναλλαγή.',
      SEND_TransferTotal: 'Μεταφορά όλου του υπάρχοντος υπολοίπου',

      /* Tokens */
      TOKEN_Addr: 'Διεύθυνση: ',
      TOKEN_Symbol: 'Σύμβολο Token: ',
      TOKEN_Dec: 'Δεκαδικά: ',

      /* Send Transaction */
      TRANS_desc: 'Άν επιθυμείτε να στείλετε Tokens, παρακαλώ χρησιμοποιήστε την σελίδα "Αποστολή Token".',
      TRANS_warning: 'Άν χρησιμοποιείτε τις λειτουργίες "Μόνο ETH" ή "Μόνο ETC", η αποστολή γίνεται μέσω contracts. Ορισμένες υπηρεσίες παρουσιάζουν προβλήματα με την αποδοχή τέτοιων συναλλαγών. Διαβάστε περισσότερα.',
      TRANS_standard: 'ETH (Standard Συναλλαγή)',
      TRANS_eth: 'Μόνο ETH',
      TRANS_etc: 'Μόνο ETC',
      TRANS_advanced: '+Για προχωρημένους: Προσθήκη Data ',
      TRANS_data: ' Data: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Μία standard συναλλαγή που χρησιμοποιεί 21000 gas θα κοστίσει 0,000441 ETH. Χρησιμοποιούμε για τιμή gas 0.000000021 ETH που είναι λίγο πάνω απο την ελάχιστη ώστε διασφαλίσουμε οτι θα επικυρωθεί γρήγορα. Δεν παίρνουμε προμήθεια για την συναλλαγή.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Συναλλαγές "Μόνο ETH" και "Μόνο ETC"',
      TRANSModal_Content_0: 'Μια σημείωση για τις διάφορετικές συναλλαγές και διαφορετικές υπηρεσίες συναλλαγών:',
      TRANSModal_Content_1: '**ETH (Standard Συναλλαγή): ** This generates a default transaction directly from one address to another. It has a default gas of 21000. It is likely that any ETH sent via this method will be replayed onto the ETC chain.',
      TRANSModal_Content_2: '**Μόνο ETH: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETH** chain.',
      TRANSModal_Content_3: '**Μόνο ETC: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETC** chain. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Αποστέλλετε μόνο με Standard Συναλλαγή. Αν στείλετε με τα "Μόνο" contracts, θα χρεαιστεί να έρθετε σε επφή με το προσωπικό υποστήριξης τους ώστε να σας βοηθήσουν με χειροκίνητη μεταφορά υπολοίπων ή επιστροφή χρημάτων.[Μπορείτε επίσης να δοκιμάσετε το εργαλείο "διαχωρισμού" του Shapeshift](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Δεν υπάρχουν γνωστά προβλήματα. Αποστέλλετε με οποιαδήποτε μέθοδο.',
      TRANSModal_Yes: 'Τέλεια, το κατάλαβα.',
      TRANSModal_No: 'Πωπω, μπερδεύτηκα ακόμη περισσότερο. Βοηθήστε με.',

      /* Offline Transaction */
      OFFLINE_Title: 'Δημιουργία και Αποστολή Συναλλαγής εκτός Σύνδεσης',
      OFFLINE_Desc: 'Η δημιουργία συναλλαγών εκτός σύνδεσης μπορεί να γίνει σε τρία βήματα. Θα προβείτε στα βήματα 1 και 3 σε έναν συνδεδεμένο υπολογιστή και το βήμα 2 σε έναν εκτός σύνδεσης/αποκομμένο υπολογιστή. Αυτό εξασφαλίζει ότι τα ιδιωτικά κλειδιά σας δεν έρχονται σε επαφή με συσκευή συνδεδεμένη στο διαδίκτυο.',
      OFFLLINE_Step1_Title: 'Βήμα 1: Δημιουργία Πληροφοριών (Συνδεδεμένος Υπολογιστής)',
      OFFLINE_Step1_Button: 'Δημιουργία Πληροφοριών',
      OFFLINE_Step1_Label_1: 'Από Διεύθυνση:',
      OFFLINE_Step1_Label_2: 'Σημείωση: Αυτή είναι η Διεύθυνση ΑΠΟΣΤΟΛΕΑ, ΟΧΙ η Διεύθυνση. Το nonce δημιουργείται απο τον λογαριασμό προέλευσης. Αν χρησιμοποιείται αποκομμένο υπολογιστή, πρόκειται για την διεύθυνση του λογαριασμού σε cold-storage.',
      OFFLINE_Step2_Title: 'Step 2: Δημιουργία Συναλλαγής (εκτός Σύνδεσης Υπολογιστής)',
      OFFLINE_Step2_Label_1: 'Προς Διεύθυνση: ',
      OFFLINE_Step2_Label_2: 'Αξία / Ποσό για Αποστολή',
      OFFLINE_Step2_Label_3: 'Τιμή Gas ',
      OFFLINE_Step2_Label_3b: 'Εμφανίστηκε στο Βήμα 1 στον συνδεδεμένο υπολογιστή σας.',
      OFFLINE_Step2_Label_4: 'Όριο Gas ',
      OFFLINE_Step2_Label_4b: '21000 είναι το προεπιλεγμένο όριο gas. When you send contracts or add\'l data, this may need to be different. Any unused gas will be returned to you.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Εμφανίστηκε στο Βήμα 1 στον συνδεδεμένο υπολογιστή σας.',
      OFFLINE_Step2_Label_6: 'Data',
      OFFLINE_Step2_Label_6b: 'Αυτό είναι προαιρετικό. Data συνήθως χρησιμοποιούνται όταν αποστέλλονται συναλλαγές σε contracts.',
      OFFLINE_Step2_Label_7: 'Εισαγωγή / Επιλογή του Ιδιωτικού Κλειδιού / JSON.',
      OFFLINE_Step3_Title: 'Βήμα 3: Δημοσίευση Συναλλαγής (Συνδεδεμένος Υπολογιστής)',
      OFFLINE_Step3_Label_1: 'Επικολλήστε την υπογεγραμμένη συναλλαγή εδώ και πατήστε το κουμπί "ΑΠΟΣΤΟΛΗ ΣΥΝΑΛΛΑΓΗΣ".',

      /* DAO */
      DAO_Desc: 'Χρησιμοποιείστε αυτήν την καρτέλα για να κάνετε Ανάληψη των DAO Tokens σας ως ETH. Αν επιθυμείτε να αποστείλετε DAO, παρακαλώ χρησιμοποιήστε την καρτέλα Αποστολή Tokens.',
      DAO_Inst: 'Ναι. Απλά πατάτε το μεγάλο κόκκινο κουμπί. Είναι τόσο απλό.',
      DAO_Warning: 'Αν δέχεστε σφάλμα "Aνεπαρκές υπόλοιπο για gas", θα πρέπει να έχετε ένα μικρό ποσό ether στον λογαριασμό σας έτσι ώστε να καλύψετε το κόστος του gas. Προσθέστε 0.001 ether στον λογαριασμό αυτό και προσπαθήστε ξανά. ',
      DAOModal_Title: 'Απλά για σιγουριά...',

      /* Digix */
      DGD_Desc: 'Διεκδικήστε τα DigixDAO (DGD) tokens & badges σας. Για να τα διεκδικήσετε, πρέπει να είχατε συμμετάσχει στην προαγορά tokens στις 30/31 Μαρτίου του 2016. Αν επιθυμείτε να αποστείλετε DGD, παρακαλώ χρησιμοποιήστε την καρτέλα Αποστολή Tokens.',
      DGD_Label_1: 'Εκτιμώμενη Κατανάλωση Εξόδων:',
      DGD_Label_2: 'Παρεχόμενα Μέγιστα Έξοδα:',
      DGD_Label_3: 'Τιμή Gas:',
      DGD_Generate: 'Δημιουργία Διεκδίκησης',
      DGD_Content: 'Πρόκειται να διεκδικήσετε τα DGD Tokens σας.',

      /* My Wallet */
      MYWAL_Nick: 'Ψευδώνυμο Πορτοφολιού',
      MYWAL_Address: 'Διεύθυνση Πορτοφολιού',
      MYWAL_Bal: 'Υπόλοιπο',
      MYWAL_Edit: 'Επεξεργασία',
      MYWAL_View: 'Προβολή',
      MYWAL_Remove: 'Αφαίρεση',
      MYWAL_RemoveWal: 'Αφαίρεση Πορτοφολιού:',
      MYWAL_WatchOnly: 'Οι Μόνο-προς-παρακολούθηση-Λογαριασμοί',
      MYWAL_Viewing: 'Προβάλλεται το Πορτοφόλι: ',
      MYWAL_Hide: 'Απόκρυψη Πληροφοριών Πορτοφολιού',
      MYWAL_Edit: 'Επεξεργασία Πορτοφολιού: ',
      MYWAL_Name: 'Όνομα Πορτοφολιού',
      MYWAL_Content_1: 'Προσοχή! Πρόκειται να αφαιρέσετε το πορτοφόλι σας.',
      MYWAL_Content_2: 'Σιγουρευτείτε ότι έχετε **αποθηκεύσει το αρχέιο Keystore/JSON και τον κωδικό** του πορτοφολιού αυτού πριν το αφαιρέσετε.',
      MYWAL_Content_3: 'Αν θέλετε να χρησιμοποιήσετε το ποροτοφόλι αυτό με το MyEtherWalletCX στο μέλλον, θα χρειαστεί να το ξαναπροσθέσετε χειροκίνητα χρησιμοποιώντας το Ιδιωτικό Κλειδί/JSON και τον κωδικό.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Αυτό σας επιτρέπει να κατεβάσετε διαφορετικές εκδοχές των ιδιωτικών κλειδιών σας και να επανεκτυπώσετε το χάρτινο πορτοφόλι σας. Ίσως επιθυμείτε να το κάνετε προκειμένου να [εισάγετε τον Λογαριασμό σας στο Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Αν επιθυμείτε να ελέγξετε το υπόλοιπό σας, συνιστούμε να χρησιμοποιήσετε ένα εργαλείο εξερεύνησης blockchain όπως το [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Αυτό σας επιτρέπει να κατεβάσετε διαφορετικές εκδοχές των ιδιωτικών κλειδιών σας και να επανεκτυπώσετε το χάρτινο πορτοφόλι σας.',
      VIEWWALLET_SuccessMsg: 'Επιτυχία! Εδώ είναι οι πληροφορίες για το πορτοφόλι σας.',

      /* CX */
      CX_error_1: 'Δεν έχετε αποθηκευμένα πορτοφόλια. Κάντε κλικ στο ["Προσθήκη Πορτοφολιού"](/cx-wallet.html#add-wallet) για να προσθεσετε ένα!',
      CX_quicksend: 'ΤαχυΑποστολή',

      /* Error Messages */
      ERROR_1: 'Παρακαλώ εισάγετε έγκυρο ποσό.',
      ERROR_2: 'Ο κωδικός σας πρέπει να αποτελείται απο τουλάχιστον 9 χαρακτήρες. Παρακαλώ σιγουρευτείτε ότι είναι ισχυρός κωδικός. ',
      ERROR_3: 'Συγγνώμη! Δεν αναγνωρίζουμε αυτού του είδους αρχεία πορτοφολιού ',
      ERROR_4: 'Αυτό δεν είναι έγκυρο αρχείο πορτοφολιού. ',
      ERROR_5: 'Αυτή η μονάδα δεν υπάρχει, παρακαλώ χρησιμοποιήστε μία απο τις ακόλουθες μονάδες:',
      ERROR_6: 'Λάθος Διεύθυνση. ',
      ERROR_7: 'Λάθος κωδικός. ',
      ERROR_8: 'Λάθος ποσό. ',
      ERROR_9: 'Λάθος όριο gas. ',
      ERROR_10: 'Λάθος data value. ',
      ERROR_11: 'Λάθος ποσό gas. ',
      ERROR_12: 'Λάθος nonce. ',
      ERROR_13: 'Λάθος υπογεγραμμένη συναλλαγή. ',
      ERROR_14: 'Υπάρχει ήδη πορτοφόλι με αυτό το ψευδώνυμο. ',
      ERROR_15: 'Δεν βρέθηκε πορτοφόλι. ',
      ERROR_16: 'Φαίνετα να μην υπάρχει ακόμη πρόταση με αυτό το ID ή υπήρξε σφάλμα κατά την ανάγνωση της πρότασης αυτής. ',
      ERROR_17: 'Υπάρχει ήδη αποθηκευμένο πορτοφόλι με αυτή την διεύθυνση. Παρακαλώ ελέγξτε την σελίδα πορτοφολιών σας. ',
      ERROR_18: 'Πρέπει να έχετε τουλάχιστον 0.001 ETH στον λογαριασμό σας για να καλύψετε το κόστος του gas. Παρακαλώ προσθέστε μερικά ether και δοκιμάστε ξανά. ',
      ERROR_19: 'Όλο το gas θα είχε δαπανηθεί στην συναλλαγή αυτή. Αυτό σημαίνει ότι έχετε ήδη ψηφίσει στην πρόταση αυτή ή ότι η περίοδος συζήτησης έχει λήξει.',
      ERROR_20: 'Λάθος σύμβολο',
      SUCCESS_1: 'Έγκυρη διεύθυνση',
      SUCCESS_2: 'Το πορτοφόλι αποκρυπτογραφήθηκε επιτυχώς',
      SUCCESS_3: 'Η συναλλαγή υποβλήθηκε. TX ID: ',
      SUCCESS_4: 'Το πορτοφόλι σας προστέθηκε επιτυχώς: ',
      SUCCESS_5: 'Έχετε ψηφίσει επιτυχώς. Ευχαριστούμε για την ενεργή σας συμμετοχή στο DAO.',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Ευχαριστούμε τους μεταφραστές μας: ',
      TranslatorName_1: '[VitalikFanBoy#117](https://www.myetherwallet.com/?gaslimit=21000&to=0x245f27796a44d7e3d30654ed62850ff09ee85656&value=1.0#send-transaction) · ',
      TranslatorAddr_1: '0x245f27796a44d7e3d30654ed62850ff09ee85656',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: 'LefterisJP  · ',
      TranslatorAddr_2: '',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: '[Nikos Vavoulas](https://www.myetherwallet.com/?gaslimit=21000&to=0x062711C89Bd46E9765CfF0b743Cb83a9dBA2d2d2&value=1.0#send-transaction) · ',
      TranslatorAddr_3: '0x062711C89Bd46E9765CfF0b743Cb83a9dBA2d2d2',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) Είμαι νέος χρήστης. Τι κάνω?',
      HELP_0_Desc_1: 'Το MyEtherWallet σας δίνει την δυνατότητα να δημιουργήσετε νέα πορτοφόλια ώστε να μπορείτε να αποθηκεύσετε το Ether σας μόνοι σας, και όχι σε κάποιο ανταλλακτήριο (exchange provider). Αυτή η διαδικασία συμβαίνει εξ\'ολοκλήρου στον υπολογιστή σας, και όχι στους servers μας. Γι\'αυτό, όταν δημιουργείτε ένα νέο πορτοφόλι, **εσείς είστε υπεύθυνοι να κρατήσετε αντίγραφα ασφαλείας**.',
      HELP_0_Desc_2: 'Δημιουργήστε ένα νέο πορτοφόλι.',
      HELP_0_Desc_3: 'Κρατήστε αντίγραφο ασφαλείας ποτοφολιού.',
      HELP_0_Desc_4: 'Επιβεβαιώστε ότι έχετε πρόσβαση στο νέο αυτό πορτοφόλι και ότι αποθηκεύσατε σωστά όλες τις απαραίτητες πληροφορίες.',
      HELP_0_Desc_5: 'Μεταφέρετε Ether στο νέο αυτό πορτοφόλι.',

      HELP_1_Title: '1) Πως φτιάχνω ένα νέο πορτοφόλι? ',
      HELP_1_Desc_1: 'Πηγαίνετε στην σελίδα "Δημιουργία Πορτοφολιού".',
      HELP_1_Desc_2: 'Πηγαίνετε στην σελίδα "Προσθήκη Πορτοφολιού" & επιλέξτε "Δημιουργία Νέου Πορτοφολιού"',
      HELP_1_Desc_3: 'Οληκτρολογήστε ένα δυνατό συνθηματικό (password). Αν νομίζετε ότι μπορεί να το ξεχάσετε, αποθηκεύστε το κάπου που να είναι ασφαλές. Θα χρειαστείτε αυτό το password για τις εξερχόμενες συναλλαγές σας.',
      HELP_1_Desc_4: 'Κάντε κλικ στο "ΔΗΜΙΟΥΡΓΙΑ".',
      HELP_1_Desc_5: 'Το πορτοφόλι σας δημιοθργήθηκε με επιτυχία.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (μη κρυπτογραφημένο).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = el;
  }, {}], 37: [function (require, module, exports) {
    // English
    'use strict';

    var en = function () {};
    en.code = 'en';
    en.data = {

      /* Navigation*/
      NAV_YourWallets: 'Your Wallets',
      NAV_AddWallet: 'Add Wallet',
      NAV_GenerateWallet: 'Generate Wallet',
      NAV_BulkGenerate: 'Bulk Generate',
      NAV_SendEther: 'Send Ether',
      NAV_SendTokens: 'Send Tokens',
      NAV_Offline: 'Send Offline',
      NAV_WithdrawDAO: 'Withdraw DAO',
      DAO_TitleLong: 'Withdraw Your Dao Tokens For ETH',
      NAV_ClaimDGD: 'Claim DGD',
      DGD_TitleLong: 'Claim Your DGD Tokens',
      NAV_DeployContract: 'Deploy Contract',
      NAV_MyWallets: 'My Wallets',
      NAV_ViewWallet: 'View Wallet Info',
      NAV_Help: 'Help',
      NAV_Contact: 'Contact',

      /* General */
      x_Address: 'Your Address',
      x_AddessDesc: 'You may know this as your "Account #" or your "Public Key". It is what you send people so they can send you ether. That icon is an easy way to recognize your address.',
      x_Cancel: 'Cancel',
      x_CSV: 'CSV file (unencrypted)',
      x_Download: 'Download',
      x_Json: 'JSON File (unencrypted)',
      x_JsonDesc: 'This is the unencrypted, JSON format of your private key. This means you do not need the password but anyone who finds your JSON can access your wallet & Ether without the password.',
      x_Keystore: 'Keystore/JSON File (Recommended · Encrypted · Mist/Geth Format)',
      x_Keystore2: 'Keystore / JSON File',
      x_KeystoreDesc: 'This Keystore/JSON file matches the format used by Mist & Geth so you can easily import it in the future. It is the recommended file to download and back up.',
      x_Password: 'Password',
      x_Print: 'Print Paper Wallet',
      x_PrintDesc: 'ProTip: Click print and save this as a PDF, even if you do not own a printer!',
      x_PrintShort: 'Print',
      x_PrivKey: 'Private Key (unencrypted)',
      x_PrivKey2: 'Private Key',
      x_PrivKeyDesc: 'This is the unencrypted text version of your private key, meaning no password is necessary. If someone were to find your unencrypted private key, they could access your wallet without a password. For this reason, encrypted versions are typically recommended.',
      x_Save: 'Save',
      x_TXT: 'TXT file (unencrypted)',
      x_Wallet: 'Wallet',

      /* Header */
      MEW_Warning_1: 'Always check the URL before accessing your wallet or creating a new wallet. Beware of phishing sites!',
      CX_Warning_1: 'Make sure you have **external backups** of any wallets you store here. Many things could happen that would cause you to lose the data in this Chrome Extension, including uninstalling and reinstalling the extension. This extension is a way to easily access your wallets, **not** a way to back them up.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet',
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extension',

      /* Footer */
      FOOTER_1: 'An open source, javascript, client-side tool for generating Ethereum Wallets & sending transactions.',
      FOOTER_1b: 'Created by',
      FOOTER_2: 'Donations greatly appreciated:',
      FOOTER_3: 'Client-side wallet generation by',
      FOOTER_4: 'Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Account Information: ',
      sidebar_AccountAddr: 'Account Address: ',
      sidebar_AccountBal: 'Account Balance: ',
      sidebar_TokenBal: 'Token Balances: ',
      sidebar_Equiv: 'Equivalent Values: ',
      sidebar_TransHistory: 'Transaction History: ',
      sidebar_DGDBal: 'DGD Crowdsale Information:',
      sidebar_donation: 'MyEtherWallet is a free, open-source service dedicated to your privacy and security. The more donations we receive, the more time we spend creating new features, listening to your feedback, and giving you what you want. We are just two people trying to change the world. Help us?',
      sidebar_donate: 'Donate',
      sidebar_thanks: 'THANK YOU!!!',

      /* Decrypt Panel */
      decrypt_Access: 'How would you like to access your wallet?',
      decrypt_Title: 'Select the format of your private key:',
      decrypt_Select: 'Select a Wallet:',

      /* Add Wallet */
      ADD_Label_1: 'What would you like to do?',
      ADD_Radio_1: 'Generate New Wallet',
      ADD_Radio_2: 'Select Your Wallet File (Keystore / JSON)',
      ADD_Radio_2_alt: 'Select Your Wallet File: ',
      ADD_Radio_2_short: 'SELECT WALLET FILE...',
      ADD_Radio_3: 'Paste/Type Your Private Key ',
      ADD_Radio_4: 'Add an Account to Watch',
      ADD_Label_2: 'Create a Nickname:',
      ADD_Label_3: 'Your wallet is encrypted. Please enter the password: ',
      ADD_Label_4: 'Add an Account to Watch',
      ADD_Warning_1: 'You can add any account to "watch" on the wallets tab without uploading a private key. This does ** not ** mean you have access to this wallet, nor can you transfer Ether from it.',
      ADD_Label_5: 'Enter the Address: ',
      ADD_Label_6: 'Unlock your Wallet: ',
      ADD_Label_6_short: 'Unlock',
      ADD_Label_7: 'Add Account',

      /* Generate Wallets */
      GEN_desc: 'If you want to generate multiple wallets, you can do so here: ',
      GEN_Label_1: 'Enter a strong password (at least 9 characters)',
      GEN_Placeholder_1: 'Do NOT forget to save this!',
      GEN_SuccessMsg: 'Success! Your wallet has been generated.',
      GEN_Warning: '**You need your Keystore/JSON File & password or Private Key** to access this wallet in the future. Please save & back it up externally! There is no way to recover a wallet if you do not save it. Read the [help page](https://www.myetherwallet.com/#help) for instructions.',
      GEN_Label_2: 'Save your Keystore/JSON or Private Key. Don\'t forget your password above.',
      GEN_Label_3: 'Save Your Address.',
      GEN_Label_4: 'Print your paper wallet, or store a QR code version. (optional)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Number of Wallets To Generate',
      BULK_Label_2: 'Generate Wallets',
      BULK_SuccessMsg: 'Success! Your wallets have been generated.',

      /* Sending Ether and Tokens */
      SEND_addr: 'To Address: ',
      SEND_amount: 'Amount to Send: ',
      SEND_amount_short: 'Amount',
      SEND_custom: 'Custom',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Send Entire Balance',
      SEND_generate: 'Generate Transaction',
      SEND_raw: 'Raw Transaction',
      SEND_signed: 'Signed Transaction',
      SEND_trans: 'Send Transaction',
      SENDModal_Title: 'Warning! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'You are about to send',
      SENDModal_Content_2: 'to address',
      SENDModal_Content_3: 'Are you sure you want to do this?',
      SENDModal_Content_4: 'NOTE: If you encounter an error, you most likely need to add ether to your account to cover the gas cost of sending tokens. Gas is paid in ether.',
      SENDModal_No: 'No, get me out of here!',
      SENDModal_Yes: 'Yes, I am sure! Make transaction.',

      /* Tokens */
      TOKEN_Addr: 'Address: ',
      TOKEN_Symbol: 'Token Symbol: ',
      TOKEN_Dec: 'Decimals: ',

      /* Send Transaction */
      TRANS_desc: 'If you want to send Tokens, please use the "Send Token" page instead.',
      TRANS_warning: 'If you are using the "Only ETH" or "Only ETC" Functions you are sending via a contract. Some services have issues accepting these transactions. Read more.',
      TRANS_standard: 'ETH (Standard Transaction)',
      TRANS_eth: 'Only ETH',
      TRANS_etc: 'Only ETC',
      TRANS_advanced: '+Advanced: Add Data ',
      TRANS_data: ' Data: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'A standard transaction using 21000 gas will cost 0.000441 ETH. We use a slightly-above-minimum gas price of 0.000000021 ETH to ensure it gets mined quickly. We do not take a transaction fee.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Only ETH" and "Only ETC" Transactions',
      TRANSModal_Content_0: 'A note about the different transactions and different services:',
      TRANSModal_Content_1: '**ETH (Standard Transaction): ** This generates a default transaction directly from one address to another. It has a default gas of 21000. It is likely that any ETH sent via this method will be replayed onto the ETC chain.',
      TRANSModal_Content_2: '**Only ETH: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETH** chain.',
      TRANSModal_Content_3: '**Only ETC: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETC** chain. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Only send via Standard Transaction. If you send via the "Only" contracts, you will need to reach out to their support staff to manually add your balance or refund you. [You can try Shapeshift\'s "split" tool as well.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** No known issues. Use whatever.',
      TRANSModal_Yes: 'Sweet, I get it now.',
      TRANSModal_No: 'Oh gosh, I\'m more confused. Help me.',

      /* Offline Transaction */
      OFFLINE_Title: 'Generate & Send Offline Transaction',
      OFFLINE_Desc: 'Generating offline transactions can be done in three steps. You will complete steps 1 and 3 on an online computer, and step 2 on an offline/airgapped computer. This ensures your private keys do not touch an internet-connected device.',
      OFFLLINE_Step1_Title: 'Step 1: Generate Information (Online Computer)',
      OFFLINE_Step1_Button: 'Generate Information',
      OFFLINE_Step1_Label_1: 'From Address: ',
      OFFLINE_Step1_Label_2: 'Note: This is the FROM address, not the TO address. Nonce is generated from the originating account. If using an airgapped computer, it would be the address of the cold-storage account.',
      OFFLINE_Step2_Title: 'Step 2: Generate Transaction (Offline Computer)',
      OFFLINE_Step2_Label_1: 'To Address: ',
      OFFLINE_Step2_Label_2: 'Value / Amount to Send',
      OFFLINE_Step2_Label_3: 'Gas Price ',
      OFFLINE_Step2_Label_3b: 'This was displayed in Step 1 on your online computer.',
      OFFLINE_Step2_Label_4: 'Gas Limit ',
      OFFLINE_Step2_Label_4b: '21000 is the default gas limit. When you send contracts or add\'l data, this may need to be different. Any unused gas will be returned to you.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'This was displayed in Step 1 on your online computer.',
      OFFLINE_Step2_Label_6: 'Data',
      OFFLINE_Step2_Label_6b: 'This is optional. Data is often used when you send transactions to contracts.',
      OFFLINE_Step2_Label_7: 'Enter / Select your Private Key / JSON.',
      OFFLINE_Step3_Title: 'Step 3: Send / Publish Transaction (Online Computer)',
      OFFLINE_Step3_Label_1: 'Paste the signed transaction from Step 2 here and press the "SEND TRANSACTION" button.',

      /* DAO */
      DAO_bal1: 'at block 1,919,999',
      DAO_bal2: 'current',
      DAO_TitleETH: 'Withdraw DAO For ETH',
      DAO_TitleETC: 'Withdraw DAO For ETC',
      DAO_ETC_Label_1: 'What address do you want your ETC to be sent to?',
      DAO_ETC_Label_2: 'The "White Hat Group" has been working tirelessly to get your ETC back to you. You can say "thank you" by donating a percentage of your withdrawal, if you choose to. ',
      DAO_Desc: 'Use this tab to Withdraw your DAO Tokens for ETH **& ETC**. If you wish to send DAO, please use the Send Tokens Tab.',
      DAO_Inst: 'Yes. Just push the big red button. It\'s that easy.',
      DAO_Warning: 'If you are getting an "Insufficient balance for gas" error, you must have a small amount of ether in your account in order to cover the cost of gas. Add 0.001 ETH to this account and try again. ',
      DAOModal_Title: 'Just making sure...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'You are about to withdraw',
      DAOModal_2: 'DAO Tokens to',
      DAOModal_3: 'for', // "in return for"

      /* Digix */
      DGD_Desc: 'Claim your DigixDAO (DGD) tokens & badges. In order to claim, you must have participated in the token sale on March 30th/31st, 2016.  If you wish to send DGD, please use the Send Tokens Tab.',
      DGD_Label_1: 'Estimated fee consumption:',
      DGD_Label_2: 'Provided Maximum Fee:',
      DGD_Label_3: 'Gas Price:',
      DGD_Generate: 'Generate Claim',
      DGD_Content: 'You are about to claim your DGD Tokens.',

      /* Deploy Contracts */
      DEP_generate: 'Generate Bytecode',
      DEP_generated: 'Generated Bytecode',
      DEP_signtx: 'Sign Transaction',
      DEP_interface: 'Generated Interface',

      /* My Wallet */
      MYWAL_Nick: 'Wallet Nickname',
      MYWAL_Address: 'Wallet Address',
      MYWAL_Bal: 'Balance',
      MYWAL_Edit: 'Edit',
      MYWAL_View: 'View',
      MYWAL_Remove: 'Remove',
      MYWAL_RemoveWal: 'Remove Wallet:',
      MYWAL_WatchOnly: 'Your Watch-Only Accounts',
      MYWAL_Viewing: 'Viewing Wallet: ',
      MYWAL_Hide: 'Hide Wallet Info',
      MYWAL_Edit_2: 'Edit Wallet: ',
      MYWAL_Name: 'Wallet Name',
      MYWAL_Content_1: 'Warning! You are about to remove your wallet: ',
      MYWAL_Content_2: 'Be sure you have **saved the private key and/or Keystore File and the password** before you remove it.',
      MYWAL_Content_3: 'If you want to use this wallet with your MyEtherWallet CX in the future, you will need to manually re-add it using the private key/JSON and password.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'This allows you to download different versions of private keys and re-print your paper wallet. You may want to do this in order to [import your account into Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). If you want to check your balance, we recommend using a blockchain explorer like [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'This allows you to download different versions of private keys and re-print your paper wallet. ',
      VIEWWALLET_SuccessMsg: 'Success! Here are your wallet details.',

      /* Chrome Extension */
      CX_error_1: 'You don\'t have any wallets saved. Click ["Add Wallet"](/cx-wallet.html#add-wallet) to add one!',
      CX_quicksend: 'QuickSend', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Please enter valid amount.',
      ERROR_2: 'Your password must be at least 9 characters. Please ensure it is a strong password. ',
      ERROR_3: 'Sorry! We don\'t recognize this type of wallet file. ',
      ERROR_4: 'This is not a valid wallet file. ',
      ERROR_5: 'This unit doesn\'t exists, please use the one of the following units ',
      ERROR_6: 'Invalid address. ',
      ERROR_7: 'Invalid password. ',
      ERROR_8: 'Invalid amount. ',
      ERROR_9: 'Invalid gas limit. ',
      ERROR_10: 'Invalid data value. ',
      ERROR_11: 'Invalid gas amount. ',
      ERROR_12: 'Invalid nonce. ',
      ERROR_13: 'Invalid signed transaction. ',
      ERROR_14: 'A wallet with this nickname already exists. ',
      ERROR_15: 'Wallet not found. ',
      ERROR_16: 'It doesn\'t look like a proposal with this ID exists yet or there is an error reading this proposal. ',
      ERROR_17: 'A wallet with this address already exists in storage. Please check your wallets page. ',
      ERROR_18: 'You need to have at least 0.001 ETH in your account to cover the cost of gas. Please add some ETH and try again. ',
      ERROR_19: 'All gas would be used on this transaction. This means you have already voted on this proposal or the debate period has ended.',
      ERROR_20: 'Invalid symbol',
      SUCCESS_1: 'Valid address',
      SUCCESS_2: 'Wallet successfully decrypted',
      SUCCESS_3: 'Transaction submitted. TX ID: ',
      SUCCESS_4: 'Your wallet was successfully added: ',
      SUCCESS_5: 'You have successfully voted. Thank you for being an active participant in The DAO.',
      SUCCESS_6: 'File Selected: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Invalid sender',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas price too low for acceptance',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Account does not exist or account balance too low',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: '',
      TranslatorName_1: '',
      TranslatorAddr_1: '',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = en;
  }, {}], 38: [function (require, module, exports) {
    // English
    'use strict';

    var fi = function () {};
    fi.code = 'fi';
    fi.data = {

      /* Chrome Extension */
      CX_error_1: 'You don\'t have any wallets saved. Click ["Add Wallet"](/cx-wallet.html#add-wallet) to add one!',
      CX_quicksend: 'QuickSend', // if no appropriate translation, just use "Send"

      /* Geth Error Messages */
      GETH_InvalidSender: 'Invalid sender',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas price too low for acceptance',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Account does not exist or account balance too low',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      /* Deploy Contracts */
      DEP_generate: 'Generate Bytecode',
      DEP_generated: 'Generated Bytecode',
      DEP_signtx: 'Sign Transaction',
      DEP_interface: 'Generated Interface',

      /* DAO */
      DAO_bal1: 'at block 1,919,999',
      DAO_bal2: 'current',
      DAO_TitleETH: 'Withdraw DAO For ETH',
      DAO_TitleETC: 'Withdraw DAO For ETC',
      DAO_ETC_Label_1: 'What address do you want your ETC to be sent to?',
      DAO_ETC_Label_2: 'The "White Hat Group" has been working tirelessly to get your ETC back to you. You can say "thank you" by donating a percentage of your withdrawal, if you choose to. ',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'You are about to withdraw',
      DAOModal_2: 'DAO Tokens to',
      DAOModal_3: 'for', // "in return for"

      /* Misc */
      FOOTER_1b: 'Created by',
      FOOTER_4: 'Disclaimer',
      x_Wallet: 'Wallet',
      NAV_DeployContract: 'Deploy Contract',

      /* Navigation*/
      NAV_YourWallets: 'Sinun Lompakkosi',
      NAV_AddWallet: 'Lisää Lompakko',
      NAV_GenerateWallet: 'Luo Lompakko',
      NAV_BulkGenerate: 'Massa Generoi',
      NAV_SendEther: 'Lähetä Etheriä',
      NAV_SendTokens: 'Lähetä Tokeneita',
      NAV_Offline: 'Lähetä Offlinena',
      NAV_WithdrawDAO: 'Nosta DAO',
      DAO_TitleLong: 'Muuta DAO Tokenisi ETH:iksi',
      NAV_ClaimDGD: 'Lunasta DGD',
      DGD_TitleLong: 'Lunasta DGD Tokenisi',
      NAV_DeployContract: 'Ota Käyttöön Sopimus',
      NAV_MyWallets: 'Minun Lompakkoni',
      NAV_ViewWallet: 'Tarkastele Lompakon Tietoja',
      NAV_Help: 'Apua',
      NAV_Contact: 'Yhteystiedot',

      /* General */
      x_Address: 'Sinun osoitteesi',
      x_AddessDesc: 'Saatat tuntea tämän "Tilinumeronasi" tai "Julkisena Salausavaimenasi". Tämä on se jonka jaat ihmisille, jotta he voivat lähettää sinulle ETHiä. Tuo kuvake on helppo tapa tunnistaa sinun osoitteesi.',
      x_Cancel: 'Peruuta',
      x_CSV: 'CSV tiedosto (salaamaton)',
      x_Download: 'Lataa',
      x_Json: 'JSON Tiedosto (salaamaton)',
      x_JsonDesc: 'Tämä on salaamaton JSON tiedosto yksityisestä salausavaimestasi. Tämä tarkoittaa että et tarvitse salasanaa mutta kuka tahansa joka löytää JSON tiedostosi saa pääsyn lompakkoosi ja sen sisältämään Etheriin ilman salasanaa.',
      x_Keystore: 'Avainsäilö/JSON Tiedosto (Suositeltu · Salattu · Mist/Geth Tiedostoformaatti)',
      x_Keystore2: 'Avainsäilö/JSON Tiedosto',
      x_KeystoreDesc: 'Tämä Avainsäilö / JSON tiedosto vastaa sitä tiedostoformaattia jota Mist & Geth käyttävät, joten voit helposti importata sen tulevaisuudessa. Se on suositeltu tiedostomuoto ladata ja varmuuskopioida.',
      x_Password: 'Salasana',
      x_Print: 'Tulosta Paperi Lompakko',
      x_PrintDesc: 'ProTip: Klikkaa Tulosta ja tallenna tämä PDF:nä, vaikka et omistaisikaan tulostinta!',
      x_PrintShort: 'Tulosta',
      x_PrivKey: 'Yksityinen salausavain (salaamaton)',
      x_PrivKey2: 'Yksityinen salausavain',
      x_PrivKeyDesc: 'Tämä on salaamaton versio sinun yksityisestä salausavaimestasi, tarkoittaen että salasanaa ei tarvita. Jos joku sattuisi löytämään sinun salaamattoman yksityisen salausavaimesi, he pääsisivät käsiksi sinun lompakkoosi ilman salasanaa. Tästä syystä salatut versiot ovat yleensä suositeltuja.',
      x_Save: 'Tallenna',
      x_TXT: 'TXT tiedosto (salaamaton)',
      x_Wallet: 'Lompakko',

      /* Header */
      MEW_Warning_1: 'Tarkista URL aina ennen kuin avaat lompakkosi tai luot uuden lompakon. Varo tietojen-kalastelu sivustoja!',
      CX_Warning_1: 'Varmista että sinulla on **ulkoiset varmuuskopiot** kaikista lompakoista joita säilytät täällä. Monia asioita voi tapahtua joiden seurauksena voit menettää tietoja tässä Chrome Laajennuksessa, mukaan lukien laajennuksen asennuksen poistaminen tai uudelleenasennus. Tämä laajennus on keino jolla saat helpon pääsyn lompakkoosi, **ei** keino varmuuskopioida niitä.',
      MEW_Tagline: 'Avoimen Lähdekoodin JavaScript Ether Lompakko',
      CX_Tagline: 'Avoimen Lähdekoodin JavaScript Chrome Laajennus',

      /* Footer */
      FOOTER_1: 'Avoimen lähdekoodin, javascript työkalu Ethereum lompakkojen luomista & varojen siirtoja varten.',
      FOOTER_1b: 'Luonut',
      FOOTER_2: 'Lahjoituksia arvostetaan suuresti:',
      FOOTER_3: 'Lompakon luomisen tarjoaa',
      FOOTER_4: 'Vastuuvapauslauseke / Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Tilin Tiedot: ',
      sidebar_AccountAddr: 'Tilin Osoite: ',
      sidebar_AccountBal: 'Tilin Saldo: ',
      sidebar_TokenBal: 'Tokenien Saldo: ',
      sidebar_Equiv: 'Vastaavat Arvot: ',
      sidebar_TransHistory: 'Siirto Historia',
      sidebar_DGDBal: 'DGD Joukkomyynnin Tiedot:',
      sidebar_donation: 'MyEtherWallet on ilmainen, avoimen lähdekoodin palvelu joka on omistautunut sinun yksityisyyteesi ja turvallisuuteesi. Mitä enemmän lahjoituksia me vastaanotamme, sitä enemmän aikaa me käytämme uusien toimintojen luomiseksi, kuunnellen teidän palautettanne ja antaen teille juuri sitä mitä te tahdotte. Me olemme vain kaksi ihmistä jotka koittavat muuttaa maailmaa. Auta meitä?',
      sidebar_donate: 'Lahjoita',
      sidebar_thanks: 'KIITOS!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Kuinka haluaisit saada pääsyn lompakkoosi?',
      decrypt_Title: 'Valitse yksityisen salausavaimesi muoto:',
      decrypt_Select: 'Valitse Lompakko:',

      /* Add Wallet */
      ADD_Label_1: 'Mitä tahtoisit tehdä?',
      ADD_Radio_1: 'Luo Uusi Lompakko',
      ADD_Radio_2: 'Valitse Lompakko Tiedostosi (Avainsäilö / JSON)',
      ADD_Radio_2_alt: 'Valitse Lompakko Tiedostosi: ',
      ADD_Radio_2_short: 'VALITSE LOMPAKKO TIEDOSTO...',
      ADD_Radio_3: 'Liitä/Kirjoita Yksityinen Salausavaimesi',
      ADD_Radio_4: 'Lisää Tili Jota Seurata',
      ADD_Label_2: 'Luo Kutsumanimi:',
      ADD_Label_3: 'Lompakkosi on salattu, ole hyvä ja syötä salasanasi: ',
      ADD_Label_4: 'Lisää Tili Jota Seurata',
      ADD_Warning_1: 'Voit lisätä minkä tahansa tilin jota "seurata" lompakkojen välilehdessä ilman yksityisen salausavaimesi lähettämistä. Tämä ** ei ** tarkoita että sinulla olisi pääsy tähän lompakkoon, tai että voit siirtää Etheriä siitä.',
      ADD_Label_5: 'Syötä Osoite: ',
      ADD_Label_6: 'Avaa Sinun Lompakkosi',
      ADD_Label_6_short: 'Avaa',
      ADD_Label_7: 'Lisää Tili',

      /* Generate Wallets */
      GEN_desc: 'Jos tahdot luoda useita lompakoita, voit tehdä sen täältä: ',
      GEN_Label_1: 'Syötä vahva salasana (vähintään 9 merkkiä)',
      GEN_Placeholder_1: 'ÄLÄ unohda tallentaa tätä!',
      GEN_SuccessMsg: 'Onnistui! Sinun lompakkosi on luotu.',
      GEN_Warning: '**Tarvitset Avainsäilö/JSON Tiedostosi & salasanan tai Yksityisen salausavaimesi** saadaksesi pääsyn tähän lompakkoon tulevaisuudessa. Ole hyvä ja tallenna sekä varmuuskopioi se ulkoisesti! Ei ole mitään keinoa palauttaa sitä jos et tallenna sitä. Voit lukea ohjeet [Apua sivulta](https://www.myetherwallet.com/#help).',
      GEN_Label_2: 'Tallenna Avainsäilö/JSON tai Yksityinen salausavaimesi. Älä unohda yllä olevaa salasanaasi.',
      GEN_Label_3: 'Tallenna Osoitteesi.',
      GEN_Label_4: 'Tulosta paperi lompakkosi, tai säilö QR koodi versio. (valinnainen)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Kuinka Monta Lompakkoa Luodaan',
      BULK_Label_2: 'Luo Lompakot',
      BULK_SuccessMsg: 'Onnistui! Sinun lompakkosi on luotu.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Osoitteeseen: ',
      SEND_amount: 'Summa Joka Lähetetään: ',
      SEND_amount_short: 'Summa',
      SEND_custom: 'Mukautettu',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Lähetä Koko Saldo',
      SEND_generate: 'Luo Allekirjoitettu Siirto',
      SEND_raw: 'Käsittelemätön Siirto',
      SEND_signed: 'Allekirjoitettu Siirto',
      SEND_trans: 'Lähetä Siirto',
      SENDModal_Title: 'Varoitus! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Olet lähettämässä',
      SENDModal_Content_2: 'osoitteeseen',
      SENDModal_Content_3: 'Oletko varma että haluat tehdä tämän?',
      SENDModal_Content_4: 'HUOMAUTUS: Jos kohtaat virheen, sinun täytyy todennäköisesti lisätä ETHiä tilillesi kattaaksesi siirron vaatiman gasin hinnan. Gas maksetaan ETHeinä.',
      SENDModal_No: 'En, vie minut pois täältä!',
      SENDModal_Yes: 'Kyllä, olen varma! Toteuta siirto.',

      /* Tokens */
      TOKEN_Addr: 'Osoite: ',
      TOKEN_Symbol: 'Token Tunnus: ',
      TOKEN_Dec: 'Desimaalit: ',

      /* Send Transaction */
      TRANS_desc: 'Jos haluat lähettää Tokeneita, ole hyvä ja käytä "Lähetä Tokeneita" sivua.',
      TRANS_warning: 'Jos käytät "Vain ETH" tai "Vain ETC" Toimintoja, niin lähetät sopimuksen kautta. Joillakin palveluilla on vaikeuksia hyväksyä näitä siirtoja. Lue lisää.',
      TRANS_standard: 'ETH (Tavallinen Siirto)',
      TRANS_eth: 'Vain ETH',
      TRANS_etc: 'Vain ETC',
      TRANS_advanced: '+Edistynyt: Lisää Tietoja ',
      TRANS_data: ' Tiedot: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Tavallinen siirto käyttäen 21000 gasia maksaa 0.000441 ETHiä. Me käytämme hieman-yli-minimin gasin hintaa 0.000000021 ETHiä varmistaaksemme että se louhitaan nopeasti. Me emme veloita siirto maksua.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Vain ETH" ja "Vain ETC" Siirrot',
      TRANSModal_Content_0: 'Huomautus erilaisista siirroista ja eri palveluista:',
      TRANSModal_Content_1: '**ETH (Tavallinen Siirto): ** Tämä luo oletusarvoisen siirron osoitteesta toiseen. Siinä on oletus gasina 21000. On todennäköistä että kaikki ETH joka lähetetään tällä tavalla, toistetaan ETC ketjussa.',
      TRANSModal_Content_2: '**Vain ETH: ** Tämä lähettää [Timon Rappin toiston suojaus sopimuksen kautta (kuten VB on suositellut)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) niin että sinä lähetät vain **ETH** ketjussa.',
      TRANSModal_Content_3: '**Only ETC: ** Tämä lähettää [Timon Rappin toiston suojaus sopimuksen kautta (kuten VB on suositellut)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) niin että sinä lähetät vain **ETC** ketjussa. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Lähetä ainoastaan käyttäen Tavallista Siirtoa. Jos lähetät käyttäen "Vain" sopimuksia, sinun täytyy olla yhteydessä heidän asiakastukensa henkilöstöön jotta he joko manuaalisesti lisäävät sinun saldosi tai palauttavat rahasi. [Voit kokeilla myös ShapeShiftin "split" työkalua.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Ei tunnettuja ongelmia. Käytä mitä vain.',
      TRANSModal_Yes: 'Siistiä, nyt ymmärrän.',
      TRANSModal_No: 'Voi ei, olen entistä enemmän hämilläni. Auttakaa minua.',

      /* Offline Transaction */
      OFFLINE_Title: 'Luo ja Lähetä Offline Siirto',
      OFFLINE_Desc: 'Offline siirtojen luonti voidaan tehdä kolmella eri vaiheella. Teet vaiheet 1 ja 3 käyttäen verkkoon yhdistettyä (online) tietokonetta, ja vaiheen 2 käyttäen offline/airgappattua tietokonetta. Tämä varmistaa ettei sinun yksityinen salausavaimesi ole kosketuksissa internettiin yhdistetyn laitteen kanssa.',
      OFFLLINE_Step1_Title: 'Vaihe 1: Luo Tiedot (Online Tietokone)',
      OFFLINE_Step1_Button: 'Luo Tiedot',
      OFFLINE_Step1_Label_1: 'Osoitteesta: ',
      OFFLINE_Step1_Label_2: 'Huomautus: Tämä on MISTÄ osoitteesta, ei MIHIN osoitteeseen. Nonce luodaan osoitteesta josta siirto on peräisin. Jos käytetään airgappattua tietokonetta, se olisi kylmä-varasto tilin osoite.',
      OFFLINE_Step2_Title: 'Vaihe 2: Luo Siirto (Offline Tietokone)',
      OFFLINE_Step2_Label_1: 'Osoitteeseen: ',
      OFFLINE_Step2_Label_2: 'Arvo / Määrä Joka Lähetetään',
      OFFLINE_Step2_Label_3: 'Gasin hinta ',
      OFFLINE_Step2_Label_3b: 'Tämä näytettiin kohdassa Vaihe 1 sinun verkkoon yhdistetyssä tietokoneessasi.',
      OFFLINE_Step2_Label_4: 'Gas Raja ',
      OFFLINE_Step2_Label_4b: '21000 on oletusarvoinen gas raja. Kun lähetät sopimuksiin tai lisäät tietoa, saattaa tämä määrä joutua olemaan eri. Kaikki käyttämätön gas palautetaan sinulle.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Tämä näytettiin kohdassa Vaihe 1 sinun verkkoon yhdistetyssä tietokoneessasi.',
      OFFLINE_Step2_Label_6: 'Tiedot',
      OFFLINE_Step2_Label_6b: 'Tämä on valinnainen. Tietoja käytetään usein kun varoja lähetetään sopimuksiin.',
      OFFLINE_Step2_Label_7: 'Syötä / Valitse Yksityinen salausavaimesi / JSON.',
      OFFLINE_Step3_Title: 'Vaihe 3: Lähetä / Julkaise Siirto (Verkkoon yhdistetty (online) tietokone)',
      OFFLINE_Step3_Label_1: 'Liitä allekirjoitettu siirto Vaiheesta 2 tähän ja paina "LÄHETÄ SIIRTO" nappia.',

      /* DAO */
      DAO_bal1: 'lohkossa 1,919,999',
      DAO_bal2: 'tällä hetkellä',
      DAO_TitleETH: 'Nosta DAO ETHeinä',
      DAO_TitleETC: 'Nosta DAO ETCeinä',
      DAO_ETC_Label_1: 'Mihin osoitteeseen haluat että ETC lähetetään?',
      DAO_ETC_Label_2: '"White Hat Group" on työskennellyt väsymättömästi saadakseen ETCsi takaisin sinulle. Voit sanoa "kiitos" lahjoittamalla prosentuaalisen osuuden nostostasi, mikäli niin haluat. ',
      DAO_Desc: 'Käytä tätä välilehteä muuttaaksesi DAO Tokenisi ETHiksi. Mikäli haluat lähettää DAO:ta, ole hyvä ja käytä Lähetä Tokeneita välilehteä.',
      DAO_Inst: 'Kyllä. Paina vain isoa punaista nappia. Se on niin helppoa.',
      DAO_Warning: 'Jos sinulla tulee "Riittämätön saldo gasille" virhe, sinulla täytyy olla pieni määrä ETHiä tililläsi kattaaksesi gasin hinnan. Lisää .01 ETHiä tälle tilille ja koita uudestaan. ',
      DAOModal_Title: 'Varmistetaan vain...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Olet nostamassa',
      DAOModal_2: 'DAO Tokenia',
      DAOModal_3: 'vaihdossa', // "in return for"

      /* Digix */
      DGD_Desc: 'Lunasta DigixDAO (DGD) tokenisi & badgesi. Lunastaaksesi, sinun on täytynyt osallistua tokenien myyntiin Maaliskuun 30/31 päivänä, 2016.  Jos haluat lähettää DGDtä, ole hyvä ja käytä Lähetä Tokeneita välilehteä.',
      DGD_Label_1: 'Arvioitu kulutus maksu:',
      DGD_Label_2: 'Annettu Maksimi Maksu:',
      DGD_Label_3: 'Gas Hinta:',
      DGD_Generate: 'Luo Lunastus',
      DGD_Content: 'Olet lunastamassa DGD Tokenisi.',

      /* Deploy Contracts */
      DEP_generate: 'Generoi Bytecode',
      DEP_generated: 'Generoitu Bytecode',
      DEP_signtx: 'Allekirjoita Siirto',
      DEP_interface: 'Generoitu Rajapinta',

      /* My Wallet */
      MYWAL_Nick: 'Lompakon Kutsumanimi',
      MYWAL_Address: 'Lompakon Osoite',
      MYWAL_Bal: 'Saldo',
      MYWAL_Edit: 'Muokkaa',
      MYWAL_View: 'Katso',
      MYWAL_Remove: 'Poista',
      MYWAL_RemoveWal: 'Poista Lompakko:',
      MYWAL_WatchOnly: 'Sinun Seuraa-Ainoastaan Tilisi',
      MYWAL_Viewing: 'Tarkastellaan Lompakkoa: ',
      MYWAL_Hide: 'Piilota Lompakon Tiedot',
      MYWAL_Edit_2: 'Muokkaa Lompakkoa: ',
      MYWAL_Name: 'Lompakon Nimi',
      MYWAL_Content_1: 'Varoitus! Olet poistamassa lompakkoasi.',
      MYWAL_Content_2: 'Varmista että olet **tallentanut tähän lompakkoon liittyvät yksityisen salausavaimesi/JSON tiedostosi ja salasanasi** ennen kuin poistat sen.',
      MYWAL_Content_3: 'Jos tahdot käyttää tätä lompakkoa MyEtherWallet CX:si kanssa tulevaisuudessa, sinun täytyy manuaalisesti uudelleen-lisätä se käyttäen yksityistä salausavaintasi/JSONia ja salasanaa.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Tämä antaa sinun ladata eri versiota yksityisistä salausavaimistasi ja uudelleen-tulostaa paperi lompakkosi. Saatat tahtoa tehdä tämän [tuodaksesi sinun tilisi Gethiin/Mistiin](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Jos haluat tarkistaa saldosi, me suosittelemme käyttämään blockchain exploreria kuten [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Tämä antaa sinun ladata eri versiota yksityisistä salausavaimistasi ja uudelleen-tulostaa paperi lompakkosi. ',
      VIEWWALLET_SuccessMsg: 'Onnistui! Tässä ovat lompakkosi yksityiskohdat.',

      /* Chrome Extension */
      CX_error_1: 'Sinulla ei ole lompakkoja tallennettuna. Klikkaa ["Lisää Lompakko"](/cx-wallet.html#add-wallet) lisätäksesi!',
      CX_quicksend: 'PikaLähetä', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Ole hyvä ja syötä kelpaava summa.',
      ERROR_2: 'Salasanasi pitää olla vähintään 9 merkkiä pitkä. Ole hyvä ja varmista että käytät vahvaa salasanaa. ',
      ERROR_3: 'Pahoittelut! Emme tunnista tämänlaista lompakko tiedostoa. ',
      ERROR_4: 'Tämä ei ole validi lompakko tiedosto. ',
      ERROR_5: 'Tätä yksikköä ei ole olemassa, ole hyvä ja käytä jotain seuraavista yksiköistä ',
      ERROR_6: 'Virheellinen osoite. ',
      ERROR_7: 'Virheellinen salasana. ',
      ERROR_8: 'Virheellinen summa. ',
      ERROR_9: 'Virheellinen gas raja. ',
      ERROR_10: 'Virheellinen tieto arvo. ',
      ERROR_11: 'Virheellinen gasin määrä. ',
      ERROR_12: 'Virheellinen nonce. ',
      ERROR_13: 'Virheellinen allekirjoitettu siirto. ',
      ERROR_14: 'Lompakko tällä kutsumanimellä on jo olemassa. ',
      ERROR_15: 'Lompakkoa ei löytynyt. ',
      ERROR_16: 'Ei näytä että ehdotusta tällä ID:llä olisi vielä olemassa tai tapahtui virhe ehdotusta luettaessa. ',
      ERROR_17: 'Lompakko jolla on tämä osoite on jo muistissa. Ole hyvä ja tarkista oma lompakko sivusi. ',
      ERROR_18: 'Sinulla täytyy olla vähintään .001 ETHiä tililläsi kattaaksesi gasin hinnan. Ole hyvä ja lisää hieman ETHiä ja kokeile uudelleen. ',
      ERROR_19: 'Kaikki gas käytettäisiin tässä siirrossa. Tämä tarkoittaa että olet jo äänestänyt tässä ehdotuksessa tai debaatti aika on jo päättynyt.',
      ERROR_20: 'Virheellinen merkki',
      SUCCESS_1: 'Validi osoite',
      SUCCESS_2: 'Lompakon salaus onnistuneesti purettu',
      SUCCESS_3: 'Siirto lähetetty. TX ID: ',
      SUCCESS_4: 'Lompakkosi lisätty onnistuneesti: ',
      SUCCESS_5: 'Olet äänestänyt onnistuneesti. Kiitos että olet ollut aktiivinen osanottaja The DAOssa.',
      SUCCESS_6: 'Valittu Tiedosto: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Virheellinen lähettäjä',
      GETH_Nonce: 'Nonce liian pieni',
      GETH_Cheap: 'Gasin hinta liian matala hyväksyttäväksi',
      GETH_Balance: 'Riittämätön saldo',
      GETH_NonExistentAccount: 'Tiliä ei ole olemassa tai tilin saldo liian pieni',
      GETH_InsufficientFunds: 'Riittämätön saldo gas * hinta + arvo',
      GETH_IntrinsicGas: 'Olennainen gas liian pieni',
      GETH_GasLimit: 'Ylittää blockin gas rajan',
      GETH_NegativeValue: 'Negatiivinen arvo',

      /* Tranlsation Info */
      translate_version: '0.4',
      Translator_Desc: 'Kiitos kääntäjillemme...',
      TranslatorName_1: 'Smokyish',
      TranslatorAddr_1: '0xac9a2c1dd946da64c0dc8e70cec2cfb14304fd4f',
      /* Translator 1: Insert Comments Here */
      TranlsatorName_2: ' ',
      TranlsatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranlsatorName_3: ' ',
      TranlsatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranlsatorName_4: ' ',
      TranlsatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranlsatorName_5: ' ',
      TranlsatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = fi;
  }, {}], 39: [function (require, module, exports) {
    // French
    'use strict';

    var fr = function () {};
    fr.code = 'fr';
    fr.data = {

      /* Navigation*/
      NAV_YourWallets: 'Vos portefeuilles',
      NAV_AddWallet: 'Ajouter un portefeuille',
      NAV_GenerateWallet: 'Générer un portefeuille',
      NAV_BulkGenerate: 'Générer des portefeuilles par lots',
      NAV_SendEther: 'Envoyer des Ether',
      NAV_SendTokens: 'Envoyer des tokens',
      NAV_Offline: 'Envoyer hors-ligne',
      NAV_WithdrawDAO: 'Retirer de la DAO',
      DAO_TitleLong: 'Échanger des tokens DAO contre des ETH',
      NAV_ClaimDGD: 'Réclamer des DGD',
      DGD_TitleLong: 'Réclamer vos tokens DGD',
      NAV_DeployContract: 'Déployer un contrat',
      NAV_MyWallets: 'Mes portefeuilles',
      NAV_ViewWallet: 'Visualiser un portefeuille',
      NAV_Help: 'Aide',
      NAV_Contact: 'Contact',

      /* General */
      x_Wallet: 'Portefeuille',
      x_Password: 'Mot de passe',
      x_Download: 'Télécharger',
      x_Address: 'Votre adresse',
      x_Save: 'Sauvegarder',
      x_Cancel: 'Annuler',
      x_AddessDesc: 'Aussi appelé "Numéro de compte" ou "Clé publique". C\'est ce que vous envoyez aux gens pour qu\'ils puissent vous envoyer des ether. Cette icone est une façon simple de reconnaitre votre adresse.',
      x_PrivKey: 'Clé privée (non-chiffrée)',
      x_PrivKey2: 'Clé privée',
      x_PrivKeyDesc: 'C\'est la version textuelle non-chiffrée de votre clé privée, ce qui signifie qu\'aucun mot de passe n\'est nécessaire pour l\'utiliser. Si quelqu\'un venait à découvrir cette clé privée, il pourrrait accéder à votre portefeuille sans mot de passe. Pour cette raison, la version chiffrée de votre clé privée est recommandée.',
      x_Keystore: 'Fichier Keystore/JSON (Recommandé · Chiffré · Format Mist/Geth)',
      x_Keystore2: 'Fichier Keystore/JSON',
      x_KeystoreDesc: 'Ce fichier Keystore / JSON utilise le même format que celui que Mist & Geth, vous pouvez donc facilement l\'importer plus tard dans ces logiciels. C\'est le fichier que nous vous recommandons de télécharger et sauvegarder.',
      x_Json: 'Fichier JSON (non-chiffré)',
      x_JsonDesc: 'C\'est la version non-chiffrée au format JSON de votre clé privée. Cela signifie que vous n\'avez pas besoin de votre mot de passe pour l\'utiliser mais que toute personne qui trouve ce JSON peut accéder à votre portefeuille et vos Ether sans mot de passe.',
      x_PrintShort: 'Imprimer',
      x_Print: 'Imprimer un portefeuille papier',
      x_PrintDesc: 'Astuce : Cliquez sur Imprimer et sauvegardez le portefeuille papier comme un PDF, même si vous n\'avez pas d\'imprimante !',
      x_CSV: 'Fichier CSV (non-chiffré)',
      x_TXT: 'Fichier TXT (non-chiffré)',

      /* Header */
      MEW_Warning_1: 'Vérifiez toujours l\'URL avant d\'accéder à votre portefeuille ou de générer un nouveau portefeuille. Attentions aux sites de phishing !',
      CX_Warning_1: 'Assurez vous d\'avoir une **sauvegarde externe** de tout portefeuille que vous gérez ici. De nombreux événements peuvent vous faire perdre les données de cette extension Chrome, y compris la dédinstallation et la réinstallation de l\'extension. Cette extension est une manière d\'accéder facilement à vos portefeuilles, **pas** une façon de les sauvegarder.',
      MEW_Tagline: 'Portefeuille d\'Ether Open Source JavaScript côté client',
      CX_Tagline: 'Extension Chrome de portefeuille d\'Ether Open Source JavaScript côté client',

      /* Footer */
      FOOTER_1: 'Un outil open source en Javascript s\'exécutant côté client pour générer des portefeuilles Ethereum et envoyer des transactions.',
      FOOTER_1b: 'Créé par',
      FOOTER_2: 'Donations extrêmement appréciées :',
      FOOTER_3: 'Génération de portefeuille côté client par',
      FOOTER_4: 'Avertissement',

      /* Sidebar */
      sidebar_AccountInfo: 'Informations du compte : ',
      sidebar_AccountAddr: 'Addresse du compte : ',
      sidebar_AccountBal: 'Solde du compte : ',
      sidebar_TokenBal: 'Solde en tokens : ',
      sidebar_Equiv: 'Valeur correspondante : ',
      sidebar_TransHistory: 'Historique des transactions: ',
      sidebar_DGDBal: 'Informations sur la *crowdsale* DGD :',
      sidebar_donation: 'MyEtherWallet est un service gratuit et open source respectueux de votre vie privée et de votre sécurité. Plus nous recevons de donations, plus nous dédions du temps à développer de nouvelles fonctions, à écouter vos retours et à vous fournir ce dont vous avez besoin. Nous ne sommes que deux personnes qui essayent de changer le monde. Aidez nous !',
      sidebar_donate: 'Faire une donation',
      sidebar_thanks: 'MERCI !!!',

      /* Decrypt Panel */
      decrypt_Access: 'Comment voulez-vous accéder à votre portefeuille ?',
      decrypt_Title: 'Choisissez le format de votre clé privée',
      decrypt_Select: 'Choisissez un portefeuille :',

      /* Add Wallet */
      ADD_Label_1: 'Que voulez-vous faire ?',
      ADD_Radio_1: 'Générer un nouveau portefeuille',
      ADD_Radio_2: 'Choisissez le fichier de votre portefeuille (Keystore / JSON)',
      ADD_Radio_2_alt: 'Choisissez le fichier de portefeuille: ',
      ADD_Radio_2_short: 'CHOISISSEZ LE FICHIER DU PORTEFEUILLE...',
      ADD_Radio_3: 'Collez/saisissez votre clé privée',
      ADD_Radio_4: 'Ajoutez un compte',
      ADD_Label_2: 'Nommez votre compte :',
      ADD_Label_3: 'Votre fichier est chiffré, merci de saisir le mot de passe : ',
      ADD_Label_4: 'Ajouter un compte à afficher',
      ADD_Warning_1: 'Vous pouvez ajouter n\'importe quel compte pour l\'afficher dans l\'onglet "portefeuilles" sans uploader une clé privée. Cela ne veut **pas** dire que vous aurez accès à ce portefeuille, ni que vous pouvez transférer des Ethers depuis ce portefeuille.',
      ADD_Label_5: 'Entrez l\'adresse : ',
      ADD_Label_6: 'Déverrouiller votre portefeuille',
      ADD_Label_6_short: 'Déverrouiller',
      ADD_Label_7: 'Ajouter un compte',

      /* Generate Wallets */
      GEN_desc: 'Si vous voulez générer plusieurs portefeuilles, vous pouvez le faire ici : ',
      GEN_Label_1: 'Entrez un mot de passe fort (au moins 9 caractères)',
      GEN_Placeholder_1: 'N\'oubliez PAS de sauvegarder ceci !',
      GEN_SuccessMsg: 'Succès ! Votre portefeuille a été généré.',
      GEN_Warning: '**Vous avez besoin de votre fichier Keystore/JSON et du mot de passe ou de la clé privée** pour accéder à ce portefeuille dans le futur. Merci de le télécharger et d\'en faire une sauvegarde externe ! Il n\'existe aucun moyen de récupérer un portefeuille si vous ne le sauvegardez pas. Merci de lire la [page d\'Aide](https://www.myetherwallet.com/#help) pour plus de détails.',
      GEN_Label_2: 'Sauvegardez votre fichier Keystore/JSON ou votre clé privée. N\'oubliez pas votre mot de passe ci-dessus.',
      GEN_Label_3: 'Sauvegarder votre portefeuille.',
      GEN_Label_4: 'Imprimer votre portefeuille papier, ou conserver une version QR code. (optionnel)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Nombre de portefeuilles à générer',
      BULK_Label_2: 'Générer les portefeuilles',
      BULK_SuccessMsg: 'Succès ! Vos portefeuilles ont été générés.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Adresse de destination : ',
      SEND_amount: 'Montant à envoyer : ',
      SEND_amount_short: 'Montant',
      SEND_custom: 'Spécifique',
      SEND_gas: 'Gaz',
      SEND_TransferTotal: 'Envoi du solde total', // updated to be shorter
      SEND_generate: 'Générer la transaction',
      SEND_raw: 'Transaction brute',
      SEND_signed: 'Transaction signée',
      SEND_trans: 'Envoyer la transaction',
      SENDModal_Title: 'Attention ! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Vous êtes sur le point d\'envoyer',
      SENDModal_Content_2: 'à l\'adresse',
      SENDModal_Content_3: 'En êtes-vous sûr ?',
      SENDModal_Content_4: 'NOTE : Si vous renontrez une erreur, il est très probable que vous deviez ajouter des ether à votre compte pour couvrir les coûts en gaz d\'envoi des tokens. Le gaz est payé en ether.',
      SENDModal_No: 'Non, je veux sortir d\'ici !',
      SENDModal_Yes: 'Oui, j\'en suis sûr ! Effectuer la transaction.',

      /* Tokens */
      TOKEN_Addr: 'Adresse : ',
      TOKEN_Symbol: 'Symbole du token : ',
      TOKEN_Dec: 'Décimales : ',

      /* Send Transaction */
      TRANS_desc: 'Si vous voulez envoyer des tokens, allez plutôt à la page "Envoi de tokens".',
      TRANS_warning: 'L\'emploi des fonctions "ETH seulement" et "ETC seulement" vous fait passer par un contrat. Certains services ont des problèmes avec ces transactions. En savoir plus.',
      TRANS_standard: 'ETH (transaction standard)',
      TRANS_eth: 'ETH seulement',
      TRANS_etc: 'ETC seulement',
      TRANS_advanced: '+Avancé : Ajouter du gaz',
      TRANS_data: ' Données : ',
      TRANS_gas: ' Gaz : ',
      TRANS_sendInfo: 'Une transaction standard utilisant 21000 gaz coûtera 0.000441 ETH. Le prix du gaz de 0.000000021 ETH que nous avons choisi est légèrement supérieur au minimum ain d\'assurer une confirmation rapide. Nous ne prenons pas de frais de transaction.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Transactions "ETH seulement" et "ETC seulement"',
      TRANSModal_Content_0: 'Note sur les transactions et services divers :',
      TRANSModal_Content_1: '**ETH (Transaction standard) : ** Génère une transaction par défaut directement depuis une adresse vers une autre. Son gaz par défaut est de 21000. Il est probable que toute transaction d\'ETH envoyé de cette manière sera réexécutée sur la chaîne ETC.',
      TRANSModal_Content_2: '**ETH seulement : ** Envoie à travers le [contrat anti-réexécution de Timon Rapp (recommandé par VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) afin de n\'envoyer que sur la chaîne **ETH**.',
      TRANSModal_Content_3: '**ETC seulement : ** Envoie à travers le [contrat anti-réexécution de Timon Rapp (recommandé par VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) afin de n\'envoyer que sur la chaîne **ETC**. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift : ** N\'envoyer que par transaction standard. Si vous utilisez les contrats d\'envoi sur une seule chaîne, vous devrez joindre leur équipe de support pour ajouter manuellement la somme à votre solde ou pour vous rembourser. [Vous pouvez aussi essayer l\'outil "split" de Shapeshift.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex :** Pas de problème connu. Utilisez ce que vous voulez.',
      TRANSModal_Yes: 'Génial, j\'ai compris.',
      TRANSModal_No: 'Aïe, je comprends de moins en moins. Aidez-moi.',

      /* Offline Transaction */
      OFFLINE_Title: 'Génération et envoi d\'une transaction hors ligne',
      OFFLINE_Desc: 'La génération d\'une transaction hors ligne s\'effectue en trois étapes. Les étapes 1 et 3 sont réalisées sur un ordinateur en ligne et l\'étape 2 sur un ordinateur déconnecté du réseau. Cela permet d\'isoler totalement vos clefs privées de toute machine connectée à l\'internet.',
      OFFLLINE_Step1_Title: 'Étape 1 : Gérération de l\'information (ordinateur en ligne)',
      OFFLINE_Step1_Button: 'Générer l\'information',
      OFFLINE_Step1_Label_1: 'Addresse d\'émission : ',
      OFFLINE_Step1_Label_2: 'Note : Il s\'agit de l\'adresse de départ, pas de l\'adresse d\'arrivée. Le nonce est généré à partir du compte de l\'expéditeur. Si on utilise une machine déconnectée du réseau, cette adresse est celle du compte en _cold storage_.',
      OFFLINE_Step2_Title: 'Étape 2 : Génération de la transaction (ordinateur hors ligne)',
      OFFLINE_Step2_Label_1: 'Adresse de destination : ',
      OFFLINE_Step2_Label_2: 'Valeur / montant à envoyer',
      OFFLINE_Step2_Label_3: 'Prix du gaz ',
      OFFLINE_Step2_Label_3b: 'Ce montant était affiché à l\'étape 1 sur votre ordinateur en ligne.',
      OFFLINE_Step2_Label_4: 'Limite de gaz ',
      OFFLINE_Step2_Label_4b: '21000 est la limite par défaut. En cas d\'envoi vers des contrats ou avec des données supplémentaires, cette valeur peut être différente. Tout gaz non consommé vous sera renvoyé.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Cette valeur a été affichée à l\'étape 1 sur votre ordinateur en ligne.',
      OFFLINE_Step2_Label_6: 'Données',
      OFFLINE_Step2_Label_6b: 'Cette zone est optionnelle. Les données sont souvent utilisées lors de transactions vers des contrats.',
      OFFLINE_Step2_Label_7: 'Entrez / sélectionnez votre clef privée / JSON.',
      OFFLINE_Step3_Title: 'Étape 3 : Envoyer / publier la transaction (ordinateur en ligne)',
      OFFLINE_Step3_Label_1: 'Copier ici la transaction signée à l\'étape 2 et cliquez sur le bouton "ENVOYER LA TRANSACTION".',

      /* DAO */
      DAO_bal1: 'au bloc 1.919.999',
      DAO_bal2: 'actuel',
      DAO_TitleETH: 'Retrait de DAO en ETH',
      DAO_TitleETC: 'Retrait de DAO en ETC',
      DAO_ETC_Label_1: 'À quelle adresse voulez-vous que les ETC soient envoyés ?',
      DAO_ETC_Label_2: 'Le "White Hat Group" a travaillé sans relâche pour vous rendre vos ETC. Vous pouvez les remercier par une donation d\'un pourcentage de votre retrait si vous le souhaitez. ',
      DAO_Desc: 'Utilisez cet onglet pour retirer et convertir vos tokens en ETH. Si vous désirez envoyer des tokens DAO, utilisez l\'onglet Envoi de tokens.',
      DAO_Inst: 'Oui. Cliquez simplement sur le gros bouton rouge. Vous voyez, c\'est simple.',
      DAO_Warning: 'Si vous obtenez une erreur "Montant insuffisant pour le paiement du gaz", vous devez disposer d\'un petit montant en ether sur votre compte pour couvrir le coût en gaz. Ajoutez 0,001 ether sur votre compte et réessayez. ',
      DAOModal_Title: 'Juste pour être sûr...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Vous êtes sur le point de retirer',
      DAOModal_2: 'tokens DAO vers',
      DAOModal_3: 'pour', // "in return for"

      /* Digix */
      DGD_Desc: 'Réclamez vos tokens et vos badges DigixDAO (DGD). Pour ce faire, vous devez avoir participé à la vente de tokens du 30 et 31 mars 2016. Si vous désirez envoyez des DGD, utilisez l\'onglet Envoi de tokens.',
      DGD_Label_1: 'Estimation des frais consommés :',
      DGD_Label_2: 'Frais maximum fournis :',
      DGD_Label_3: 'Prix du gaz :',
      DGD_Generate: 'Générer une réclamation',
      DGD_Content: 'Vous allez réclamer vos tokens DGD.',

      /* Deploy Contracts */
      DEP_generate: 'Générer le bytecode',
      DEP_generated: 'Bytecode généré',
      DEP_signtx: 'Signer la transaction',
      DEP_interface: 'Interface générée',

      /* My Wallet */
      MYWAL_Nick: 'Nom du portefeuille',
      MYWAL_Address: 'Adresse du portefeuille',
      MYWAL_Bal: 'Solde',
      MYWAL_Edit: 'Modifier',
      MYWAL_View: 'Voir',
      MYWAL_Remove: 'Supprimer',
      MYWAL_RemoveWal: 'Supprimer le portefeuille :',
      MYWAL_WatchOnly: 'Vos comptes en affichage uniquement',
      MYWAL_Viewing: 'Affichage des portefeuilles : ',
      MYWAL_Hide: 'Cacher les informations sur le portefeuille',
      MYWAL_Edit_2: 'Modifier le portefeuille : ',
      MYWAL_Name: 'Nom du portefeuille',
      MYWAL_Content_1: 'Attention ! Vous êtes sur le point de supprimer votre portefeuille: ',
      MYWAL_Content_2: 'Assurez-vous d\'avoir bien **sauvegardé la clé privée/ fichier JSON et le mot de passe** associé à ce portefeuille avant de le supprimer.',
      MYWAL_Content_3: 'Si vous voulez utiliser ce portefeuille avec MyEtherWallet CX à l\'avenir, vous devrez le rajouter manuellement en utilisant la clé privée/fichier JSON et le mot de passe.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Ceci vous permet de télécharger plusieurs versions des clefs privées et de ré-imprimer votre portefeuille papier. Vous devrez le faire pour [importer votre compte dans Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Si vous voulez consulter votre solde, nous recommandons d\'utiliser un explorateur de blockchain comme [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Ceci vous permet de télécharger plusieurs versions des clefs privées et de ré-imprimer votre portefeuille papier. ',
      VIEWWALLET_SuccessMsg: 'Succès ! Voici les détails de votre portefeuille.',

      /* Chrome Extension */
      CX_error_1: 'Vous n\'avez pas de portefeuille sauvegardé. Cliquez sur ["Ajout de portefeuille"](/cx-wallet.html#add-wallet) pour en ajouter un !',
      CX_quicksend: 'Envoi rapide', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Veuillez entrer un montant valide.',
      ERROR_2: 'Votre mot de passe doit faire au moins 9 caractères. Assurez vous qu\'il s\'agisse d\'un mot de passe fort.',
      ERROR_3: 'Désolé ! Notre service ne permet pas de gérer ce type de fichier de portefeuille. ',
      ERROR_4: 'Ceci n\'est pas un fichier de portefeuille. ',
      ERROR_5: 'Cette unité n\'existe pas, merci d\'utiliser une des unités suivantes ',
      ERROR_6: 'Adresse invalide. ',
      ERROR_7: 'Mot de passe invalide. ',
      ERROR_8: 'Montant invalide. ',
      ERROR_9: 'Limite de gaz invalide. ',
      ERROR_10: 'Valeur des donnnées invalide. ',
      ERROR_11: 'Montant de gaz invalide. ',
      ERROR_12: 'Nonce invalide. ',
      ERROR_13: 'Transaction signée invalide. ',
      ERROR_14: 'Un portefeuille avec ce nom existe déjà. ',
      ERROR_15: 'Portefeuille non trouvé. ',
      ERROR_16: 'Il semble qu\'aucune proposition n\'existe encore avec cet identifiant ou qu\'il y a une erreur lors de la consultation de cette proposition. ',
      ERROR_17: 'Un portefeuille avec cette adresse existe déja. Merci de consulter la page listant vos portefeuilles. ',
      ERROR_18: 'Il vous faut au moins 0.001 ether sur votre compte pour couvrir les coûts du gaz. Ajoutez des ether et réessayez. ',
      ERROR_19: 'Tout le gaz serait consommé lors de cette transaction. Cela signifie que vous avez déjà voté pour cette proposition ou que la période du débat est terminée.',
      ERROR_20: 'Symbole invalide',
      SUCCESS_1: 'Adresse valide',
      SUCCESS_2: 'Portefeuille déchiffré avec succès',
      SUCCESS_3: 'Transaction envoyée. Identifiant de transaction : ',
      SUCCESS_4: 'Votre portefeuille a été ajouté avec succès : ',
      SUCCESS_5: 'Vous avez voté avec succès. Merci d\'être un participant actif à The DAO.',
      SUCCESS_6: 'Fichier sélectionné : ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Expéditeur invalide',
      GETH_Nonce: 'Nonce trop bas',
      GETH_Cheap: 'Prix du gaz trop bas pour être accepté',
      GETH_Balance: 'Solde insuffisant',
      GETH_NonExistentAccount: 'Compte inexistant ou solde du compte trop bas',
      GETH_InsufficientFunds: 'Fonds insuffisants pour gaz * prix + valeur',
      GETH_IntrinsicGas: 'Gaz intrinsèque trop bas',
      GETH_GasLimit: 'Limite en gaz dépassée',
      GETH_NegativeValue: 'Valeur négative',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Thank you to our translators: ',
      TranslatorName_1: '[Simon P](https://www.myetherwallet.com/?gaslimit=21000&to=0x89a18eE46b5aabC62e94b1830881887D04C687f3&value=1.0#send-transaction) · ',
      TranslatorAddr_1: '0x89a18eE46b5aabC62e94b1830881887D04C687f3',
      /* Translator 1: Translation in French. Début de la traduction, il reste encore du travail... Je continue dès que j'ai un peu de temps :) */
      TranslatorName_2: 'Jean Zundel · ',
      TranslatorAddr_2: '',
      /* Translator 2:  */
      TranslatorName_3: 'girards',
      TranslatorAddr_3: '',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: '',
      TranslatorAddr_4: '',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: '',
      TranslatorAddr_5: '',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Si vous avez créé un portefeuille -ou- téléchargé le repo avant **le 31 déc. 2015**, merci de vérifier vos portefeuilles / de télécharger une nouvelle version du repo. Cliquez ici pour plus de détails.',
      HELP_Desc: 'Il manque quelque chose ? Vous avez d\'autres questions ? [Contactez-nous](mailto:myetherwallet@gmail.com), et non seulement nous allons vous répondre mais aussi mettre à jour cette page afin qu\'elle soit plus utile à tout le monde à l\'avenir !',
      HELP_Remind_Title: 'Quelques rappels :',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, et certaines des bibliothèques Javascript sous-jacentes que nous employons sont en cours de développement.** Bien que nous les ayons testés intensivement et que des dizaines de milliez de portefeuilles aient été créés avec succès dans le monde entier, il existe toujours une faible possibilité qu\'un incident se produise conduisant à la perte de vos ETH. N\'investissez pas plus que ce que vous êtes prêt à perdre et soyez prudent. En cas d\'accident, nous en serons désolés mais **nous ne sommes pas responsables d\'une éventuelle perte de cet Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX ne sont pas des "portefeuilles web". Vous ne créez pas un compte, vous ne nous donnez pas votre Ether en dépôt. Aucune donnée ne sort de votre ordinateur ou votre navigateur. Nous vous facilitons la création, la sauvegarde et l\'accès à vos informations ainsi que l\'interaction avec la blockchain.',
      HELP_Remind_Desc_3: 'Si vous ne sauvegardez pas votre clef privée et votre mot de passe, il n\'existe aucun moyen de regagner l\'accès à votre portefeuille et aux fonds qu\'il détient. Sauvegardez-les en plusieurs endroits et non uniquement sur votre ordinateur !',

      HELP_0_Title: '0) Je suis nouveau. Que puis-je faire ?',
      HELP_0_Desc_1: 'MyEtherWallet vous donne la possibilité de générer de nouveaux portefeuilles pour stocker votre Ether par vous-même et pas sur un *exchange.* Ce processus ne s\'exécute que sur votre ordinateur, pas sur nos serveurs. Quand vous générez un nouveau portefeuille, **il est donc de votre responsabilité de le sauvegarder de manière sécurisée.**',
      HELP_0_Desc_2: 'Créez un nouveau portefeuille.',
      HELP_0_Desc_3: 'Sauvegardez le portefeuille.',
      HELP_0_Desc_4: 'Vérifiez que vous avez accès à ce nouveau portefeuille et que vous avez correctement sauvé toutes les informations nécessaires.',
      HELP_0_Desc_5: 'Transférez de l\'Ether vers ce nouveau portefeuille.',

      HELP_1_Title: '1) Comment puis-je créer un nouveau portefeuille ? ',
      HELP_1_Desc_1: 'Allez à la page "Génération d\'un portefeuille.',
      HELP_1_Desc_2: 'Allez à la page "Ajout de portefeuille" et sélectionnez "Générer un nouveau portefeuille"',
      HELP_1_Desc_3: 'Entrez un mot de passe fort. Si vous pensez que vous pouvez l\'oublier, sauvegardez-le dans un endroit sûr. Vous aurez besoin de ce mot de passe pour envoyer des transactions.',
      HELP_1_Desc_4: 'Cliquez sur "GÉNÉRER".',
      HELP_1_Desc_5: 'Votre portefeuille a maintenant été généré.',

      HELP_2a_Title: '2a) Comment puis-je sauvegarder mon portefeuille ?',
      HELP_2a_Desc_1: 'Vous devez toujours sauvegarder votre portefeuille en plusieurs endroits physiques, comme sur une clef USB ou une feuille de papier.',
      HELP_2a_Desc_2: 'Sauvegardez l\'adresse. Vous pouvez la garder pour vous-même ou la partager avec d\'autres personnes qui, de cette manière, peuvent vous envoyer de l\'Ether.',
      HELP_2a_Desc_3: 'Sauvegardez votre clef privée en plusieurs exemplaires. Ne la partagez avec personne. Votre clef privée est nécessaire pour accéder à votre Ether pour l\'envoyer ! Il existe 3 types de clef privée :',
      HELP_2a_Desc_4: 'Placez votre adresse, les exemplaires de la clef privée et la version PDF de votre portefeuille papier dans un dossier. Sauvegardez-le sur votre ordinateur et une clef USB.',
      HELP_2a_Desc_5: 'Imprimez votre portefeuille si vous avez une imprimante. Sinon, écrivez votre clef privée et votre adresse usr une feuille de papier. Rangez-la dans un endroit sûr, à part de votre ordinateur et de la clef USB.',
      HELP_2a_Desc_6: 'Gardez à l\'esprit qu\'il faut vous préserver de la perte de la clef et du mot de passe en cas de perte de votre disque dur, de votre clef oui de la feuille de papier. Vous devez également vous prémunir contre les catastrophes impactant toute une zone géographique (comme un incendie ou une inondation).',

      HELP_2b_Title: '2b) Comment puis-je gérer en toute sécurité un stockage hors ligne avec MyEtherWallet?',
      HELP_2b_Desc_1: 'Allez sur notre Github : [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Cliquez sur "Clone or download" > "Download ZIP" en haut à droite.',
      HELP_2b_Desc_3: 'Transportez le zip sur un ordinateur hors ligne.',
      HELP_2b_Desc_4: 'Dézippez-le et double-cliquez sur `index.html`.',
      HELP_2b_Desc_5: 'Générez un portefeuille avec un mot de passe fort.',
      HELP_2b_Desc_6: 'Sauvegardez l\'adresse. Sauvegardez les exemplaires de la clef privée. Sauvegardez le mot de passe si vous ne voulez pas devoir vous en souvenir toujours.',
      HELP_2b_Desc_7: 'Rangez ces papier et/ou ces clefs USB en des endroits physiquement distants.',
      HELP_2b_Desc_8: 'Allez à la page "Visualisation d\'un portefeuille" et entrez votre clef privée et votre mot de passe pour vous assurer de leur validité et pour accéder à votre portefeuille. Vérifiez que l\'adresse que vous avez écrite est la même.',

      HELP_3_Title: '3) Comment puis-je vérifier que j\'ai accès à mon nouveau portefeuille ?',
      HELP_3_Desc_1: '**Avant d\'envoyer de l\'Ether à votre portefeuille**, vous devez vous assurer que vous y avez accès.',
      HELP_3_Desc_2: 'Naviguez vers la page "Visualisation d\'un portefeuille".',
      HELP_3_Desc_3: 'Naviguez vers la page Visualisation d\'un portefeuille" de MyEtherWallet.com.',
      HELP_3_Desc_4: 'Sélectionnez le fichier de votre portefeuille -ou- votre clef privée et déverrouillez votre portefeuille.',
      HELP_3_Desc_5: 'Si le portefeuille est chiffré, une zone texte apparaîtra automatiquement. Entrez le mot de passe.',
      HELP_3_Desc_6: 'Cliquez sur le bouton "Déverrouiller votre portefeuille".',
      HELP_3_Desc_7: 'Les informations sur votre portefeuille doivent apparaître. Trouvez l\'adresse de votre compte près d\'une icône circulaire et colorée. Celle-ci représente visuellement votre adresse. Assurez-vous que cette adresse est celle que vous avez sauvegardée dans votre document texte et qu\'elle se trouve sur votre portefeuille papier.',
      HELP_3_Desc_8: 'Si vous désirez détenir une grande quantité d\'Ether, nous recommandons de commencer par envoyer une petite somme depuis le nouveau portefeuille avant d\'y déposer une somme importante. Envoyez 0,001 Ether vers le nouveau portefeuille, accédez-y puis envoyez ces 0,001 Ether vers une autre adresse, et vérifiez que tout a fonctionné sans encombre.',

      HELP_4_Title: '4) Comment puis-je envoyer de l\'Ether d\'un portefeuille vers un autre ?',
      HELP_4_Desc_1: 'Si vous désirez transférer une grande quantité d\'Ether, vous devez d\'abord essayer d\'en envoyer d\'abord un petit montant vers votre portefeuille pour vous assurer que tout fonctionne comme prévu.',
      HELP_4_Desc_2: 'Naviguez vers la page "Envoi d\'Ether".',
      HELP_4_Desc_3: 'Sélectionnez le fichier de votre portefeuille -ou- votre clef privée et déverrouillez votre portefeuille.',
      HELP_4_Desc_4: 'Si le portefeuille est chiffré, une zone texte apparaîtra automatiquement. Entrez le mot de passe.',
      HELP_4_Desc_5: 'Cliquez sur le bouton "Déverrouiller votre portefeuille".',
      HELP_4_Desc_6: 'Entrez l\'adresse du destinataire dans le champ "Adresse de destination".',
      HELP_4_Desc_7: 'Entrez le montant que vous voulez envoyer. Vous pouvez également cliquer sur "Envoyer le solde total" si vous voulez envoyer tout le contenu.',
      HELP_4_Desc_8: 'Note : Depuis la fin juin 2016, vous devez vous assurer que les ETH et ETC sont bien séparés avant d\'envoyer des ETH. Voir la question n° 6 pour plus d\'informations.',
      HELP_4_Desc_9: 'Cliquez sur "Générer la transaction".',
      HELP_4_Desc_10: 'Quelques champs supplémentaires apparaîtront. Votre navigateur est en train de générer la transaction.',
      HELP_4_Desc_11: 'Cliquez sur le bouton bleu "Envoyer la transaction" en dessous.',
      HELP_4_Desc_12: 'Une fenêtre pop-up apparaîtra. Vérifiez que le montant et que l\'adresse de destination sont corrects. Puis cliquez sur "Oui, j\'en suis sûr ! Effectuer la transaction.',
      HELP_4_Desc_13: 'La transaction sera soumise. Son identifiant sera affiché. Vous pouvez cliquer sur l\'identifiant pour la voir sur la blockchain.',

      HELP_4CX_Title: '4) Comment puis-je envoyer de l\'Ether avec MyEtherWallet CX ?',
      HELP_4CX_Desc_1: 'D\'abord, vous devez ajouter un portefeuille. Ceci fait, deux possibilités s\'offrent à vous : la fonctionnalité "Envoi rapide" de l\'icône de l\'extension Chrome ou la page "Envoi d\'Ether".',
      HELP_4CX_Desc_2: 'Envoi rapide :',
      HELP_4CX_Desc_3: 'Cliquez sur l\'icône de l\'extension Chrome.',
      HELP_4CX_Desc_4: 'Cliquez sur le bouton "Envoi rapide".',
      HELP_4CX_Desc_5: 'Sélectionnez le portefeuille d\'où vous désirez envoyer.',
      HELP_4CX_Desc_6: 'Entrez l\'adresse à laquelle vous désirez envoyer dans le champ "Adresse de destination :".',
      HELP_4CX_Desc_7: 'Entrez le montant que vous voulez envoyer. Vous pouvez également cliquer sur "Envoyer le solde total" sur vous voulez envoyer tout le contenu.',
      HELP_4CX_Desc_8: 'Cliquez sur "Enoyer la transaction". ',
      HELP_4CX_Desc_9: 'Vérifiez que l\'adresse et le montant envoyé sont corrects.',
      HELP_4CX_Desc_10: 'Entrez le mot de passe de ce portefeuille.',
      HELP_4CX_Desc_11: 'Cliquez sur "Envoyez la transaction."',
      HELP_4CX_Desc_12: 'Avec la page "Envoi d\'Ether" : ',

      HELP_5_Title: '5) Comment puis-je lancer MyEtherWallet.com hors ligne/localement ? ',
      HELP_5_Desc_1: 'Vous pouvez lancer MyEtherWallet.com sur votre ordinateur au lieu de passer par les serveurs GitHub. Vous pouvez générer un portefeuille en restant totalement hors ligne et envoyer des transactions depuis la page "Transaction hors ligne".',
      HELP_5_Desc_2: 'Allez sur notre Github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Cliquez sur "Clone or download" > "Download zip" en haut à droite.',
      HELP_5_Desc_4: 'Transportez le zip sur un ordinateur hors ligne.',
      HELP_5_Desc_5: 'Dézippez-le.',
      HELP_5_Desc_6: 'Double-cliquez sur `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com tourne maintenant complètement sur votre ordinateur.',
      HELP_5_Desc_8: 'Au cas où cela ne vous soit pas familier, vous devez conserver l\'intégralité du dossier pour faire tourner le site web et non uniquement `index.html`. Ne touchez à rien, ne déplacez rien dans le dossier. Si vous stockez une sauvegarde du repo MyEtherWallet pour l\'avenir, nous vous recommandons ne ne stocker que le ZIP afin d\'être sûr que le contenu du dossier restera intact.',
      HELP_5_Desc_9: 'Comme nous améliorons constamment MyEtherWallet.com, nous vous recommandons de mettre régulièrement à jour votre version sauvegardée.',

      HELP_5CX_Title: '5) Comment puis-je installer cette extension depuis le repo au lieu du Chrome Store ? ',
      HELP_5CX_Desc_1: 'Allez sur notre Github et cherchez la version la plus récente de l\'extension Chrome : [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Descendez tout en bas et faites un clic droit sur la dernière version. Cliquez sur "Enregistrer le lien en tant que...".',
      HELP_5CX_Desc_3: 'Allez dans Google Chrome et trouvez les paramètres (dans le menu en haut à droite).',
      HELP_5CX_Desc_4: 'Cliquez sur "Extensions" à gauche.',
      HELP_5CX_Desc_5: 'Cliquez sur la case "Mode développeur" en haut de cette page.',
      HELP_5CX_Desc_6: 'Cliquez sur le bouton "Chargez l\'extension non empaquetée...".',
      HELP_5CX_Desc_7: 'Naviguez vers le dossier que vous avez téléchargé et dézippé auparavant. Cliquez sur "Sélectionner".',
      HELP_5CX_Desc_8: 'L\'extension doit maintenant apparaître dans vos extensions et dans la barre des extensions de Chrome.',

      HELP_6_Title: '6) Comment puis-je séparer mes ETH / ETC ? ',
      HELP_6_Desc_1: 'Quand le hard fork s\'est produit, à tout ETH que vous possédiez dans votre portefeuille correspond maintenant un montant égal en ETC. Si vous envoyez des ETH par une transaction standard, cela enverra également des ETC et, pour l\'empêcher, il vous faut maintenant "séparer" votre portefeuille d\'origine en deux en vous assurant que seul du ETH va dans le portefeuille ETH et seul du ETC va dans le portefeuille ETC.',
      HELP_6_Desc_2: 'Vous pouvez également envoyer tout votre ETH et ETC par une transaction standard vers Kraken ou Poloniex. Ces *exchanges* vont automatiquement séparer vos ETH et ETC. Vous pouvez alors déplacer ces fonds vers de nouveaux portefeuilles ou vendre vos ETH ou vos ETC.',
      HELP_6_Desc_3: '[Vous trouverez plus d\'informations sur les portefeuilles et les attaques par réexécution ici](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Générer un nouveau portefeuille ETH post-fork vierge pour vous-même (destination finale du pur ETH).',
      HELP_6_Desc_5: 'Générer un nouveau portefeuille ETC post-fork vierge pour vous-même (destination finale du pur ETC).',
      HELP_6_Desc_6: 'Sauvegardez ces nouveaux portefeuilles et vérifiez que vous pouvez y accéder. Voir #2a et #3 ci-dessus.',
      HELP_6_Desc_7: 'Envoyez 0.1234 ETH à votre nouveau portefeuille ETH en utilisant l\'option "ETH seulement" sur la page "Envoi d\'Ether".',
      HELP_6_Desc_8: 'Envoyez 0.5678 ETC à votre nouveau portefeuille ETC en utilisant l\'option "ETC seulement" sur la page "Envoi d\'Ether".',
      HELP_6_Desc_9: 'Vérifiez que seuls les 0.1234 ETH ont bougé sur etherscan.io. Vérifiez que seuls les 0.5678 ETC ont bougé sur gastracker.io.',
      HELP_6_Desc_10: 'Envoyez une transaction de 0.0001 ETH depuis votre nouveau portefeuille ETH. Vérifiez sur etherscan.io. Assurez-vous que les 0.0001 ETH ont bougé.',
      HELP_6_Desc_11: 'Générez (mais n\'envoyez pas) une transaction de 0.0002 ETC depuis votre nouveau portefeuille ETC. Copiez le champ "Transaction signée". ',
      HELP_6_Desc_12: 'Allez sur [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) et copiez cette transaction ETC dans l\'onglet hors ligne de classicetherwallet.com tout en bas et envoyez-la. Vérifiez sur gastracker.io. Assurez-vous que les 0.0002 ETC ont bougé.',
      HELP_6_Desc_13: 'Si tout est correctement reçu et envoyé, vous avez gagné.',
      HELP_6_Desc_14: 'Envoyez le reste du solde ETH par l\'option "ETH seulement" et répétez l\'opération pour le solde ETC par l\'option "ETC seulement".',
      HELP_6_Desc_15: 'Par la suite, vous pourrez utiliser les transactions standard pour ces portefeuilles sans risque d\'attaque par réexécution.',

      HELP_7_Title: '7) Comment puis-je envoyer des tokens et ajouter des tokens spécifiques ?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) est un excellent moyen d\'explorer les tokens et de trouver les décimales d\'un token.',
      HELP_7_Desc_1: 'Naviguez vers la page "Envoi de tokens".',
      HELP_7_Desc_2: 'Déverrouillez votre portefeuille.',
      HELP_7_Desc_3: 'Entre l\'adresse à laquelle vous désirez faire l\'envoi dans le champ "Adresse de destination".',
      HELP_7_Desc_4: 'Entrez le montant que vous désirez envoyer.',
      HELP_7_Desc_5: 'Sélectionnez le token que vous désirez envoyer.',
      HELP_7_Desc_6: 'Si celui-ci n\'est pas listé :',
      HELP_7_Desc_7: 'Cliquez sur "Spécifique".',
      HELP_7_Desc_8: 'Entrez l\'adresse, le nom et les décimales du token. Ces informations sont fournies par les développeurs du token et sont également nécessaires quand vous faites "Add a Watch Token" dans Mist.',
      HELP_7_Desc_9: 'Cliquez sur "Sauver".',
      HELP_7_Desc_10: 'Vous pouvez maintenant envoyer ces tokens ainsi qu\'en voir le solde dans la zone sur le côté.',
      HELP_7_Desc_11: 'Cliquez sur "Générer la transaction".',
      HELP_7_Desc_12: 'Quelques champs supplémentaires vont apparaître : votre navigateur est en train de générer la transaction.',
      HELP_7_Desc_13: 'Cliquez sur le bouton bleu "Envoyer la transation" au dessous.',
      HELP_7_Desc_14: 'Une fenêtre pop-up va apparaître. Vérifiez que le montant et que l\'adresse de destination sont corrects puis cliquez sur le bouton "Oui, j\'en suis sûr ! Effectuer la transaction."',
      HELP_7_Desc_15: 'La transaction est alors soumise et l\'identifiant de transaction est affiché. Vous pouvez cliquer dessus pour le voir sur la blockchain.',

      HELP_8_Title: '8) Que se passe-t-il si votre site tombe ?',
      HELP_8_Desc_1: 'MyEtherWallet n\'est pas un portefeuille sur le web. Vous n\'avez pas de login et rien n\'est jamais stocké sur nos serveurs. Ce n\'est qu\'une interface qui vous permet d\'interagir avec la blockchain.',
      HELP_8_Desc_2: 'Si MyEtherWallet.com tombe, vous devrez trouver un autre moyen (comme geth ou Ethereum Wallet / Mist) pour faire la même chose. Mais vous n\'aurez pas à "récupérer" votre Ether depuis MyEtherWallet parce qu\'il ne se trouve pas dans MyEtherWallet. Il est chez vous, dans le portefeuille que vous avez généré par notre site.',
      HELP_8_Desc_3: 'Vous pouvez maintenant importer facilement votre clef privée non chiffrée et vos fichiers (chiffrés) au format Geth/Mist, directement dans geth / Ethereum Wallet / Mist. Voir question #12 ci-dessous.',
      HELP_8_Desc_4: 'De plus, la probabilité que nous laissions tomber MyEtherWallet approche zéro. Il ne nous coûte presque rien de le maintenir comme nous n\'y stockons aucune information. Si le domaine venait à être perdu, le logiciel sera toujours disponible publiquement sur [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Vous pourrez y télécharger le ZIP et le faire tourner localement. ',

      HELP_8CX_Title: '8) Que se passe-t-il si MyEtherWallet CX disparaît ?',
      HELP_8CX_Desc_1: 'D\'abord, toutes les données sont sauvegardées sur votre ordinateur et non sur nos serveurs. Cela peut paraître étonnant mais, quand vous regardez sur l\'extension Chrome, ce que vous voyez *ne se trouve pas* sur nos serveurs ; tout est stocké sur votre propre ordinateur.',
      HELP_8CX_Desc_2: 'Cela dit, il est **très important** que vous sauvegardiez toutes les données de tous les portefeuilles générés par MyEtherWallet CX. De cette manière, si quoi que ce soit arrivait à MyEtherWallet CX ou à votre ordinateur, vous conserveriez toutes les informations nécessaires pour accéder à votre Ether. Voir #2a pour la sauvegarde de vos portefeuilles.',
      HELP_8CX_Desc_3: 'Si, pour une raison quelconque, MyEtherWallet CX disparaissait du Chrome Store, vous pourrez en trouver le source sur Github et le charger manuellement. Voir #5 ci-dessus.',

      HELP_9_Title: '9) La page "Envoi d\'Ether" est-elle hors ligne ?',
      HELP_9_Desc_1: 'Non, la page d\'envoi de transaction n\'est pas hors ligne. Elle a besoin de l\'internet pour obtenir le prix actuel du gaz, le nonce de votre compte et pour émettre la transaction (c\'est-à-dire "envoyer"). Cependant, elle n\'envoie que la transaction signée. Votre clef privée reste en sécurité chez vous. Nous fournissons maintenant aussi une page "Transaction hors ligne" pour vous permettre de conserver en permanence vos clefs privées sur une machine hors ligne.',

      HELP_10_Title: '10) Comment puis-je faire une transaction hors ligne ?',
      HELP_10_Desc_1: 'Allez à la page "Transaction hors ligne" avec votre ordinateur en ligne.',
      HELP_10_Desc_2: 'Entrez l\'"Adresse d\'émission". Attention, c\'est l\'adresse *d\'où* vous envoyez et non celle *vers* laquelle vous envoyez. Ceci va générer ke nonce et le prix du gaz.',
      HELP_10_Desc_3: 'Allez sur votre ordinateur hors ligne. Entrez l\'"Adresse de destination" et le "Montant" que vous désirez envoyer.',
      HELP_10_Desc_4: 'Entrez le "Prix du gaz" tel qu\'il vous a été affiché sur l\'ordinateur en ligne à la première étape.',
      HELP_10_Desc_5: 'Entrez le "Nonce" tel qu\'il vous a été affiché sur l\'ordinateur en ligne à la première étape.',
      HELP_10_Desc_6: 'La "Limite en gaz" a une valeur de 21000 par défaut. Ceci couvre les frais d\'une transaction standard. Si vous envoyez à un contrat ou si vous embarquez des données supplémentaires avec votre transaction vous devrez augmenter la limite de gaz. Tout gaz non consommé vous sera retourné.',
      HELP_10_Desc_7: 'Si vous le désirez, entrez des données. Dans ce cas, vous devrez inclure plus que la limite de 21000 par défaut? Toutes les données sont au format hexadécimal.',
      HELP_10_Desc_8: 'Sélectionnez le fichier de votre portefeuille -ou- votre clef privée et déverrouillez votre portefeuille.',
      HELP_10_Desc_9: 'Cliquez sur le bouton "Générer la transaction signée".',
      HELP_10_Desc_10: 'Le champ de données sous ce bouton se remplit avec votre transaction signée. Copiez-la et revenez avec elle sur votre ordinateur en ligne. ',
      HELP_10_Desc_11: 'Sur votre ordinateur en ligne, collez la transaction signée dans le champ texte et cliquez sur "Envoyez l\'Ether". Ceci émettra votre transaction.',

      HELP_11_Title: '11) Comment puis-je envoyer à un contrat ?',
      HELP_11_Desc_1: 'L\'envoi à un contrat vous impose souvent d\'inclure des données ou du gaz supplémentaire, ou les deux.',
      HELP_11_Desc_2: 'Allez à la page "Envoi d\'Ether". ',
      HELP_11_Desc_3: 'Sélectionnez le fichier de votre portefeuille -ou- votre clef privée et déverrouillez votre portefeuille. ',
      HELP_11_Desc_4: 'Entrez une "Adresse de destination" et un "Montant à envoyer".',
      HELP_11_Desc_5: 'Cliquez sur le bouton "+Avancé : Ajouter du gaz ou des données supplémentaires" sous le champ du montant. Ceci affiche deux champs additionnels que vous pouvez utiliser pour augmenter le gaz au dessus de la valeur par défaut de 21000 ainsi que d\'ajouter des données à votre transaction.',

      HELP_12_Title: '12) Comment puis-je importer un portefeuille créé par MyEtherWallet dans geth / Ethereum Wallet / Mist ?',
      HELP_12_Desc_1: 'Avec un fichier Geth/Mist JSON de MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Allez à la page "Visualisation d\'un portefeuille".',
      HELP_12_Desc_3: 'Déverrouillez votre portefeuille avec votre clef privée **chiffrée** ou votre fichier JSON. ',
      HELP_12_Desc_4: 'Allez à la page "Mes portefeuilles".',
      HELP_12_Desc_5: 'Sélectionnez le portefeuille que vous désirez importer dans Mist, cliquez sur l\'icône "View", entrez votre mot de passe et accédez à votre portefeuille. ',
      HELP_12_Desc_6: 'Allez à la section "Téléchargez le fichier JSON file - Format Geth/Mist (chiffé)". Cliquez sur le bouton "Télécharger" en dessous. Vous avez maintenant votre fichier *keystore.* ',
      HELP_12_Desc_7: 'Ouvrez l\'application Ethereum Wallet. ',
      HELP_12_Desc_8: 'Dans la barre de menu, allez sur "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'Ceci ouvre votre dossier de keystores. Copiez-y le fichier que vous venez de télécharger (`UTC--2016-04-14......../`) dans ce dossier.',
      HELP_12_Desc_10: 'Votre compte doit apparaître immédiatement sous "Accounts."',
      HELP_12_Desc_11: 'Avec votre clef privée non chiffrée...',
      HELP_12_Desc_12: 'Si vous n\'avez pas déjà votre clef privée non chiffrée, allez à la page "Visualisation d\'un portefeuille".',
      HELP_12_Desc_13: 'Sélectionnez le fichier de votre portefeuille -ou- entrez/collez votre clef privée pour déverrouiller votre portefeuille.',
      HELP_12_Desc_14: 'Copiez votre clef privée (non chiffrée).',
      HELP_12_Desc_15: 'Si vous êtes sur un Mac :',
      HELP_12_Desc_15b: 'Si vous êtes sur un PC :', // Strange, already in French, not found in de.js
      HELP_12_Desc_16: 'Ouvez Text Edit et collez cette clef privée.',
      HELP_12_Desc_17: 'Dans la barre de menu, cliquez sur "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Sauvegardez ce fichier vers votre `Desktop/` en tant que `nothing_special_delete_me.txt`. Assurez-vous qu\'il précise "UTF-8" et "If no extension is provided use .txt" dans le dialogue de sauvegarde.',
      HELP_12_Desc_19: 'Ouvrez un terminal et lancez la commande suivante : `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'Ceci vous invitera à choisir un nouveau mot de passe. C\'est celui que vous utiliserez dans geth / Ethereum Wallet / Mist à chaque vois que vos enverrez une transaction, donc ne l\'oubliez pas. ',
      HELP_12_Desc_21: 'Après que l\'import a réussi, supprimez `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'La prochaine fois que vous ouvrirez l\'application Ethereum Wallet, votre compte sera listé sous "Accounts".',
      HELP_12_Desc_23: 'Ouvrez Notepad et collez-y la clef privée',
      HELP_12_Desc_24: 'Sauvegardez le fichier en tant que `nothing_special_delete_me.txt` sur `C:`',
      HELP_12_Desc_25: 'Lancez la commande `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'Ceci vous invitera à choisir un nouveau mot de passe. C\'est celui que vous utiliserz dans geth / Ethereum Wallet / Mist à chaque foiq que vous enverrez une transaction donc ne l\'oubliez pas.',
      HELP_12_Desc_27: 'Après que l\'import a réussi, supprimez `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'La prochaine fois que vous ouvrirez l\'application Ethereum Wallet, votre compte sera listé sous "Accounts".',

      HELP_13_Title: '13) Que signigie "Limite de gaz trop basse" ?',
      HELP_13_Desc_1: 'Il est très probable que vous essayiez d\'envoyer de l\'Ether à un contrat, ce qui implique un peu plus de données et donc un peu plus de gaz. Sur la page "Envoi d\'Ether", cliquez sur le bouton "+Advancé : Ajouter du gaz ou des données supplémentaire" sous le champ du montant. Ceci fera afficher deux champs additionnels que vous pouvez utiliser pour augmenter le gaz au-dessus de sa valeur par défaut de 21000, ou pour ajouter des données à votre transaction.',

      HELP_14_Title: '14) Certains sites randomisent (initialisent) la génération de clef privée par les mouvements de la sours. Ce n\'est pas le cas de MyEtherWallet.com. La génération de nombres aléatoires de MyEtherWallet est-elle sûre ?',
      HELP_14_Desc_1: 'Bien que l\'interception des mouvement de la souris soit jugée attractive par beaucoup, et que nous en comprenions les raisons, la réalité est que window.crypto assure plus d\'entropie que les mouvements de votre souris. L\'utilisation de ces mouvements est sûre mais nous (ainsi que de nombreux projets crypto) avons de bonnes raisons de croire en window.crypto. De plus, MyEtherWallet.com peut être utilisé sur des périphériques tactiles. Voici une [conversation entre un redditor rageur et Vitalik Buterin sur les mouvements de souris et window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) et voici [les spécifications w3 de window.crypto](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Pourquoi le compte que je viens de créer n\'apparaît-il pas dans l\'explorateur de blockchain ? (i.e. : etherchain, etherscan)',
      HELP_15_Desc_1: 'Les comptes n\'apparaissent dans un explorateur de blockchain qu\'après une activité y ait eu lieu comme, par exemple, quand on y a transféré de l\'Ether.',

      HELP_16_Title: '16) Comment puis-je vérifier le solde de mon compte ? ',
      HELP_16_Desc_1: 'Vous pouvez utiliser un explorateur de blockchain comme [etherscan.io](http://etherscan.io/). Collez votre adresse dans la barre de recherche et cela récupérera votre solde et l\'historique de vos transactions. Par exemple, voici ce que montre notre [compte de donations](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) sur etherscan.io',

      HELP_17_Title: '17) Pourquoi mon solde n\'apparaît-il pas quand je déverrouille mon portefeuille ? ',
      HELP_17_Desc_1: ' C\'est probablement dû au fait que vous vous trouvez derrière un firewall. L\'API que nous utilisons pour obtenir le solde et converir celui-ci est souvent bloquée par des firewalls pour des raisons diverses. Vous êtes toujours capable d\'envoyer des transactions mais il vous faut employer une autre méthode pour voir le solde, comme etherscan.io',

      HELP_18_Title: '18) Où est le fichier de mon portefeuille geth ?',

      HELP_19_Title: '19) Où est le fichier de mon portefeuille Mist ? ',
      HELP_19_Desc_1: 'Les fichiers Mist se trouvent généralement aux endroits ci-dessus mais il est beaucoup plus facile d\'ouvrir Mist, de sélectionner "Accounts" dans la barre du haut, puis "Backup" et "Accounts". Cela ouvre le dossier où vos fichiers sont stockés.',

      HELP_20_Title: '20) Où est le fichier de mon portefeuille de *pre-sale* (pré-vente) ?',
      HELP_20_Desc_1: 'Là où vous l\'avez mis. ;) Il vous a aussi été envoyé donc allez vérifier vos mails. Cherchez le fichier appelé `"ethereum_wallet_backup.json"` et choisissez ce fichier. Il est chiffré avec un mot de passe que vous avez créé pendant l\'achat au moment de la pré-vente.',

      HELP_21_Title: '21) N\'importe qui ne peut-il pas prendre une clef privée au hasard, chercher un solde et l\'envoyer à sa propre adresse ? ',
      HELP_21_Desc_1: 'Version courte : oui, mais trouver un compte avec un solde prendrait plus longtemps que la durée de l\'univers... donc... non.',
      HELP_21_Desc_2: 'Version longue : Ethereum est basé sur la [cryptographie à clef publique](https://en.wikipedia.org/wiki/Public-key_cryptography), plus précisément la [cryptographie des courbes elliptiques (ECC)](https://eprint.iacr.org/2013/734.pdf) qui est très couramment employée, pas uniquement dans Ethereum. La plupart des serveurs sont protégés par les ECC. Bitcoin les emploie ainsi que SSH, TLS et bien d\'autres protocoles. Dans le cas spécifique d\'Ethereum, les clefs font 256 bits et sont plus fortes que celles en 128 et 192 bits, encore très employées et toujours considérées comme sûres par les experts.',
      HELP_21_Desc_3: 'Vous avez une clef privée et une clef publique. La clef privée peut servir à dériver la clef publique mais l\'inverse est impossible. Le fait que l\'internet et le monde entier utilise ce système cryptographique signifie que, s\'il existait un moyen de dériver la clef privée de la clef publique, le risque que courrait votre Ether serait le moindre des problèmes de tout le monde.',
      HELP_21_Desc_4: 'Cela dit, OUI : si quelqu\'un possède votre clef privée, il peut envoyer de l\'Ether depuis votre compte, de même que si une personne a le mot de passe de votre email, elle peut lire des mails ou en envoyer, ou si c\'est le mot de passe de votre compte en banque, elle peut faire des virements. Vous pouvez télécharger la versoin KEystore de votre clef privée qui est la clef privée chiffrée avec un mot de passe. Cela ressemble à avoir un mot de passe protégé par un autre mot de passe.',
      HELP_21_Desc_5: 'Et OUI, en théorie, on peut taper une chaîne de 64 caractères hexadécimaux jusqu\'à en trouver un qui correspond. Il est d\'ailleurs possible d\'écrire un programme qui vérifie très rapidement des clefs privée aléatoires. C\'est ce que l\'on appelle utiliser la "brute force" ou miner des clefs privées. Beaucoup de monde y a pensé très fort et très longtemps. Quelques serveurs haut de gamme peuvent vérifier plus de 1 million de clefs par seconde. Pourtant, même ce chiffre ne donnerait pas accès à un compte suffisamment approvisionné pour en valoir la chandelle ; il est bien plus probable que vous, vos enfant et vos petits-enfants mourront avant d\'obtenir une correspondance.',
      HELP_21_Desc_6: 'Si vous connaissez un peu Bitcoin, [ceci remettra les choses en perspective :](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *Pour illustrer l\'improbabilité de tout ceci : supposons quqe chaque satoshi de chaque bitcoin qui sera jamais produit soit affecté à sa propre clef privée distincte.  La probabilité que, parmi ces clefs, s\'en trouvent deux qui correspondent à la même adresse serait d\'environ 1 sur 100 quintillons. ',
      HELP_21_Desc_7: '[Si vous voulez un argumentaire un peu plus technique :](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *Ces nombres n\'ont rien à voir avec la technologie des systèmes ; ce sont les maximums autorisés par la thermodynamique. Et ils impliquent clairement qu\'une attaque par brute force contre des clefs de 256 bits restera impossible jusqu\'à ce que l\'on construise des ordinateurs avec autre chose que de la matière et qu\'ils occupent autre chose que l\'espace.',
      HELP_21_Desc_8: 'Cela suppose bien entendu que les clefs sont générées d\'une manière totalement aléatoire avec suffisamment d\'entropie. C\'est le cas des clefs générées ici, tout comme celles de Jaxx et de Mist/geth. Les portefeuilles Ethereum sont tous assez bons de ce point de vue. Les clefs générées par des cerveaux humains ne le sont pas, car ces derniers ne sont pas capables de partir d\'un nombre parfaitement aléatoire. Il y a eu des cas d\'autres problèmes d\'entropie insuffisante ou de nombres imparfaitement aléatoires dans le monde de Bitcoin mais il s\'agit là d\'un tout autre problème qui peut attendre un peu.',

      HELP_SecCX_Title: 'Securité - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Où cette extension sauve-t-elle mes informations ?',
      HELP_SecCX_Desc_2: 'Les informations stockées dans cette extension sont sauvegardée via [chrome.storage](http://chrome.storage/), c\'est à dire au même endroit que vos mots de passe dans Chrome.',
      HELP_SecCX_Desc_3: 'Quelles informations sont sauvegardées ? ',
      HELP_SecCX_Desc_4: 'L\'adresse, le surnom, la clef privée sont stockés dans chrome.storage. La clef privée est chiffrée par le mot de passe défini à l\'ajout du portefeuille. Le surnom et l\'adresse du portefeuille ne sont pas chiffrés.',
      HELP_SecCX_Desc_5: 'Pourquoi le surnom et l\'adresse du portefeuille ne sont-ils pas chiffrés ? ',
      HELP_SecCX_Desc_6: 'Si nous devions chiffrer ces informations, il vous faudrait entrer un mot de passe à chaque fois que vous voudriez voir votre solde ou les surnoms. Si cela vous ennuie, nous vous recommandons d\'utiliser MyEtherWallet.com au lieu de cette extension Chrome.',

      HELP_Sec_Title: 'Sécurité',
      HELP_Sec_Desc_1: 'Si l\'une des premières questions que vous vous posez est "Pourquoi devrais-je faire confiance à ces gens ?", c\'est une bonne démarche. Nous espérons que ce qui suit va dissiper vos craintes. ',
      HELP_Sec_Desc_2: 'Nous avons commencé en août 2015. Si vous recherchez ["myetherwallet" sur reddit](https://www.reddit.com/search?q=myetherwallet), vous pouvez voir qu\'un nombre considérable de personnes nous utilisent sans problème.',
      HELP_Sec_Desc_3: 'Nous n\'allons pas prendre votre argent ou voler vos clefs privées. Il n\'y a pas de code malveillant sur ce site. En fait, les pages "Génération d\'un portefeuille" sont totalement côté client. Cela signifie que tout le code s\'éxécute sur **votre ordinateur** et n\'est jamais sauvé et/ou transmis où que ce soit.',
      HELP_Sec_Desc_4: 'Vérifiez l\'URL -- Ce site est servi par Github et vous pouvez en voir le code source ici : [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) aux domaines : [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) et [https://www.myetherwallet.com](https://www.myetherwallet.com). Vous pouvez vérifier qu\'il est hébergé chez Github en utilisant [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") ; les deux derniers enregistrements A appartiennent à Github pour leur hébergement de domaines spécifiques.',
      HELP_Sec_Desc_5: 'Pour générer les portefeuilles, vous pouvez télécharger le [code source](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Voir #5 ci-dessus.',
      HELP_Sec_Desc_6: 'Lancez un test et vérifiez le type d\'activité réseau. La manière la plus simple consiste en un clic droit sur la page, puis "Inspecter". Allez à l\'onglet "Network". Générez un portefeuille de test. Vous verrez qu\'il n\'y a pas d\'activité réseau. Vous pourrez voir quelque chose se produire ressemblant à data:image/gif et data:image/png. Ce sont les QR codes en cours de génération... sur votre ordinateur. Aucun octet n\'a été transféré.',
      HELP_Sec_Desc_7: 'Maintenant, pour en être absolument sûr, allez à la page "Resources" (ou "Application"). Vous pouvez y voir tous les éléments qui constituent un site web. Si vous cliquez sur Local Storage, Cookies et Cache, vous verrez que rien n\'y est stocké. Rien n\'y est sauvegardé. Rafraîchissez la page et vous voilà revenu au départ."',
      HELP_Sec_Desc_8: 'Si cet outil ne vous plaît pas, alors ne l\'utilisez surtout pas. Nous l\'avons créé pour qu\'il aide les gens à générer des portefeuilles et à effectuer des transactions sans avoir besoin de plonger dans les lignes de commandes ni faire tourner un nœud complet. À nouveau, n\'hésitez pas à nous faire part de vos doutes et nous répondrons aussi rapidement que possible. Merci ! ',

      HELP_FAQ_Title: 'Plus de réponses utiles aux questions fréquentes',
      HELP_Contact_Title: 'Moyens de nous contacter'
    };

    module.exports = fr;
  }, {}], 40: [function (require, module, exports) {
    // Hungarian
    'use strict';

    var hu = function () {};
    hu.code = 'hu';
    hu.data = {

      /* Navigation*/
      NAV_YourWallets: 'A Te Tárcáid',
      NAV_AddWallet: 'Tárca hozzáadása',
      NAV_GenerateWallet: 'Tárca generálása',
      NAV_BulkGenerate: 'Több tárca generálása',
      NAV_SendEther: 'Ether küldése',
      NAV_SendTokens: 'Tokenek küldése',
      NAV_Offline: 'Offline tranzakció',
      NAV_WithdrawDAO: 'DAO kifizetése',
      DAO_TitleLong: 'Dao tokenek kifizetése ETH-ért',
      NAV_ClaimDGD: 'DGD igénylése',
      DGD_TitleLong: 'DGD Tokenek igénylése',
      NAV_DeployContract: 'Kontraktus Telepítése',
      NAV_MyWallets: 'Tárcáim',
      NAV_ViewWallet: 'Tárca adatainak megtekintése',
      NAV_Help: 'Segítség',
      NAV_Contact: 'Kapcsolat',

      /* General */
      x_Address: 'A Te címed',
      x_AddessDesc: 'Úgy is ismerheted ezt, mint "Számlaszám #" vagy "Publikus Kulcs". Ez az amit az partnereidnek küldesz, hogy tudjanak ETH-et küldeni neked. Az oldalsó ikon egyszerű módja a saját címed felismerésének.',
      x_Cancel: 'Mégse',
      x_CSV: 'CSV fájl (kódolatlan/unencrypted)',
      x_Download: 'Letöltés',
      x_Json: 'JSON Fájl (kódolatlan/unencrypted)',
      x_JsonDesc: 'Ez a kódolatlan, JSON formátumú változata a privát kulcsodnak. Ez azt jelenti, hogy nincs szükség jelszóra az eléréséhez, viszont ha bárki megtalálja a JSON fájlt, akkor hozzáférhet a tárcádhoz és az Etheredhez a jelszó ismerete nélkül.',
      x_Keystore: 'Keystore/JSON Fájl (Ajánlott · Kódolt/Encrypted · Mist/Geth Formátum)',
      x_Keystore2: 'Keystore/JSON Fájl',
      x_KeystoreDesc: 'Ez a Keystore / JSON fájl ugyanolyan formátumú, amit a Mist és a Geth használ, tehát könnyedén importálhatod a későbbiekben. Leginkább ezt a fájlt ajánlott letölteni és elmenteni.',
      x_Password: 'Jelszó',
      x_Print: 'PapírTárca Nyomtatása ',
      x_PrintDesc: 'Profi Tipp: Kattints a nyomtatásra és mentsd el PDF formátumban, még abban az esetben is, ha nincs nyomtatód!',
      x_PrintShort: 'Nyomtatás',
      x_PrivKey: 'Privát Kulcs (kódolatlan/unencrypted)',
      x_PrivKey2: 'Privát Kulcs',
      x_PrivKeyDesc: 'Ez a kódolatlan szöveges változata a privát kulcsodnak, ami azt jelenti, hogy az eléréséhez nem szükséges jelszó. Ha valaki megtalálta a kódolatlan privát kulcsodat jelszó nélkül is hozzáférhet. Ezért a kódolt változat ajánlott.',
      x_Save: 'Mentés',
      x_TXT: 'TXT fájl (kódolatlan/unencrypted)',
      x_Wallet: 'Tárca',

      /* Header */
      MEW_Warning_1: 'Mindig ellenőrizd az URL-t mielőtt megpróbálod elérni a tárcádat vagy új tárcát hozol létre. Óvakodj az adathalász oldalalaktól!',
      CX_Warning_1: 'Győződj meg róla, hogy van **külső adatmentésed** minden tárcáról, amit itt tárolsz. Több dolog is történhet, ami adatvesztést eredményezhet a Chrome Bővítményben, többek között a Bővítmény törlése vagy újratelepítése. A bővítmény egyszerű módja annak, hogy elérd a tárcáidat, de **nem** annak, hogy elmentsd azokat.',
      MEW_Tagline: 'Nyílt forrású JavaScript-alapú, Kliens-oldali Ether Tárca',
      CX_Tagline: 'Nyílt forrású JavaScript-alapú, Kliens-oldali Ether Tárca Chrome Bővítmény',

      /* Footer */
      FOOTER_1: 'Egy nyílt forrású, javascript-alapú, kliens-oldali eszköz Ethereum Tárcák létrehozására és tranzakicók végrehajtására.',
      FOOTER_1b: 'Készítette:',
      FOOTER_2: 'Az adományokat igazán nagyra értékeljük:',
      FOOTER_3: 'Kliens-oldali Tárca létrehozása:',
      FOOTER_4: 'Jogi nyilatkozat',

      /* Sidebar */
      sidebar_AccountInfo: 'Számlainformáció: ',
      sidebar_AccountAddr: 'Számla címe: ',
      sidebar_AccountBal: 'Számlaegyenleg: ',
      sidebar_TokenBal: 'Token Egyenleg: ',
      sidebar_Equiv: 'Ezzel egyenértékű: ',
      sidebar_TransHistory: 'Tranzakció Történet: ',
      sidebar_DGDBal: 'DGD Crowdsale Információ:',
      sidebar_donation: 'A MyEtherWallet egy szabad, nyílt forrású szolgáltatás az adatod védelmének és a biztonságodnak szentelve. Minél több adomány érkezik, annál több időt tudunk fordítani új funkciók létrehozására, a visszajelzéseidre és olyan szolgáltatást nyújtani, amilyet szeretnél. Mindössze két ember, akik megpróbálnak változtatni a világon. Segítesz nekünk?',
      sidebar_donate: 'Adományozok',
      sidebar_thanks: 'KÖSZÖNJÜK!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Hogyan szeretnéd elérni a tárcádat?',
      decrypt_Title: 'Válaszd ki a privát kulcsod formátumát:',
      decrypt_Select: 'Válassz egy Tárcát:',

      /* Add Wallet */
      ADD_Label_1: 'Mit szeretnél tenni?',
      ADD_Radio_1: 'Új Tárca Létrehozása',
      ADD_Radio_2: 'Válaszd ki a Tárca fájlodat (Keystore / JSON)',
      ADD_Radio_2_alt: 'Válaszd ki a Tárca fájlt: ',
      ADD_Radio_2_short: 'TÁRCA FÁJL KIVÁLASZTÁSA...',
      ADD_Radio_2_success: 'Kiválasztott Tárca: ',
      ADD_Radio_3: 'Illeszd be vagy írd be a Privát Kulcsodat ',
      ADD_Radio_4: 'Tárca hozzáadása megfigyelésre',
      ADD_Label_2: 'Hozz létre egy Nicknevet:',
      ADD_Label_3: 'A Tárcád  kódolt/encrypted. Írj be egy jelszót: ',
      ADD_Label_4: 'Számla hozzáadása megfigyelésre',
      ADD_Warning_1: 'Bármelyik számlát hozzáadhatod "megfigyelésre" a tárcák lapon, anélkül, hogy felöltenél privát kulcsot. Ez **nem azt jelenti**, hogy van hozzáférésed ehhez a tárcához és azt sem, hogy tudsz Ethert küldeni vele.',
      ADD_Label_5: 'Add meg a címet: ',
      ADD_Label_6: 'Tárcád feloldása: ',
      ADD_Label_6_short: 'Feloldás',
      ADD_Label_7: 'Számla Hozzáadása',

      /* Generate Wallets */
      GEN_desc: 'Ha több tárcát szeretnél egyszerre generálni, azt megteheted itt: ',
      GEN_Label_1: 'Adj meg egy erős jelszót! (legalább 9 karakter)',
      GEN_Placeholder_1: 'NE felejtsd el elmenteni! ',
      GEN_SuccessMsg: 'Sikerült! A Tárcád legenerálódott.',
      GEN_Warning: '**Szükséged van a Keystore/JSON Fájlra és a jelszóra vagy a Privát Kulcsra**, ahhoz, hogy hozzáférj ehhez a tárcához a jövőben. Kérlek mentsd el és készíts külső biztonsági mentést is! Nincs lehetőség egy tárca visszaszerzésére, ha nem mented el. Olvasd el a [Segítség lapot](https://www.myetherwallet.com/#help) további instrukciókért.',
      GEN_Label_2: 'Mentsd el a Keystore/JSON fájlt vagy a Privát Kulcsot. Ne felejtsd el a fenti jelszót!',
      GEN_Label_3: 'Mentsd el a címed.',
      GEN_Label_4: 'Nyomtasd ki a papír tárcádat vagy tárold a QR kód változatot. (választható) ',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Generálni kívánt tárcák száma',
      BULK_Label_2: 'Tárcák generálása',
      BULK_SuccessMsg: 'Sikerült! A tárcáid legenerálódtak.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Erre a címre: ',
      SEND_amount: 'Küldendő összeg: ',
      SEND_amount_short: 'Összeg',
      SEND_custom: 'Egyéni',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Teljes egyenleg küldése',
      SEND_generate: 'Tranzakció generálása',
      SEND_raw: 'Raw/Nyers Tranzakció',
      SEND_signed: 'Aláírt Tranzakció',
      SEND_trans: 'Tranzakció Küldése',
      SENDModal_Title: 'Figyelmeztetés! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Most készülsz elküldeni',
      SENDModal_Content_2: 'erre a címre',
      SENDModal_Content_3: 'Biztos, hogy ezt akarod tenni?',
      SENDModal_Content_4: 'JEGYZET: Ha hibával találkozol valószínűleg ethert kell küldened a számládra, hogy fedezni tudd a gas-költségét a token küldésének. A Gas etherben fizetendő.',
      SENDModal_No: 'Nem, vigyél ki innen!',
      SENDModal_Yes: 'Igen, biztos vagyok benne! Tranzakció indítása.',

      /* Tokens */
      TOKEN_Addr: 'Cím: ',
      TOKEN_Symbol: 'Token Szimbólum: ',
      TOKEN_Dec: 'Decimális: ',

      /* Send Transaction */
      TRANS_desc: 'Ha Tokeneket akarsz küldeni, kérlek használd a Token Küldése oldalt ehelyett.',
      TRANS_warning: 'Ha a "Csak ETH" vagy a "Csak ETC" Funkciókat használod a küldés kontraktuson keresztül megy végbe. Néhány szolgáltatásnak problémái lehetnek az ilyen tranzakciók elfogadásával. Kattints és tudj meg többet.',
      TRANS_standard: 'ETH (Standard Tranzakció)',
      TRANS_eth: 'Csak ETH',
      TRANS_etc: 'Csak ETC',
      TRANS_advanced: '+Haladó: Több Adat ',
      TRANS_data: ' Adat: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Egy standard tranzakció 21000 gas-t használ, ami 0.000441 ETH-be fog kerülni. Mi 0.000000021 ETH-nél enyhén-minimálisnáll-magasabb gas árat használunk, annak biztosítása érdekében, hogy gyorsan ki legyen bányászva. Tranazkciós költséget nem számolunk fel.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Csak ETH" és "Csak ETC" Tranzakciók',
      TRANSModal_Content_0: 'Egy jegyzet a különféle tranzakciókról és szolgáltatásokról: ',
      TRANSModal_Content_1: '**ETH (Standard Tranzakció): ** Egy alapértelmezett tranzakciót generál közvetlenül az egyik címről a másikra. A gas alapértéke 21000. Valószínűsíthető, hogy minden ETH, ami ezzel a módszerrel lesz elküldve, végbemegy az ETC láncon is.',
      TRANSModal_Content_2: '**Csak ETH: **  Ez a tranzakciótípus [Timon Rapp replay protection/visszajátszás elleni védelem kontraktusán keresztül küld (ahogy azt Vitalik Buterin adjánlotta)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) tehát a küldés csak az **ETH** láncon megy végbe.',
      TRANSModal_Content_3: '**Csak ETC: ** Ez a tranzakciótípus [Timon Rapp replay protection/visszajátszás elleni védelem kontraktusán keresztül küld (ahogy azt Vitalik Buterin adjánlotta)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) tehát a küldés csak az **ETC** láncon megy végbe.',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Csak Standard Tranzakció szerint küld. Ha a "Csak" kontraktusok valamelyikével küldesz, fel kell venned a kapcsolatot az ügyfélszolgálattal, hogy manuálisan hozzáadhassák az egyenleged vagy visszatérítést küldjenek. [Megpróbálhatod a Shapeshift "split" eszközét is.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Nincsenek ismert problémák. Használható bárhogyan.',
      TRANSModal_Yes: 'Király, most már értem.',
      TRANSModal_No: 'Ó istenem, most még jobban összezavarodtam. Segítsetek!',

      /* Offline Transaction */
      OFFLINE_Title: 'Offline tranzakció generálása és küldése',
      OFFLINE_Desc: 'Az Offline tranzakció generálása három lépsében történik. Az első(1.) és a harmadik(3.) lépéseket online számítógépen kell végrehajtani, a második(2.) lépést pedig offline/airgap számítógépen. Ezzel meggyőződhetsz róla, hogy a privát kulcsod nem érintkezik internetre kötött eszközzel.',
      OFFLLINE_Step1_Title: 'Lépés 1: Információ Generálása (Online Számítógép)',
      OFFLINE_Step1_Button: 'Információ Generálása',
      OFFLINE_Step1_Label_1: 'Erről a címről: ',
      OFFLINE_Step1_Label_2: 'Jegyzet: Ez a FELADÓ címe, nem a FOGADÓÉ A nonce a feladó számlájából generálódik. Ha airgap-elt számítógépet használsz, ez a cím a hidegtárcás számla címe legyen.',
      OFFLINE_Step2_Title: 'Lépés 2: Tranzakció Generálása (Offline Számítógép)',
      OFFLINE_Step2_Label_1: 'Erre a címre: ',
      OFFLINE_Step2_Label_2: 'Érték / Összeg küldésre',
      OFFLINE_Step2_Label_3: 'Gas Ár ',
      OFFLINE_Step2_Label_3b: 'Ez volt látható az online számítógépen az első lépésben.',
      OFFLINE_Step2_Label_4: 'Gas Limit ',
      OFFLINE_Step2_Label_4b: '21000 az alapértelmezett gas limit. Amikor kontraktust küldesz vagy adatot adsz hozzá ezeknek különbözőeknek kell lennie. A nem használt gas visszatérül hozzád.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Ez volt látható az online számítógépen az első lépésben.',
      OFFLINE_Step2_Label_6: 'Adat',
      OFFLINE_Step2_Label_6b: 'Ez választható. Az adat mező gyakran használt, amikor tranzakciót küldesz kontraktusokba.',
      OFFLINE_Step2_Label_7: 'Írd be / Válaszd ki a Privát Kulcsodat / JSON-fájlt.',
      OFFLINE_Step3_Title: 'Lépés 3: Küld / Közzétesz (Online Számítógép)',
      OFFLINE_Step3_Label_1: 'Illeszd be ide az aláírt tranzakciót a második lépésből(Lépés 2) és nyomd meg a "TRANZAKCIÓ KÜLDÉSE" gombot.',

      /* DAO */
      DAO_bal1: 'a 1,919,999. blokknál',
      DAO_bal2: 'jelenlegi',
      DAO_TitleETH: 'DAO kifizetése ETH-ért',
      DAO_TitleETC: 'DAO kifizetése ETC-ért',
      DAO_ETC_Label_1: 'Milyen címre szeretnéd az ETC-t küldeni?',
      DAO_ETC_Label_2: 'A "White Hat Group" fáradhatatlanul dolgozik azon, hogy visszajuttassa hozzád az ETC-det. Mondhatsz egy "köszönömöt" azzal, hogy a kifizetésed bizonyos százalékát eladományozod nekik, ha ezt választod. ',
      DAO_Desc: 'Használd ezt az oldalt, hogy Kifizesd a DAO tokenedet ETH-ért **és ETC-ért**. Ha DAO-t szeretnél küldeni, kérlek használd a Token Küldése oldalt.',
      DAO_Inst: 'Igen. Csak nyomd meg a nagy piros gombot. Ez ilyen egyszerű.',
      DAO_Warning: 'Ha "nincs elegendő egyenleg a gas-hoz" hibaüzenetet kaptál, egy kis összegnyi etherre szükséged lesz a számládon, hogy fedezni tudd a gas költségeit. Adj hozzá 0.001 ethert ehhez a számlához és próbáld újra. ',
      DAOModal_Title: 'Csak megbizonyosodunk...',
      DAOModal_1: 'Most készülsz kifizetni',
      DAOModal_2: 'DAO Tokeneket erre a címre',
      DAOModal_3: 'ezért:', // "in return for"

      /* Digix */
      DGD_Desc: 'Igényeld a DigixDAO (DGD) tokened és a badge-eket. Ahhoz, hogy igényelni tudj részt kellett venned a token eladásban 2016. március 30-án vagy 31-én. Ha DGD-t akarsz küldeni, kérlek használd a Token küldése oldalt.',
      DGD_Label_1: 'A díj becsült költsége:',
      DGD_Label_2: 'Biztosított Maximum Díj:',
      DGD_Label_3: 'Gas Ár:',
      DGD_Generate: 'Igény Generálása',
      DGD_Content: 'Most készülsz igényelni a DGD Tokenjeidet.',

      /* Deploy Contracts */
      DEP_generate: 'Byte-kód Generálása',
      DEP_generated: 'Generált Byte-kód',
      DEP_signtx: 'Aláírt Tranzakció',
      DEP_interface: 'Generált Felület',

      /* My Wallet */
      MYWAL_Nick: 'Tárca Nickname',
      MYWAL_Address: 'Tárca Cím',
      MYWAL_Bal: 'Egyenleg',
      MYWAL_Edit: 'Szerkesztés',
      MYWAL_View: 'Nézet',
      MYWAL_Remove: 'Eltávolítás',
      MYWAL_RemoveWal: 'Tárca Eltávolítása:',
      MYWAL_WatchOnly: 'Megfigyelt Számláid',
      MYWAL_Viewing: 'Tárca megtekintése: ',
      MYWAL_Hide: 'Tárca Információ elrejtése',
      MYWAL_Edit_2: 'Tárca szerkesztése: ',
      MYWAL_Name: 'Tárca Neve',
      MYWAL_Content_1: 'Figyelmeztetés! Arra készülsz, hogy eltávolítod a tárcádat: ',
      MYWAL_Content_2: 'Győződj meg róla, hogy **elmentetted a privát kulcsodat és/vagy Keystore fájlodat a jelszóval együtt,** mielőtt törlöd őket.',
      MYWAL_Content_3: 'Ha használni akarod ezt a tárcát a MyEtherWallet CX-szel a jövőben, manuálisan újra hozzá kell majd adnod a privát kulcs/JSON-nal és jelszóval.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Ez lehetővé teszi számodra, hogy különböző változatú privát kulcsokat tölts le és újranyomtasd a papírtárcádat.  Ezt megteheted úgy, hogy [importálod a számládat a Geth/Mist-be](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Ha ellenőrizni akarod a számládat, azt ajánljuk, hogy használj blokklánc explorert mint az [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Ez lehetővé teszi számodra, hogy különböző változatú privát kulcsokat tölts le és újranyomtasd a papírtárcádat.',
      VIEWWALLET_SuccessMsg: 'Sikerült! Itt vannak a tárcád részletei.',

      /* Chrome Extension */
      CX_error_1: 'Nincsen mentett Tárcád. Kattints ["Tárca Hozzáadása"](/cx-wallet.html#add-wallet) ahhoz, hogy hozzáadj egyet!',
      CX_quicksend: 'GyorsKüldés', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Kérlek írj be érvényes összeget! ',
      ERROR_2: 'A jelszavadnak minimum 9 karakter hosszúságúnak kell lennie. Kérlek győződj meg arról, hogy erős jelszót választasz. ',
      ERROR_3: 'Sajnáljuk, de nem tudjuk felismerni ezt a típusú Tárca fájlt. ',
      ERROR_4: 'Ez nem egy érvényes Tárca fájl. ',
      ERROR_5: 'Ez a egység nem létezik, kérlek használj egyet az alábbi egységek közül ',
      ERROR_6: 'Érvénytelen cím. ',
      ERROR_7: 'Érvénytelen jelszó. ',
      ERROR_8: 'Érvénytelen összeg. ',
      ERROR_9: 'Érvénytelen gas limit. ',
      ERROR_10: 'Érvénytelen adatérték. ',
      ERROR_11: 'Érvénytelen gas összeg. ',
      ERROR_12: 'Érvénytelen nonce. ',
      ERROR_13: 'Érvénytelen aláírású tranzakció. ',
      ERROR_14: 'Egy Tárca ezzel a Nicknévvel már létezik ',
      ERROR_15: 'Tárca nem található. ',
      ERROR_16: 'Úgy tűnik ezzel az ID-vel nem létezik javaslat, vagy hiba történt a javaslat beolvasása közben. ',
      ERROR_17: 'Egy tárca ezzel a címmel már létezik a tárolóban. Kérlek ellenőrizd a tárcák oldalán. ',
      ERROR_18: 'Legalább 0.001 ethernek kell lennie a számládon, ahhoz, hogy fedezni tudd a gas költségeit. Kérlek adj hozzá ethert és próbáld újra!',
      ERROR_19: 'Az összes gas felhasználásra kerülne ezen a tranzakción. Ez azt jelenti, hogy már szavaztál erre a javaslatra vagy a vita periódus már lejárt.',
      ERROR_20: 'Érvénytelen szimbólum',
      SUCCESS_1: 'Érvényes cím',
      SUCCESS_2: 'Tárca sikeresen dekódolva',
      SUCCESS_3: 'Tranzakció elküldve. TX ID: ',
      SUCCESS_4: 'Tárcád sikeresen hozzáadva: ',
      SUCCESS_5: 'Sikeresen szavaztál. Köszönjük, hogy aktív tagja vagy a DAO-nak.',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Érvénytelen küldő',
      GETH_Nonce: 'a Nonce túl alacsony',
      GETH_Cheap: 'A Gas ára túl alacsony az elfogadáshoz',
      GETH_Balance: 'Hiányos egyenleg',
      GETH_NonExistentAccount: 'A Számla nem létezik vagy az egyenleg túl alacsony',
      GETH_InsufficientFunds: 'Hiányos alap a gas-hoz * ár + érték',
      GETH_IntrinsicGas: 'Intrinsic gas túl alacsony',
      GETH_GasLimit: 'Meghaladja a blokk gas limitjét',
      GETH_NegativeValue: 'Negatív érték',

      /* Tranlsation Info */
      translate_version: '0.4.2',
      Translator_Desc: 'Thank you to our translators: ',
      TranslatorName_1: '[belpheg](https://www.myetherwallet.com/?gaslimit=21000&to=0xBF8C35176eAD29257834D5A1592ed50Adb0b6e4f&value=1.0#send-transaction) ·',
      TranslatorAddr_1: '0xBF8C35176eAD29257834D5A1592ed50Adb0b6e4f',
      /* Translator 1: email: zoltan.tapi@donamin.com */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = hu;
  }, {}], 41: [function (require, module, exports) {
    // Indonesian
    'use strict';

    var id = function () {};
    id.code = 'id';
    id.data = {

      /* Navigation*/
      NAV_YourWallets: 'Dompet Anda',
      NAV_AddWallet: 'Tambahkan Dompet',
      NAV_GenerateWallet: 'Buat Dompet',
      NAV_BulkGenerate: 'Pembuatan Multiple Dompet',
      NAV_SendEther: 'Kirim Ether',
      NAV_SendTokens: 'Kirim Token',
      NAV_Offline: 'Kirim Offline',
      NAV_WithdrawDAO: 'Tarik DAO',
      DAO_TitleLong: 'Tarik ETH dari Token DAO Anda',
      NAV_ClaimDGD: 'Klaim DGD',
      DGD_TitleLong: 'Klaim DGD Token Anda',
      NAV_DeployContract: 'Buat Contract',
      NAV_MyWallets: 'Dompet Saya',
      NAV_ViewWallet: 'Lihat Info Dompet',
      NAV_Help: 'Bantuan',
      NAV_Contact: 'Kontak',

      /* General */
      x_Address: 'Alamat Anda',
      x_AddessDesc: 'Biasa dikenal dengan "Account #" atau "Public Key". Berikan alamat ini kepada yang ingin mengirim ether ke Anda. Icon yang ditampilkan di sampingnya memudahkan mengenal alamat Anda.',
      x_Cancel: 'Batal',
      x_CSV: 'File CSV (tidak ter-enkripsi)',
      x_Download: 'Unduh',
      x_Json: 'File JSON (tidak ter-enkripsi)',
      x_JsonDesc: 'Ini adalah "Private Key" Anda dalam format JSON yang tidak ter-enkripsi. Tidak diperlukan password dan siapapun yang memiliki JSON Anda dapat mengakses dompet dan Ether Anda tanpa password.',
      x_Keystore: 'File Keystore/JSON (Format yang direkomendasikan · Ter-enkripsi · Format Mist/Geth)',
      x_Keystore2: 'File Keystore/JSON',
      x_KeystoreDesc: 'File Keystore/JSON ini sesuai dengan format yang dipakai Mist & Geth sehingga memudahkan untuk diimpor di kemudian hari. File ini yang disarankan untuk di unduh dan di backup.',
      x_Password: 'Password',
      x_Print: 'Print Dompet Kertas',
      x_PrintDesc: 'ProTip: klik print dan simpan sebagai PDF jika Anda tidak memiliki printer!',
      x_PrintShort: 'Print',
      x_PrivKey: 'Private Key (Tidak ter-enkripsi)',
      x_PrivKey2: 'Private Key',
      x_PrivKeyDesc: 'Ini adalah versi text yang tidak ter-enkripsi dan tidak memerlukan password. Jika file yang tidak ter-enkripsi ini sampai didapatkan orang lain, mereka dapat mengakses dompet Anda tanpa password. Oleh karenanya, sangat direkomendasikan untuk selalu memakai versi yang ter-enkripsi.',
      x_Save: 'Simpan',
      x_TXT: 'File TXT file (Tidak ter-enkripsi)',
      x_Wallet: 'Dompet',

      /* Header */
      MEW_Warning_1: 'Pastikan menggunakan URL yang benar sebelum mengakses Dompet Anda atau sebelum membuat dompet baru. Waspadai situs phishing!',
      CX_Warning_1: 'Pastikan membuat **backup eksternal** dari semua dompet yang ada. Banyak hal bisa terjadi yang bisa membuat data di Chrome Extension hilang, termasuk saat menginstall maupun menguninstall extension ini. Extension ini hanya untuk memudahkan mengakses dompet Anda, **BUKAN** untuk membackup.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet',
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extension',

      /* Footer */
      FOOTER_1: 'Client-side tool open source berbasis javascript untuk membuat Dompet dan transaksi Ethereum.',
      FOOTER_1b: 'Oleh',
      FOOTER_2: 'Donasi Anda akan sangat dihargai:',
      FOOTER_3: 'Pembuatan Dompet Client-side wallet oleh',
      FOOTER_4: 'Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Informasi Akun: ',
      sidebar_AccountAddr: 'Alamat Akun: ',
      sidebar_AccountBal: 'Saldo Akun: ',
      sidebar_TokenBal: 'Saldo Token: ',
      sidebar_Equiv: 'Nilai Ekuivalent: ',
      sidebar_TransHistory: 'Sejarah Transaksi: ',
      sidebar_DGDBal: 'Informasi Crowdsale DGD:',
      sidebar_donation: 'MyEtherWallet dapat dipergunakan secara cuma-cuma berdasarkan prinsip open source dengan tetap menjaga privasi dan keamanan. Semakin banyak donasi yang kami terima, semakin banyak waktu yang kami dapat luangkan untuk membuat fitur-fitur baru dan mewujudkan usulan dan keinginan para penggunanya. Tim kami yang terdiri dari hanya dua orang sangat membutuhkan dukungan Anda untuk mewujudkan cita-cita kami dalam membuat dunia yang semakin baik',
      sidebar_donate: 'Kirim Donasi',
      sidebar_thanks: 'Terima Kasih!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Pilihan cara mengakses dompet Anda?',
      decrypt_Title: 'Pilih format private key:',
      decrypt_Select: 'Pilih dompet:',

      /* Add Wallet */
      ADD_Label_1: 'Pilihan cara membuat dompet',
      ADD_Radio_1: 'Buat dompet baru',
      ADD_Radio_2: 'Pilih file dompet (Keystore/JSON)',
      ADD_Radio_2_alt: 'Pilih file dompet: ',
      ADD_Radio_2_short: 'PILIH FILE DOMPET...',
      ADD_Radio_3: 'Paste/Ketik Private Key Anda',
      ADD_Radio_4: 'Tambah akun untuk dilihat',
      ADD_Label_2: 'Buat Alias:',
      ADD_Label_3: 'File Dompet anda ter-enkripsi. Masukkan password: ',
      ADD_Label_4: 'Tambah akun untuk dilihat',
      ADD_Warning_1: 'Akun untuk "dilihat" dapat ditambahkan tanpa menggunakan private key. Namun berarti tidak ada akses ke dompet tersebut dan transfer Ether tidak bisa dilakukan.',
      ADD_Label_5: 'Masukkan alamat: ',
      ADD_Label_6: 'Unlock dompet: ',
      ADD_Label_6_short: 'Unlock',
      ADD_Label_7: 'Tambah Akun',

      /* Generate Wallets */
      GEN_desc: 'Jika Anda memerlukan lebih dari satu dompet, Anda dapat memakai fitur : ',
      GEN_Label_1: 'Masukkan password yang kuat (setidaknya 9 karakter)',
      GEN_Placeholder_1: 'JANGAN LUPA untuk mengingat & menyimpannya!',
      GEN_SuccessMsg: 'Berhasil! Dompet Anda sudah dibuat.',
      GEN_Warning: '**DIPERLUKAN File Keystore/JSON & password atau Private Key** untuk mengakses dompet Anda. Simpan dan backup dengan baik file ini! Tidak ada mekanisme untuk me-recover dompet jika file-nya hilang. Baca instruksi lengkapnya [di sini](https://www.myetherwallet.com/#help).',
      GEN_Label_2: 'Simpan Keystore/JSON atau Private Key. Jangan lupa Password-nya.',
      GEN_Label_3: 'Simpan alamat dompet Anda.',
      GEN_Label_4: 'Print Dompet Kertas Anda, atau simpan versi QR code-nya. (Opsional)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Jumlah Dompet yang akan dibuat',
      BULK_Label_2: 'Buat Dompet',
      BULK_SuccessMsg: 'Sukses! Dompet sudah berhasil dibuat.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Alamat tujuan: ',
      SEND_amount: 'Jumlah untuk dikirim: ',
      SEND_amount_short: 'Jumlah',
      SEND_custom: 'Setting Lainnya',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Kirim seluruh Saldo',
      SEND_generate: 'Laksanakan Transaksi',
      SEND_raw: 'Transaksi Raw',
      SEND_signed: '"Signed Transaction"',
      SEND_trans: 'Kirim Transaksi',
      SENDModal_Title: 'PERINGATAN! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Anda akan mengirim',
      SENDModal_Content_2: 'ke alamat',
      SENDModal_Content_3: 'Apakah ini benar?',
      SENDModal_Content_4: 'CATATAN: Jika terjadi Error, kemungkinan Anda harus menambah Ether ke akun Anda untuk menutup biaya gas dan pengiriman. Gas dibayar dalam Ether.',
      SENDModal_No: 'Batalkan!',
      SENDModal_Yes: 'Ya! Laksanakan Transaksi-nya.',

      /* Tokens */
      TOKEN_Addr: 'Alamat: ',
      TOKEN_Symbol: 'Simbol Token: ',
      TOKEN_Dec: 'Desimal: ',

      /* Send Transaction */
      TRANS_desc: 'Untuk pengiriman Token, gunakan halaman "Kirim Token".',
      TRANS_warning: 'Penggunaan fitur "Hanya ETH" atau "Hanya ETC" memakai pengiriman melalui Kontrak. Beberapa layanan tidak menerima transaksi jenis ini. Baca lebih lanjut.',
      TRANS_standard: 'ETH (Transaksi Standar)',
      TRANS_eth: 'Hanya ETH',
      TRANS_etc: 'Hanya ETC',
      TRANS_advanced: '+Advanced: Tambah Data ',
      TRANS_data: ' Data: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Transaksi standar menggunakan 21000 gas membutuhkan 0.000441 ETH. Kami memakai harga gas sedikit-diatas-harga-gas-minimum senilai 0.000000021 ETH untuk mempercepat. Kami tidak mengambil biaya atas transaksi.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Transaksi "Hanya ETH" dan "Hanya ETC"',
      TRANSModal_Content_0: 'Catatan terkait jenis transaksi dan layanan:',
      TRANSModal_Content_1: '**ETH (Transaksi Standar): ** Transaksi default ini melakukan pengiriman langsung dari alamat pengirim ke alamat tujuan. Nilai Gas 21000. Besar kemungkinan ETH yang dikirim dengan metode ini akan di "replay" di rantai ETC.',
      TRANSModal_Content_2: '**Hanya ETH: ** Pengiriman melalui [kontrak penangkal "replay" oleh Timon Rapp (direkomendasikan oleh VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) sehingga hanya dilaksanakan di rantai **ETH** saja.',
      TRANSModal_Content_3: '**Hanya ETC: ** Pengiriman melalui [kontrak penangkal "replay" oleh Timon Rapp (direkomendasikan oleh VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) sehingga hanya dilaksanakan di rantai **ETC** saja. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Hanya melakukan pengiriman melalui Transaksi Standar saja. Jika Anda mengirim menggunakan "Hanya ETH" atau "Hanya ETC", hubungi layanan konsumen mereka untuk menambahkan saldo Anda secara manual atau membatalkan transaksinya. [Bisa juga dicoba fasilitas "split" dari Shapeshift.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Tidak ada masalah dengan tipe pengiriman. Anda bisa memilih metode yang mana saja.',
      TRANSModal_Yes: 'Baik, saya sudah paham sekarang.',
      TRANSModal_No: 'Waduh, saya jadi tambah bingung. Bantu saya.',

      /* Offline Transaction */
      OFFLINE_Title: 'Penyiapan & Pengiriman Transaksi Offline',
      OFFLINE_Desc: 'Penyiapan Transaksi Offline memerlukan tiga langkah. Langkah 1 & 3 dilakukan menggunakan komputer "online", sementara langkah 2 menggunakan komputer yang "offline/airgapped". Ini untuk menjaga agar private key Anda tidak menyentuh perangkat yang terkoneksi dengan internet.',
      OFFLLINE_Step1_Title: 'Langkah 1: Pelengkapan Informasi (komputer Online)',
      OFFLINE_Step1_Button: 'Buat Informasi',
      OFFLINE_Step1_Label_1: 'Alamat Pengirim: ',
      OFFLINE_Step1_Label_2: 'Catatan: Ini adalah alamat PENGIRIM, bukan alamat TUJUAN. "Nonce" dibuat oleh akun pengirim. Jika memakai komputer yang "airgapped", ini adalah alamat akun "cold-storage".',
      OFFLINE_Step2_Title: 'Langkah 2: Pelengkapan Transaksi (komputer Offline)',
      OFFLINE_Step2_Label_1: 'Alamat Tujuan: ',
      OFFLINE_Step2_Label_2: 'Nilai/Jumlah untuk dikirim',
      OFFLINE_Step2_Label_3: 'Harga Gas ',
      OFFLINE_Step2_Label_3b: 'Nilai ini dihasilkan/ditunjukkan dari Langkah 1 yang dilakukan melalui komputer online di atas.',
      OFFLINE_Step2_Label_4: 'Limit Gas ',
      OFFLINE_Step2_Label_4b: 'Limit Gas di set pada 21000. Jika ada data tambahan atau pengiriman melalui kontrak, nilainya bisa berbeda. Gas yang tidak terpakai akan dikembalikan.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Ini ditunjukkan dari Langkah 1 di komputer online di atas.',
      OFFLINE_Step2_Label_6: 'Data',
      OFFLINE_Step2_Label_6b: 'Ini opsional/tidak harus diisi. Data biasanya diperlukan jika bertransaksi melalui kontrak.',
      OFFLINE_Step2_Label_7: 'Masukkan/Pilih "Private Key"/JSON Anda.',
      OFFLINE_Step3_Title: 'Langkah 3: Kirim/Publikasikan Transaksi (komputer Online)',
      OFFLINE_Step3_Label_1: '"Paste" data "Signed Transaction" dari Langkah 2 di atas dan klik tombol "Kirim Transaksi".',

      /* DAO */
      DAO_bal1: 'pada blok 1,919,999',
      DAO_bal2: 'saat ini',
      DAO_TitleETH: 'Tarik DAO untuk ETH',
      DAO_TitleETC: 'Tarik DAO untuk ETC',
      DAO_ETC_Label_1: 'Ke alamat mana ETC harus dikirimkan?',
      DAO_ETC_Label_2: 'Atas kerja keras "White Hat Group" yang telah berhasil merebut kembali ETC Anda, wujudkan rasa "terima kasih" Anda dengan mendonasikan sebagian dari jumlah penarikan. ',
      DAO_Desc: 'Pakai halaman ini untuk penarikan ETH **& ETC** dari DAO Anda. Untuk pengiriman DAO, gunakan halaman "Kirim Token".',
      DAO_Inst: 'Cukup dengan menekan tombol merah besar ini. Mudah kan!.',
      DAO_Warning: 'Jika terjadi error "Insufficient balance for gas", pastikan terdapat sejumlah kecil Ether di Akun untuk menutup biaya gas. Tambahkan 0.001 ether ke akun ini dan silakan coba lagi. ',
      DAOModal_Title: 'Hanya untuk meyakinkan...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Anda akan melakukan penarikan',
      DAOModal_2: 'Token DAO ke',
      DAOModal_3: 'untuk', // "in return for"

      /* Digix */
      DGD_Desc: 'Pakai halaman ini untuk meng-klaim Token & Badge DigixDAO (DGD). Klaim hanya bisa dilakukan jika Anda berpatisipasi dalam penjualan token pada tanggal 30/31 Maret 2016.  Untuk pengiriman DGD, pakai halaman "Kirim Token".',
      DGD_Label_1: 'Perkiraan biaya:',
      DGD_Label_2: 'Biaya maksimal yang disediakan:',
      DGD_Label_3: 'Harga Gas:',
      DGD_Generate: 'Buat Klaim',
      DGD_Content: 'Anda akan melakukan klaim Token DGD.',

      /* Deploy Contracts */
      DEP_generate: 'Buat Bytecode',
      DEP_generated: 'Bytecode yang dibuat',
      DEP_signtx: 'Laksanakan Transaksi',
      DEP_interface: 'Interface yang dibuat',

      /* My Wallet */
      MYWAL_Nick: 'Dompet Alias',
      MYWAL_Address: 'Alamat Dompet',
      MYWAL_Bal: 'Saldo',
      MYWAL_Edit: 'Edit',
      MYWAL_View: 'Tampilkan',
      MYWAL_Remove: 'Hapus',
      MYWAL_RemoveWal: 'Hapus Dompet:',
      MYWAL_WatchOnly: 'Akun Untuk-Dilihat-Saja Anda',
      MYWAL_Viewing: 'Viewing Wallet: ',
      MYWAL_Hide: 'Sembunyikan Informasi Dompet',
      MYWAL_Edit_2: 'Edit Dompet: ',
      MYWAL_Name: 'Nama Dompet',
      MYWAL_Content_1: 'Peringatan! Anda akan menghapus Dompet: ',
      MYWAL_Content_2: 'Pastkan Anda telah **menyimpan private key dan/atau File Keystore File dan password** sebelum menghapus Dompet.',
      MYWAL_Content_3: 'Jika Anda akan memakai dompet ini dengan MyEtherWallet CX Anda ke depan, private key/JSON dan password harus ditambahkan lagi secara manual.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Memungkinkan Anda untuk mencetak Dompet Kertas dari berbagai format atau versi "private key". Hal ini diperlukan pada saat anda ingin [mengimpor akun Anda ke Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Jika Anda hanya ingin pengecekan saldo, pakailah salah satu layanan blockchain explorer seperti [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Untuk pencetakan Dompet Kertas dari berbagai format "private key". ',
      VIEWWALLET_SuccessMsg: 'Berhasil! Berikut detil dari dompet Anda.',

      /* Chrome Extension */
      CX_error_1: 'Anda tidak memiliki Dompet yang disimpan sebelumnya. Klik ["Buat Dompet"](/cx-wallet.html#add-wallet) untuk membuatnya!',
      CX_quicksend: 'QuickSend', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Masukkan jumlah yang valid.',
      ERROR_2: 'Password minimal terdiri dari 9 huruf. Pastikan password Anda kuat. ',
      ERROR_3: 'Maaf! tipe dompet ini tidak dikenal. ',
      ERROR_4: 'Ini bukan file dompet yang valid. ',
      ERROR_5: 'Unit tidak valid, gunakan salah satu dari unit berikut ',
      ERROR_6: 'Alamat tidak valid. ',
      ERROR_7: 'Password tidak valid. ',
      ERROR_8: 'Jumlah tidak valid. ',
      ERROR_9: 'Gas limit tidak valid. ',
      ERROR_10: 'Nilai data tidak valid. ',
      ERROR_11: 'Jumlah Gas tidak valid. ',
      ERROR_12: 'Nonce tidak valid. ',
      ERROR_13: 'Signed transaction tidak valid. ',
      ERROR_14: 'Sudah ada Dompet dengan nickname ini. ',
      ERROR_15: 'Dompet tidak ditemukan. ',
      ERROR_16: 'Tidak ditemukan proposal dengan ID ini atau terjadi error saat membaca proposal ini. ',
      ERROR_17: 'Terdapat dompet dengan alamat yang sama di storage. Cek kembali halaman dompet Anda. ',
      ERROR_18: 'Minimal harus ada 0.001 ether di akun untuk menutup biaya gas. Tambahkan ether dan coba lagi. ',
      ERROR_19: 'Semua gas akan digunakan pada transaksi ini. Ini berarti Anda telah memberikan suara pada proposal ini atau periode perdebatan telah berakhir.',
      ERROR_20: 'Simbol tidak valid',
      SUCCESS_1: 'Alamat valid',
      SUCCESS_2: 'Dompet telah ter-dekripsi',
      SUCCESS_3: 'Transaksi diajukan. TX ID: ',
      SUCCESS_4: 'Dompet Anda telah ditambahkan: ',
      SUCCESS_5: 'Anda telah berhasil melakukan voting. Terima kasih untuk menjadi peserta aktif dalam The DAO.',
      SUCCESS_6: 'File Terpilih: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Pengirim tidak valid',
      GETH_Nonce: 'Nonce terlalu rendah',
      GETH_Cheap: 'Harga Gas terlalu kecil untuk dapat diterima',
      GETH_Balance: 'Saldo tidak mencukupi',
      GETH_NonExistentAccount: 'Akun tidak ditemukan atau saldo terlalu rendah',
      GETH_InsufficientFunds: 'Tidak cukup saldo untuk gas * harga + nilai',
      GETH_IntrinsicGas: 'Gas intrinsik terlalu rendah',
      GETH_GasLimit: 'Melebihi limit blok gas',
      GETH_NegativeValue: 'Nilai negatif',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Thank you to our translators: ',
      TranslatorName_1: '[Yos Ginting](https://www.myetherwallet.com/?gaslimit=21000&to=0x8F646C5c215be6E0163f02Bd2eB97AFC2DF70e5c&value=1.0#send-transaction)',
      TranslatorAddr_1: '0x8F646C5c215be6E0163f02Bd2eB97AFC2DF70e5c',
      /* Translator 1: 05 Sep 2016: Translation completed (except HELP texts); 09 Sep 2016: Revisions on some words and phrases */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = id;
  }, {}], 42: [function (require, module, exports) {
    // Italian
    // Last sync with en.js: commit aeefb6da17e37b703051085f3aa87f3
    'use strict';

    var it = function () {};
    it.code = 'it';
    it.data = {

      /* Navigation*/
      NAV_YourWallets: 'I tuoi portafogli',
      NAV_AddWallet: 'Aggiungi portafoglio',
      NAV_GenerateWallet: 'Genera portafoglio',
      NAV_BulkGenerate: 'Generazione multipla',
      NAV_SendEther: 'Invia ether',
      NAV_SendTokens: 'Invia token',
      NAV_Offline: 'Invia offline',
      NAV_WithdrawDAO: 'Preleva DAO',
      DAO_TitleLong: 'Preleva i tuoi token DAO convertendoli in ETH',
      NAV_ClaimDGD: 'Richiedi DGD',
      DGD_TitleLong: 'Richiedi i tuoi token DGD',
      NAV_DeployContract: 'Pubblica contratto',
      NAV_MyWallets: 'I miei portafogli',
      NAV_ViewWallet: 'Informazioni portafoglio',
      NAV_Help: 'Aiuto',
      NAV_Contact: 'Contatti',

      /* General */
      x_Password: 'Password',
      x_Download: 'Download',
      x_Address: 'Il tuo indirizzo',
      x_Save: 'Salva',
      x_Cancel: 'Annulla',
      x_AddessDesc: 'Potresti sentirlo chiamare "Numero di conto" o "Chiave pubblica". È ciò che dai a chi ti vuole inviare degli ether. L\'icona è un modo facile di riconoscere il tuo indirizzo.',
      x_PrivKey: 'Chiave privata (non crittografata)',
      x_PrivKey2: 'Chiave privata',
      x_PrivKeyDesc: 'Questa è la versione testuale non crittografata della tua chiave privata, il che significa che non serve una password. Se qualcuno trovasse la tua chiave privata non crittografata potrebbe avere accesso al tuo portafoglio senza una password. Per questa ragione di solito si consigliano le versioni crittografate.',
      x_Keystore: 'File Keystore/JSON (Consigliato · Crittografato · Formato Mist/Geth)',
      x_Keystore2: 'File Keystore / JSON',
      x_KeystoreDesc: 'Questo file Keystore/JSON è compatibile con il formato usato da Mist e Geth, in modo da poterlo facilmente importare in futuro. È il file consigliato da scaricare e conservare.',
      x_Json: 'File JSON (non crittografato)',
      x_JsonDesc: 'Questa è la tua chiave privata in formato JSON non crittografato. Significa che non hai bisogno della password, ma chiunque trovi questo file JSON potrà avere accesso al tuo portafoglio e ai tuoi ether senza password.',
      x_PrintShort: 'Stampa',
      x_Print: 'Stampa portafoglio cartaceo',
      x_PrintDesc: 'Suggerimento Pro: Fai clic su stampa e salvalo come PDF, anche se non hai una stampante!',
      x_CSV: 'File CSV (non crittografato)',
      x_TXT: 'File TXT (non crittografato)',
      x_Wallet: 'Portafoglio',

      /* Header */
      MEW_Warning_1: 'Controlla sempre l\'URL prima di accedere al tuo portafoglio o di crearne uno nuovo. Fai attenzione ai siti di phishing!',
      CX_Warning_1: 'Assicurati di avere **dei backup esterni** di ogni portafoglio salvato qui. Ci sono molte cose che potrebbero causare la perdita dei dati di questa estensione di Chrome, come la disinstallazione e reinstallazione dell\'estensione. Questa estensione è un mezzo per accedere facilmente ai tuoi portafogli, **non** un modo di salvarli al sicuro.',
      MEW_Tagline: 'Portafoglio ether JavaScript lato client Open Source',
      CX_Tagline: 'Portafoglio ether JavaScript lato client Open Source (Estensione Chrome)',

      /* Footer */
      FOOTER_1: 'Uno strumento open source, in javascript, lato client per generare portafogli Ethereum e inviare transazioni.',
      FOOTER_1b: 'Creato da',
      FOOTER_2: 'Donazioni molto apprezzate:',
      FOOTER_3: 'Generazione portafogli lato client da parte di',
      FOOTER_4: 'Dichiarazione di non responsabilità',

      /* Sidebar */
      sidebar_AccountInfo: 'Informazioni conto: ',
      sidebar_AccountAddr: 'Indirizzo conto: ',
      sidebar_AccountBal: 'Saldo conto: ',
      sidebar_TokenBal: 'Saldo token: ',
      sidebar_Equiv: 'Valori equivalenti: ',
      sidebar_TransHistory: 'Storico transazioni: ',
      sidebar_DGDBal: 'Informazioni crowdsale DGD:',
      sidebar_donation: 'MyEtherWallet è un servizio gratuito e open-source votato alla tua privacy e sicurezza. Più donazioni riceviamo, più tempo dedichiamo a creare nuove funzionalità, considerare i tuoi commenti, e darti ciò che vuoi. Siamo solo due persone che provano a cambiare il mondo. Ci aiuti?',
      sidebar_donate: 'Dona',
      sidebar_thanks: 'GRAZIE!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Come vuoi accedere al tuo portafoglio?',
      decrypt_Title: 'Seleziona il formato della tua chiave privata:',
      decrypt_Select: 'Seleziona un portafoglio:',

      /* Add Wallet */
      ADD_Label_1: 'Cosa vuoi fare?',
      ADD_Radio_1: 'Genera un nuovo portafoglio',
      ADD_Radio_2: 'Seleziona il file del tuo portafoglio (Keystore / JSON)',
      ADD_Radio_2_alt: 'Seleziona il file del tuo portafoglio: ',
      ADD_Radio_2_short: 'SELEZIONA FILE PORTAFOGLIO...',
      ADD_Radio_3: 'Incolla/Inserisci la tua chiave privata ',
      ADD_Radio_4: 'Aggiungi un conto da osservare',
      ADD_Label_2: 'Crea un nome:',
      ADD_Label_3: 'Il portafoglio è crittografato. Inserire la password: ',
      ADD_Label_4: 'Aggiungi un conto da osservare',
      ADD_Warning_1: 'Puoi aggiungere qualunque conto da "osservare" nella scheda dei portafogli senza caricare una chiave privata. Ciò ** non ** significa che avrai accesso a quel portafoglio, né che potrai trasferire gli Ether lì contenuti.',
      ADD_Label_5: 'Inserisci l\'indirizzo: ',
      ADD_Label_6: 'Sblocca portafoglio: ',
      ADD_Label_6_short: 'Sblocca',
      ADD_Label_7: 'Aggiungi conto',

      /* Generate Wallets */
      GEN_desc: 'Se vuoi generare più portafogli, puoi farlo qui: ',
      GEN_Label_1: 'Inserisci una password robusta (almeno 9 caratteri)',
      GEN_Placeholder_1: 'NON dimenticarti di salvarla!',
      GEN_SuccessMsg: 'Perfetto! Il tuo portafoglio è stato generato.',
      GEN_Warning: '**Avrai bisogno del tuo file Keystore/JSON e della password o della chiave privata** per avere accesso a questo portafoglio in futuro. Ti preghiamo di salvarlo e copiarlo su un supporto esterno! Non c\'è alcun modo per recuperare un portafoglio se non lo salvi. Leggi la [pagina di aiuto](https://www.myetherwallet.com/#help) per le istruzioni.',
      GEN_Label_2: 'Salva il tuo file Keystore/JSON o la chiave privata. Non dimenticare la password che hai inserito.',
      GEN_Label_3: 'Salva il tuo indirizzo.',
      GEN_Label_4: 'Stampa il tuo portafoglio cartaceo, o salva una versione QR code. (facoltativo)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Numero di portafogli da generare',
      BULK_Label_2: 'Genera portafogli',
      BULK_SuccessMsg: 'Perfetto! I tuoi portafogli sono stati generati.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Indirizzo destinatario: ',
      SEND_amount: 'Importo da inviare: ',
      SEND_amount_short: 'Importo',
      SEND_custom: 'Altro',
      SEND_gas: 'Gas',
      SEND_generate: 'Genera transazione',
      SEND_raw: 'Transazione grezza',
      SEND_signed: 'Transazione firmata',
      SEND_trans: 'Invia transazione',
      SEND_TransferTotal: 'Invia l\'intero saldo',
      SENDModal_Title: 'Attenzione! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Stai per inviare',
      SENDModal_Content_2: 'all\'indirizzo',
      SENDModal_Content_3: 'Sei sicuro di volerlo fare?',
      SENDModal_Content_4: 'NOTA: Se ricevi un errore, molto probabilmente dovrai aggiungere ether al tuo conto per coprire il costo del gas necessario ad inviare i token. Il gas si paga in ether.',
      SENDModal_No: 'No, tiratemi fuori da qui!',
      SENDModal_Yes: 'Sì, sono sicuro! Esegui la transazione.',

      /* Tokens */
      TOKEN_Addr: 'Indirizzo: ',
      TOKEN_Symbol: 'Simbolo del token: ',
      TOKEN_Dec: 'Decimali: ',

      /* Send Transaction */
      TRANS_desc: 'Se invece volevi inviare dei token, utilizza la pagina "Invia token".',
      TRANS_warning: 'Se usi le opzioni "Solo ETH" o "Solo ETC" invierai tramite un contratto. Certi servizi hanno difficoltà ad accettare queste transazioni. Leggi tutto.',
      TRANS_standard: 'ETH (transazione standard)',
      TRANS_eth: 'Solo ETH',
      TRANS_etc: 'Solo ETC',
      TRANS_advanced: '+Avanzate: aggiungi dati ',
      TRANS_data: ' Dati: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Una transazione standard che utilizza 21000 gas costerà 0,000441 ETH. Utilizziamo un prezzo del gas leggermente al di sopra del minimo pari a 0,000000021 ETH per assicurarci che venga elaborata velocemente. Noi non prendiamo commissioni.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Transazioni "Solo ETH" e "Solo ETC"',
      TRANSModal_Content_0: 'Una nota sulle varie transazioni e sui vari servizi:',
      TRANSModal_Content_1: '**ETH (transazione standard): ** Genera una transazione di default direttamente da un indirizzo ad un altro. La quantità di gas predefinita è 21000. È probabile che ogni ETH inviato con questo metodo sarà replicato sulla catena ETC.',
      TRANSModal_Content_2: '**Solo ETH: ** Invia tramite [il contratto di protezione dalle repliche di Timon Rapp (come consigliato da VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) in modo da inviare solamente sulla catena **ETH**.',
      TRANSModal_Content_3: '**Solo ETC: ** Invia tramite [il contratto di protezione dalle repliche di Timon Rapp (come consigliato da VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) in modo da inviare solamente sulla catena **ETC**. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Inviare solamente tramite la transazione standard. Se utilizzi i contratti "Solo XXX", dovrai metterti in contatto con il loro staff di supporto in modo che aggiornino manualmente il tuo saldo o ti rimborsino. [Puoi anche provare lo strumento "split" di Shapeshift.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Nessun problema noto. Usa qualunque opzione.',
      TRANSModal_Yes: 'Bene, ho capito.',
      TRANSModal_No: 'Oh no, sono ancora più confuso. Aiuto.',

      /* Offline Transaction */
      OFFLINE_Title: 'Genera & invia una transazione offline',
      OFFLINE_Desc: 'Per generare transazioni offline sono necessari tre passaggi. Svolgerai i passi 1 e 3 su un computer online, e il passo 2 su un computer offline/*air-gapped*. Questo per assicurarsi che le tue chiavi private non tocchino un dispositivo connesso a Internet.',
      OFFLLINE_Step1_Title: 'Passo 1: generazione delle informazioni (computer online)',
      OFFLINE_Step1_Button: 'Genera informazioni',
      OFFLINE_Step1_Label_1: 'Indirizzo mittente: ',
      OFFLINE_Step1_Label_2: 'Nota: Questo è l\'indirizzo MITTENTE, non l\'indirizzo DESTINATARIO. Il *nonce* è generato dal conto di origine. Se stessi usando un computer *air-gapped*, sarebbe l\'indirizzo del conto offline.',
      OFFLINE_Step2_Title: 'Passo 2: generazione della transazione (computer offline)',
      OFFLINE_Step2_Label_1: 'Indirizzo destinatario: ',
      OFFLINE_Step2_Label_2: 'Valore / importo da inviare',
      OFFLINE_Step2_Label_3: 'Prezzo gas ',
      OFFLINE_Step2_Label_3b: 'Questo valore è stato mostrato nel passo 1 sul computer online.',
      OFFLINE_Step2_Label_4: 'Limite gas ',
      OFFLINE_Step2_Label_4b: '21000 è il limite gas predefinito. Quando invii a contratti o aggiungi dati potresti aver bisogno di un valore maggiore. Eventuale gas non utilizzato ti sarà restituito.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Questo valore è stato mostrato nel passo 1 sul computer online.',
      OFFLINE_Step2_Label_6: 'Dati',
      OFFLINE_Step2_Label_6b: 'Facoltativo. I dati sono usati spesso nelle transazioni inviate ai contratti.',
      OFFLINE_Step2_Label_7: 'Inserisci / seleziona la tua chiave privata o JSON.',
      OFFLINE_Step3_Title: 'Passo 3: Invia / pubblica la transazione (computer online)',
      OFFLINE_Step3_Label_1: 'Incolla la transazione firmata dal passo 2 qui e premi il pulsante "INVIA TRANSAZIONE".',

      /* DAO */
      DAO_bal1: 'al blocco 1.919.999',
      DAO_bal2: 'adesso',
      DAO_TitleETH: 'Preleva DAO e ricevi ETH',
      DAO_TitleETC: 'Preleva DAO e ricevi ETC',
      DAO_ETC_Label_1: 'A che indirizzo vuoi che vengano inviati i tuoi ETC?',
      DAO_ETC_Label_2: 'Il gruppo "White Hat" ha lavorato senza sosta per farti riavere i tuoi ETC. Puoi dire "grazie" donando una percentuale della somma che prelevi, se lo desideri. ',
      DAO_Desc: 'Usa questa scheda per prelevare i tuoi token DAO e ottenere ETH **& ETC**. Se invece vuoi inviare token DAO, utilizza la scheda "Invia token".',
      DAO_Inst: 'Sì. Devi solo premere questo grosso pulsante rosso. È davvero così semplice.',
      DAO_Warning: 'Se ricevi l\'errore "Saldo insufficiente per il gas", è perché devi avere una piccola quantità di ether nel tuo conto per coprire i costi del gas. Aggiungi 0,001 ETH a questo conto e riprova. ',
      DAOModal_Title: 'Tanto per essere sicuri...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Stai per prelevare',
      DAOModal_2: 'token DAO inviando a',
      DAOModal_3: 'una somma di', // "in return for"

      /* Digix */
      DGD_Desc: 'Richiedi i tuoi token e le tue medaglie DigixDAO (DGD). Per poterli richiedere devi aver partecipato alla vendita dei token del 30 e 31 marzo 2016.  Se invece desideri inviare DGD, utilizza la scheda "Invia token".',
      DGD_Label_1: 'Stima commissione utilizzata:',
      DGD_Label_2: 'Commissione massima fornita:',
      DGD_Label_3: 'Prezzo gas:',
      DGD_Generate: 'Genera richiesta',
      DGD_Content: 'Stai per richiedere i tuoi token DGD.',

      /* Deploy Contracts */
      DEP_generate: 'Genera bytecode',
      DEP_generated: 'Bytecode generato',
      DEP_signtx: 'Firma transazione',
      DEP_interface: 'Interfaccia generata',

      /* My Wallet */
      MYWAL_Nick: 'Nome portafoglio',
      MYWAL_Address: 'Indirizzo portafoglio',
      MYWAL_Bal: 'Saldo',
      MYWAL_Edit: 'Modifica',
      MYWAL_View: 'Mostra',
      MYWAL_Remove: 'Rimuovi',
      MYWAL_RemoveWal: 'Rimozione portafoglio:',
      MYWAL_WatchOnly: 'I tuoi conti osservati',
      MYWAL_Viewing: 'Dettagli portafoglio: ',
      MYWAL_Hide: 'Nascondi informazioni portafoglio',
      MYWAL_Edit_2: 'Modifica portafoglio: ',
      MYWAL_Name: 'Nome portafoglio',
      MYWAL_Content_1: 'Attenzione! Stai per rimuovere il tuo portafoglio: ',
      MYWAL_Content_2: 'Assicurati di aver **salvato la chiave privata e/o il file Keystore e la password** prima di rimuoverlo.',
      MYWAL_Content_3: 'Se vorrai utilizzare questo portafoglio con MyEtherWallet CX in futuro, dovrai ri-aggiungerlo manualmente tramite la chiave privata/JSON e password.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Qui è possibile scaricare diverse versioni delle chiavi private e ristampare il portafoglio cartaceo. Potresti volerlo fare per  [importare il tuo conto in Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Se vuoi controllare il tuo saldo, ti consigliamo di utilizzare uno strumento per esplorare la *blockchain* come [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Qui è possibile scaricare diverse versioni delle chiavi private e ristampare il portafoglio cartaceo. ',
      VIEWWALLET_SuccessMsg: 'Perfetto! Questi sono i dettagli del tuo portafoglio.',

      /* CX */
      CX_error_1: 'Non c\'è nessun portafoglio. Fai clic su ["Aggiungi portafoglio"](/cx-wallet.html#add-wallet) per aggiungerne uno!',
      CX_quicksend: 'Invio rapido',

      /* Error Messages */
      ERROR_1: 'Ti preghiamo di inserire una quantità valida.',
      ERROR_2: 'La password deve essere di almeno 9 caratteri. Assicurati che sia robusta. ',
      ERROR_3: 'Siamo spiacenti! Non riconosciamo questo tipo di file portafoglio. ',
      ERROR_4: 'Questo non è un file portafoglio valido. ',
      ERROR_5: 'Questa unità non esiste, ti preghiamo di usare una delle seguenti unità ',
      ERROR_6: 'Indirizzo non valido. ',
      ERROR_7: 'Password non valida. ',
      ERROR_8: 'Numero non valido. ',
      ERROR_9: 'Limite gas non valido. ',
      ERROR_10: 'Valori dati non validi. ',
      ERROR_11: 'Quantità di gas non valida. ',
      ERROR_12: 'Nonce non valido. ',
      ERROR_13: 'Transazione firmata non valida. ',
      ERROR_14: 'Esiste già un portafoglio con questo nome. ',
      ERROR_15: 'Portafoglio non trovato. ',
      ERROR_16: 'Sembra che non esista ancora una proposta con questo ID o c\'è un errore nella lettura della proposta. ',
      ERROR_17: 'C\'è già un portafoglio con questo indirizzo fra quelli salvati. Controlla la pagina dei tuoi portafogli. ',
      ERROR_18: 'Devi avere almeno 0,001 ETH nel conto per coprire i costi del gas. Aggiungi un po\' di ether e riprova. ',
      ERROR_19: 'Questa transazione consumerebbe tutto il gas. Ciò significa che hai già votato questa proposta o che il periodo di discussione è terminato.',
      ERROR_20: 'Simbolo non valido',
      SUCCESS_1: 'Indirizzo valido',
      SUCCESS_2: 'Portafoglio decodificato correttamente',
      SUCCESS_3: 'Transazione inviata. TX ID: ',
      SUCCESS_4: 'Il portafoglio è stato aggiunto correttamente: ',
      SUCCESS_5: 'Hai votato con successo. Grazie per essere un partecipante attivo in The DAO.',
      SUCCESS_6: 'File selezionato: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Mittente non valido',
      GETH_Nonce: 'Nonce troppo basso',
      GETH_Cheap: 'Prezzo del gas troppo basso per essere accettato',
      GETH_Balance: 'Saldo insufficiente',
      GETH_NonExistentAccount: 'Il conto non esiste o il saldo è insufficiente',
      GETH_InsufficientFunds: 'Fondi insufficienti per gas * prezzo + valore',
      GETH_IntrinsicGas: 'Gas intrinseco troppo basso',
      GETH_GasLimit: 'Eccede il limite gas per il blocco',
      GETH_NegativeValue: 'Valore negativo',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Grazie ai nostri traduttori: ',
      TranslatorName_1: '[ugilio](https://www.myetherwallet.com/?gaslimit=21000&to=0x07932bc1c68c8ff188f4225e892178ab6d8c4eaa&value=1.0#send-transaction)',
      TranslatorAddr_1: '0x07932bc1c68c8ff188f4225e892178ab6d8c4eaa',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Se hai creato un portafoglio -oppure- hai scaricato il repository prima del **31 Dicembre 2015**, controlla i tuoi portafogli e scarica una nuova versione del repository. Fai clic qui per i dettagli.',
      HELP_Desc: 'Vedi che manca qualcosa? Hai un\'altra domanda? [Mettiti in contatto con noi](mailto:myetherwallet@gmail.com), e non solo risponderemo alla tua domanda, ma aggiorneremo anche questa pagina in modo che sia più utile ad altri in futuro!',
      HELP_Remind_Title: 'Qualche promemoria',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, e alcune delle librerie Javascript che utilizziamo sono in continuo sviluppo.** Anche se abbiamo testato approfonditamente e persone di tutto il mondo hanno correttamente creato decine di migliaia di portafogli, c\'è sempre la remota possibilità che accada qualcosa di imprevisto che provochi la perdita dei tuoi ETH. Ti preghiamo di non investire più di quello che sei disposto a perdere, e di fare attenzione. Se dovesse capitare qualcosa, ci dispiace, ma **non siamo responsabili per gli ether perduti**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX non sono "portafogli web". Non stai creando un account né ci stai dando i tuoi ether da custodire. Tutti i dati non lasciano mai il tuo computer/il tuo browser. Quello che facciamo è renderti facile creare, salvare, e accedere alle tue informazioni e interagire con la *blockchain*.',
      HELP_Remind_Desc_3: 'Se non salvi la tua chiave privata e la password, non c\'è modo di recuperare l\'accesso al tuo portafoglio o ai fondi che contiene.  Salvali in molti luoghi fisici diversi e non solo sul tuo computer!',

      HELP_0_Title: '0) Sono nuovo. Cosa faccio?',
      HELP_0_Desc_1: 'MyEtherWallet ti dà la possibilità di generare nuovi portafogli in modo da poter conservare i tuoi ether da solo, invece di usare una piattaforma di scambio. Questo processo avviene interamente sul tuo computer, non sui nostri server. Quindi, quando generi un nuovo portafoglio, **sei responsabile del suo salvataggio in maniera sicura**.',
      HELP_0_Desc_2: 'Crea un nuovo portafoglio.',
      HELP_0_Desc_3: 'Fai un backup del portafoglio.',
      HELP_0_Desc_4: 'Verifica di avere accesso a questo nuovo portafoglio e di avere salvato correttamente tutte le informazioni necessarie.',
      HELP_0_Desc_5: 'Trasferisci degli ether in questo nuovo portafoglio.',

      HELP_1_Title: '1) Come creo un nuovo portafoglio? ',
      HELP_1_Desc_1: 'Vai alla pagina "Genera portafoglio".',
      HELP_1_Desc_2: 'Vai alla pagina "Aggiungi portafoglio" e seleziona "Genera un nuovo portafoglio"',
      HELP_1_Desc_3: 'Inserisci una password robusta. Se pensi di poterla dimenticare, salvala in un posto sicuro. Avrai bisogno di questa password per inviare transazioni.',
      HELP_1_Desc_4: 'Fai clic su "GENERA PORTAFOGLIO".',
      HELP_1_Desc_5: 'Il tuo portafoglio è stato appena generato.',

      HELP_2a_Title: '2a) Come salvo o faccio il backup del mio portafoglio?',
      HELP_2a_Desc_1: 'Dovresti sempre fare dei backup esterni in diversi luoghi fisici - come su una penna USB e/o su un pezzo di carta.',
      HELP_2a_Desc_2: 'Salva l\'indirizzo. Puoi tenerlo per te o condividerlo. In questo modo gli altri possono inviarti degli ether.',
      HELP_2a_Desc_3: 'Salva delle versioni della chiave privata. Non condividerla con nessuno. La tua chiave privata è necessaria quando vuoi accedere ai tuoi ether per trasferirli! Ci sono 3 tipi di chiave privata:',
      HELP_2a_Desc_4: 'Metti il tuo indirizzo, le versioni della chiave privata, e la versione PDF del tuo portafoglio cartaceo in una cartella. Salvala sul tuo computer e su una penna USB.',
      HELP_2a_Desc_5: 'Stampa il portafoglio se hai una stampante. In alternativa, trascrivi la tua chiave privata e l\'indirizzo su un pezzo di carta. Conserva questo foglio in un posto sicuro, separato dal tuo computer e dalla penna USB.',
      HELP_2a_Desc_6: 'Ricorda, devi evitare la perdita delle chiavi e della password in caso di smarrimento o malfunzionamento del tuo hard disk, penna USB, o pezzo di carta. Devi anche considerare la perdita fisica o il danneggiamento di una intera area (pensa a incendi o inondazioni).',

      HELP_2b_Title: '2b) Come implemento un portafoglio offline in maniera sicura con MyEtherWallet?',
      HELP_2b_Desc_1: 'Vai sul nostro github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Fai clic su "download zip" in alto a destra.',
      HELP_2b_Desc_3: 'Sposta il file zip su un computer *air-gapped*.',
      HELP_2b_Desc_4: 'Decomprimilo e fai doppio clic su `index.html`.',
      HELP_2b_Desc_5: 'Genera un portafoglio con una password robusta.',
      HELP_2b_Desc_6: 'Salva l\'indirizzo. Salva delle versioni della chiave privata. Salva la password se potresti non ricordarla per sempre.',
      HELP_2b_Desc_7: 'Conserva questi fogli / penne USB in diversi luoghi fisici separati.',
      HELP_2b_Desc_8: 'Vai alla pagina "Informazioni portafoglio" e digita la tua chiave privata / password per assicurarti che siano corrette e per accedere al portafoglio. Controlla che l\'indirizzo che hai trascritto sia lo stesso.',

      HELP_3_Title: '3) Come verifico di aver accesso al mio nuovo portafoglio?',
      HELP_3_Desc_1: '**Prima di inviare degli ether al tuo nuovo portafoglio**, dovresti assicurarti di poterci accedere.',
      HELP_3_Desc_2: 'Vai alla pagina "Informazioni portafoglio".',
      HELP_3_Desc_3: 'Vai alla pagina "Informazioni portafoglio" su MyEtherWallet.com.',
      HELP_3_Desc_4: 'Seleziona il file del tuo portafoglio -oppure- la tua chiave privata e sblocca il portafoglio.',
      HELP_3_Desc_5: 'Se il portafoglio è crittografato, comparirà automaticamente una casella di testo. Inserisci la password.',
      HELP_3_Desc_6: 'Fai clic sul pulsante "Sblocca".',
      HELP_3_Desc_7: 'Dovrebbero comparire le informazioni sul tuo portafoglio. Individua l\'indirizzo del tuo conto, accanto all\'icona rotonda e colorata. Questa icona rappresenta visivamente il tuo indirizzo. Assicurati che l\'indirizzo sia quello che hai salvato nel tuo file di testo e che sia presente sul tuo portafoglio cartaceo.',
      HELP_3_Desc_8: 'Se stai pensando di conservare una grande quantità di ether, ti consigliamo di provare a inviare una piccola somma di ether dal nuovo portafoglio prima di depositarci un grosso importo. Invia 0,001 ether al nuovo portafoglio, accedici, e invia quegli 0,001 ether a un altro indirizzo, e assicurati che tutto funzioni agevolmente.',

      HELP_4_Title: '4) Come invio degli ether da un portafoglio a un altro?',
      HELP_4_Desc_1: 'Se stai pensando di spostare una grande quantità di ether, dovresti prima provare ad inviare una piccola somma al tuo portafoglio per assicurarti che tutto vada come previsto.',
      HELP_4_Desc_2: 'Vai alla pagina "Invia ether".',
      HELP_4_Desc_3: 'Seleziona il file del tuo portafoglio -oppure- la tua chiave privata e sblocca il portafoglio.',
      HELP_4_Desc_4: 'Se il portafoglio è crittografato, comparirà automaticamente una casella di testo. Inserisci la password.',
      HELP_4_Desc_5: 'Fai clic sul pulsante "Sblocca".',
      HELP_4_Desc_6: 'Inserisci l\'indirizzo al quale vuoi inviare nel campo "Indirizzo destinatario:".',
      HELP_4_Desc_7: 'Inserisci l\'importo che vuoi inviare. Puoi anche fare clic sul link "Invia l\'intero saldo" se desideri trasferire l\'intero saldo.',
      HELP_4_Desc_8: 'Nota: A partire dalla fine di giugno 2016 dovrai assicurarti di separare i tuoi ETH/ETC prima di inviare ether come avresti fatto normalmente. Vedi la domanda n. 6 qui sotto per ulteriori informazioni.',
      HELP_4_Desc_9: 'Fai clic su "Genera transazione".',
      HELP_4_Desc_10: 'Compariranno un paio di ulteriori campi. È perché il tuo browser ha generato la transazione.',
      HELP_4_Desc_11: 'Fai clic sul pulsante azzurro "Invia transazione" in basso.',
      HELP_4_Desc_12: 'Comparirà un pop-up. Verifica che l\'importo e l\'indirizzo a cui stai inviando siano corretti. Quindi fai clic sul pulsante "Sì, sono sicuro! Esegui la transazione.".',
      HELP_4_Desc_13: 'La transazione verrà inviata. Verrà mostrato l\'ID della transazione (*TX ID*). Puoi fare clic sul TX ID per vederla sulla *blockchain*. ',

      HELP_4CX_Title: '4) Come invio degli ether utilizzando MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'Innanzitutto devi aggiungere un portafoglio. Dopo averlo fatto hai 2 opzioni: la funzionalità "Invio rapido" dall\'icona dell\'estensione di Chrome o la pagina "Invia ether".',
      HELP_4CX_Desc_2: 'Invio rapido:',
      HELP_4CX_Desc_3: 'Fai clic sull\'icona dell\'estensione di Chrome.',
      HELP_4CX_Desc_4: 'Fai clic sul pulsante "Invio rapido".',
      HELP_4CX_Desc_5: 'Seleziona il portafoglio dal quale desideri inviare.',
      HELP_4CX_Desc_6: 'Inserisci l\'indirizzo al quale vuoi inviare nel campo "Indirizzo destinatario:".',
      HELP_4CX_Desc_7: 'Inserisci l\'importo che vuoi inviare. Puoi anche fare clic sul link "Invia l\'intero saldo" se desideri trasferire l\'intero saldo.',
      HELP_4CX_Desc_8: 'Fai clic su "Invia transazione". ',
      HELP_4CX_Desc_9: 'Verifica che l\'importo e l\'indirizzo a cui stai inviando siano corretti.',
      HELP_4CX_Desc_10: 'Inserisci la password del portafoglio.',
      HELP_4CX_Desc_11: 'Fai clic su "Invia transazione."',
      HELP_4CX_Desc_12: 'Tramite la pagina "Invia ether": ',

      HELP_5_Title: '5) Come faccio ad eseguire MyEtherWallet.com offline/in locale? ',
      HELP_5_Desc_1: 'Puoi eseguire MyEtherWallet.com sul tuo computer invece che dai server di GitHub. Puoi generare un portafoglio completamente offline e inviare transazioni dalla pagina "Invia Offline".',
      HELP_5_Desc_2: 'Vai sul nostro github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Fai clic su "download zip" in alto a destra.',
      HELP_5_Desc_4: 'Sposta il file zip su un computer *air-gapped*.',
      HELP_5_Desc_5: 'Decomprimi il file.',
      HELP_5_Desc_6: 'Fai doppio clic su `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com è ora in esecuzione completamente sul tuo computer.',
      HELP_5_Desc_8: 'In caso tu non abbia molta confidenza, ti serve l\'intera cartella per poter eseguire il sito web, non solo `index.html`. Non toccare né spostare nulla del contenuto della cartella. Se stai conservando un backup del repository MyEtherWallet per il futuro, ti consigliamo di conservare soltanto il file ZIP in modo da assicurarti che i contenuti della cartella rimangano intatti.',
      HELP_5_Desc_9: 'Dal momento che stiamo costantemente aggiornando MyEtherWallet.com, ti consigliamo di aggiornare periodicamente la tua versione locale del repository.',

      HELP_5CX_Title: '5) Come posso installare questa estensione dal repository invece che dal Chrome Store? ',
      HELP_5CX_Desc_1: 'Vai sul nostro github e individua la release più recente dell\'estensione di Chrome: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scorri alla fine della pagina e fai clic destro sull\'ultima release. Fai clic su "Salva link con nome".',
      HELP_5CX_Desc_3: 'In Google Chrome, fai clic su Impostazioni (dal menu in alto a destra).',
      HELP_5CX_Desc_4: 'Fai clic su "Estensioni" sulla sinistra.',
      HELP_5CX_Desc_5: 'Seleziona la casella "Modalità sviluppatore" all\'inizio della pagina.',
      HELP_5CX_Desc_6: 'Fai clic sul pulsante "Carica estensione non pacchettizzata...".',
      HELP_5CX_Desc_7: 'Vai alla cartella che hai precedentemente scaricato e decompresso. Fai clic su "Seleziona".',
      HELP_5CX_Desc_8: 'L\'estensione dovrebbe ora comparire fra le tue estensioni e nella barra delle estensioni di Chrome.',

      HELP_6_Title: '6) Come faccio a separare i miei ETH / ETC? ',
      HELP_6_Desc_1: 'Come conseguenza della *hard fork*, a qualunque quantità di ETH precedentemente presente nel tuo portafoglio corrisponde ora una uguale quantità di ETC. Se invii degli ETH tramite una transazione standard, verranno anche inviati degli ETC. Per evitarlo, devi "separare" il tuo portafoglio originale in due portafogli. Dopodiché, ti devi assicurare che solamente gli ETH finiscano nel tuo portafoglio ETH e solamente gli ETC finiscano nel tuo portafoglio ETC.',
      HELP_6_Desc_2: 'Puoi anche inviare tutti i tuoi ETH & ETC utilizzando una transazione standard a Kraken o Poloniex. Queste piattaforme di scambio separeranno automaticamente i tuoi ETH ed ETC. Potrai quindi spostare questi fondi in nuovi portafogli, o vendere i tuoi ETC o ETH.',
      HELP_6_Desc_3: '[Qui puoi trovare ulteriori informazioni su portafogli e *replay attack*](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Genera un nuovo portafoglio ETH *post-fork* pulito per te (che sarà la destinazione finale degli ETH e nient\'altro).',
      HELP_6_Desc_5: 'Genera un nuovo portafoglio ETC *post-fork* pulito per te (che sarà la destinazione finale degli ETC e nient\'altro).',
      HELP_6_Desc_6: 'Fai un backup di questi nuovi portafogli e verifica di poterci accedere. Vedi domande n. 2a e n. 3 qui sopra.',
      HELP_6_Desc_7: 'Invia 0,1234 ETH al nuovo portafoglio "ETH" utilizzando l\'opzione "Solo ETH" nella pagina "Invia ether".',
      HELP_6_Desc_8: 'Invia 0,5678 ETC al nuovo portafoglio "ETC" utilizzando l\'opzione "Solo ETC" nella pagina "Invia ether".',
      HELP_6_Desc_9: 'Controlla che si siano spostati solamente gli 0,1234 ETH su etherscan.io. Controlla che si siano spostati solamente gli 0,5678 ETC su gastracker.io.',
      HELP_6_Desc_10: 'Esegui una transazione di 0,0001 ETH dal tuo nuovo portafoglio ETH. Controlla etherscan.io. Assicurati che gli 0,0001 ETH siano stati inviati.',
      HELP_6_Desc_11: 'Genera (ma non inviare) una transazione di 0,0002 ETC dal tuo nuovo portafoglio ETC. Copia il campo "Transazione firmata". ',
      HELP_6_Desc_12: 'Vai su [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) e incolla la transazione ETC nella scheda "Invia offline" di classicetherwallet.com, alla fine della pagina, e invia. Controlla gastracker.io. Assicurati che gli 0,0002 ETC siano stati inviati.',
      HELP_6_Desc_13: 'Se tutto è stato ricevuto ed inviato correttamente allora sei a posto.',
      HELP_6_Desc_14: 'Invia tutto il saldo ETH rimanente utilizzando l\'opzione "Solo ETH" e ripeti per il saldo ETC utilizzando "Solo ETC".',
      HELP_6_Desc_15: 'Adesso puoi usare le transazioni standard per questi nuovi portafogli senza rischio di *replay attack*. ',

      HELP_7_Title: '7) Come invio token e come aggiungo token personalizzati?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) è un ottimo modo di esplorare i token e trovarne i decimali.',
      HELP_7_Desc_1: 'Vai alla pagina "Invia token".',
      HELP_7_Desc_2: 'Sblocca il portafoglio.',
      HELP_7_Desc_3: 'Inserisci l\'indirizzo al quale vuoi inviare nel campo "Indirizzo destinatario:".',
      HELP_7_Desc_4: 'Inserisci l\'importo che vuoi inviare.',
      HELP_7_Desc_5: 'Seleziona il token che vuoi inviare.',
      HELP_7_Desc_6: 'Se non vedi il token nell\'elenco:',
      HELP_7_Desc_7: 'Fai clic su "Altro".',
      HELP_7_Desc_8: 'Inserisci l\'indirizzo, il nome, e i decimali del token. Questi valori sono forniti dagli sviluppatori del token e sono necessari anche quando aggiungi il token in Mist per osservarlo.',
      HELP_7_Desc_9: 'Fai clic su "Salva".',
      HELP_7_Desc_10: 'Ora puoi inviare il token e anche vederne il saldo nella barra laterale.',
      HELP_7_Desc_11: 'Fai clic su "Genera transazione".',
      HELP_7_Desc_12: 'Compariranno un paio di ulteriori campi. È perché il tuo browser ha generato la transazione.',
      HELP_7_Desc_13: 'Fai clic sul pulsante azzurro "Invia transazione" in basso.',
      HELP_7_Desc_14: 'Comparirà un pop-up. Verifica che l\'importo e l\'indirizzo a cui stai inviando siano corretti. Quindi fai clic sul pulsante "Sì, sono sicuro! Esegui la transazione.".',
      HELP_7_Desc_15: 'La transazione verrà inviata. Verrà mostrato l\'ID della transazione (*TX ID*). Puoi fare clic sul TX ID per vederla sulla *blockchain*.',

      HELP_8_Title: '8) Che succede se il vostro sito va giù?',
      HELP_8_Desc_1: 'MyEtherWallet non è un portafoglio web. Non hai un login e niente viene mai salvato nei nostri server. È semplicemente un\'interfaccia che ti consente di interagire con la *blockchain*.',
      HELP_8_Desc_2: 'Se MyEtherWallet.com va giù, dovrai trovare un altro modo (come geth o Ethereum Wallet / Mist) per fare quello che facciamo noi. Ma non dovrai "tirare fuori" i tuoi ether da MyEtherWallet perché non si trovano in MyEtherWallet. Sono in qualunque portafoglio tu abbia generato tramite il nostro sito.',
      HELP_8_Desc_3: 'Ora puoi importare direttamente e molto facilmente in geth / Ethereum Wallet / Mist la tua chiave privata non crittografata e i tuoi file in formato Geth/Mist (crittografati). Vedi la domanda n. 12 qui sotto.',
      HELP_8_Desc_4: 'Inoltre, la probabilità che tiriamo giù MyEtherWallet è prossima allo zero. Non ci costa praticamente nulla mantenerlo dal momento che non stiamo memorizzando alcuna informazione. Se anche disattivassimo il dominio, è ancora, e sarà sempre, disponibile pubblicamente su [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Puoi scaricare lo ZIP da lì ed eseguirlo in locale. ',

      HELP_8CX_Title: '8) Che succede se MyEtherWallet CX sparisce?',
      HELP_8CX_Desc_1: 'Innanzitutto, tutti i dati sono salvati sul tuo computer, non sui nostri server. So che può essere disorientante, ma quando utilizzi l\'estensione Chrome NON stai guardando qualcosa che è salvato da qualche parte sui nostri server - è tutto salvato sul tuo computer.',
      HELP_8CX_Desc_2: 'Detto ciò, è **molto importante** che tu faccia un backup di tutte le informazioni relative a ogni nuovo portafoglio generato con MyEtherWallet CX. In questo modo se succede qualcosa a MyEtherWallet CX or al tuo computer avrai ancora tutte le informazioni necessarie ad accedere ai tuoi ether. Vedi la domanda n. 2a per come salvare i tuoi portafogli.',
      HELP_8CX_Desc_3: 'Se per qualche ragione MyEtherWallet CX sparisce dal Chrome Store, puoi trovare i sorgenti su Github e caricare l\'estensione manualmente. Vedi la domanda n. 5 qui sopra.',

      HELP_9_Title: '9) La pagina "Invia ether" è offline?',
      HELP_9_Desc_1: ' No, la pagina in cui si invia la transazione non è offline. Ha bisogno di Internet per poter ottenere il prezzo corrente del gas, il *nonce* del tuo conto, e per trasmettere la transazione (cioè per inviarla). Tuttavia, si limita ad inviare la transazione firmata. La tua chiave privata rimane al sicuro con te. Ora abbiamo inserito anche una pagina "Invia offline" così che ti possa assicurare che le tue chiavi private rimangano sempre su un computer offline/*air-gapped*.',

      HELP_10_Title: '10) Come creo una transazione offline?',
      HELP_10_Desc_1: 'Vai alla pagina "Invia offline" con il tuo computer online.',
      HELP_10_Desc_2: 'Inserisci l\'"Indirizzo mittente". Ti preghiamo di notare che questo è l\'indirizzo MITTENTE, non l\'indirizzo DESTINATARIO. Da questo indirizzo si genera il *nonce* e il prezzo del gas.',
      HELP_10_Desc_3: 'Spostati sul tuo computer offline. Inserisci l\'"INDIRIZZO DESTINATARIO" e l\'"IMPORTO" che desideri inviare.',
      HELP_10_Desc_4: 'Inserisci il "PREZZO GAS" così come visualizzato sul tuo computer online nel passo n. 1.',
      HELP_10_Desc_5: 'Inserisci il "NONCE" così come visualizzato sul tuo computer online nel passo n. 1.',
      HELP_10_Desc_6: 'Il "LIMITE GAS" ha un valore predefinito di 21000. Questo valore è sufficiente per una transazione standard. Se desideri inviare ad un contratto o se includi nella transazione dati aggiuntivi avrai bisogno di aumentare il limite gas. Eventuale gas in eccesso ti sarà restituito.',
      HELP_10_Desc_7: 'Se lo desideri, inserisci dei dati. Se lo fai, dovrai aumentare il limite gas a un valore superiore al limite predefinito di 21000. Tutti i dati sono in formato HEX.',
      HELP_10_Desc_8: 'Seleziona il file del tuo portafoglio -oppure- la tua chiave privata e sblocca il portafoglio.',
      HELP_10_Desc_9: 'Premi il pulsante "GENERA TRANSAZIONE".',
      HELP_10_Desc_10: 'I campi sotto il pulsante saranno riempiti con la transazione firmata. Copiala e ritorna al tuo computer online. ',
      HELP_10_Desc_11: 'Sul tuo computer online, incolla la transazione firmata nel campo di testo nel passo n. 3 e fai clic su "Invia transazione". In questo modo la transazione verrà trasmessa.',

      HELP_11_Title: '11) Come faccio a inviare a un contratto?',
      HELP_11_Desc_1: 'Inviare a un contratto richiede spesso l\'aggiunta di dati o di ulteriore gas o di entrambi',
      HELP_11_Desc_2: 'Vai alla pagina "Invia ether". ',
      HELP_11_Desc_3: 'Seleziona il file del tuo portafoglio -oppure- la tua chiave privata e sblocca il portafoglio. ',
      HELP_11_Desc_4: 'Inserisci un "Indirizzo destinatario" e un "Importo da inviare"',
      HELP_11_Desc_5: 'Fai clic sul pulsante "+Avanzate: aggiungi più gas o dei dati" sotto al campo dell\'importo. Verranno mostrati due ulteriori campi che puoi utilizzare per aumentare il gas sopra al valore predefinito di 21000, o per aggiungere dati alla transazione.',

      HELP_12_Title: '12) Come faccio a importare un portafoglio creato con MyEtherWallet in geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Con un file JSON Geth/Mist generato da MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Vai alla pagina "Informazioni portafoglio".',
      HELP_12_Desc_3: 'Sblocca il portafoglio usando la tua chiave privata **crittografata** o il file JSON. ',
      HELP_12_Desc_4: 'Vai alla pagina "I miei portafogli".',
      HELP_12_Desc_5: 'Seleziona il portafoglio che vuoi importare in Mist, fai clic sull\'icona "Mostra", inserisci la password, e accedi al portafoglio. ',
      HELP_12_Desc_6: 'Individua la sezione "File Keystore/JSON (Consigliato · Crittografato · Formato Mist/Geth)". Premi il pulsante "Download" al di sotto. Ora hai il file keystore.',
      HELP_12_Desc_7: 'Apri l\'applicazione Ethereum Wallet. ',
      HELP_12_Desc_8: 'Nella barra dei menu, vai su "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'Si aprirà la tua cartella keystore. Copia il file che hai appena scaricato (`UTC--2016-04-14........`) dentro questa cartella.',
      HELP_12_Desc_10: 'Il tuo conto dovrebbe comparire immediatamente sotto "Accounts."',
      HELP_12_Desc_11: 'Con una chiave privata non crittografata...',
      HELP_12_Desc_12: 'Se non hai già la chiave private non crittografata, vai alla pagina "Informazioni portafoglio".',
      HELP_12_Desc_13: 'Seleziona il file del tuo portafoglio -oppure- inserisci/incolla la tua chiave privata per sbloccare il portafoglio.',
      HELP_12_Desc_14: 'Copia la tua chiave privata (non crittografata).',
      HELP_12_Desc_15: 'Se sei su un Mac:',
      HELP_12_Desc_15b: 'Se sei su un PC:',
      HELP_12_Desc_16: 'Apri TextEdit e incolla la chiave privata.',
      HELP_12_Desc_17: 'Vai sulla barra dei menu e fai clic su "Formato" -> "Converti in formato Solo testo".',
      HELP_12_Desc_18: 'Salva questo file sulla tua `Scrivania` come `niente_di_speciale_cancellami.txt`. Assicurati che siano selezionati "UTF-8" e "Se non è indicata nessuna estensione, usa .”txt”" nella finestra di salvataggio.',
      HELP_12_Desc_19: 'Apri il terminale ed esegui il seguente comando: `geth account import ~/Desktop/niente_di_speciale_cancellami.txt`',
      HELP_12_Desc_20: 'Ti verrà chiesto di creare una nuova password. È la password che userai in geth / Ethereum Wallet / Mist ogni volta che invierai una transazione, quindi non dimenticarla. ',
      HELP_12_Desc_21: 'A importazione conclusa positivamente, cancella `niente_di_speciale_cancellami.txt`',
      HELP_12_Desc_22: 'Alla prossima apertura dell\'applicazione Ethereum Wallet, il tuo conto sarà mostrato sotto "Accounts".',
      HELP_12_Desc_23: 'Apri Blocco note e incolla la chiave privata',
      HELP_12_Desc_24: 'Salva il file come `niente_di_speciale_cancellami.txt` in `C:\\`',
      HELP_12_Desc_25: 'Esegui il comando `geth account import C:\\niente_di_speciale_cancellami.txt`',
      HELP_12_Desc_26: 'Ti verrà chiesto di creare una nuova password. È la password che userai in geth / Ethereum Wallet / Mist ogni volta che invierai una transazione, quindi non dimenticarla.',
      HELP_12_Desc_27: 'A importazione conclusa positivamente, cancella `niente_di_speciale_cancellami.txt`',
      HELP_12_Desc_28: 'Alla prossima apertura dell\'applicazione Ethereum Wallet, il tuo conto sarà mostrato sotto "Accounts". ',

      HELP_13_Title: '13) Cosa significa "Limite gas troppo basso"?',
      HELP_13_Desc_1: 'Molto probabilmente significa che stai tentando di inviare ether a un contratto. Inviare a un contratto richiede un po\' più di dati e quindi un po\' più di gas. Sulla pagina "Invia ether", fai clic sul pulsante "+Avanzate: aggiungi più gas o dei dati" sotto al campo dell\'importo. Compariranno due ulteriori campi che puoi utilizzare per aumentare il gas sopra al valore predefinito di 21000, o per aggiungere dati alla transazione.',

      HELP_14_Title: '14) Certi siti inizializzano il generatore di numeri casuali per la generazione della chiave privata tramite i movimenti del mouse. MyEtherWallet.com non lo fa. La generazione di numeri casuali di MyEtherWallet è sicura?',
      HELP_14_Desc_1: 'Sebbene usare i movimenti del mouse sia ingegnoso, e comprendiamo perché piaccia, la realtà è che window.crypto assicura maggiore entropia rispetto ai tuoi movimenti del mouse. Non che i movimenti del mouse siano insicuri, è solo che noi (e un sacco di altri critto-esperimenti) crediamo in window.crypto. Oltretutto, MyEtherWallet.com può essere utilizzato su dispositivi touch. Qui c\'è una [conversazione fra un utente di reddit arrabbiato e Vitalik Buterin su movimenti del mouse contro window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) e qui c\'è [la specifica del w3 di window.crypto](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Perché il conto che ho appena creato non risulta nello strumento per esplorare la *blockchain*? (es: etherchain, etherscan)',
      HELP_15_Desc_1: 'I conti vengono mostrati in quegli strumenti solamente dopo che c\'è stata un\'attività sul conto in questione&mdash;ad esempio, dopo che ci hai trasferito degli ether.',

      HELP_16_Title: '16) Come faccio a controllare il saldo del mio conto? ',
      HELP_16_Desc_1: 'Puoi usare uno strumento per l\'esplorazione della *blockchain* come [etherscan.io](http://etherscan.io/). Incolla il tuo indirizzo nella barra di ricerca e vedrai il tuo indirizzo e lo storico delle transazioni. Ad esempio, questo è come si presenta il nostro [conto donazioni](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) su etherscan.io',

      HELP_17_Title: '17) Perché non viene mostrato il saldo quando sblocco il mio portafoglio? ',
      HELP_17_Desc_1: ' Probabilmente perché sei dietro a un firewall. Le API che utilizziamo per ottenere il saldo e convertirlo sono spesso bloccate dai firewall per qualche ragione. Sarai ancora in grado di inviare transazioni, dovrai solo usare un metodo diverso per vedere il tuo saldo, come etherscan.io',

      HELP_18_Title: '18) Dov\'è il mio file portafoglio di geth?',

      HELP_19_Title: '19) Dov\'è il mio file portafoglio di Mist? ',
      HELP_19_Desc_1: 'I file di Mist si trovano di solito nelle posizioni qui sopra, ma è molto più facile aprire Mist, selezionare "Accounts" nella barra dei menu, selezionare "Backup", e selezionare "Accounts". Si aprirà la cartella in cui sono memorizzati i tuoi file.',

      HELP_20_Title: '20) Dov\'è il mio file portafoglio della prevendita?',
      HELP_20_Desc_1: 'Dove l\'hai salvato. ;) Ti è anche stato spedito in mail, quindi controllala. Cerca un file chiamato `"ethereum_wallet_backup.json"` e selezionalo. Questo portafoglio sarà crittografato con la password che hai creato durante l\'acquisto della prevendita.',

      HELP_21_Title: '21) Non basta inserire chiavi private casuali, cercare un saldo, e poi inviarselo al proprio indirizzo? ',
      HELP_21_Desc_1: 'Versione corta: sì, ma trovare un conto con un saldo richiederebbe più tempo dell\'età dell\'universo... quindi no.',
      HELP_21_Desc_2: 'Versione lunga in termini semplici: Ethereum si basa sulla [Crittografia a chiave pubblica](https://it.wikipedia.org/wiki/Crittografia_a_chiave_pubblica), nello specifico [Crittografia a curva ellittica](https://eprint.iacr.org/2013/734.pdf) (ECC) che è ampiamente utilizzata, non solo in Ethereum. La maggior parte dei server sono protetti tramite ECC. Anche Bitcoin la usa, oltre a SSH e TLS e a un sacco di altra roba. Le chiavi di Ethereum nello specifico sono di 256 bit, che sono più robuste di 128 bit e 192 bit, che sono anch\'esse ampiamente utilizzate e sono tuttora considerate sicure dagli esperti.',
      HELP_21_Desc_3: 'In tutto ciò tu hai una chiave privata e una chiave pubblica. Dalla chiave privata si può derivare la chiave pubblica, ma dalla chiave pubblica non si può risalire alla chiave privata. Il fatto che Internet e i segreti del mondo usino questa crittografia significa che se ci fosse un modo per ottenere una chiave privata da una chiave pubblica, i tuoi ether persi sarebbero l\'ultimo dei problemi.',
      HELP_21_Desc_4: 'Ora, detto ciò, SÌ se qualcun altro ha la tua chiave privata allora può effettivamente inviare ether dal tuo conto. Proprio come se qualcuno ha la password della tua mail può leggere e spedire la tua mail, o se ha la password del tuo conto bancario potrebbe fare dei trasferimenti. Potresti scaricare la versione Keystore della tua chiave privata che è la chiave privata crittografata con una password. È come avere una password che è a sua volta protetta da un\'altra password.',
      HELP_21_Desc_5: 'E SÌ, in teoria potresti semplicemente digitare stringhe di 64 caratteri esadecimali fino a trovarne una che corrisponda. Infatti, persone intelligenti potrebbero scrivere un programma per controllare molto rapidamente chiavi private casuali. Questo procedimento è conosciuto come *"attacco a forza bruta"* o *"mining"* delle chiavi private. Ci hanno pensato molto e a lungo. Con qualche server di altissimo livello potrebbero essere in grado di controllare più di 1 milione di chiavi al secondo. Però nemmeno controllarne così tante al secondo porterebbe all\'accesso in una maniera tale da rendere il costo dell\'utilizzo di quei server vagamente vicino all\'essere proficuo - è più probabile che tu, e i tuoi pronipoti, moriate prima di trovare una corrispondenza.',
      HELP_21_Desc_6: 'Se sai qualcosa di Bitcoin, [questo ti darà un\'idea:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *"Per illustrare quanto ciò sia improbabile: supponi che ogni satoshi di ogni bitcoin che sarà mai generato sia inviato a una sua chiave privata unica. La probabilità che fra queste chiavi ce ne possano essere due che corrispondano allo stesso indirizzo è circa di uno in 100 trilioni"*.',
      HELP_21_Desc_7: '[Se preferisci qualcosa di un po\' più tecnico:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *"Questi numeri non hanno niente a che fare con la tecnologia dei dispositivi; sono i massimi che la termodinamica consente. E implicano fortemente che gli attacchi a forza bruta contro le chiavi a 256 bit saranno impraticabili almeno fino a quando i computer non saranno costruiti con qualcosa di diverso dalla materia e non occuperanno qualcosa di diverso dallo spazio."*',
      HELP_21_Desc_8: 'Certo, tutto ciò assume che le chiavi siano generate in una maniera veramente casuale e con sufficiente entropia. Le chiavi generate qui soddisfano questi criteri, come anche Jaxx e Mist/geth. I portafogli Ethereum sono tutti piuttosto buoni. Le chiavi generate dai *brainwallet* non lo sono, dal momento che il cervello di una persona non è capace di creare un seme veramente casuale. Ci sono stati un numero di altri problemi relativi alla mancanza di entropia o a semi non generati in maniera veramente casuale nel mondo di Bitcoin, ma quella è un\'altra questione di cui non parleremo oggi.',

      HELP_SecCX_Title: 'Sicurezza - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Dov\'è che questa estensione salva le mie informazioni?',
      HELP_SecCX_Desc_2: 'Le informazioni che memorizzi in questa estensione di Chrome sono salvate tramite [chrome.storage](http://chrome.storage/). - è lo stesso posto in cui vengono salvate le tue password quando le salvi in Chrome.',
      HELP_SecCX_Desc_3: 'Che informazioni sono salvate? ',
      HELP_SecCX_Desc_4: 'L\'indirizzo, nome, e la chiave privata sono memorizzati in chrome.storage. La chiave privata è crittografata utilizzando la password che hai impostato quando hai aggiunto il portafoglio. Il nome e l\'indirizzo del portafoglio non sono crittografati.',
      HELP_SecCX_Desc_5: 'Perché il nome e l\'indirizzo del portafoglio non sono crittografati? ',
      HELP_SecCX_Desc_6: 'Se crittografassimo questi elementi dovresti inserire una password ogni volta in cui volessi vedere il saldo del tuo conto o i nomi dei portafogli. Se ciò ti preoccupa, ti consigliamo di usare MyEtherWallet.com invece di questa estensione di Chrome.',

      HELP_Sec_Title: 'Sicurezza',
      HELP_Sec_Desc_1: 'Se una delle prime domande che ti poni è "Perché dovrei fidarmi di questa gente?", è una cosa buona. Quanto segue dovrebbe aiutarti a calmare i tuoi timori. ',
      HELP_Sec_Desc_2: 'Siamo attivi da agosto 2015. Se cerchi ["myetherwallet" su reddit](https://www.reddit.com/search?q=myetherwallet), puoi vedere che molte persone ci utilizzano con grande successo.',
      HELP_Sec_Desc_3: 'Non prenderemo i tuoi soldi né ruberemo le tue chiavi private. Non c\'è codice malevolo su questo sito. Infatti le pagine "Genera portafoglio" sono completamente lato client. Ciò significa che tutto il codice è eseguito sul ** tuo computer** e non viene mai salvato e trasmesso da nessuna parte.',
      HELP_Sec_Desc_4: 'Controlla l\'URL -- Questo sito viene servito attraverso GitHub e puoi vederne il codice sorgente qui: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) sui domini: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) e [https://www.myetherwallet.com](https://www.myetherwallet.com). Puoi verificare che sia ospitato su GitHub utilizzando [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - gli IP degli ultimi due record A sono posseduti da GitHub per il loro hosting dei domini personalizzati.',
      HELP_Sec_Desc_5: 'Per la generazione dei portafogli, puoi scaricare il [codice sorgente](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Vedi la domanda 5 qui sopra.',
      HELP_Sec_Desc_6: 'Fai una prova e controlla che attività di rete sono in corso. Il modo più facile e fare clic destro sulla pagina e scegliere "Analizza elemento". Vai sulla scheda "Rete". Genera un portafoglio di prova. Vedrai che non c\'è attività di rete. Potresti vedere accadere qualcosa che assomiglia a  data:image/gif e data:image/png. Sono i QR code che vengono generati...sul tuo computer...dal tuo computer. Non sono stati trasferiti byte.',
      HELP_Sec_Desc_7: 'Ora, per essere sicuro, vai alla scheda "Archiviazione". Qui puoi vedere tutti i diversi elementi che costituiscono un sito web. Se controlli Archiviazione locale, Cookie, e Archiviazione cache, vedrai che non c\'è nulla che viene memorizzato. Non viene salvato niente. Se ricarichi la pagina ricominci da capo.',
      HELP_Sec_Desc_8: 'Se non ti senti a tuo agio a usare questo strumento, allora certo, non usarlo. Abbiamo creato questo strumento per aiutare la gente a generare portafogli ed eseguire transazioni senza bisogno di usare la riga di comando o far girare un nodo completo. Di nuovo, sentiti libero di contattarci se hai dubbi e ti risponderemo appena possibile. Grazie! ',

      HELP_FAQ_Title: 'Risposte più utili alle domande frequenti (in Inglese)',
      HELP_Contact_Title: 'Modi per contattarci (in Inglese)'
    };

    module.exports = it;
  }, {}], 43: [function (require, module, exports) {
    // Japanese
    'use strict';

    var ja = function () {};
    ja.code = 'ja';
    ja.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: '送出元が無効です',
      GETH_Nonce: 'Nonce が足りません',
      GETH_Cheap: 'ガス価格が低すぎます',
      GETH_Balance: '残高不足',
      GETH_NonExistentAccount: 'アカウントが存在しない、あるいはその残高不足です',
      GETH_InsufficientFunds: 'ガス*価格+数量に足りません',
      GETH_IntrinsicGas: '基本のガス不足です',
      GETH_GasLimit: 'ブロックガスリミットを越えています',
      GETH_NegativeValue: '負の値です',

      /* Navigation*/
      NAV_YourWallets: '自分のウォレット',
      NAV_AddWallet: 'ウォレット追加',
      NAV_GenerateWallet: 'ウォレット作成',
      NAV_BulkGenerate: 'バルク作成',
      NAV_SendEther: 'Ether送出',
      NAV_SendTokens: 'トークン送出',
      NAV_Offline: 'オフライン送出',
      NAV_WithdrawDAO: 'DAO払い戻し',
      DAO_TitleLong: 'DAOトークンをETHで払い出し',
      NAV_ClaimDGD: 'DGD請求',
      DGD_TitleLong: 'DGDトークンを請求',
      NAV_DeployContract: 'コントラクトをデプロイ',
      NAV_MyWallets: '自分のウォレット',
      NAV_ViewWallet: 'ウォレット情報を見る',
      NAV_Help: 'ヘルプ',
      NAV_Contact: '連絡する',

      /* General */
      x_Address: '自分のアドレス',
      x_AddessDesc: 'これは自分のアカウント番号とパブリックキーになります。ETHを送信するために必要な情報です。アイコンは自分のアドレスを識別するものです。',
      x_CSV: 'CSV ファイル (未暗号化)',
      x_Cancel: '取り消す',
      x_Download: 'ダウンロード',
      x_Json: 'JSON ファイル (未暗号化)',
      x_JsonDesc: 'これはパスワードが不要な暗号化されていないJSONフォーマットのプライベートキーです。この暗号化されていないJSONフォーマットのプライベートキーを使えば、誰でもパスワードを使わずに自分のウォレットとEtherにアクセスできます。',
      x_Keystore: 'Keystore/JSON ファイル (推奨 · 暗号化 · Mist/Geth フォーマット)',
      x_Keystore2: 'Keystore / JSON ファイル',
      x_KeystoreDesc: 'この Keystore / JSON ファイルは、後で容易にインポートするため、Mist & Gethで使われているフォーマットと一致させる必要があります。ダウンロードしてバックアップを取ることをおすすめします。',
      x_Password: 'パスワード',
      x_Print: 'ペーパーウォレットを印刷',
      x_PrintDesc: 'ProTip: プリンターが接続されていなくても、「印刷」をクリックしてPDFで保存できます。',
      x_PrintShort: '印刷',
      x_PrivKey: 'プライベートキー（未暗号化）',
      x_PrivKey2: 'プライベートキー',
      x_PrivKeyDesc: 'これはパスワードが不要な暗号化されていないプライベートキーです。この暗号化されていないプライベートキーを使えば、誰でもパスワードなしで自分のウォレットにアクセスできます。従って、暗号化されたものの利用をおすすめします。',
      x_Save: '保存する',
      x_TXT: 'TXT ファイル (未暗号化)',
      x_Wallet: 'ウォレット',

      /* Header */
      MEW_Warning_1: 'ウォレットを操作したり新しいウォレットを作成する前に、必ずURLを確認してください。詐欺サイトに御注意ください！',
      CX_Warning_1: '必ずここに保管するすべてのウォレットの「外部バックアップ」を作成してください。このChrome Extensionでは、再導入などで、データが保存されずの消失することが頻繁に起こります。このエクステンションは容易な操作を提供するのみで、「バックアップ」は行いません。',
      MEW_Tagline: 'オープンソース JavaScript クライアントサイド Ether ウォレット',
      CX_Tagline: 'オープンソース JavaScript クライアントサイド Ether ウォレット Chrome Extension',

      /* Footer */
      FOOTER_1: 'イサリアムウォレットの作成とトランザクション実行のためのオープンソース、javascript、 クライアントサイドツール。',
      FOOTER_1b: '制作',
      FOOTER_2: '御寄付に感謝！:',
      FOOTER_3: 'クライアントサイドウォレット制作',
      FOOTER_4: '免責事項',

      /* Sidebar */
      sidebar_AccountInfo: 'アカウント情報: ',
      sidebar_AccountAddr: 'アカウントアドレス:  ',
      sidebar_AccountBal: 'アカウント残高: ',
      sidebar_TokenBal: 'トークン残高: ',
      sidebar_Equiv: '等価: ',
      sidebar_TransHistory: 'トランザクション履歴: ',
      sidebar_DGDBal: 'DGDクラウドセール情報:',
      sidebar_donation: 'MyEtherWalletは、プライバシーとセキュリティのための無料のオープンソースサービスです。　寄付が増えることによって、新機能やフィードバックの反映を行い、よりユーザーの皆様のご希望に沿った制作の時間を増やす事が可能になります。私たちは、たった二人で世界を変えようとしています。お手伝いいただけますか?',
      sidebar_donate: '寄付する',
      sidebar_thanks: '感謝します!!!',

      /* Decrypt Panel */
      decrypt_Access: 'どの方法でウォレットを操作しますか？',
      decrypt_Title: 'プライベートキーフォーマットの選択：',
      decrypt_Select: 'ウォレットの選択',

      /* Add Wallet */
      ADD_Label_1: 'ご希望の操作をお選びください',
      ADD_Radio_1: '新規ウォレットの作成',
      ADD_Radio_2: 'ウォレットファイルの選択 (Keystore / JSON)',
      ADD_Radio_2_alt: 'ウォレットファイルの選択： ',
      ADD_Radio_2_short: 'ウォレットファイルを選択',
      ADD_Radio_3: 'プライベートキーをペースト/タイプ ',
      ADD_Radio_4: '監視するアカウントを追加',
      ADD_Label_2: 'ニックネームの作成：',
      ADD_Label_3: 'ウォレットが暗号化されました。パスワードを入力してください： ',
      ADD_Label_4: '監視するアカウントを追加',
      ADD_Warning_1: 'ウォレットタブには、プライベートキーをアップロードせずに任意の監視するアカウントを追加する事ができます。これによってウォレットのアクセスや、ETHERの移動が可能になるわけではありません。',
      ADD_Label_5: 'アドレスを入力: ',
      ADD_Label_6: 'ウォレットをアンロック： ',
      ADD_Label_6_short: 'アンロック',
      ADD_Label_7: 'アカウント追加',

      /* Generate Wallets */
      GEN_desc: '複数のウォレットの作成をこのタブで行う事ができます：',
      GEN_Label_1: '強固なパスワードを入力(９文字以上）',
      GEN_Placeholder_1: '必ず保存してください！',
      GEN_SuccessMsg: '成功！ウォレットが作成されました。',
      GEN_Warning: 'ウォレットを操作するためには**Keystore/JSONとパスワードかプライベートキーが必要** 保存してから、外部バックアップしてください！ここで保存しないとウォレットが使用できなくなります。詳細はヘルプページを参照してください。(https://www.myetherwallet.com/#help)',
      GEN_Label_2: 'Keystore/JSON あるいはプライベートキーを保存してください。パスワードを絶対に忘れないようにしてください。',
      GEN_Label_3: 'アドレスを保存してください。',
      GEN_Label_4: '必要であれば、ペーパーウォレット、あるいはQRコードを印刷してください。',

      /* Bulk Generate Wallets */
      BULK_Label_1: '作成するウォレット数',
      BULK_Label_2: '複数ウォレットを作成する',
      BULK_SuccessMsg: '成功！ウォレットが作成されました。',

      /* Sending Ether and Tokens */
      SEND_addr: '宛先アドレス： ',
      SEND_amount: '送出数量： ',
      SEND_amount_short: '数量',
      SEND_custom: 'カスタム',
      SEND_gas: 'ガス',
      SEND_TransferTotal: '残高をすべて送出する',
      SEND_generate: 'トランザクションを生成',
      SEND_raw: '未加工トランザクション',
      SEND_signed: '署名済みトランザクション',
      SEND_trans: 'トランザクションの送出',
      SENDModal_Title: '警告！ ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: '送出準備が',
      SENDModal_Content_2: 'について、アドレス',
      SENDModal_Content_3: 'に対し完了。本当に送出してよろしいですか？',
      SENDModal_Content_4: 'ノート：最も起こりやすいエラーの原因は、送出のためのガス不足で、その場合には、ETHを追加する必要があります。ガスはETHで支払われます。',
      SENDModal_No: 'いいえ、中断します。',
      SENDModal_Yes: 'はい、確かです。処理を実行します。',

      /* Tokens */
      TOKEN_Addr: 'アドレス：',
      TOKEN_Symbol: 'トークンシンボル： ',
      TOKEN_Dec: 'ケタ数： ',

      /* Send Transaction */
      TRANS_desc: 'トークンを送出するには「トークン送出」のタブを選択してください。',
      TRANS_warning: 'コントラクト上で、「ETHのみ」あるいは「ETCのみ」の送出を行う場合、受け入れサービスによって、これらのトランザクションに問題を生ずる場合があります。以下参照。',
      TRANS_standard: 'ETH(標準トランザクション)',
      TRANS_eth: 'ETHのみ',
      TRANS_etc: 'ETCのみ',
      TRANS_advanced: '+Advanced: ガスあるいはデータを追加してください ',
      TRANS_data: ' データ： ',
      TRANS_gas: ' ガス： ',
      TRANS_sendInfo: '21000ガスを使用する標準トランザクションは、0.000441 ETHを消費します。迅速な処理を行うために、若干最小量よりも多めの0.000000021 ETHのガスを使用します。当サービスでは、トランザクション料金は徴収いたしません。',

      /* Send Transaction Modals */
      TRANSModal_Title: '「ETHのみ」と「ETCのみ」トランザクション',
      TRANSModal_Content_0: '異なるトランザクションと異なるサービスの注釈：',
      TRANSModal_Content_1: '**ETH(標準トランザクション): ** これは、アドレス間移動のデファルトのトランザクションを生成します。デフォルトガス値は21000です。このメソッドで送出されたETHは、高い可能性でETCチェーンでリプレイされます。',
      TRANSModal_Content_2: '**ETHのみ: ** [Timon Rappのリプレイコントラクト(VB推奨)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) を使用して、**ETH**チェーンのみに送出します。',
      TRANSModal_Content_3: '**ETCのみ: ** [Timon Rappのリプレイコントラクト(VB推奨)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) を使用して、**ETC**チェーンのみに送出します。 ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** スタンダードトランザクションのみで送出します。どちらかのみのコントラクトで送出する場合には、サポートスタッフに連絡して、手動で残高に追加したり払い戻しをする必要があります。[Shapeshiftの「スプリット」ツールも使用可能です。(https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** No known issues. Use whatever.',
      TRANSModal_Yes: '理解しました。',
      TRANSModal_No: '理解できません。ヘルプが必要です。',

      /* Offline Transaction */
      OFFLINE_Title: 'オフライントランザクションを作成し送出',
      OFFLINE_Desc: 'オフライントランザクションの作成は、3ステップで行う事ができます。ステップ１と３はオンラインのコンピューター上で行い、ステップ２は、オフライン、あるいは物理的にネットワークと切断されたコンピューターを用います。これにより、プライベートキーが、インターネットに接続したデバイスと接触する事を避ける事ができます。',
      OFFLLINE_Step1_Title: 'ステップ1: 情報生成 (オンラインコンピューター)',
      OFFLINE_Step1_Button: '情報生成',
      OFFLINE_Step1_Label_1: '送出元アドレス： ',
      OFFLINE_Step1_Label_2: 'ノート：これは、送出元アドレスであって、送出先アドレスではありません。操作元アカウントからは「Nonce」が生成されます。切断されたコンピューターを使用する場合に、このアドレスはコールドストレージのアカウントのものになります。',
      OFFLINE_Step2_Title: 'ステップ2: 情報生成 (オフラインコンピューター)',
      OFFLINE_Step2_Label_1: '送出先アドレス： ',
      OFFLINE_Step2_Label_2: '送出する値/総量',
      OFFLINE_Step2_Label_3: 'ガス価格 ',
      OFFLINE_Step2_Label_3b: 'これは、ステップ１でオンラインコンピューターに表示されたものです。',
      OFFLINE_Step2_Label_4: 'ガスリミット ',
      OFFLINE_Step2_Label_4b: 'デフォルトガスリミット値は21000です。コントラクトや付加データーを送出する場合には、これらの値は　異なるものにする必要があります。使用されなかったガスは全て返却されます。',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'これらは、ステップ１でオンラインコンピューターに表示されたものです。',
      OFFLINE_Step2_Label_6: 'データ',
      OFFLINE_Step2_Label_6b: 'これは、任意の付加データです。コントラクトに対してトランザクションを送出する際などでよく使われます。',
      OFFLINE_Step2_Label_7: 'プライベートキー/JSONの入力/選択',
      OFFLINE_Step3_Title: 'ステップ３: トランザクションの送出/公開(オンラインコンピューター)',
      OFFLINE_Step3_Label_1: 'ステップ２で署名されたトランザクションをここにペーストして「トランザクションの送出」ボタンをクリックする。',

      /* DAO */
      DAO_bal1: 'ブロック 1,919,999',
      DAO_bal2: '現在の',
      DAO_TitleETH: 'ETHでDAOを払い出し',
      DAO_TitleETC: 'ETCでDAOを払い出し',
      DAO_ETC_Label_1: 'どのアドレスにETCを送りますか？',
      DAO_ETC_Label_2: 'ホワイトハックグループは日夜ETCを取り戻すべために働いています。希望すれば、払い戻しの何パーセントかを感謝をこめて贈る事ができます。',
      DAO_Desc: 'このタブ上で、DAOトークンから、ETH **& ETC**の払い戻してください。DAOトークンの送るためには、トークン送出タブを選んでください。',
      DAO_Inst: '赤いボタンをクリックしてください。簡単です。',
      DAO_Warning: '「ガス残高不足」エラーの時は、アカウントにガスを供給するためにに少量のEtherが必要です。このアカウントに0.01 ETHを追加して、再度操作してください。',
      DAOModal_Title: '確認中/...',
      DAOModal_1: '払い出しを進めます',
      DAOModal_2: 'DAOトークンを',
      DAOModal_3: 'に対し', // “の代わりに”

      /* Digix */
      DGD_Desc: 'DigixDAO (DGD) トークンとバッジを請求してください。３月３０/３１日に行われた、トークンセールに参加した場合にのみ請求可能です。DGDを送出するためには「トークン送出」のタブ　を使用してください。',
      DGD_Label_1: 'フィー消費量概算：',
      DGD_Label_2: 'フィー最大消費量：',
      DGD_Label_3: 'ガス価格：',
      DGD_Generate: '請求の生成',
      DGD_Content: 'DGDトークンの請求を進めます',

      /* Deploy Contracts */
      DEP_generate: 'バイトコードを生成する',
      DEP_generated: '生成されたバイトコード',
      DEP_signtx: 'トランザクションに署名',
      DEP_interface: '生成されたインターフェース',

      /* My Wallet */
      MYWAL_Nick: 'ウォレットニックネーム',
      MYWAL_Address: 'ウォレットアドレス',
      MYWAL_Bal: '残高',
      MYWAL_Edit: '編集',
      MYWAL_View: '表示',
      MYWAL_Remove: '除去',
      MYWAL_RemoveWal: 'ウォレットを除去：',
      MYWAL_WatchOnly: '自分の監視専用アカウント',
      MYWAL_Viewing: 'ウォレットを表示： ',
      MYWAL_Hide: 'ウォレット情報を隠す',
      MYWAL_Edit_2: 'ウォレットを編集： ',
      MYWAL_Name: 'ウォレット名',
      MYWAL_Content_1: '警告！　ウォレットを除去しようとしています： ',
      MYWAL_Content_2: '**プライベートキーとキーストアファイル及びパスワード**が保管されているか確認してください。',
      MYWAL_Content_3: 'MyEtherWallet CXでこのウォレットを使用するためには、プライベートキーあるいはJSONとパスワードを手動で追加する必要があります。',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: '異なったバージョンのプライベートキーをダウンロードしたり、ペーパーウォレットを再印刷することができます。[import your account into Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/)する時に必要です。残高をチェックするためには、[etherscan.io](http://etherscan.io/)のようなブロックチェーンエクスプローラーサービスを使う事をおすすめします。',
      VIEWWALLET_Subtitle_Short: '異なったバージョンのプライベートキーをダウンロードしたり、ペーパーウォレットを再印刷することができます。',
      VIEWWALLET_SuccessMsg: '成功! ウォレットの詳細は以下の通りです。',

      /* Chrome Extension */
      CX_error_1: 'ウォレットが保存されていません。["Add Wallet"](/cx-wallet.html#add-wallet)をクリックして追加してください。',
      CX_quicksend: '簡易送信', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: '正しい値を入力してください。',
      ERROR_2: 'パスワードは少なくとも９文字が必要です。強固なパスワードであることをお確かめください。 ',
      ERROR_3: '申し訳ございませんが、このタイプのウォレットファイルは認識できません。 ',
      ERROR_4: '正しいウォレットファイルではありません。 ',
      ERROR_5: 'この単位は存在しませんので、下記の中からお選びください。 ',
      ERROR_6: '無効なアドレスです。 ',
      ERROR_7: '無効なパスワードです。 ',
      ERROR_8: '無効な総量です。 ',
      ERROR_9: '無効なガスリミットです。 ',
      ERROR_10: '無効なデータです。 ',
      ERROR_11: '無効なガス総量です。 ',
      ERROR_12: '無効な nonce　です。 ',
      ERROR_13: '無効な署名のトランザクションです。 ',
      ERROR_14: '同じニックネームのウォレットが既にあります。 ',
      ERROR_15: 'ウォレットが見つかりません。 ',
      ERROR_16: 'このIDのプロポーサルは存在しない、あるいは正常に読み込みできません。 ',
      ERROR_17: '同じアドレスのウォレットが既に存在します。ウォレットのページをご確認ください。',
      ERROR_18: 'ガスとして使われるために、少なくとも0.001 etherがウォレット上に必要です。 ',
      ERROR_19: '全てのガスがこのトランザクションにより消費されます。これは、既に投票を行ったか、あるいはディベート期間が終了したためです。',
      ERROR_20: '無効なシンボル',
      SUCCESS_1: '有効なアドレス',
      SUCCESS_2: 'ウォレットは正常に暗号解除されました。',
      SUCCESS_3: 'トランザクションが送出されました。 TX ID: ',
      SUCCESS_4: 'ウォレットが追加されました：',
      SUCCESS_5: '投票が完了しました。The DAO への積極的な参加に感謝いたします。',
      SUCCESS_6: '選択されました： ',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'トランスレーターに感謝： ',
      TranslatorName_1: '[sekisanchi](https://www.myetherwallet.com/?gaslimit=21000&to=0xf991119Eea62Eee1a6fdaA7f621e91A42f325FcE&value=1.0#send-transaction)',
      TranslatorAddr_1: '0xf991119Eea62Eee1a6fdaA7f621e91A42f325FcE',
      /* Translator 1: Kazunori Seki / 関一典 */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = ja;
  }, {}], 44: [function (require, module, exports) {
    // Dutch
    'use strict';

    var nl = function () {};
    nl.code = 'nl';
    nl.data = {

      /* Navigation*/
      NAV_YourWallets: 'Jouw Wallets',
      NAV_AddWallet: 'Wallet Toevoegen',
      NAV_GenerateWallet: 'Genereer Wallet',
      NAV_BulkGenerate: 'Bulk Genereren',
      NAV_SendEther: 'Verzend Ether',
      NAV_SendTokens: 'Verzend Tokens',
      NAV_Offline: 'Verzend Offline',
      NAV_WithdrawDAO: 'DAO Opnemen',
      DAO_TitleLong: 'DAO Token in ETH omzetten',
      NAV_ClaimDGD: 'Claim DGD',
      DGD_TitleLong: 'Claim je DGD Tokens',
      NAV_DeployContract: 'Verspreid Contract',
      NAV_MyWallets: 'Mijn Wallets',
      NAV_ViewWallet: 'Bekijk Wallet Info',
      NAV_Help: 'Help',
      NAV_Contact: 'Contact',

      /* General */
      x_Wallet: 'Wallet',
      x_Password: 'Wachtwoord',
      x_Download: 'Download',
      x_Address: 'Je Adres',
      x_Save: 'Opslaan',
      x_Cancel: 'Annuleren',
      x_AddessDesc: 'Dit is je "Account #" ofwel je "Publieke Sleutel". Maak dit bekend aan anderen zodat ze je ether kunnen sturen. Dit icoon is een makkelijke manier om je adres te herkennen.',
      x_PrivKey: 'Prive Sleutel (onversleuteld)',
      x_PrivKey2: 'Prive Sleutel',
      x_PrivKeyDesc: 'Dit is een onversleutelde tekst versie van je prive sleutel waarbij geen wachtwoord benodigd is. Mocht iemand deze unversleutelde prive sleutel vinden, kunnen zij zonder wachtwoord bij je account. Om deze reden zijn versleutelde versies aanbevolen.',
      x_Keystore: 'Keystore/JSON Bestand (Aangeraden · versleuteld · Mist/Geth Formaat)',
      x_Keystore2: 'Keystore/JSON Bestand',
      x_KeystoreDesc: 'Dit Keystore / JSON bestand voldoen aan het formaat zoals gebruikt door Mist & Geth waardoor je het gemakkelijk kunt importeren in de toekomst. Dit is de aanbevolen methode voor download en back up.',
      x_Json: 'JSON Bestand (onversleuteld)',
      x_JsonDesc: 'Dit is het onversleutelde, JSON formaat van je prive sleutel. Dit betekend dat je het wachtwoord niet nodig hebt, maar ook dat een ieder die je JSON bestand vind toegang heeft tot je wallet & Ether zonder wachtwoord.',
      x_PrintShort: 'Afdrukken',
      x_Print: 'Druk je papieren wallet af',
      x_PrintDesc: 'ProTip: Klik Afdrukken en sla deze pagina op als PDF, zelfs als je geen printer hebt!',
      x_CSV: 'CSV bestand (onverlseuteld)',
      x_TXT: 'TXT bestand (onverlseuteld)',

      /* Header */
      MEW_Warning_1: 'Check altijd de URL voordat je jouw wallet opent of een nieuwe wallet genereert. Pas op voor phishing sites!',
      CX_Warning_1: 'Zorg voor **externe backups** van alle wallets die je hier opslaat. Er kan kunnen diverse dingen gebeuren die ervoor kunnen zorgen dat je gegevens in deze Chrome Extensie verloren gaan, inclusief het deinstalleren en installeren van de extensie. Deze extensie is een manier om je wallet gemakkelijk toegankelijk te maken, **geen** manier om ze te backuppen.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet',
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extensie',

      /* Footer */
      FOOTER_1: 'Een open source, javascript, client-side tool om Ethereum Wallets te genereren & transacties te verzenden.',
      FOOTER_1b: 'Gemaakt door',
      FOOTER_2: 'Donaties worden zeer gewaardeerd:',
      FOOTER_3: 'Client-side wallet genereren door',
      FOOTER_4: 'Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Account Informatie: ',
      sidebar_AccountAddr: 'Account Adres: ',
      sidebar_AccountBal: 'Account Saldo: ',
      sidebar_TokenBal: 'Token Saldo: ',
      sidebar_Equiv: 'Equivalente Waarde: ',
      sidebar_TransHistory: 'Transactie Geschiedenis: ',
      sidebar_DGDBal: 'DGD Crowdsale Informatie:',
      sidebar_donation: 'MyEtherWallet is een gratis, open-source service toegewijd aan  jouw privacy en beveiliging. Des te meer donaties we ontvangen, des te meer tijd we zullen spenderen aan nieuwe functies, aan de hand van jouw terugkoppeling, en we je kunnen geven wat jij wilt. Wij zijn slechts twee mensen die de wereld een stukje beter willen maken. Help jij mee?',
      sidebar_donate: 'Doneer',
      sidebar_thanks: 'BEDANKT!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Hoe wil je toegang tot je wallet?',
      decrypt_Title: 'Selecteer het formaat van je prive sleutel:',
      decrypt_Select: 'Selecteer een Wallet:',

      /* Add Wallet */
      ADD_Label_1: 'Wat wil je doen?',
      ADD_Radio_1: 'Genereer nieuwe wallet',
      ADD_Radio_2: 'Selecteer Je wallet bestand (Keystore / JSON)',
      ADD_Radio_2_alt: 'Selecteer Je wallet bestand: ',
      ADD_Radio_2_short: 'SELECTEER WALLET BESTAND...',
      ADD_Radio_3: 'Plak/Type je prive sleutel ',
      ADD_Radio_4: 'Voeg een te bekijken account toe',
      ADD_Label_2: 'Verzin een Nickname:',
      ADD_Label_3: 'Je wallet is versleuteld. Geef je wachtwoord: ',
      ADD_Label_4: 'Voeg een te bekijken account toe',
      ADD_Warning_1: 'Je kunt elk account toevoegen als "bekijken" in het wallets tabblad zonder de prive sleutel te uploaden. Dit betekend ** niet ** dat je toegang hebt tot deze wallet, noch dat je er Ether vanuit kunt versturen.',
      ADD_Label_5: 'Voor het Adres in: ',
      ADD_Label_6: 'Ontsleutel je wallet: ',
      ADD_Label_6_short: 'Ontsleutel',
      ADD_Label_7: 'Voeg account toe',

      /* Generate Wallets */
      GEN_desc: 'Als je meerdere wallets wilt gererenen, kun je dat hier doen: ',
      GEN_Label_1: 'Geef een sterk wachtwoord (ten minste 9 karakters)',
      GEN_Placeholder_1: 'Vergeet NIET om dit op te slaan!',
      GEN_SuccessMsg: 'Gelukt! Je wallet is gegenereerd.',
      GEN_Warning: '**Je hebt je Keystore/JSON Bestand & wachtwoord of prive sleutel nodig** om toegang tot deze wallet te verkrijgen in de toekomst. Sla het op & maak een externe back-up! Er is geen enkele manier om je wallet te herstellen als je het nu niet opslaat. Lees ook de help pagina (https://www.myetherwallet.com/#help) voor instructies.',
      GEN_Label_2: 'Sla je Keystore/JSON of Prive Sleutel op. Vergeet je wachtwoord hierboven niet.',
      GEN_Label_3: 'Sla je adres op.',
      GEN_Label_4: 'Druk je papieren wallet af, of bewaar hem als QR code. (optioneel)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Aantal te genereren wallets',
      BULK_Label_2: 'Genereer Wallets',
      BULK_SuccessMsg: 'Gelukt! Je wallets zijn gegenereerd.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Aan Adres: ',
      SEND_amount: 'Te verzenden bedrag: ',
      SEND_amount_short: 'Bedrag',
      SEND_custom: 'Aangepast',
      SEND_gas: 'Gas',
      SEND_generate: 'Genereer Transactie',
      SEND_raw: 'Raw Transactie',
      SEND_signed: 'Gesigneerde Transactie',
      SEND_trans: 'Verzend Transactie',
      SEND_TransferTotal: 'Verzend volledig saldo',
      SENDModal_Title: 'Waarschuwing! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Je staat op het punt om het volgende bedrag over te maken: ',
      SENDModal_Content_2: 'aan adres',
      SENDModal_Content_3: 'Weet je zeker dat je dit wilt doen?',
      SENDModal_Content_4: 'OPMERKING: Als je een fout bent tegengekomen, zul je waarschijnlijk ether aan je account moeten toevoegen om de gas kosten voor het verzenden van deze transactie te betalen. Gas wordt betaald in ether.',
      SENDModal_No: 'Nee, haal me hier weg!',
      SENDModal_Yes: 'Ja, ik weet het zeker! Maak de transactie.',

      /* Tokens */
      TOKEN_Addr: 'Adres: ',
      TOKEN_Symbol: 'Token Symbool: ',
      TOKEN_Dec: 'Decimalen: ',

      /* Send Transaction */
      TRANS_desc: 'Als je Tokens wilt versturen, gebruik dan de "Verzend Token" pagina i.p.v. deze pagina.',
      TRANS_warning: 'Als je gebruik maakt van de "Enkel ETH" of "Enkel ETC" functies zul je de transactie uitvoeren via een contract. Sommige diensten hebben  problemen met het accepteren van deze transacties. Lees meer.',
      TRANS_standard: 'ETH (Standaard Transactie)',
      TRANS_eth: 'Enkel ETH',
      TRANS_etc: 'Enkel ETC',
      TRANS_advanced: '+Geavanceerd: Voeg Data toe ',
      TRANS_data: ' Data: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'Een standaard transactie met 21000 gas zal 0.000441 ETH kosten. Wij gebruiken een iets-boven-minimum gas prijs van 0.000000021 ETH om te garranderen dat de transactie snel uitgevoerd zal worden. Wij zijn niet verantwoordelijk voor je transactie kosten.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Enkel ETH" en "Enkel ETC" Transacties',
      TRANSModal_Content_0: 'Een opmerking met betrekking tot de verschillende typen transacties en diensten:',
      TRANSModal_Content_1: '**ETH (Standaard Transactie): ** Hiermee genereer je een standaard transactie, direct van een adres naar een ander. Het verbruikt de standaard hoeveelheid gas van 21000. Het is waarschijnlijk dat elke verzonden ETH met deze methode zal worden nagespeeld (replayed) op de ETC blockchain.',
      TRANSModal_Content_2: '**Enkel ETH: ** Hiermee verstuur je via [Timon Rapp\'s "replay protection contract" (zoals aanbevolen door VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) zodat je enkel verstuurd op de **ETH** blockchain.',
      TRANSModal_Content_3: '**Enkel ETC: ** Hiermee verstuur je via [Timon Rapp\'s "replay protection contract" (zoals aanbevolen door VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) zodat je enkel verstuurd op de **ETC** blockchain. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Verstuur enkel via standaard transacties. Als je via de "Enkel" contracten hebt verstuurd zul je contact moeten opnemen met hun helpdesk zodat ze je kunnen restitueren [Je kunt ook Shapeshift\'s "split" tool uitproberen.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Geen problemen bekend. Gebruik wat je voorkeur heeft.',
      TRANSModal_Yes: 'Mooi, nu begrijp ik het.',
      TRANSModal_No: 'Oh jee, nu snap ik er nog niets van. Help me.',

      /* Offline Transaction */
      OFFLINE_Title: 'Genereer & Verzend een Offline Transactie',
      OFFLINE_Desc: 'Een offline transactie doe je in drie stappen. Stap 1 en 3 doe je op een online computer, terwijl je stap 2 uitvoert op een offline/afgeschermde computer. Dit zorgt ervoor dat je prive sleutel niet in aanraking komt met een met internet verbonden computer.',
      OFFLLINE_Step1_Title: 'Stap 1: Genereer Informatie (Online Computer)',
      OFFLINE_Step1_Button: 'Genereer Informatie',
      OFFLINE_Step1_Label_1: 'Van Adres: ',
      OFFLINE_Step1_Label_2: 'Opmerking: Dit is het VAN adress, niet het AAN adres. De Nonce wordt generenereerd van het oorspronkelijke account. Als je een afgeschermde (airgapped) computer gebruikt, zal dit het adres van het cold-storage account zijn.',
      OFFLINE_Step2_Title: 'Stap 2: Genereer Transactie (Offline Computer)',
      OFFLINE_Step2_Label_1: 'Aan Adres: ',
      OFFLINE_Step2_Label_2: 'Waarde / Te Verzenden Bedrag',
      OFFLINE_Step2_Label_3: 'Gas Prijs ',
      OFFLINE_Step2_Label_3b: 'Dit werd weergegeven in Stap 1 op je online computer.',
      OFFLINE_Step2_Label_4: 'Gas Limiet ',
      OFFLINE_Step2_Label_4b: '21000 is de standaard gas limiet. Als je (naar) een contract verstuurd of data toegoegd, zou je dit anders moeten instellen. Alle onbenutte gas zal aan je worden teruggestuurd.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Dit werd weergegeven in Stap 1 op je online computer.',
      OFFLINE_Step2_Label_6: 'Data',
      OFFLINE_Step2_Label_6b: 'Dit is optioneel. Data wordt vaak gebruikt als je transacties naar contracten verstuurd.',
      OFFLINE_Step2_Label_7: 'Selecteer en geef je Prive Sleutel / JSON in.',
      OFFLINE_Step3_Title: 'Stap 3: Verstuur / Publiceer Transactie (Online Computer)',
      OFFLINE_Step3_Label_1: 'Plak de gesigneerde transactie van Stap 2 hier en click de "Verzend Transactie" knop.',

      /* DAO */
      DAO_bal1: 'bij blok 1.919.999',
      DAO_bal2: 'momenteel',
      DAO_TitleETH: 'DAO voor ETH opnemen',
      DAO_TitleETC: 'DAO voor ETC opnemen',
      DAO_ETC_Label_1: 'Naar welk adres wil je je ETC verzenden?',
      DAO_ETC_Label_2: 'De "White Hat Group" is onvermoeibaar aan het werk geweest om jouw ETC terug bij jouw te krijgen. Je kunt ze bedankten door een percentage van je opname te doneren, als je daarvoor kiest. ',
      DAO_Desc: 'Gebruik dit tab om je DAO Tokens om te zitten in ether. Als je DOA Tokens wilt versturen, gebruik dan het Verzend Tokens Tab.',
      DAO_Inst: 'Ja. Klik simpelweg op de grote rode knop. Zo makkelijk is het.',
      DAO_Warning: 'Als je een "Insufficient balance for gas" fout krijgt, zul je een kleine hoeveelheid ETH in je account moeten storten om de gas kosten voor deze actie te betalen. Voeg 0.01 ETH toe aan je account en probeer het opnieuw. ',
      DAOModal_Title: 'Voor de zekerheid...',
      // full sentance is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Je staat op het punt om',
      DAOModal_2: 'DAO Tokens op te nemen voor',
      DAOModal_3: 'voor', // "in return for"

      /* Digix */
      DGD_Desc: 'Claim je DigixDAO (DGD) tokens & badges. Om te claimen zul je meegedaan moeten hebben met de token sale van 30/31 maart 2016.  Als je DGD wilt versturen, gebruik dan het Verzend Tokens Tab.',
      DGD_Label_1: 'Geschatte transactie kosten:',
      DGD_Label_2: 'Gegeven Maximum Transactie Kosten:',
      DGD_Label_3: 'Gas Prijs:',
      DGD_Generate: 'Genereer Claim',
      DGD_Content: 'Je staat op het punt om je DGD Tokens te claimen.',

      /* Deploy Contracts */
      DEP_generate: 'Genereer Bytecode',
      DEP_generated: 'Gegenereerde Bytecode',
      DEP_signtx: 'Onderteken Transactie',
      DEP_interface: 'Gegenereerde Interface',

      /* My Wallet */
      MYWAL_Nick: 'Wallet Nickname',
      MYWAL_Address: 'Wallet Adres',
      MYWAL_Bal: 'Saldo',
      MYWAL_Edit: 'Bewerken',
      MYWAL_View: 'Bekijken',
      MYWAL_Remove: 'Verwijderen',
      MYWAL_RemoveWal: 'Verwijder Wallet:',
      MYWAL_WatchOnly: 'Je Watch-Only Accounts',
      MYWAL_Viewing: 'Te Bekijken Wallet: ',
      MYWAL_Hide: 'Verberg Wallet Info',
      MYWAL_Edit_2: 'Bewerk Wallet: ',
      MYWAL_Name: 'Wallet Naam',
      MYWAL_Content_1: 'Waarschuwing! Je staat op het punt om je Wallet te verwijderen: ',
      MYWAL_Content_2: 'Wees er zeker van dat je **de prive sleutel/JSON bestand en het wachtwoord opgeslagen hebt** van deze wallet voordat je het verwijderd.',
      MYWAL_Content_3: 'Als je deze wallet in de toekomst nog wilt gebruiken met MyEtherWallet CX, zul je het met de hand moeten toevoegen door gebruik te maken van de prive sleutel/JSON en wachtwoord.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Hiermee kun je verschillende versies van je prive sleutels downloaden en je papieren wallet opnieuw afdrukken. Je zou dit kunnen doen om [je account in Geth/Mist te importeren](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Als je enkel je saldo wilt checken adviseren we je om gebruik te maken van een blockchain explorer zoals [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Hiermee kun je verschillende versies van je prive sleutels downloaden en je papieren wallet opnieuw afdrukken. ',
      VIEWWALLET_SuccessMsg: 'Gelukt! Hier zijn je wallet details.',

      /* Chrome Extension */
      CX_error_1: 'Je hebt nog geen enkele wallets opgeslagen. Klik ["Voeg wallet toe"](/cx-wallet.html#add-wallet) om er een toe te voegen!',
      CX_quicksend: 'VerzendSnel',

      /* Error Messages */
      ERROR_1: 'Geef alsjeblieft een geldig bedrag in.',
      ERROR_2: 'Je wachtwoord dient minimaal 9 karakters lang te zijn. Zorg voor een sterk wachtwoord. ',
      ERROR_3: 'Sorry! We herkennen dit type Wallet bestand niet. ',
      ERROR_4: 'Dit is geen geldig Wallet bestand. ',
      ERROR_5: 'Deze eenheid bestaat niet, kies alsjeblieft een van de volgende eenheden ',
      ERROR_6: 'Ongeldig adres. ',
      ERROR_7: 'Ongeldig wachtwoord. ',
      ERROR_8: 'Ongeldig bedrag. ',
      ERROR_9: 'Ongeldige gas limiet. ',
      ERROR_10: 'Ongeldige data waarde. ',
      ERROR_11: 'Ongeldige gas bedrag. ',
      ERROR_12: 'Ongeldige nonce. ',
      ERROR_13: 'Ongeldige gesigneerde transactie. ',
      ERROR_14: 'Een wallet met deze nickname bestaat reeds. ',
      ERROR_15: 'Wallet niet gevonden. ',
      ERROR_16: 'Het ziet er niet naar uit dat een proposal met dit ID bestaat of dat er een  fout is opgetreden bij het lezenvan dit proposal. ',
      ERROR_17: 'Een wallet met dit adres bestaat reeds. Check alsjeblileft je wallet pagina. ',
      ERROR_18: 'Je hebt mininaal 0.001 ether in je account nodig om de in de gas kosten te voorzien. Voeg alsjeblieft wat ether toe en probeer het opnieuw. ',
      ERROR_19: 'Alle gas zou worden verbruikt op deze transactie. Dit betekend dat je al gestemd hebt op dit proposal of dat de debateerperiode is verstreken.',
      ERROR_20: 'Ongeldig symbol',
      SUCCESS_1: 'Geldig adres',
      SUCCESS_2: 'Wallet succesvol ontsleuteld',
      SUCCESS_3: 'Transactie verzonden. TX ID: ',
      SUCCESS_4: 'Je Wallet is succesvol toegevoegd: ',
      SUCCESS_5: 'Je hebt succesvol gestemd. Fijn dat je een actief participerend DAO deelnemer bent.',
      SUCCESS_6: 'Bestand Geselecteerd: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Ongeldige verzender',
      GETH_Nonce: 'Nonce te laag',
      GETH_Cheap: 'Gas prijs te laag voor acceptatie',
      GETH_Balance: 'Ontoereikend saldo',
      GETH_NonExistentAccount: 'Account bestaat  niet of account saldo te laag',
      GETH_InsufficientFunds: 'Ontoereikend saldo voor gas * prijs + waarde',
      GETH_IntrinsicGas: 'Intrinsiek gas te laag',
      GETH_GasLimit: 'Overstijgt blok gas limiet',
      GETH_NegativeValue: 'Negative waarde',

      /* Translation Info */
      translate_version: '0.3',
      Translator_Desc: 'Veel dank voor onze vertalers: ',
      TranslatorName_1: '[h3ll0fr13nd](https://www.myetherwallet.com/?gaslimit=21000&to=0xB5FbCE123F12347206c881cae73A3046BA1A90bA&value=1.0#send-transaction)',
      TranslatorAddr_1: '0xB5FbCE123F12347206c881cae73A3046BA1A90bA',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Als je een wallet aangemaakt hebt -of repo hebt gedownload- voor **31 december 2015**, check dan alsjebieft je wallets en download een nieuwe versie van de repo. Klik voor detais.',
      HELP_Desc: 'Zie je dat er iets mist? Of heb je een andere vraag? [Neem contact met ons op](mailto:myetherwallet@gmail.com), en we zullen niet alleen je vraag beantwoorden, maar ook deze help pagina bijwerken zodat deze nog nuttiger wordt voor toekomstige gebruikers!',
      HELP_Remind_Title: 'Enkele herinneringen',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, en enkele onderliggende Javascript libraries waar we gebruik van maken zijn onderheving aan active ontwikkeling.** Hoewel we grondig testen & er inmiddels tienduizenden wallets succesvol zijn aangemaakt door mensen over de hele wereld, blijft er altijd een geringe kans dat iets er onverwachts optreedt waardoor je je ether kunt verliezen. Investeer alsjeblieft niet meer dan dat je bereid bent om te verliezen, en wees voorzichtig. Zou er onverhoopt toch iets gebeuren vinden we dat zeer spijtig, echter **zullen wij nooit verantwoordelijk zijn voor de verloren Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX zijn geen "web wallets". Je maakt bij ons geen account aan noch geef je ooit je Ether aan ons in bezit. Alle gegevens verlaten nooit je computer/je browser. We helpen je alleen gemakkelijk toegang te verkrijgen tot de blockchain zodat je er informatie in kunt opslaan en kunt uitlezen.',
      HELP_Remind_Desc_3: 'Als je je prive sleutel en wachtwoord niet opslaat, is er geen enkele manier om toegang tot je wallet te verkrijgen of het saldo dat het bevat. Maak back-up`s en bewaar deze op meerdere fysieke lokaties en dus niet alleen op je eigen computer!',

      HELP_0_Title: '0) Ik ben nieuw. Waar begin ik?',
      HELP_0_Desc_1: 'MyEtherWallet geeft je de mogelijkheid om nieuwe wallets te genereren zodat je daarin je Ether kunt bewaren in plaat van op een exchange. Dit process vind volledig lokaal plaats, op je eigen computer en niet op onze servers. Daarom **ben je volledig zelf verantwoordelijk voor het veilig opslaan** van je via deze website aangemaakte wallets.',
      HELP_0_Desc_2: 'Creer een nieuwe wallet.',
      HELP_0_Desc_3: 'Maak een wallet back-up.',
      HELP_0_Desc_4: 'Verrifieer dat je toegang hebt tot dit nieuwe wallet en dat je alle noodzakelijke informatie correct hebt opgeslagen.',
      HELP_0_Desc_5: 'Verzend Ether naar dit nieuwe wallet.',

      HELP_1_Title: '1) Hoe creer ik een nieuw wallet?',
      HELP_1_Desc_1: 'Ga naar de "Genereer Wallet" pagina.',
      HELP_1_Desc_2: 'Ga naar de "Wallet Toevoegen" pagina & selecteer "Genereer Nieuw Wallet"',
      HELP_1_Desc_3: 'Voer een sterk wachtwoord in. Als je denkt dat je het misschien gaat vergeten, bewaar het dan op een veilige plek. Je zult dit wachtwoord nodig hebben om transacties te versturen.',
      HELP_1_Desc_4: 'klik "GENENEREER".',
      HELP_1_Desc_5: 'Je wallet is nu gegenereerd.',

      HELP_2a_Title: '2a) Hoe bewaar/back-up ik mijn wallet?',
      HELP_2a_Desc_1: 'Zorg altijd voor een goede back-up van je wallet op meerdere fysiek verschillende lokaties - bijvoorbeeld op een USB drive en/of op een vel papier.',
      HELP_2a_Desc_2: 'Bewaar het adres. Je kunt het voor jezelf bewaren of met anderen delen. Op die manier kunnen anderen ether naar je versturen.',
      HELP_2a_Desc_3: 'Bewaar versies van je prive sleutel. Deel deze niet met anderen. Je prive sleutel heb je nodig wanneer je toegang tot je ETH wilt om het te versturen! Er zijn drie soorten prive sleutels:',
      HELP_2a_Desc_4: 'Plaats je adres, versies van je prive sleutel, en de PDF versie van je papieren wallet in een map. Bewaar deze op je computer en een USB drive.',
      HELP_2a_Desc_5: 'Druk je wallet af als je een printer hebt. Zo niet, schrijf dan je prive sleutel en adres op een vel papier. Bewaar dit op een veilige lokatie, ergens anders dan je computer en de USB drive.',
      HELP_2a_Desc_6: 'Houd in gedachte dat je moet voorkomen dan je je sleutels en wachtwoord kwijt raakt door een defect of verlies van je harde schijf, USB drive, of vel papier. Denk ook aan het fysieke verlies / schade van een complete ruimte (denk aan brand of overstroming).',

      HELP_2b_Title: '2b) Hoe doe ik veilig / offline / cold storage met MyEtherWallet?',
      HELP_2b_Desc_1: 'Ga naar onze github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Klik download zip in de rechterbovenhoek.',
      HELP_2b_Desc_3: 'Verplaats de zip naar een offline (airgapped) computer.',
      HELP_2b_Desc_4: 'Unzip het en dubbel-klik `index.html`.',
      HELP_2b_Desc_5: 'Genereer een wallet met een sterk wachtwoord.',
      HELP_2b_Desc_6: 'Bewaar het adres. Bewaar versies van de prive sleutel. Bewaar het wachtwoord als je het je niet voor altijd kunt herinneren.',
      HELP_2b_Desc_7: 'Bewaar deze papieren / USB drives op verschillende fysiek verschillende lokaties.',
      HELP_2b_Desc_8: 'Ga naar de "Bekijk Wallet Info" pagina en voer je prive sleutel / wachtwoord in om zeker te stellen dat ze correct zijn en dat je toegang hebt tot je wallet. Controleer dat het adres wat je opgeschreven hebt gelijk is.',

      HELP_3_Title: '3) Hoe verifieer ik dat ik toegang hebt tot mijn nieuwe wallets?',
      HELP_3_Desc_1: 'Zorg **voordat je enige Ether naar je wallet verstuurd** dan je controleerd dat je er toegang toe hebt.',
      HELP_3_Desc_2: 'Navigeer naar de "Bekijk Wallet Info" pagina.',
      HELP_3_Desc_3: 'Navigeer naar de MyEtherWallet.com "Bekijk Wallet Info" pagina.',
      HELP_3_Desc_4: 'Selecteer je wallet bestand -of- je prive sleutel en open je wallet.',
      HELP_3_Desc_5: 'Als je wallet is versleuteld (encrypted) zal er een automatisch een extra invoerveld verschijnen. Voer je wachtwoord in.',
      HELP_3_Desc_6: 'Klik op de "Ontsleutel je Wallet" knop.',
      HELP_3_Desc_7: 'Informatie over je wallet zal verschijnen. Zoek je account adres, naast een kleurrijk, cirkelvormig icoon. Dit icoon is een visuele voorstelling van je address. Zorg ervoor dat je zeker weet dat dit adres het adres is wat je opgeslagen hebt in je tekst document en op je papieren wallet.',
      HELP_3_Desc_8: 'Als je van plan bent om er een grote hoeveelheid ether op na te houden, raden we je aan om eerst een kleine hoeveelheid ether naar je nieuwe wallet te versturen voordat je er een grotere hoeveelheid ether naar stuurt. Stuur bijvoorbeeld 0.001 ether naar je nieuwe wallet, verkrijg vervolgens toegang tot dit wallet, stuur die zelfde 0.001 ether naar een ander adres, en controleer dat alles soepel verloopt.',

      HELP_4_Title: '4) Hoe stuur ik Ether van het ene wallet naar het ander?',
      HELP_4_Desc_1: 'Als je van plan ben om een grote hoeveelheid ether te versturen/ontvangen, raden we je aan om eerst te testen met een klein bedrag om er zeker van te zijn dat alles gaat zoals je verwacht.',
      HELP_4_Desc_2: 'Navigeer naar de "Verzend Ether" pagina.',
      HELP_4_Desc_3: 'Selecteer je wallet bestand -of- je prive sleutel en ontgrendel je wallet.',
      HELP_4_Desc_4: 'Als je wallet gecodeerd (encrypted) is, zal er automatisch een extra invoer veld verschijnen. Voer je wachtwoord in.',
      HELP_4_Desc_5: 'Klik op de "Ontsleutel Wallet" knop.',
      HELP_4_Desc_6: 'Voer het adres in waar naar je wilt versturen in het "Aan adres:" veld.',
      HELP_4_Desc_7: 'Voer het te verzenden bedrag in. Je kunt ook klikken op de "Verzend volledig saldo" link als je het totaal beschikbare saldo wilt overmaken.',
      HELP_4_Desc_8: 'Opmerking: Sinds eind juni 2016 moet je ervoor zorgen dat je ETH/ETC is gesplitst voordat je ether verstuurd zoals je normaliter zou doen. Zie onderstaande vraag #6 voor meer informatie.',
      HELP_4_Desc_9: 'Klik "Genereer Transactie".',
      HELP_4_Desc_10: 'Enkele extra nieuwe invoer velden zullen verschijnen. Dit is jouw browser die de transactie genereert.',
      HELP_4_Desc_11: 'Klik op de blauwe "Verzend Transactie" knop eronder.',
      HELP_4_Desc_12: 'Een pop-up zal verschijnen. Controleer dat het bedrag en het adres waarnaar je gaat verzenden correct zijn. Klik vervolgens op de "Ja, ik weet het zeker! Maak de transactie." knop.',
      HELP_4_Desc_13: 'De transactie zal worden verstuurt. Het TX ID zal worden weergegeven. Je kunt op dit TX ID klikken om het in de blockchain te bekijken. ',

      HELP_4CX_Title: '4) Hoe verzend ik Ether met MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'Ten eerste heb je een wallet nodig. Zodra je die hebt, heb je 2 opties: De "VerzendSnel" functionalitiet vanuit het Chrome Extensie icoon of de "Verzend Ether" pagina.',
      HELP_4CX_Desc_2: 'VerzendSnel:',
      HELP_4CX_Desc_3: 'Klik op het Chrome Extensie icoon.',
      HELP_4CX_Desc_4: 'Klik op de "VerzendSnel" knop.',
      HELP_4CX_Desc_5: 'Selecteer het wallet waar vanuit je wilt verzenden.',
      HELP_4CX_Desc_6: 'Voer het adres in waar naar je wilt versturen in het "Aan adres:" veld.',
      HELP_4CX_Desc_7: 'Voer het te verzenden bedrag in. Je kunt ook klikken op de "Transfer total available balance" link als je het totaal beschikbare saldo wilt overmaken.',
      HELP_4CX_Desc_8: 'Klik "Verzend Transactie". ',
      HELP_4CX_Desc_9: 'Controleer dat het bedrag en het adres waarnaar je gaat verzenden correct zijn.',
      HELP_4CX_Desc_10: 'Voer het wachtwoord van je wallet in.',
      HELP_4CX_Desc_11: 'Klik "Verzend Transactie."',
      HELP_4CX_Desc_12: 'Maak gebruik van de "Verzend Ether" Pagina: ',

      HELP_5_Title: '5) Hoe voer ik MyEtherWallet.com offline/lokaal uit? ',
      HELP_5_Desc_1: 'Je kunt MyEtherWallet.com uitvoeren op je eigen computer in plaats van op de GitHub servers. Je kunt een wallet volledig offline genereren en transacties versturen met behulp van de "Offline Transactie" pagina.',
      HELP_5_Desc_2: 'Ga naar onze github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Klik download zip in de rechterbovenhoek.',
      HELP_5_Desc_4: 'Verplaats de zip naar een offline (airgapped) computer.',
      HELP_5_Desc_5: 'Unzip het.',
      HELP_5_Desc_6: 'Dubbel-klik `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com draait nu volledig op jouw computer.',
      HELP_5_Desc_8: 'Voor het geval dat je er niet bekend mee bent: je hebt de volledige map nodig om de site lokaal te draaien, niet alleen het `index.html` bestand. Laat alle bestanden in de map met rust en ga ze niet verplaatsen. Als je een back-up wilt bewaren van de MyEtherWallet repo voor de toekomst, raden we je aan om alleen de ZIP te bewaren zodat je zeker weet dat de inhoud intact blijft.',
      HELP_5_Desc_9: 'Gezien we MyEtherWallet.com continu updaten, raden we je aan om regelmatig je opgeslagen versie van de repo bij te werken.',

      HELP_5CX_Title: '5) Hoe installeer ik deze extensie vanuit de repo in plaats van de Chrome Store? ',
      HELP_5CX_Desc_1: 'Ga naar onze github en zoek de meest actuele versie van de Chrome Extensie: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll helemaal naar beneden en klik met de rechter muisknop op de laatste versie. Klik "link opslaan als".',
      HELP_5CX_Desc_3: 'Ga naar Google Chrome zoek je instellingen op (in het menu in de rechterbovenhoek).',
      HELP_5CX_Desc_4: 'Klik "Extensies" aan de linkerkant.',
      HELP_5CX_Desc_5: 'Vink de "Ontwikkelaarmodus" aan bovenaan op de pagina.',
      HELP_5CX_Desc_6: 'Klik op de "Uitgepakte extensie laden..." knop.',
      HELP_5CX_Desc_7: 'Navigeer naar de nu ge-unzipte map die je eerder hebt gedownload. Klik "selecteer".',
      HELP_5CX_Desc_8: 'De extensie zou nu moeten verschijnen in je extensies en in je Chrome Extensie balk.',

      HELP_6_Title: '6) Hoe splits ik mijn ETH / ETC?',
      HELP_6_Desc_1: 'Indien je op het moment dat de hard fork plaats vond ETH in je account had, heb je nu een even zo grote hoeveelheid ETC. Als je ETH heb verstuurd door gebruik te maken van een standaard transactie, verstuur je ook ETC. Om dit te voorkomen, dien je je originele account te splitsen ("split") in twee accounts. Bij nieuwe transacties moet je er zeker van zijn dat ETH enkel naar je  ETH account gaan en ETC enkel naar je ETC account.',
      HELP_6_Desc_2: 'Je kunt ook al je ETH & ETC met een standaard transactie versturen naar Kraken or Poloniex. Deze wisselkantoren zullen je ETH and ETC automatisch splitsen. Vervolgens kun je deze saldi naar nieuwe wallets sturen, of je ETC of ETH verkopen.',
      HELP_6_Desc_3: '[Meer informatie met betrekking tot wallets en `reply attacks` is hier te vinden](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Genereer een nieuw `clean` post-fork ETH adres voor jezelf (dit zal de uiteindelijke bestemming zijn van je pure ETH).',
      HELP_6_Desc_5: 'Genereer een nieuw `clean` post-fork ETC adres voor jezelf (dit zal de uiteindelijke bestemming zijn van je pure ETC).',
      HELP_6_Desc_6: 'Maak een back-up van deze wallets en verifieer dat je er toegang tot hebt. Zie #2a en #3 bovenstaand.',
      HELP_6_Desc_7: 'Verstuur 0.1234 ETH naar je nieuwe "ETH" adres door gebruik te maken van de "Enkel ETH" optie op de "Verzend Ether" pagina.',
      HELP_6_Desc_8: 'Verstuur 0.5678 ETC naar je nieuwe "ETC" adres door gebruik te maken van de "Enkel ETC" optie op de "Verzend Ether" pagina.',
      HELP_6_Desc_9: 'Controleer dat enkel de 0.1234 ETH zich heeft verplaatst op etherscan.io. Controleer dan enkel de 0.5678 ETC zich heeft verplaatst op gastracker.io.',
      HELP_6_Desc_10: 'Verstuur een 0.0001 ETH transactie vanuit je nieuwe ETH wallet. Controleer deze op etherscan.io. Controleer dat de 0.0001 ETH zich heeft verplaatst.',
      HELP_6_Desc_11: ' Genereer (maar verstuur niet) een 0.0002 ETC transactie vanuit je nieuwe ETC wallet. Kopier het "Gesigneerde Transactie" veld. ',
      HELP_6_Desc_12: 'Ga naar [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) en plak deze ETC TX in classicetherwallet.com\'s offline tab helemaal beneden op de pagina en verstuur. Ga naar gastracker.io encontroleer dat de 0.0002 ETC zich verplaatst heeft.',
      HELP_6_Desc_13: 'Als alles correct ontvangen en verstuurd is zit je goed.',
      HELP_6_Desc_14: 'Verstuur het volledige resterende ETH saldo door gebruik te maken van de "Enkel ETH" optie en herhaal voor het ETC saldo met gebruik van de "Enkel ETC" optie.',
      HELP_6_Desc_15: ' Vanaf nu kun je gebruik maken van de standaard transactie optie voor deze nieuwe accounts zonder het risico op `replay attacks`. ',

      HELP_7_Title: '7) Hoe verzend ik Tokens & voeg ik alternatieve tokens toe?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a goede manier om tokens te verkenen en de getallen omtrent het token op te zoeken.',
      HELP_7_Desc_1: 'Navigeer naar de "Verzend Token" pagina.',
      HELP_7_Desc_2: 'Ontsleutel je wallet.',
      HELP_7_Desc_3: 'Voer het adres in waar naar je wilt versturen in het "Aan adres:" veld.',
      HELP_7_Desc_4: 'Voer de te verzenden hoeveelheid in.',
      HELP_7_Desc_5: 'Selecteer welk token je zou willen verzenden',
      HELP_7_Desc_6: 'Als het token niet wordt vermeld:',
      HELP_7_Desc_7: 'Klik op "Aangepast".',
      HELP_7_Desc_8: 'Voer het adres, naam, en decimalen van het token in. Deze worden verschaft door de ontwikkelaars van het token en zijn tevens benodigd wanneer je een "Add a Watch Token" aan Mist toevoegd.',
      HELP_7_Desc_9: 'Klik op "Opslaan".',
      HELP_7_Desc_10: 'Je kunt nu dit token verzenden en tevens zul je het saldo kunnen zien in the zijbalk.',
      HELP_7_Desc_11: 'Klik "Genereer Transactie".',
      HELP_7_Desc_12: 'Enkele extra velden zullen verschijnen. Dit is je browser die de transactie genereert.',
      HELP_7_Desc_13: 'Klik op de blauwe "Verzend Transactie" knop eronder.',
      HELP_7_Desc_14: 'Een pop-up zal verschijnen. Controleer dat het bedrag en het adres waarnaar je gaat verzenden correct zijn. Klik vervolgens op de "Ja, ik weet het zeker! Maak de transactie." knop.',
      HELP_7_Desc_15: 'De transactie zal worden verstuurt. Het TX ID zal worden weergegeven. Je kunt op dit TX ID klikken om het in de blockchain te bekijken.',

      HELP_8_Title: '8) Wat gebeurd er als deze website stopt?',
      HELP_8_Desc_1: 'MyEtherWallet is geen web wallet. Je hoeft niet in te loggen en er zal nooit iets van je op onze servers worden bewaard. Onze website is enkel een interface om toegang te verkrijgen tot de blockchain.',
      HELP_8_Desc_2: 'Als MyEtherWallet.com er mee stopt, zul je een andere manier moeten zien te vinden (zoals geth of Ethereum Wallet / Mist) om te doen wat wij doen. Maar wat je niet zult hoeven te doen is je Ether uit MyEtherWallet halen omdat het niet in MyEtherWallet zit. Je Ether zit in in welk wallet dan ook je op onze site hebt gegenereerd.',
      HELP_8_Desc_3: 'Je kunt je  onversleutelde (unencrypted) prive sleutel en je Geth/Mist Formaat (encrypted) bestanden heel gemakkelijk en direct in geth / Ethereum Wallet / Mist importeren. Zie onderstaande vraag #12.',
      HELP_8_Desc_4: 'Daarnaast is de kans dat wij MyEtherWallet offline halen is miniem tot onmogelijk. Het kost ons vrijwel niets om de site in stand te houden omdat we geen informatie opslaan. Als we toch het domijn offline halen, is het ook altijd nog publiekelijk beschikbaar op [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Je kunt daar de ZIP downloaden en het lokaal draaien. ',

      HELP_8CX_Title: '8) Wat gebeurd er als MyEtherWallet CX verdwijnt?',
      HELP_8CX_Desc_1: 'Ten eerste is alle je data op jouw computer opgeslagen, niet op onze servers. We snappen dat het verwarrend kan zijn, maar als je naar de Chrome Extensie kijkt, kijk je NIET naar dingen die ergens op onze servers staan opgeslagen - alles is bewaard op je eigen computer.',
      HELP_8CX_Desc_2: 'Dat gezegd hebbende, is het dan ook **erg belangrijk** dat je een back-up maakt van je wallets die met MyEtherWallet CX zijn gegenereerd. Als er iets met MyEtherWallet CX of jouw computer gebeurd blijft op die manier je wallet bewaard, en heb alle noodzakelijke informatie bij de hand om toegang tot je Ether te verkrijgen. Zie vraag #2a om te leren hoe een back-up van je wallet kunt maken.',
      HELP_8CX_Desc_3: 'Als om wat voor reden dan ook MyEtherWallet CX verdwijnt van de Chrome Store, kunt je het altijd nog handmatig laden met de broncode van Github. Zie #5 hierboven.',

      HELP_9_Title: '9) Is de "Verzend Ether" pagina offline?',
      HELP_9_Desc_1: ' Nee, verstuur transactie pagina is niet offline. De pagina heeft een internet verbinding nodig voor het bepalen van de actuele gas prijs, nonce van je account, en het versturen (broadcasten) van de transactie. Echter, het enige wat verstuurd wordt is je ondertekende transactie. Je prive sleutel blijft veilig bij je. We hebben nu ook een "Offline Transactie" pagina zodat je ervoor kunt zorgen dat je prive sleutels ten alle tijden op een offline/airgapped computer blijven.',

      HELP_10_Title: '10) Hoe voer ik een offline transactie uit?',
      HELP_10_Desc_1: 'Navigeer naar de "Offline Transactie" pagina met je online computer.',
      HELP_10_Desc_2: 'Voer het "Van Adres" in. Let hierbij op dat dit het adres is waar VAN je zal gaan versturen; VAN, en niet AAN. Dit genereert de nonce en gas prijs.',
      HELP_10_Desc_3: 'Ga vervolgens naar je offline computer. Voor het "AAN ADRES" en het te verzenden "BEDRAG" in.',
      HELP_10_Desc_4: 'Voer de "GAS PRIJS" in zoals werd weergegeven op je online computer in stap #1.',
      HELP_10_Desc_5: 'Voer de "NONCE" in zoals werd weergegeven op je online computer in stap #1.',
      HELP_10_Desc_6: 'De "GAS LIMIET" heeft een standaard waarde van 21000. Dit zal een standaard transactie dekken. Indien je naar een contract verstuurd of als je extra data aan je transactie wilt toevoegen, zil je de gas limiet moeten verhogen. Al het teveel aan gas zal aan je geretourneerd worden.',
      HELP_10_Desc_7: 'Als je dat wenst, kun je extra data invoeren. Als je extra data toevoegd, zul je meer dan de standaard 21000 gas limiet moeten instellen. Alle data is in HEX formaat.',
      HELP_10_Desc_8: 'Selecteer je wallet bestand -of- je prive sleutel en ontsleutel je wallet.',
      HELP_10_Desc_9: 'Druk op de "GENEREREER ONDERTEKENDE TRANSACTIE" knop.',
      HELP_10_Desc_10: 'Het data veld eronder zal worden ingevuld met je ondertekende transactie. Kopier dit veld en neem het mee terug naar je online computer. ',
      HELP_10_Desc_11: 'Plak de ondertekende transactie op je online computer in het tekst veld van stap #3 em klik "Verzend Ether". Dit zal je transactie publiceren op de blockchain (broadcasten).',

      HELP_11_Title: '11) Hoe verstuur ik naar een contract?',
      HELP_11_Desc_1: 'Versturen naar een contract vereist vaak dat je data, extra gas, of beide dient toe te voegen.',
      HELP_11_Desc_2: 'Navigeer naar de "Verzend Ether" pagina. ',
      HELP_11_Desc_3: 'Selecteer je wallet bestand -of- je prive sleutel en  ontsleutel je wallet. ',
      HELP_11_Desc_4: 'Voer een "Aan Adres" en een "Te Verzenden Bedrag" in.',
      HELP_11_Desc_5: 'Klik op de "+Geavanceerd: Voeg meer Gas of Data toe" knop onder het bedrag veld. Er verschijnen nu twee extra velden die je kunt gebruiken om de hoeveelheid gas te verhoren bovenop de standaard 21000, of om extra data aan je transactie toe te voegen.',

      HELP_12_Title: '12) Hoe importeer ik een MyEtherWallet  wallet in geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Door gebruik te maken van een Geth/Mist JSON bestand van MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Ga naar de "Bekijk Wallet Info" pagina.',
      HELP_12_Desc_3: 'Ontsleutel je wallet met je **versleutelde** prive sleutel of JSON bestand. ',
      HELP_12_Desc_4: 'Ga naar de "Mijn Wallets" pagina.',
      HELP_12_Desc_5: 'Selecteer het wallet dat je wilt importeren in Mist, klik op het "Bekijken" icoon, voer je wachtwoord in, en verkrijg toegang tot je wallet. ',
      HELP_12_Desc_6: 'Zoek naar de "Download JSON bestand - Geth/Mist Formaat (encrypted)" sectie. Druk op de "Download" knop eronder. Je hebt nu je keystore bestand.',
      HELP_12_Desc_7: 'Open de Ethereum Wallet applicatie. ',
      HELP_12_Desc_8: 'In de menu balk, ga naar "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'Hiermee open je de keystore map. Kopier het bestand wat je zojuist hebt gedownload (`UTC--2016-04-14......../`) naar deze keystore map.',
      HELP_12_Desc_10: 'Je account zou nu direct moeten verschijnen onder "Accounts."',
      HELP_12_Desc_11: 'Door gebruik te maken van je onversleutelde prive sleutel...',
      HELP_12_Desc_12: 'Indien je nog geen unversleutelde (unencrypted) prive sleutel van je wallet hebt, navigeer je naar de "Bekijk Wallet Info" pagina.',
      HELP_12_Desc_13: 'Selecteer je wallet bestand -of- voer je prive sleutel in om je wallet te ontsleutelen.',
      HELP_12_Desc_14: 'Kopier je prive sleutel (onversleuteld/unencrypted).',
      HELP_12_Desc_15: 'Als je op een Mac werkt:',
      HELP_12_Desc_15b: 'Als je op een PC werkt:',
      HELP_12_Desc_16: 'Open Tekst Editor en plak deze prive sleutel.',
      HELP_12_Desc_17: 'Ga naar de menu balk en klik "Formaat" -> "Maak Platte Tekst".',
      HELP_12_Desc_18: 'Sla dit bestand op op je bureaublad als `niets_bijzonders_verwijder_mij.txt`. Controleer dat de opties "UTF-8" en "If no extension is provided use .txt" gekozen zijn in het dialog.',
      HELP_12_Desc_19: 'Open terminal en voer het volgende commando uit: `geth account import ~/Desktop/niets_bijzonders_verwijder_mij.txt`',
      HELP_12_Desc_20: 'Je zal gevraagd worden om een nieuw wachtwoord. Dit is het wachtwoord wat je zult gebruiken in geth / Ethereum Wallet / Mist elke keer als je een transactie verzend, dus zorg dat je dit niet vergeet. ',
      HELP_12_Desc_21: 'Verwijder het bestand `niets_bijzonders_verwijder_mij.txt` na een geslaagde import.',
      HELP_12_Desc_22: 'De volgende keer dat je de Ethereum Wallet applicatie opent, zal je account worden vermeld onder "Accounts".',
      HELP_12_Desc_23: 'Open Kladblok (Notepad) & plak de prive seutel',
      HELP_12_Desc_24: 'Sla het bestand op als `niets_bijzonders_verwijder_mij.txt` in `C:`',
      HELP_12_Desc_25: 'Open de command prompt en voer het volgende commando uit: `geth account import C:\\niets_bijzonders_verwijder_mij.txt`',
      HELP_12_Desc_26: 'Je zal gevraagd worden om een nieuw wachtwoord. Dit is het wachtwoord wat je zult gebruiken in geth / Ethereum Wallet / Mist elke keer als je een transactie verzend, dus zorg dat je dit niet vergeet. ',
      HELP_12_Desc_27: 'Verwijder het bestand `niets_bijzonders_verwijder_mij.txt` na een geslaagde import.',
      HELP_12_Desc_28: 'De volgende keer dat je de Ethereum Wallet applicatie opent, zal je account worden vermeld onder "Accounts". ',

      HELP_13_Title: '13) Wat betekend "Gas Limit Too Low"?',
      HELP_13_Desc_1: 'Meestal betekend dit dat je probeerd om Ether naar een contract te verzenden. Naar een contract verzenden vereist iets meer data en dus ook iets meer gas. Op de "Verzend Ether" pagina kun je klikken op de "+Geavanceerd: Voeg meer Gas of Data toe" knop onder het bedrag veld. Hiermee verschijnen er twee extra velden die je kunt gebruiken om de hoeveelheid gas te verhogen boven de standaard 21000, of om data aan je transactie toe te voegen.',

      HELP_14_Title: '14) Sommige sites zorgen voor een willekeurigheid (seed) bij het genereren van de prive sleutel via muis bewegingen. MyEtherWallet.com doet dit niet. Is de wikkeleurigheid (random number generation) van MyEtherWallet wel veilig?',
      HELP_14_Desc_1: 'Hoewel het bewegen van de muis een slimme truck is en we begrijpen waarom mensen dit een goed idee vinden, is de werkelijkheid dat "window.crypto" een grotere willekeurigheid (hogere entropie) zeker stelt dan je muisbewegingen. De muisbewegingen zijn niet onveilig, echter wij (en enorm veel andere crypto experimenten) geloven in "window.crypto". Bovendien kan MyEtherWallet.com gebruikt worden op touchscreen apparaten. Hier vind je een [conversatie tussen een boze redditor en Vitalik Buterin over de muisbewegingen v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Hoe komt het dat het wallet wat ik zojuist heb aangemaakt niet in de blockchain explorer terug te vinden is? (bijvoorbeeld: etherchain, etherscan)',
      HELP_15_Desc_1: 'Adresen zullen enkel in een blockchain explorer worden weergegeven zodra er activiteit op een account heeft plaats gevonden. Bijvoorbeeld, zodra je er wat Ether naar toe verzonden hebt.',

      HELP_16_Title: '16) Hoe check ik het saldo van mijn account? ',
      HELP_16_Desc_1: 'Je kunt hiervoor een blockchain explorer gebruiken zoals bijvoorbeeld [etherscan.io](http://etherscan.io/). Plak daar je adres in de zoekbalk en je adres en transactie geschiedenis zullen worden getoond. Bekijk bijvoobeeld hoe ons [donatie account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8)  eruit ziet op etherscan.io',

      HELP_17_Title: '17) Waarom wordt mijn saldo niet weergegeven nadat ik mijn wallet heb ontsleuteld? ',
      HELP_17_Desc_1: ' Dit wordt zeer waarschijnlijk veroorzaakt door het feit dat je achter een firwall zit. De API waarvan we gebruik maken om je saldo op te halen en te converteren wordt vaak geblokkeerd door firewalls om wat voor reden dan ook. Het is nog steeds mogelijk om transacties te verzenden, je hebt enkel een andere methode nodig om je saldo the checken, zoals bijvoorbeeld etherscan.io',

      HELP_18_Title: '18) Waar is mijn Geth wallet bestand?',

      HELP_19_Title: '19) Waar is mijn Mist wallet bestand? ',
      HELP_19_Desc_1: 'Mist bestanden zijn normaliter te vinden op de bovenstaande bestandslocaties, maar het volgende is veel makkelijker: open Mist, selecteer "Accounts" in de top balk, selecteer "Backup", en selecteer "Accounts". Hiermee open je de map waar je bestanden worden bewaard.',

      HELP_20_Title: '20) Waar is mijn pre-sale wallet bestand?',
      HELP_20_Desc_1: 'Waat jij het opgeslagen hebt. ;) Het was ook naar je gemailed, dus kijk ook daar. Zoek naar het bestand genaamd "ethereum_wallet_backup.json" en selecteer dit bestand. Dit wallet bestand zal versleuteld (encrypted) zijn met een wachtwoord dat je aangemaakt hebt tijdens de aankoop van de pre-sale.',

      HELP_21_Title: '21) Kan iedereen niet simpelweg willekeurige prive sleutels invoeren, zoekend naar een saldo, en dit naar hun eigen adres versturen? ',
      HELP_21_Desc_1: 'De korte versie: ja, echter het vinden van een account met saldo gaat je langer duren dan het universum...dus...nee.',
      HELP_21_Desc_2: 'De lange ELI5 versie: Ethereum is gebasserd op [Publieke Sleutel Cryptografie](https://en.wikipedia.org/wiki/Public-key_cryptography), en meer specifiek op [Elliptische curve cryptografie](https://eprint.iacr.org/2013/734.pdf) wat op grote schaal gebruikt wordt, niet alleen in Ethereum. De meeste van onze servers zijn beveiligd via ECC. Bitcoin maakt hier ook gebruik van, net als SSH, TLS en vele andere dingen. De specifieke Ethereum sleutels zijn 256-bit sleutels, welke sterker zijn dan 128-bit en 192-bit, terwijl die ook op grote schaal gebruikt worden en no steeds als veilig worden beschouwd door experts.',
      HELP_21_Desc_3: 'Hierbij heb je een prive sleutel en een publieke sleutel. Vanuit de prive sleutel kan de publieke sleutel afgeleid worden, maar de publieke sleutel kan niet terug omgezet worden in de prive sleutel. Het feit dat het internet en ’s werelds geheimen gebruik maken van deze cryptografie betekend dat indien er een manier is om van publieke sleutel naar prive sleutel te gaan, dat jouw verloren ether wel het minste van een ieders probleem is.',
      HELP_21_Desc_4: 'Nu we dat duidelijk hebben: JA, als iemand anders je prive sleutel heeft kunnen ze inderdaad ether vanuit jouw account versturen. Net zoals dat iemand die je wachtwoord van je email heeft, je email kan lezen en sturen, of met het wachtwoord van je bank rekening geld kunnen overmaken. Je zou de Keystore versie van je prive sleutel kunnen downloaden, dat is je prive sleutel die is versleuteld (encrypted) met een wachtwoord. Dit is alsof je een wachtwoord hebt want je vervolgens nog eens beveiligd met een ander wachtwoord.',
      HELP_21_Desc_5: 'En JA, in theorie zou je een serie van 64 hexadecimale karakters kunnen intypen tot je er een hebt die matched. Sterker nog, een slim persoon zou een programma kunnen schrijven om heel snel willekeurige prive sleutels te controleren. Dit wordt ook wel "brute-forcing" van prive sleutels genoemd. Mensen hebben hier lang en goed over nagedacht. Met enkele krachtige servers zouden ze misschien wel zo’n miljoen sleutels per seconde kunnen controleren. Echter, zelfs wanneer er zoveel sleutels per seconde gecontroleed kunnen worden zou de opbrengst ervan niet eens in de buurt komen bij de kosten om de servers te onderhouden - het is waarschijnlijker dat jij, en je achterkleinkinderen, zijn overleden voordat je een match vind.',
      HELP_21_Desc_6: 'Als je Bitcoin een beetje kent, [biedt dit een aardig perspectief:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[Als je het iets technischer wilt:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Uiteraard gaat bovenstaande er vanuit dat de sleutels worden gegenereerd met een volledige willekeur & met afdoende entropie. De sleutels die hier gegenreerd worden voldoen aan dat criterium, net als Jaxx en Mist/geth. De Ethereum wallets zijn allemaal best goed. Sleutels gegenereerd door "brainwallets" doen dit niet, omdat een het brein van een persoon niet capabel is om een werkelijk willekeurige "seed" te maken. Er zijn een heel aantal kwesties geweest met betrekking tot het gebrek entropie en "seeds" die niet in een volledig willekeurige manier waren gemaakt in Bitcoin-land, maar dat is een ander verhaal en kan wachten tot een andere keer.',

      HELP_SecCX_Title: 'Beveiliging - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Waar bewaard deze extentie mijn informatie?',
      HELP_SecCX_Desc_2: 'De informatie die je bewaard in deze Chrome Extensie wordt opgeslagen via [chrome.storage](http://chrome.storage/). - dit is dezelfde plek als waar je wachtwoorden staan opgeslagen als je je wachtwoorden bewaard in Chrome.',
      HELP_SecCX_Desc_3: 'Welke informatie wordt bewaard? ',
      HELP_SecCX_Desc_4: 'Het adres, nickname en prive sleutel worden bewaard in chrome.storage. De prive sleutel is versleuteld (encrypted) met het wachtwoord wat je hebt ingesteld toen je je wallet hebt toegevoegd. De nickname en het wallet adres zijn niet versleuteld.',
      HELP_SecCX_Desc_5: 'Waarom zijn de nickname en adres niet versleuteld? ',
      HELP_SecCX_Desc_6: 'Als we deze items zouden versleutelen, zou je iedere keer dat je je saldo of nicknames wilt checken je wachtwoord moeten invoeren. Als je je hierover zorgen maakt, raden we je aan om gebruik te maken van MyEtherWallet.com in plaats van deze Chrome Extensie.',

      HELP_Sec_Title: 'Beveiliging',
      HELP_Sec_Desc_1: 'Als een van je eerste vragen is: "Waarom zou ik deze mensen moeten vertrouwen?", dan is dat alleen maar goed. Hopelijk zal het volgende je angst verminderen. ',
      HELP_Sec_Desc_2: 'We zijn up en running sinds augustus 2015. Als je zoekt naar ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), zul je tal van mensen vinden die ons met groot succes gebruiken.',
      HELP_Sec_Desc_3: 'We gaan je niet je geld afnemen of je prive sleutel(s) stelen. Onze website bevat geen kwaadaardige code. Sterker nog, de "GENEREER WALLET" paginas zijn volledig client-side. Dit betekend dat alle code wordt uitgevoerd op ** jouw computer** en dat het buiten jouw computer niets bewaard of verstuurd.',
      HELP_Sec_Desc_4: 'Controleer de URL -- Deze website draait vanaf GitHub en je kunt de bron code hier vinden: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) naar de domein namen: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) en [https://www.myetherwallet.com](https://www.myetherwallet.com). Je kunt verifieren dat het vanaf GitHub draait door gebruikt te maken van [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - de laatste twee A record IPs zijn in eigendom van GitHub voor hun custom domein hosting.',
      HELP_Sec_Desc_5: 'Om wallets te genereren, kun je ook de [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages) downloaden. Zie #5 hierboven.',
      HELP_Sec_Desc_6: 'Doe een test ronde en controleer wat voor netwerk activiteit er plaats vind. De makkelijkste manier om dit te doen is door met de rechtermuisknop op de pagina de klikken en te kiezen voor "inspecteer element". Ga naar het "Netwerk" tab. Genereer een test wallet. Je zult zien dat er geen netwerk activiteit is. Je zou kunnen zien dat er iets gebeurd wat er als volgt uitziet: data:image/gif and data:image/png. Dit zijn de QR codes die worden gegenereerd...op jouw computer...door jouw computer. Er werden geen bytes overgedragen.',
      HELP_Sec_Desc_7: 'Ga vervolgens, voor de zekerheid, naar de "Resources" pagina. Hier vind je alle verschillende elementen waaruit de website is opgebouwd. Als je door de items Local Storage, Cookies en Cache klikt zul je zien dat er niets wordt opgeslagen. Er wordt niets opgeslagen. Ververs de pagina en je bent terug waar je begon.',
      HELP_Sec_Desc_8: 'Als je je niet pettig voelt bij het gebruikt van deze tool, gebruik hem dan vooral niet. We hebben deze tool voor mensen gemaakt als een handige manier om wallets te genereren en transacties te maken zonder dat je in de command prompt hoeft te duiken of een "full node" moet draaien. Nogmaals, voel je vrij om contact met ons op te nemen als je je zorgen maakt en we zullen zo snel mogelijk reageren. Bedankt! ',

      HELP_FAQ_Title: 'Meer hulpzame antwoorden op veel voorkomende vragen:',
      HELP_Contact_Title: 'Manieren om in contact te komen:'
    };

    module.exports = nl;
  }, {}], 45: [function (require, module, exports) {
    // Norwegian
    'use strict';

    var no = function () {};
    no.code = 'no';
    no.data = {

      /* Navigation*/
      NAV_YourWallets: 'Dine lommebøker',
      NAV_AddWallet: 'Legg til lommebok',
      NAV_GenerateWallet: 'Opprett lommebok',
      NAV_BulkGenerate: 'Opprett flere lommebøker',
      NAV_SendEther: 'Send Ether',
      NAV_SendTokens: 'Send Token',
      NAV_Offline: 'Send Offline',
      NAV_WithdrawDAO: 'Ta ut DAO',
      DAO_TitleLong: 'Løs inn dine DAO-token for ether (ETH)',
      NAV_ClaimDGD: 'Gjør krav på DGD',
      DGD_TitleLong: 'Gjør krav på dine DGD-token',
      NAV_DeployContract: 'Utplasser kontrakt',
      NAV_MyWallets: 'Mine lommebøker',
      NAV_ViewWallet: 'Vis lommebok-info',
      NAV_Help: 'Hjelp',
      NAV_Contact: 'Kontakt',

      /* General */
      x_Address: 'Din adresse',
      x_AddessDesc: 'Du kjenner kanskje dette som ditt "kontonummer" eller din "offentlige nøkkel". Dette er informasjonen som du sender til folk så de kan sende deg ether (en lang rekke tilfeldige tall og bokstaver som starter med "0x"). Ikonet er en enkel måte å kjenne igjen adressen din på.',
      x_Cancel: 'x_Cancel',
      x_CSV: 'CSV-fil (ukryptert)',
      x_Download: 'Last ned',
      x_Json: 'JSON-fil (ukryptert)',
      x_JsonDesc: 'Dette er det ukrypterte JSON-formatet av din private nøkkel. Dette betyr at du ikke trenger noe passord, men også at den som finner din JSON kan få tilgang til lommeboken din og etherne dine uten passord.',
      x_Keystore2: 'Keystore/JSON-fil',
      x_Keystore: 'Keystore/JSON-fil (Anbefalt · Kryptert · Mist/Geth-format)',
      x_KeystoreDesc: 'Denne Keystore/JSON-filen samsvarer med formatet som brukes av Mist & Geth, så du enkelt kan importere den i fremtiden. Det er den anbefalte filen å laste ned og sikkerhetskopiere.',
      x_Password: 'Passord',
      x_Print: 'Skriv ut papirlommebok',
      x_PrintDesc: 'Profftips: Klikk "skriv ut" og lagre som PDF, selv om du ikke har noen skriver!',
      x_PrintShort: 'Skriv ut',
      x_PrivKey2: 'Privat nøkkel',
      x_PrivKey: 'Privat nøkkel (ukryptert)',
      x_PrivKeyDesc: 'Dette er den ukrypterte tekstversjonen av den private nøkkelen din, noe som betyr at det ikke er nødvendig med noe passord. Hvis noen skulle få tak i den ukrypterte private nøkkelen din, ville de få tilgang til lommeboken din uten å bruke passord. Derfor er krypterte nøkler vanligvis å anbefale.',
      x_Save: 'x_Save',
      x_TXT: 'TXT-fil (ukryptert)',
      x_Wallet: 'Lommebok',

      /* Header */
      MEW_Warning_1: 'Sjekk alltid nettsideadressen før du bruker eller oppretter en lommebok. Pass opp for "phishing"-nettsider!',
      CX_Warning_1: 'Sørg for at du har **eksterne sikkerhetskopier** av alle lommebøker som du lagrer her. Mye kan hende som vil kunne medføre at du mister informasjonen i denne Chrome-utvidelsen, inkludert avinstallasjon og reinstallasjon av utvidelsen. Denne utvidelsen gir deg enkel tilgang til lommebøkene dine, men er **ikke** en måte å sikkerhetskopiere dem på.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet', /* Intentionally not translated */
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extension', /* Intentionally not translated */

      /* Footer */
      FOOTER_1: 'Et åpen-kildekode-, javascript-, klient-side-verktøy for å opprette Ethereum-lommebøker & sende transaksjoner.',
      FOOTER_1b: 'Skapt av',
      FOOTER_2: 'Donasjoner mottas med takk:',
      FOOTER_3: 'Klient-side lommebok-oppretting av',
      FOOTER_4: 'Ansvarsfraskrivelse',

      /* Sidebar */
      sidebar_AccountInfo: 'Kontoinformasjon: ',
      sidebar_AccountAddr: 'Kontoadresse: ',
      sidebar_AccountBal: 'Saldo på konto: ',
      sidebar_TokenBal: 'Token-saldo: ',
      sidebar_Equiv: 'Tilsvarende verdier: ',
      sidebar_TransHistory: 'Transaksjonshistorikk: ',
      sidebar_DGDBal: 'DGD Crowdsale informasjon:',
      sidebar_donation: 'MyEtherWallet er en gratis åpen-kildekode-service som er dedikert til å ivareta ditt personvern og din sikkerhet. Jo flere donasjoner vi får, jo mer tid kan vi bruke til å lage nye funksjoner, lytte til tilbakemeldinger, og gi deg det du ønsker. Vi er bare to personer som prøver å forandre verden. Vil du hjelpe oss?',
      sidebar_donate: 'Doner',
      sidebar_thanks: 'TAKK!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Hvordan ønsker du å få tilgang til lommeboken din?',
      decrypt_Title: 'Velg formatet på din private nøkkel:',
      decrypt_Select: 'Velg en lommebok:',

      /* Add Wallet */
      ADD_Label_1: 'Hva ønsker du å gjøre?',
      ADD_Radio_1: 'Opprett ny lommebok',
      ADD_Radio_2: 'Velg lommebok-filen din (Keystore / JSON)',
      ADD_Radio_2_alt: 'Velg lommebok-fil: ',
      ADD_Radio_2_short: 'VELG LOMMEBOK-FIL...',
      ADD_Radio_3: 'Lim/skriv inn din private nøkkel',
      ADD_Radio_4: 'Legg til en konto for overvåkning',
      ADD_Label_2: 'Lag et kallenavn:',
      ADD_Label_3: 'Filen din er kryptert. Vennligst oppgi passordet: ',
      ADD_Label_4: 'Legg til en konto for overvåkning',
      ADD_Warning_1: 'Du kan legge til hvilken som helst konto som du vil overvåke på lommebok-siden uten å laste opp en privat nøkkel. Dette betyr ** ikke ** at du har tilgang til denne lommeboken, eller at du kan overføre ether fra den.',
      ADD_Label_5: 'Oppgi adressen: ',
      ADD_Label_6: 'Lås opp lommeboen din',
      ADD_Label_6_short: 'Lås opp',
      ADD_Label_7: 'Legg til konto',

      /* Generate Wallets */
      GEN_desc: 'Hvis du vil opprette flere lommebøker, kan du gjøre det her: ',
      GEN_Label_1: 'Oppgi et sterkt passord (minst 9 tegn)',
      GEN_Placeholder_1: 'Glem IKKE å ta vare på dette!',
      GEN_SuccessMsg: 'Suksess! Lommeboken din har blitt opprettet.',
      GEN_Warning: '**Du trenger din Keystore/JSON-fil & passord eller din private nøkkel** for å få tilgang til denne lommeboken i framtiden. Vennligst lagre og sikkerhetskopier den eksternt! Det finnes ingen måte å gjenopprette en lommebok på hvis du ikke lagrer den. Les [hjelpesiden](https://www.myetherwallet.com/#help) for ytterligere instruksjoner (foreløpig kun på engelsk).',
      GEN_Label_2: 'Lagre din Keystore/JSON og/eller private nøkkel. Ikke glem passordet ditt ovenfor.',
      GEN_Label_3: 'Lagre adressen din.',
      GEN_Label_4: 'Skriv ut din papir-lommebok, eller lagre en QR-kode-versjon. (valgfritt)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Antall lommebøker som skal opprettes',
      BULK_Label_2: 'Opprett lommebøker',
      BULK_SuccessMsg: 'Suksess! Lommebøkene dine har blitt opprettet.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Til-adresse: ',
      SEND_amount: 'Beløp som skal sendes: ',
      SEND_amount_short: 'Beløp',
      SEND_custom: 'Tilpasning',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Overfør total tilgjengelig saldo', // updated to read 'Send Entire Balance'
      SEND_generate: 'Generer transaksjon',
      SEND_raw: 'Rå-transaksjon',
      SEND_signed: 'Signert transaksjon',
      SEND_trans: 'Send transaksjon',
      SENDModal_Title: 'Advarsel! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Du er i ferd med å sende',
      SENDModal_Content_2: 'til adressen',
      SENDModal_Content_3: 'Er du sikker på at du ønsker å gjøre dette?',
      SENDModal_Content_4: 'NB: Hvis det oppstår en feil, må du sannsynligvis legge til ether til kontoen din for å dekke "gas"-kostnaden for å sende ether/token. "Gas" betales i ether.',
      SENDModal_No: 'Nei, få meg ut herfra!',
      SENDModal_Yes: 'Ja, jeg er sikker! Gjennomfør transaksjonen.',

      /* Tokens */
      TOKEN_Addr: 'Adresse: ',
      TOKEN_Symbol: 'Token-symbol: ',
      TOKEN_Dec: 'Desimaler: ',

      /* Send Transaction */
      TRANS_desc: 'Hvis du ønsker å sende token, vennligst bruk "Send Token"-siden i stedet.',
      TRANS_warning: 'Hvis du bruker "Kun ETH"- eller "Kun ETC"-funksjonene, sender du via en kontrakt. Noen tjenester har problemer med å akseptere disse transaksjonene. Les mer.',
      TRANS_standard: 'ETH (Standard transaksjon)',
      TRANS_eth: 'Kun ETH',
      TRANS_etc: 'Kun ETC',
      TRANS_advanced: '+Avansert: Legg til data ',
      TRANS_data: ' Data: ',
      TRANS_gas: ' Gas: ',
      TRANS_sendInfo: 'En standard transaksjon som bruker 21000 gas vil koste 0,000441 ETH. Vi bruker en litt-over-minimum gas-pris på 0,000000021 ETH for å sikre at transaksjonen blir raskt behandlet. Vi tar ikke noe transaksjonsgebyr.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Kun ETH"- og "Kun ETC"-transaksjoner',
      TRANSModal_Content_0: 'En notis om forskjellige transaksjoner og tjenester:',
      TRANSModal_Content_1: '**ETH (Standardtransaksjon): ** Dette Oppretter en standardtransaksjon direkte fra en adresse ti en annen. Den har standard gas på 21000. Det er sannsynlig at ETH som sendes med denne metoden også vil bli sendt som ETC på ETC-kjeden (hvis kontoen inneholder både ETH og ETC). Dette er anbefalt metode hvis kontoen kun inneholder ETH.',
      TRANSModal_Content_2: '**Kun ETH: ** Dette sender via [Timon Rapp\'s replay-beskyttelseskontrakt (som anbefalt av VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) slik at du kun sender på **ETH**-kjeden. ',
      TRANSModal_Content_3: '**Kun ETC: ** Dette sender via [Timon Rapp\'s replay-beskyttelseskontrakt (som anbefalt av VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) slik at du kun sender på **ETC**-kjeden. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Send kun via Standard transaksjon. Hvis du sender via "Kun"-kontraktene, vil du måtte ta kontakt med deres kundestøttepersonell for å manuelt legge til saldoen din eller få en tilbakebetaling. [Du kan også prøve Shapeshift sitt "splitte"-verktøy.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Ingen kjente problemer. Bruk det som passer.',
      TRANSModal_Yes: 'Flott, jeg skjønner det nå.',
      TRANSModal_No: 'Trøste og bære, nå er jeg bare enda mer forvirret. Hjelp meg.',

      /* Offline Transaction */
      OFFLINE_Title: 'Generer & send offline transaksjon',
      OFFLINE_Desc: 'Generering av offline-transaksjoner kan utføres i tre steg. Du utfører steg 1 og 3 på en internettilknyttet datamaskin, og steg 2 på en offline/frakoblet datamaskon. Dette sikrer at dine private nøkler ikke kommer i kontakt med en internettilknyttet enhet.',
      OFFLLINE_Step1_Title: 'Steg 1: Generer informasjon (internettilknyttet datamaskin)',
      OFFLINE_Step1_Button: 'Generer informasjon',
      OFFLINE_Step1_Label_1: 'Fra-adresse: ',
      OFFLINE_Step1_Label_2: 'NB: Dette er FRA-adressen, ikke TIL-adressen. "Nonce" genereres fra den opprinnelige kontoen. Hvis du bruker en frakoblet datamaskin, vil dette være adressen til "kald-lager"-kontoen (dvs. kontoen som lagres frakoblet internett).',
      OFFLINE_Step2_Title: 'Steg 2: Generer transaksjon (frakoblet datamaskin)',
      OFFLINE_Step2_Label_1: 'Til-adresse: ',
      OFFLINE_Step2_Label_2: 'Verdi / Beløp å sende',
      OFFLINE_Step2_Label_3: 'Gas-pris ',
      OFFLINE_Step2_Label_3b: 'Dette kom fram i steg 1 på den internettilknyttede maskinen.',
      OFFLINE_Step2_Label_4: 'Gas-grense ',
      OFFLINE_Step2_Label_4b: '21000 er standard gas-grense. Når du sender kontrakter eller ekstra data, kan det hende at grensen må settes høyere. Eventuelt ubrukt gas blir returnert til deg.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Dette kom fram i steg 1 på den internettilknyttede maskinen.',
      OFFLINE_Step2_Label_6: 'Data',
      OFFLINE_Step2_Label_6b: 'Dette er valgfritt. Data brukes ofte når du sender transaksjoner til kontrakter.',
      OFFLINE_Step2_Label_7: 'Skriv inn / Velg din private nøkkel / JSON.',
      OFFLINE_Step3_Title: 'Steg 3: Send / Publiser transaksjon (internettilknyttet datamaskin)',
      OFFLINE_Step3_Label_1: 'Overfør (f.eks. via USB-minnepinne) den signerte transaksjonen fra steg 2 og lim den inn her. Trykk så "SEND TRANSAKSJON"-knappen.',

      /* DAO */
      DAO_bal1: 'ved blokk 1,919,999',
      DAO_bal2: 'nåværende',
      DAO_TitleETH: 'Veksle inn DAO mot ETH',
      DAO_TitleETC: 'Veksle inn DAO mot ETC',
      DAO_ETC_Label_1: 'Hvilken adresse ønsker du å sende dine ETC til?',
      DAO_ETC_Label_2: '"White Hat Group" har jobbet utrettelig for å gi deg tilbake dine ETC. Du kan takke dem ved å donere en prosentandel av uttaket ditt, hvis du ønsker det. ',
      DAO_Desc: 'Bruk denne siden til å veksle inn dine DAO-token for ETH. Hvis du ønsker å sende DAO-token, vennligst bruk "Send Token"-siden.',
      DAO_Inst: 'Ja. Bare trykk på den store røde knappen. Det er så enkelt som det.',
      DAO_Warning: 'Hvis du får en "Insufficient balance for gas"-feilmelding, må du ha en liten mengde ether på kontoen for å dekke gas-kostnadene. Overfør 0,001 ether til denne kontoen og prøv igjen. ',
      DAOModal_Title: 'Bare for å være sikker...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Du er i ferd med å veksle inn ',
      DAOModal_2: 'DAO-tokens til ',
      DAOModal_3: 'i bytte mot',

      /* Digix */
      DGD_Desc: 'Krev inn dine DigixDAO (DGD)-tokens & badges. For å gjøre dette, må du ha deltatt i token-salget 30-31. mars 2016.  Hvis du ønsker å sende DGD, vennligst bruk "Send Token"-siden.',
      DGD_Label_1: 'Estimert avgiftsforbruk:',
      DGD_Label_2: 'Oppgitt maksimal avgift:',
      DGD_Label_3: 'Gas-pris:',
      DGD_Generate: 'Opprett krav',
      DGD_Content: 'Du er i ferd med å kreve inn dine DGD-token.',

      /* Deploy Contracts */
      DEP_generate: 'Generer Bytecode',
      DEP_generated: 'Generert Bytecode',
      DEP_signtx: 'Signer transaksjon',
      DEP_interface: 'Generer grensesnitt',

      /* My Wallet */
      MYWAL_Nick: 'Lommebok-kallenavn',
      MYWAL_Address: 'Lommebok-adresse',
      MYWAL_Bal: 'Saldo',
      MYWAL_Edit: 'Rediger',
      MYWAL_View: 'Se på',
      MYWAL_Remove: 'Fjern',
      MYWAL_RemoveWal: 'Fjern lommebok:',
      MYWAL_WatchOnly: 'Dine "bare-se"-kontoer',
      MYWAL_Viewing: 'Viser lommebok: ',
      MYWAL_Hide: 'Skjul lommebok-info',
      MYWAL_Edit_2: 'Rediger lommebok: ',
      MYWAL_Name: 'Lommeboknavn',
      MYWAL_Content_1: 'Advarsel! Du er i ferd med å fjerne lommeboken din: ',
      MYWAL_Content_2: 'Vær sikker på at du har **lagret den private nøkkelen/JSON-filen og passordet** tilknyttet denne lommeboken før du fjerner den.',
      MYWAL_Content_3: 'Hvis du ønsker å bruke denne lommeboken med din MyEtherWallet Chrome-utvidelse i fremtiden, må du manuelt legge den til igjen ved å bruke den private nøkkelen/JSON og passord.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Dette gir deg muligheten til å laste ned ulike versjoner av private nøkler og skrive ut papirlommeboken din på nytt. Du vil kanskje gjøre dette for å [importere kontoen din til Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Hvis du bare ønsker å sjekke saldoen din, anbefaler vi at du bruker en "blockchain explorer" som f.eks. [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Dette gir deg muligheten til å laste ned ulike versjoner av private nøkler og skrive ut papirlommeboken din på nytt. ',
      VIEWWALLET_SuccessMsg: 'Suksess! Her er detaljene om din lommebok.',

      /* Chrome Extension */
      CX_error_1: 'Du har ennå ikke lagret noen lommebok. Klikk ["Legg til lommebok"](/cx-wallet.html#add-wallet) for å legge til en!',
      CX_quicksend: 'Send', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Vennligst oppgi et gyldig beløp.',
      ERROR_2: 'Passordet ditt må inneholde minst 9 tegn. Vennligst sørg for at det er et sterkt passord. ',
      ERROR_3: 'Beklager! Vi kjenner ikke igjen denne typen lommebok-fil. ',
      ERROR_4: 'Dette er ikke en gyldig lommebok-fil. ',
      ERROR_5: 'Denne enheten eksisterer ikke, vennligst benytt en av de følgende enhetene ',
      ERROR_6: 'Ugyldig adresse. ',
      ERROR_7: 'Ugyldig passord. ',
      ERROR_8: 'Ugyldig beløp. ',
      ERROR_9: 'Ugyldig gas-grense. ',
      ERROR_10: 'Ugyldig dataverdi. ',
      ERROR_11: 'Ugyldig gas-mengde. ',
      ERROR_12: 'Ugyldig nonce. ',
      ERROR_13: 'Ugyldig signert transaksjon. ',
      ERROR_14: 'En lommebok med dette kallenavnet eksisterer allerede. ',
      ERROR_15: 'Lommebok ikke funnet. ',
      ERROR_16: 'Det ser ikke ut til at et forslag med denne ID-en eksisterer ennå, eller det er en feil ved innlesning av dette forslaget. ',
      ERROR_17: 'En lommebok med denne adressen er allerede lagret. Vennligst sjekk lommebok-siden din. ',
      ERROR_18: 'Du trenger minst 0,001 ether på kontoen din for å dekke gas-kostnaden. Vennligst legg til litt ether og prøv igjen. ',
      ERROR_19: 'All gas vil bli brukt på denne transaksjonen. Dette betyr at du allerede har stemt på dette forslaget, eller at debatt-perioden er over.',
      ERROR_20: 'Ugyldig symbol',
      SUCCESS_1: 'Gyldig adresse',
      SUCCESS_2: 'Dekrypteringen av lommeboken var vellykket',
      SUCCESS_3: 'Transaksjonen ble sendt inn. TX ID: ',
      SUCCESS_4: 'Lommeboken din ble lagt til: ',
      SUCCESS_5: 'Du har stemt. Takk for at du er en aktiv deltaker i "The DAO".',
      SUCCESS_6: 'Valgt fil: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Feil på avsender',
      GETH_Nonce: 'Nonce for liten',
      GETH_Cheap: 'Gas-pris for lav til å kunne aksepteres',
      GETH_Balance: 'Utilstrekkelig saldo',
      GETH_NonExistentAccount: 'Kontoen eksisterer ikke eller saldoen er for lav',
      GETH_InsufficientFunds: 'Utilstrekkelig med midler for gas * pris + verdi',
      GETH_IntrinsicGas: 'Gas-egenverdi for lav',
      GETH_GasLimit: 'Overskrider blokkens gas-grense',
      GETH_NegativeValue: 'Negativ verdi',

      /* Tranlsation Info */
      translate_version: '0.4',
      Translator_Desc: 'Takk til oversetterne våre: ',
      TranslatorName_1: '[mrstormlars](https://www.myetherwallet.com/?gaslimit=21000&to=0x6Dd9530b2Cb8B2d7d9f7D5D898b6456EC5D94f08&value=1.0#send-transaction)',
      TranslatorAddr_1: '0x6Dd9530b2Cb8B2d7d9f7D5D898b6456EC5D94f08',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Hvis du opprettet en lommebok -eller- lastet ned repoet før **31. desember 2015**, vennligst sjekk lommebøkene dine &amp; last ned en ny versjon av repoet. Klikk for detaljer.',
      HELP_Desc: 'Ser du noe som mangler? Har du flere spørsmål? [Ta kontakt med oss](mailto:myetherwallet@gmail.com), så vil vi ikke bare besvare spørsmålet ditt, men vi vil også oppdatere denne siden så den blir mer nyttig i framtiden!',
      HELP_Remind_Title: 'Noen påminnelser',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, og noen av de underliggende Javascript-bibliotekene vi benytter er under aktiv utvikling.** Selv om vi har testet grundig, og titusenvis av lommebøker har blitt opprettet uten feil av folk over hele kloden, så er det alltid en liten mulighet for at noe uventet kan skje som kan medføre at dine ETH kan tapes. Vennligst ikke invester mer enn du er villig til å tape, and vær så snill å være forsiktig. Hvis noe skulle skje, er vi lei oss for det, men **vi er ikke ansvarlige for eventuelt tapte etere**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX er ikke "web wallets" (internettlommebøker). Du oppretter ikke en konto eller gir oss dine ethere for oppbevaring hos oss. Alle data forblir på din PC / i din nettleser. Vi gjør det enkelt for deg å opprette, lagre og få tilgang til din informasjon og samhogle med blokkjeden.',
      HELP_Remind_Desc_3: 'Hvis du ikke lagrer din private nøkkel & passord, finnes det ingen måte å gjenopprette din lommebok på, eller midlene den inneholder. Sikkerhetskopier dem på flere fysiske lokasjoner &ndash; ikke bare på datamaskinen din!',

      HELP_0_Title: '0) Jeg er nybegynner. Hva skal jeg gjøre?',
      HELP_0_Desc_1: 'MyEtherWallet gir deg muligheten til å opprette nye lommebøker slik at du kan lagre etherne dine selv, i stedet for på en børs (hvor du kan kjøpe ether). Denne prosessen skjer helt og holdent på din datamaskin, ikke på våre servere. Derfor, når du oppretter en ny lommebok, **er du ansvarlig for å sikkerhetskopiere den på en forsvarlig måte**.',
      HELP_0_Desc_2: 'Opprett en ny lommebok.',
      HELP_0_Desc_3: 'Sikkerhetskopier lommebok.',
      HELP_0_Desc_4: 'Verifiser at du har tilgang til denne nye lommeboken (f.eks. ved å overføre et ørlite beløp til og fra den nye lommeboken), og at all nødvendig informasjon er lagret og korrekt.',
      HELP_0_Desc_5: 'Overfør ether til den nye lommeboken.',

      HELP_1_Title: '1) Hvordan oppretter jeg en ny lommebok? ',
      HELP_1_Desc_1: 'Gå til "Opprett lommebok"-siden.',
      HELP_1_Desc_2: 'Gå til "Legg til lommebok"-siden & velg "Opprett ny lommebok"',
      HELP_1_Desc_3: 'Oppgi et sterkt passord. Hvis du ikke tror du klarer å huske det, skriv det opp på et sikkert sted. Du kommer til å trenge dette passordet for å sende transaksjoner.',
      HELP_1_Desc_4: 'Klikk "OPPRETT".',
      HELP_1_Desc_5: 'Din lommebok har nå blitt opprettet.',

      HELP_2a_Title: '2a) Hvordan lagrer/sikkerhetskopierer jeg lommeboken min?',
      HELP_2a_Desc_1: 'Du bør alltid sikkerhetskopiere lommeboken din eksternt og på flere fysiske lokasjoner - som f.eks. på en USB-disk og/eller på et papirark.',
      HELP_2a_Desc_2: 'Lagre adressen. Du kan holde den for deg selv eller dele den med andre. På den måten kan andre overføre ether til deg.',
      HELP_2a_Desc_3: 'Lagre versjoner av den private nøkkelen. Ikke del den med noen andre. Din private nøkkel er nødvendig hvis du vil ha tilgang til (og sende) etheren din! Det er 3 typer private nøkler:',
      HELP_2a_Desc_4: 'Plasser adressen din, versjoner av den private nøkkelen, og PDF-versjonen av papirlommeboken i en folder. Lagre denne på datamaskinen din og en USB-disk.',
      HELP_2a_Desc_5: 'Skriv ut lommeboken hvis du har en skriver. Hvis ikke, skriv ned adressen og den private nøkkelen din på et papirark. Lagre dette på et sikkert sted, separat fra datamaskinen og USB-disken.',
      HELP_2a_Desc_6: 'Husk at du må unngå tap av nøklene og passordet pga. tap av, eller feil på, harddisk, USB-disk eller paperlommebok. Du må også ta i betraktning at det kan oppstå fysisk tap/skade på et helt område (tenk på brann eller flom).',

      HELP_2b_Title: '2b) Hvordan kan jeg lagre ether sikkert / offline / "kaldt" med MyEtherWallet?',
      HELP_2b_Desc_1: 'Gå til vår github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Klikk "download zip" øverst til høyre.',
      HELP_2b_Desc_3: 'Flytt zip-fila til en frakoblet datamaskin.',
      HELP_2b_Desc_4: 'Pakk ut zip-fila (unzip) og dobbeltklikk `index.html`.',
      HELP_2b_Desc_5: 'Opprett en lommebok med et sterkt passord.',
      HELP_2b_Desc_6: 'Lagre adressen. Lagre versjoner av den private nøkkelen. Lagre passordet hvis du ikke tror du klarer å huske det for alltid.',
      HELP_2b_Desc_7: 'Lagre disse papirene / USB-ene på flere fysisk separate steder.',
      HELP_2b_Desc_8: 'Gå til "Vis lommebok-info"-siden og oppgi (lim inn) din private nøkkel / passord for å sikre at de er korrekte og gir deg tilgang til lommeboken din. Sjekk at adressen du skrev ned er den samme.',

      HELP_3_Title: '3) Hvordan verifiserer jeg at jeg har tilgang til den nye lommeboken min?',
      HELP_3_Desc_1: '**Før du sender ether til din nye lommebok**, bør du forsikre deg om at du har tilgang til den.',
      HELP_3_Desc_2: 'Naviger til "Vis lommebok-info"-siden.',
      HELP_3_Desc_3: 'Naviger til MyEtherWallet.com sin "Vis lommebok-info"-side.',
      HELP_3_Desc_4: 'Velg lommebok-filen din, eller din private nøkkel, og lås opp lommeboken din.',
      HELP_3_Desc_5: 'Hvis lommeboken er kryptert, vil det automatisk dukke opp en tekstboks. Oppgi passordet.',
      HELP_3_Desc_6: 'Klikk "Lås opp lommebok"-knappen.',
      HELP_3_Desc_7: 'Informasjon om lommeboken din skal nå dukke opp. Finn konto-adressen din ved siden av et fargerikt, sirkulært ikon. Dette ikonet er en unik, visuell representasjon av din adresse. Vær sikker på at adressen er den samme adressen som du har lagret i tekstdokumentet og papirlommeboken.',
      HELP_3_Desc_8: 'Hvis du planlegger å lagre et stort ether-beløp, anbefaler vi at du sender et lite beløp til- og fra den nye lommeboken før du deponerer et stort beløp. Send 0,001 ether til din nye lommebok, åpne lommeboken, send de 0,001 eterne (-minus gas-kostnad) til en annen adresse, og forikre deg om at alt fungerer som det skal.',

      HELP_4_Title: '4) Hvordan sender jeg ether fra en lommebok til en annen?',
      HELP_4_Desc_1: 'Hvis du planlegger å flytte et stort ether-beløp, bør du testsende et lite beløp først for å forsikre deg om at alt går som planlagt.',
      HELP_4_Desc_2: 'Naviger til "Send ether"-siden.',
      HELP_4_Desc_3: 'Velg lommebok-filen din, eller din private nøkkel, og lås opp lommeboken din.',
      HELP_4_Desc_4: 'Hvis lommeboken er kryptert, vil det automatisk dukke opp en tekstboks hvor du må oppgi passordet ditt.',
      HELP_4_Desc_5: 'Klikk på "Lås opp lommebok"-knappen.',
      HELP_4_Desc_6: 'Oppgi adressen som du ønsker å sende til i "Til adresse:"-feltet.',
      HELP_4_Desc_7: 'Oppgi beløpet som du ønsker å sende. Du kan også klikke på "Send hele saldoen"-lenken hvis du ønsker å overføre hele saldoen.',
      HELP_4_Desc_8: 'NB: Siden slutten av juni 2016, må du passe på å splitte din ETH/ETC før du sender ether som normalt. Se spørsmål #6 nedenfor for mer informasjon.',
      HELP_4_Desc_9: 'Klikk "Generer transaksjon".',
      HELP_4_Desc_10: 'En del felter vil dukke opp. Dette er nettleseren din som genererer transaksjonen.',
      HELP_4_Desc_11: 'Klikk den blå "Send transaksjon"-knappen nedenfor dette.',
      HELP_4_Desc_12: 'En pop-up vil dukke opp. Verifiser at beløp og adresse du sender til er korrekt. Klikk så "Ja, jeg er sikker! Gjennomfør transaksjonen."-knappen.',
      HELP_4_Desc_13: 'Transaksjonen vil bli sendt inn. Transaksjons-ID-en (TX-ID) vil vises. Du kan klikke på TX ID for å se den på blokkjeden. ',

      HELP_4CX_Title: '4) Hvordan sender jeg ether med MyEtherWallet CX (Chrome-utvidelsen)?',
      HELP_4CX_Desc_1: 'Først må du legge til en lommebok. Når du har gjort det, har du 2 muligheter: den kjappe "Send"-funksjonaliteten fra Chrome-utvidelsesikonet eller "Send ether"-siden.',
      HELP_4CX_Desc_2: 'Send:',
      HELP_4CX_Desc_3: 'Klikk Chrome-utvidelsesikonet.',
      HELP_4CX_Desc_4: 'Klikk "Send"-knappen.',
      HELP_4CX_Desc_5: 'Velg lommeboken du ønsker å sende fra.',
      HELP_4CX_Desc_6: 'Oppgi adressen du ønsker å sende til i "Til adresse:"-feltet.',
      HELP_4CX_Desc_7: 'Oppgi beløpet du vil sende. Du kan også klikke på "Send hele saldoen"-lenken hvis du vil overføre hele saldoen.',
      HELP_4CX_Desc_8: 'Klikk "Send transaksjon". ',
      HELP_4CX_Desc_9: 'Verifiser at adressen og beløpet er korrekt.',
      HELP_4CX_Desc_10: 'Oppgi passordet for lommeboken.',
      HELP_4CX_Desc_11: 'Klikk "Send transaksjon."',
      HELP_4CX_Desc_12: 'Bruk "Send ether"-siden: ',

      HELP_5_Title: '5) Hvordan kan jeg bruke MyEtherWallet.com offline/lokalt? ',
      HELP_5_Desc_1: 'Du kan bruke MyEtherWallet.com på datamaskinen din i stedet for fra GitHub-serverne. Du kan opprette en lommebok fullstendig frakoblet fra internett, og sende transaksjoner fra "Send offline"-siden.',
      HELP_5_Desc_2: 'Gå til vår github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Klikk "download zip" øverst til høyre.',
      HELP_5_Desc_4: 'Flytt zip-fila til en frakoblet datamaskin.',
      HELP_5_Desc_5: 'Pakk ut zip-fila.',
      HELP_5_Desc_6: 'Dobbelklikk `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com kjører nå utelukkende på din datamaskin.',
      HELP_5_Desc_8: 'I tilfelle du ikke er så vant med dette: du må beholde hele mappen for å kunne kjøre nettsiden, ikke bare `index.html`. Ikke rør eller flytt rundt på noe i mappen. Hvis du lagrer en backup av MyEtherWallet-repoet for framtiden, anbefaler vi å kun lagre zip-fila så du kan være sikker på at innholdet i mappen forblir intakt.',
      HELP_5_Desc_9: 'Siden vi oppdaterer MyEtherWallet.com hele tiden, anbefaler vi at du oppdaterer din lagrede versjon av repoet jevnlig.',

      HELP_5CX_Title: '5) Hvordan kan jeg installere denne utvidelsen fra repoet i stedet for fra Chrome-butikken? ',
      HELP_5CX_Desc_1: 'Gå til vår github og finn den nyeste Chrome Extension -utgivelsen: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Bla helt ned til bunnen og høyreklikk på den nyeste utgivelsen. Klikk "save link as".',
      HELP_5CX_Desc_3: 'Gå til Google Chrome og finn innstillingene i menyen øverst til høyre under "Flere verktøy".',
      HELP_5CX_Desc_4: 'Clikk "Utvidelser" til venstre.',
      HELP_5CX_Desc_5: 'Huk av "Utviklermodus"-knappen på toppen av siden.',
      HELP_5CX_Desc_6: 'Klikk "Last inn upakket utvidelser"-knappen.',
      HELP_5CX_Desc_7: 'Naviger til den nå utpakkede mappen som du lastet ned tidligere. Clikk "OK".',
      HELP_5CX_Desc_8: 'Utvidelsen skal nå dukke opp blant utvidelsene dine og i utvidelses-knappelinjen øverst til høyre i nettleseren.',

      HELP_6_Title: '6) Hvordan splitter jeg mine ETH / ETC? ',
      HELP_6_Desc_1: 'Da "hard fork"-en skjedde, fikk all ETH som du hadde i lommeboken din et tilsvarende beløp med ETC. Hvis du sender ETH ved hjelp av en standard transaksjon, vil den også sende ETC. Dette fenomenet kalles "replay", og hvis det benyttes i dårlig hensikt "replay attack". For å unngå dette, må du "splitte" din originale lommebok til to lommebøker. Deretter må du forsikre deg om at det kun går ETH til ETH-lommeboken og kun ETC til ETC-lommeboken.',
      HELP_6_Desc_2: 'Du kan også sende alle dine ETH & ETC til Kraken eller Poloniex ved hjelp av standardtransaksjoner. Disse børsene vil automatisk splitte dine ETH og ETC. Du kan så flytte disse midlene til nye lommebøker, eller selge dine ETC eller ETH.',
      HELP_6_Desc_3: '[Enda mer informasjon om kontoer og "reply attacks" finnes her](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Opprett en ny, ren etter-fork ETH lommebok for deg selv (som endelig destinasjon for ren ETH).',
      HELP_6_Desc_5: 'Opprett en ny, ren etter-fork ETC lommebok for deg selv (som endelig destinasjon for ren ETC).',
      HELP_6_Desc_6: 'Sikkerhetskopier disse nye lommebøkene og verifiser at du har tilgang til dem. Se #2a og #3 ovenfor.',
      HELP_6_Desc_7: 'Send 0,1234 ETH til din nye "ETH"-lommebok ved å benytte "Kun ETH"-alternativet på "Send ether"-siden.',
      HELP_6_Desc_8: 'Send 0,5678 ETC til din nye "ETC"-lommebok ved å benytte "Kun ETC"-alternativet på "Send ether"-siden.',
      HELP_6_Desc_9: 'Sjekk at kun de 0,1234 ETH flyttet seg på etherscan.io. Sjekk at kun de 0,5678 ETC flyttet seg på gastracker.io.',
      HELP_6_Desc_10: 'Send en 0,0001 ETH-transaksjon fra din nye ETH lommebok. Sjekk etherscan.io. Forsikre deg om at de 0,0001 ETH flyttet seg.',
      HELP_6_Desc_11: 'Generer (men ikke send) en 0,0002 ETC-transaksjon fra din nye ETC-lommebok. Kopier "Signert transaksjon"-feltet.',
      HELP_6_Desc_12: 'Gå til [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) og lim inn denne ETC-transaksjonen i classicetherwallet.com sin offline-flipp (helt på bunnen) og send. Sjekk gastracker.io. Forsikre deg om at de 0,0002 ETC flyttet seg.',
      HELP_6_Desc_13: 'Hvis alt mottas og sendes korrekt er du klar.',
      HELP_6_Desc_14: 'Send den totale gjenværende ETH-saldoen ved å benytte "Kun ETH"-alternativet og gjenta for ETC-saldoen ved å benytte "Kun ETC".',
      HELP_6_Desc_15: 'Heretter kan du bruke standardtransaksjoner for disse nye lommebøkene uten risiko for "replay attacks". ',

      HELP_7_Title: '7) Hvordan sender jeg token & legger til flere typer token?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) er en flott måte å utforske token på, og for å finne informasjon om antall desimaler for en token.',
      HELP_7_Desc_1: 'Naviger til "Send Token"-siden.',
      HELP_7_Desc_2: 'Lås opp lommeboken din.',
      HELP_7_Desc_3: 'Oppgi adressen som du vil sende til i "Til adresse:"-feltet.',
      HELP_7_Desc_4: 'Oppgi beløpet som du vil sende.',
      HELP_7_Desc_5: 'Velg hvilken type token du vil sende .',
      HELP_7_Desc_6: 'Hvis du ikke ser token-typen på listen:',
      HELP_7_Desc_7: 'Klikk "Tilpasning".',
      HELP_7_Desc_8: 'Oppgi adressen, navnet, og antall desimaler for token-et. Disse er oppgitt fra utviklerne av token-et og er også nødvendige når du skal "Add a Watch Token" i Mist.', //Mist not translated to Norw yet :-)//
      HELP_7_Desc_9: 'Klikk "Lagre".',
      HELP_7_Desc_10: 'Du kan nå sende denne typen token, samt se saldoen for aktuell token i sidefeltet.',
      HELP_7_Desc_11: 'Klikk "Generer transaksjon".',
      HELP_7_Desc_12: 'Noen flere felter vil dukke opp. Dette er nettleseren din som genererer transaksjonen.',
      HELP_7_Desc_13: 'Klikk den blå "Send transaksjon"-knappen nedenfor dette.',
      HELP_7_Desc_14: 'En pop-up vil dukke opp. Verifiser at beløp og adresse du sender til er korrekt. Klikk så "Ja, jeg er sikker! Gjennomfør transaksjonen."-knappen.',
      HELP_7_Desc_15: 'Transaksjonen vil bli sendt inn. Transaksjons-ID-en (TX-ID) vil vises. Du kan klikke på TX ID for å se den på blokkjeden.',

      HELP_8_Title: '8) Hva skjer hvis nettsiden går ned?',
      HELP_8_Desc_1: 'MyEtherWallet er ikke en nett-lommebok (web wallet). Du har ingen innlogging og ingenting blir noensinne lagret på våre servere. Det er ganske enkelt et grensesnitt som tillater deg å samhandle med blokkjeden.',
      HELP_8_Desc_2: 'Hvis MyEtherWallet.com går ned, må du finne en annen måte (som f.eks. geth eller Ethereum Wallet / Mist) å gjøre det på. Men du vil ikke trenge å "hente" eteren din ut av MyEtherWallet, fordi den ikke befinner seg i MyEtherWallet. Den befinner seg i den lommeboka/kontoen som du opprettet ved hjelp av nettsiden vår.',
      HELP_8_Desc_3: 'Du kan nå svært enkelt importere din ukrypterte private nøkkel og dine Geth/Mist-format (krypterte) filer direkte inn i geth / Ethereum Wallet / Mist. Se spørsmål #12 nedenfor.',
      HELP_8_Desc_4: 'I tillegg er sannsynligheten for at vi tar ned MyEtherWallet svært liten. Det koster oss nesten ingenting å opprettholde den siden vi ikke lagrer noen informasjon. Hvis vi tar ned domenet, er det fortsatt, og vil alltid være, offentlig tilgjengelig på [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Du kan laste ned zip-fila der og kjøre den lokalt. ',

      HELP_8CX_Title: '8) Hva skjer hvis MyEtherWallet CX (Chrome-utvidelsen) forsvinner?',
      HELP_8CX_Desc_1: 'For det første er alle data lagret på din datamaskin, ikke på våre servere. Jeg vet det kan være forvirrende, men når du ser på Chrome-utvidelsen, så ser du IKKE på ting som er lagret på våre servere et eller annet sted - det er alt sammen lagret på din egen datamaskin.',
      HELP_8CX_Desc_2: 'Når det er sagt, så er det **svært viktig** at du sikkerhetskopierer all din informasjon for alle lommebøkene som du har opprettet med MyEtherWallet CX. På den måten vil du fortsatt ha all nødvendig informasjon for å få tilgang til eteren din selv om noe skulle hende med MyEtherWallet CX eller datamaskinen din. Se spørsmål #2a ang. hvordan du sikkerhetskopierer lommebøkene dine.',
      HELP_8CX_Desc_3: 'Hvis MyEtherWallet CX av en eller annen grunn skulle forsvinne fra Chrome Store, så kan du finne kildekoden på Github og laste den inn manuelt. Se #5 ovenfor.',

      HELP_9_Title: '9) Er "Send ether"-siden offline?',
      HELP_9_Desc_1: ' Nei, send transaksjon-siden er ikke offline. Den trenger internett for å kunne skaffe den aktuelle gas-prisen, "nonce" for kontoen din, og for å kunne kringkaste transaksjonen (aka "send"). Imidlertid sender den kun den signerte transaksjonen. Din private nøkkel forblir i sikkerhet hos deg. Vi tilbyr nå også en "Offline transaction"-side slik at du kan forsikre deg om at dine private nøkler til enhver tid kun befinner seg på en offline/frakoblet datamaskin.',

      HELP_10_Title: '10) Hvordan lager jeg en frakoblet/offline transaksjon?',
      HELP_10_Desc_1: 'Naviger til "Send Offline"-siden via din internettilknyttede datamaskin.',
      HELP_10_Desc_2: 'Oppgi "Fra-adressen". Vennligst merk at dette er adressen du sender FRA, ikke TIL. Dette genererer "nonce" og "gas-pris".',
      HELP_10_Desc_3: 'Gå til den internettfrakoblede datamaskinen. Oppgi "TIL-ADRESSEN" og "BELØPET" du vil sende.',
      HELP_10_Desc_4: 'Oppgi "GAS-PRISEN" slik den ble vist deg på den tilkoblede datamaskinen i steg #1.',
      HELP_10_Desc_5: 'Oppgi "NONCE" slik den ble vist deg på den tilkoblede datamaskinen i steg #1.',
      HELP_10_Desc_6: '"GAS-GRENSE" har en standardverdi på 21000. Dette vil dekke en standardtransaksjon. Hvis du sender til en kontrakt eller inkluderer ekstra data i transaksjonen din, må du øke gas-grensen. Eventuelt overskytende gas blir returnert til deg (fra-kontoen).',
      HELP_10_Desc_7: 'Oppgi noe data hvis du vil. Hvis du oppgir data, må du inkludere mer enn det som er standard gas-grense (21000). Alle data er i HEX-format.',
      HELP_10_Desc_8: 'Velg lommebokfilen din, eller din private nøkkel, og lås opp lommeboken din.',
      HELP_10_Desc_9: 'Trykk på "GENERER SIGNERT TRANSAKSJON"-knappen.',
      HELP_10_Desc_10: 'Datafeltet under denne knappen vil fylles med din signerte transaksjon. Kopier denne og flytt den tilbake til din tilkoblede datamaskin. ',
      HELP_10_Desc_11: 'Lim inn den signerte transaksjonen i tekstfeltet i steg #3 på den tilkoblede maskinen og klikk "Send Ether". Dette vil kringkaste transaksjonen din.',

      HELP_11_Title: '11) Hvordan sender jeg til en kontrakt?',
      HELP_11_Desc_1: 'Å sende til en kontrakt krever ofte at du inkluderer data og/eller ekstra gas.',
      HELP_11_Desc_2: 'Naviger til "Send Ether"-siden. ',
      HELP_11_Desc_3: 'Velg lommebok-filen din, eller din private nøkkel, og lås opp lommeboken. ',
      HELP_11_Desc_4: 'Oppgi en "Til-adresse" og "Beløp som skal sendes"',
      HELP_11_Desc_5: 'Klikk "+ Avansert: Legg til mer gas eller data"-knappen nedenfor beløpsfeltet. Dette vil vise ytterligere to felter som du kan bruke til å øke mengden gas utover standardverdien på 21000, eller til å legge data til transaksjonen.',

      HELP_12_Title: '12) Hvordan kan jeg importere en lommebok opprettet med MyEtherWallet til geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Ved å bruke en Geth/Mist JSON-fil fra MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Gå til "Vis lommebok-info"-siden.',
      HELP_12_Desc_3: 'Lås opp lommeboken din ved hjelp av din **krypterte** private nøkkel eller JSON-fil. ',
      HELP_12_Desc_4: 'Gå til "Mine lommebøker"-siden.',
      HELP_12_Desc_5: 'Velg lommeboken som du ønsker å importere til Mist, klikk "Vis"-ikonet, oppgi passordet, og få tilgang til lommeboken. ',
      HELP_12_Desc_6: 'Finn "Last ned JSON-fil - Geth/Mist-format (kryptert)"-seksjonen. Trykk "Last ned"-knappen nedenfor. Du har nå fått keystore-filen til lommeboken din.',
      HELP_12_Desc_7: 'Åpne "Ethereum Wallet"-programmet. ',
      HELP_12_Desc_8: 'I menyfeltet, gå til "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'Dette vil åpne keystore-mappen på harddisken din. Kopier filen du nettopp lastet ned (`UTC--2016-04-14......../`) inn i denne keystore-mappen.',
      HELP_12_Desc_10: 'Kontoen din skal nå umiddelbart dukke opp under "Accounts."',
      HELP_12_Desc_11: 'Ved å bruke din ukrypterte private nøkkel...',
      HELP_12_Desc_12: 'Hvis du ikke allerede har den ukrypterte private nøkkelen din, naviger til "Vis lommebok-info"-siden.',
      HELP_12_Desc_13: 'Velg lommebok-filen din, eller oppgi/lim inn din private nøkkel, for å låse opp lommeboken.',
      HELP_12_Desc_14: 'Kopier den (ukrypterte) private nøkkelen.',
      HELP_12_Desc_15: 'Hvis du er på en Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Åpne Text Edit og lim inn denne private nøkkelen.',
      HELP_12_Desc_17: 'Gå til menylinjen og klikk "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Lagre denne fila på skrivebordet ditt som `ikke_noe_spesielt_slett_meg.txt`. Pass på at det står "UTF-8" og "If no extension is provided use .txt" i lagringsdialogen.',
      HELP_12_Desc_19: 'Åpne terminalen og kjør følgende kommando: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'Du vil bli bedt om å lage et nytt passord. Dette er passordet du vil bruke i geth / Ethereum Wallet / Mist hver gang du skal sende en transaksjon, så ikke glem det. ',
      HELP_12_Desc_21: 'Etter at du har lykkes med å importere kontoen, slett `ikke_noe_spesielt_slett_meg.txt`',
      HELP_12_Desc_22: 'Neste gangen du åpner "Ethereum Wallet"-programmet, vil kontoen din være listet under "Accounts".',
      HELP_12_Desc_23: 'Åpne Notisblokk/Notepad & lim inn den private nøkkelen',
      HELP_12_Desc_24: 'Lagre fila som `ikke_noe_spesielt_slett_meg.txt` på `C:`',
      HELP_12_Desc_25: 'Kjør ledetekst (Windowstast + "cmd")-kommandoen, `geth account import C:\\ikke_noe_spesielt_slett_meg.txt`',
      HELP_12_Desc_26: 'Du vil bli bedt om å lage et nytt passord. Dette er passordet du vil bruke i geth / Ethereum Wallet / Mist hver gang du skal sende en transaksjon, så ikke glem det.',
      HELP_12_Desc_27: 'Etter at du har lykkes med å importere kontoen, slett `ikke_noe_spesielt_slett_meg.txt`',
      HELP_12_Desc_28: 'Neste gangen du åpner "Ethereum Wallet"-programmet, vil kontoen din være listet under "Accounts". ',

      HELP_13_Title: '13) Hva betyr "Gas Limit Too Low"?',
      HELP_13_Desc_1: 'Det betyr sannsynligvis at du prøver å sende Ether til en kontrakt. Å sende til en kontrakt krever litt mer data og derfor litt mer gas. På "Send Ether"-siden, klikk "+ Avansert: Legg til mer gas eller data"-knappen under beløpsfeltet. Dette vil vise ytterligere to felter som du kan bruke til å øke mengden gas utover standardverdien på 21000, eller til å legge data til transaksjonen.',

      HELP_14_Title: '14) Noen nettsider randomiserer genereringen av den private nøkkelen via musebevegelser. MyEtherWallet.com gjør ikke dette. Er metoden som MyEtherWallet bruker til å generere tilfeldige tall sikker?',
      HELP_14_Desc_1: 'Selv om musebevegelses-metoden er smart og vi skjønner hvorfor folk liker den, så er realiteten at window.crypto sikrer mer entropi (tilfeldighet) enn musebevegelser. Musebevegelses-metoden er ikke usikker, men det er bare det at vi (og mange andre kryptoeksperter) har tro på window.crypto. I tillegg kan MyEtherWallet.com også benyttes på fingerstyrte enheter. Her er en [konversasjon mellom en sint redditor og Vitalik Buterin angående musebevegelser versus window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) og her er [window.crypto w3 spesifikasjonen](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Hvorfor har ikke kontoen jeg nettopp opprettet dukket opp i blokkjede-utforskeren? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Kontoer vil kun dukke opp i en blokkjede-utforsker når kontoen har hatt aktivitet&mdash;for eksempel, når du har overført Ether til den.',

      HELP_16_Title: '16) Hvordan kan jeg sjekke saldoen på kontoen min? ',
      HELP_16_Desc_1: 'Du kan bruke en blokkjede-utforsker som [etherscan.io](http://etherscan.io/). Lim inn adressen i søkefeltet og den vil finne fram adressen og transaksjonshistorikken. For eksempel, her ser du hvordan vår [donasjonskonto](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) ser ut på etherscan.io',

      HELP_17_Title: '17) Hvorfor vises ikke saldoen min når jeg låser opp lommeboken min? ',
      HELP_17_Desc_1: ' Dette er mest sannsynlig fordi du er bak en brannmur. API-en vi bruker for å innhente saldoen blokkeres ofte av brannmurer av ymse årsaker. Du vil fortsatt være i stand til å sende transaksjoner, du må bare bruke en annen metode for å se nevnte saldo, som etherscan.io',

      HELP_18_Title: '18) Hvor er min geth lommebok-fil',

      HELP_19_Title: '19) Hvor er min Mist lommebok-fil? ',
      HELP_19_Desc_1: 'Mist-filer lagres typisk i lokasjonene ovenfor, men det er mye enklere å åpne Mist, velge "Accounts" i topp-menylinjen, velge "Backup", og velge "Accounts". Dette vil åpne mappen hvor filene dine er lagret.',

      HELP_20_Title: '20) Hvor er pre-sale lommebok-filen?',
      HELP_20_Desc_1: 'Der du lagret den. ;) Den ble også sendt deg på e-post, så sjekk der. Se etter fila som heter `"ethereum_wallet_backup.json"` og velg den fila. Denne fila vil være kryptert med et passord som du opprettet under "pre-sale"-kjøpet.',

      HELP_21_Title: '21) Kan ikke hvem som helst legge inn tilfeldige private nøkler, sjekke saldoen, og sende Ether til sin egen adresse? ',
      HELP_21_Desc_1: 'Kortversjonen: ja, men å finne en konto som inneholder Ether ville tatt lengre tid enn universets levealder...så...nei.',
      HELP_21_Desc_2: 'Lang ELI5-versjon: Ethereum er basert på [Offentlig nøkkel-kryptografi](https://en.wikipedia.org/wiki/Public-key_cryptography), og mer spesifikt [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf), som er svært utbredt, ikke bare i Ethereum. De fleste servere er beskyttet via ECC. Bitcoin bruker den samme, likeså SSH og TLS og mange flere. Ethereum-nøklene er 256-bit nøkler, som er sterkere enn 128-bit og 192-bit, som også er mye brukt og fortsatt betraktes som sikre av ekspertene.',
      HELP_21_Desc_3: 'I denne har du en privat nøkkel og en offentlig nøkkel. Den private nøkkelen kan utlede den offentlige nøkkelen, men den offentlige nøkkelen kan ikke brukes for å finne den private nøkkelen. Det faktum at internett og verdens hemmeligheter bruker denne kryptografien betyr at hvis det blir funnet en måte å gå fra offentlige til private nøkler på, så vil dine tapte Ether være det minste av alles problemer.',
      HELP_21_Desc_4: 'Når det er sagt, JA, hvis noen andre har din private nøkkel, så kan de såvisst sende ether fra din konto. Akkurat som hvis noen har passordet til e-posten din, så kan de lese og sende din e-post, eller passordet til bankkontoen din, så kan de overføre penger. Du kunne laste ned keystore-versjonen av den private nøkkelen din, som er den private nøkkelen som er kryptert med et passord. Dette blir som å ha et passord som er beskyttet av et annet passord.',
      HELP_21_Desc_5: 'og JA, i teorien kunne du bare taste inn en streng med 64 hexadesimaltegn helt dil du fant en som passet. Faktisk kunne smarte folk skrive et program som svært hurtig kunne sjekke tilfeldige private nøkler. Dette kalles "brute-forcing" eller "mining" private nøkler. Folk har tenkt lenge og hardt på dette. Med noen få svært gode servere, kunne de kanskje klare å sjekke >1M nøkler/sekund. Likevel, selv når så mange sjekkes per sekund, ville det ikke gi tilgang midler som ville gjøre det i nærheten av å være lønnsomt å kjøre disse serverne.  - Det er mer sannsynlig at du, eller dine oldebarn, vil dø før du får en match.',
      HELP_21_Desc_6: 'Hvis du vet noe om Bitcoin, [dette vil sette det i perspektiv:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *For å illustrere hvor usannsynlig det er: anta at alle satoshi av alle bitcoin som noensinne blir generert ble sendt til hver sin egen unike private nøkkel. Sannsynligheten for at det blant disse nøklene kunne være to som ville korrespondere med samme adresse er ca 1 til 10^20.',
      HELP_21_Desc_7: '[Hvis du ønsker en mer teknisk forklaring:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *Disse tallene har ikke noe å gjøre med teknologien til enhetene; de er det maksimale som termodynamikken vil tillate. Og de impliserer sterkt at "brute-force"-angrep mot 256-bit nøkler vil være uoppnåelig fram til datamaskiner lages av noe annet enn materie og befinner seg i noe annet enn rom.',
      HELP_21_Desc_8: 'Selvsagt betinger alt dette at nøkler blir generert på en virkelig tilfeldig måte & med tilstrekkelig entropi. Nøklene som genereres her tilfredsstiller dette kriteriet, det samme gjør Jaxx og Mist/geth. Alle Ethereum-lommebøker er OK. Nøkler som genereres av "brainwallets" er ikke like gode, siden en persons hjerne ikke er i stand til å lage en virkelig tilfeldig "seed". Det har vært noen andre tilfeller av manglende entropi eller "seeds" som ikke er generert på en virkelig tilfeldig måte i Bitcoin-land, men det er en historie som kan vente til en annen dag.',

      HELP_SecCX_Title: 'Sikring - MyEtherWallet CX (Chrome-utvidelsen)',
      HELP_SecCX_Desc_1: 'Hvor lagrer denne utvidelsen informasjonen min?',
      HELP_SecCX_Desc_2: 'Informasjonen som du lager i denne Chrome-utvidelsen lagres via [chrome.storage](http://chrome.storage/). - dette er samme sted som passordene dine lagres når du lagrer passord i Chrome.',
      HELP_SecCX_Desc_3: 'Hvilken informasjon lages? ',
      HELP_SecCX_Desc_4: 'Adresser, kallenavn og private nøkler lagres i chrome.storage. Den private nøkkelen er kryptert ved hjelp av passordet du satte da du la til lommeboken. Kallenavn og lommebok-adresser er ikke kryptert.',
      HELP_SecCX_Desc_5: 'Hvorfor er ikke kallenavn og lommebok-adresser kryptert? ',
      HELP_SecCX_Desc_6: 'Hvis vi skulle kryptere disse, måtte du ha oppgitt et passord hver gang du ønsket å se saldo for kontoene dine eller vise kallenavnene. Hvis dette bekymrer deg, anbefaler vi deg å bruke MyEtherWallet.com i stedet for denne Chrome-utvidelsen.',

      HELP_Sec_Title: 'Sikring',
      HELP_Sec_Desc_1: 'Hvis en av dine første spørsmål er "Hvorfor skulle jeg stole på disse folkene?", så er det en god ting. Forhåpentligvis vil følgende bidra til å lette på frykten din. ',
      HELP_Sec_Desc_2: 'Vi har vært oppe-og-gå siden august 2015. Hvis du søker etter ["myetherwallet" på reddit](https://www.reddit.com/search?q=myetherwallet), så kan du se mange folk som bruker oss med stor suksess.',
      HELP_Sec_Desc_3: 'Vi kommer ikke til å ta pengene dine eller stjele dine private nøkler. Det er ingen ondsinnet kode på denne siden. Faktisk er "OPPRETT LOMMEBOK"-siden fullstendig klient-drevet. Det betyr at all koden blir kjørt på ** din datamaskin ** og det blir aldri lagret eller overført noe sted.',
      HELP_Sec_Desc_4: 'Sjekk nettsideadressen (URL) -- Denne siden blir drevet gjennom GitHub og du kan se kildekoden her: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) til domenet: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) og [https://www.myetherwallet.com](https://www.myetherwallet.com). Du kan verifisere at den blir drevet (hosted) av GitHub ved å bruke [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - de siste to oppgitte IP-ene eies av GitHub for deres egen domene-hosting.',
      HELP_Sec_Desc_5: 'For å generere lommebøker, kan du laste ned [kildekoden](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Se #5 ovenfor.',
      HELP_Sec_Desc_6: 'Kjør en test og sjekk hvilken nettverksaktivitet som skjer. Den enkleste måten som du kan gjøre dette på er å høyreklikke på siden og klikke "inspiser element". Gå til "Nettverk"-flippen. Generer en test-lommebok. Du vil se at det ikke er noen nettverksaktivitet. Du vil se at noe som ser ut som data:image/gif og data:image/png skjer. Disse er QR-kodene som blir generert...på din datamaskin...av din datamaskin. Ingen bytes ble overført.',
      HELP_Sec_Desc_7: 'Nå, for å være sikker, gå over til "Ressurser"-siden. Her kan du se alle de ulike elementene som utgjør en nettside. Hvis du klikker gjennom Local Storage, Cookies, og Cache, vil du se at ingenting blir oppbevart. Ingenting blir lagret. Last inn nettsiden på nytt og du er tilbake til start.',
      HELP_Sec_Desc_8: 'Hvis du ikke er komfortabel med å bruke dette verktøyet, så for all del, ikke bruk det. Vi laget dette verktøyet som et hjelpemiddel for folk som vil opprette lommebøker og utføre transaksjoner uten å måtte dykke ned i kommandolinjeoperasjoner eller kjøre en full node. Igjen, ta gjerne kontakt hvis du har bekymringer og vi vil gi tilbakemelding så snart som mulig. Takk! ',

      HELP_FAQ_Title: 'Flere nyttige svar på hyppige spørsmål',
      HELP_Contact_Title: 'Måter å ta kontakt på'
    };

    module.exports = no;
  }, {}], 46: [function (require, module, exports) {
    // Polish
    'use strict';

    var pl = function () {};
    pl.code = 'pl';
    pl.data = {

      /* Navigation*/
      NAV_YourWallets: 'Twoje Portfele',
      NAV_AddWallet: 'Dodaj Portfel',
      NAV_GenerateWallet: 'Wygeneruj Portfel',
      NAV_BulkGenerate: 'Generuj Hurtowo',
      NAV_SendEther: 'Wyślij Ether',
      NAV_SendTokens: 'Wyślij Tokeny',
      NAV_Offline: 'Wyślij Offline',
      NAV_WithdrawDAO: 'Wypłać DAO',
      DAO_TitleLong: 'Zamień swoje Tokeny DAO na ETH',
      NAV_ClaimDGD: 'Odbierz DGD',
      DGD_TitleLong: 'Odbierz swoje Tokeny DGD',
      NAV_MyWallets: 'Moje Portfele',
      NAV_ViewWallet: 'Wyświetl informacje o portfelu',
      NAV_Help: 'Pomoc',
      NAV_Contact: 'Kontakt',

      /* General */
      x_Password: 'Hasło',
      x_Download: 'Pobierz',
      x_Address: 'Twój Adres',
      x_Save: 'Zapisz',
      x_Cancel: 'Anuluj',
      x_AddessDesc: 'Inaczej "Numer konta" lub "Klucz publiczny". Wysyłasz go innym aby mogli Ci wysłać ether. Ikona umożliwia łatwe rozpoznanie Twojego adresu.',
      x_PrivKey: 'Klucz Prywatny (nieszyfrowany)',
      x_PrivKey2: 'Klucz Prywatny',
      x_PrivKeyDesc: 'Nieszyfrowana, tekstowa wersja Twojego klucza prywatnego, nie wymaga hasła. Jeżeli ktoś zdobędzie nieszyfrowany klucz, będzie mógł uzyskać pełen dostęp do Twojego portfela bez podania hasła. Z tego powodu zaleca się używanie jego szyfrowanej wersji.',
      x_Keystore: 'Plik Keystore/JSON (Zalecany · Szyfrowany · Format Mist/Geth)',
      x_Keystore2: 'Plik Keystore/JSON',
      x_KeystoreDesc: 'Ten plik Keystore / JSON odpowiada formatowi stosowanemu przez Mist i Geth, więc może być w prosty sposób zaimportowany w przyszłości. Jest to zalecana forma pliku do pobrania i przechowywania jako kopii zapasowej.',
      x_Json: 'Plik JSON (nieszyfrowany)',
      x_JsonDesc: 'Nieszyfrowany klucz prywatny, plik w formacie JSON. Nie wymaga podania hasła, ale każdy kto zdobędzie ten plik uzyska również pełny dostęp do Twojego portfela i zgromadzonych na nim środków.',
      x_PrintShort: 'Drukuj',
      x_Print: 'Drukuj Portfel Papierowy',
      x_PrintDesc: 'Wskazówka: Kliknij drukuj i zapisz plik PDF, nawet jeżeli nie posiadasz drukarki!',
      x_CSV: 'Plik CSV (nieszyfrowany)',
      x_TXT: 'Plik TXT (nieszyfrowany)',
      x_Wallet: 'Portfel',

      /* Header */
      MEW_Warning_1: 'Zawsze dokładnie sprawdzaj adres URL strony przed jej użyciem. Użycie fałszywej strony może pozbawić cię wszystkich środków!',
      CX_Warning_1: 'Upewnij się że posiadasz **zewnętrzne kopie bezpieczeństwa** każdego przechowywanego tu portfela. Może być wiele przyczyn utraty danych przechowywanych w tym rozszerzeniu przeglądarki Chrome, włączając w to odinstalowanie i ponowne zainstalowanie rozszerzenia. To rozszerzenie ma ułatwiać dostęp do Twoich portfeli, a **nie** służyć jako kopia bezpieczeństwa.',
      MEW_Tagline: 'Portfel Ethereum - Open Source, JavaScript, Client-Side',
      CX_Tagline: 'Portfel Ethereum, Rozszerzenie Chrome - Open Source, JavaScript, Client-Side',

      /* Footer */
      FOOTER_1: 'Narzędzie do generowania portfeli Ethereum i wysyłania transakcji - otwarto-źródłowe, javascrypt\'owe, strony klienta',
      FOOTER_1b: 'Twórcy:',
      FOOTER_2: 'Darowizny:',
      FOOTER_3: 'Generowanie portfeli po stronie klienta przez',
      FOOTER_4: 'Wyłączenie odpowiedzialności',

      /* Sidebar */
      sidebar_AccountInfo: 'Informacje o Koncie: ',
      sidebar_AccountAddr: 'Adres Konta: ',
      sidebar_AccountBal: 'Stan Konta: ',
      sidebar_TokenBal: 'Stan Tokenów: ',
      sidebar_Equiv: 'Ekwiwalent: ',
      sidebar_TransHistory: 'Historia Transakcji: ',
      sidebar_DGDBal: 'Informacje o sprzedaży DGD:',
      sidebar_donation: 'MyEtherWallet jest darmową, otwarto-źródłową usługą stworzoną dla Twojej prywatności i bezpieczeństwa. Im więcej darowizn zbierzemy, tym więcej czasu będziemy w stanie poświęcić na dodawanie nowych funkcjonalności, analizowanie informacji zwrotnych oraz spełnianie waszych oczekiwań. Jesteśmy jedynie dwójką ludzi starającą się zmienić świat. Pomóż nam!',
      sidebar_donate: 'Prześlij darowiznę',
      sidebar_thanks: 'DZIĘKUJEMY!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Jak chciałbyś uzyskać dostęp do Twojego portfela?',
      decrypt_Title: 'Wybierz format Twojego klucza prywatnego:',
      decrypt_Select: 'Wybierz Portfel:',

      /* Add Wallet */
      ADD_Label_1: 'Co chciałbyś zrobić?',
      ADD_Radio_1: 'Generuj Nowy Portfel',
      ADD_Radio_2: 'Wybierz Plik Portfela (Keystore / JSON)',
      ADD_Radio_2_alt: 'Wybierz Plik Portfela: ',
      ADD_Radio_2_short: 'WYBIERZ PLIK PORTFELA...',
      ADD_Radio_3: 'Wklej/Wpisz Twój Klucz Prywatny',
      ADD_Radio_4: 'Dodaj Konto do Obserwacji',
      ADD_Label_2: 'Utwórz Nazwę Użytkownika:',
      ADD_Label_3: 'Twój portfel jest zaszyfrowany. Podaj hasło: ',
      ADD_Label_4: 'Dodaj Konto do Obserwacji',
      ADD_Warning_1: 'Możesz dodać dowolne konto do obserwacji bez podawania jego klucza prywatnego. ** Nie ** oznacza to, że uzyskasz dostęp do tego portfela, nie będziesz mógł również wysyłać z niego środków.',
      ADD_Label_5: 'Wpisz Adres: ',
      ADD_Label_6: 'Odblokuj Portfel',
      ADD_Label_6_short: 'Odblokuj',
      ADD_Label_7: 'Dodaj konto',

      /* Generate Wallets */
      GEN_desc: 'Jeżeli chcesz wygenerować wiele portfeli możesz to zrobić tu: ',
      GEN_Label_1: 'Wpisz silne hasło (co najmniej 9 znaków)',
      GEN_Placeholder_1: 'NIE zapomnij tego hasła!',
      GEN_SuccessMsg: 'Sukces! Twój portfel został wygenerowany.',
      GEN_Warning: '**Potrzebujesz plik Keystore/JSON i hasło, lub Klucz Prywatny** aby uzyskać dostęp do tego portfela w przyszłości. Wykonaj zewnętrzną kopię bezpieczeństwa! Nie ma możliwości odzyskania portfela jeżeli go nie zapiszesz. Wejdź na [stronę pomocy](https://www.myetherwallet.com/#help) po instrukcje.',
      GEN_Label_2: 'Zapisz Twój plik Keystore/JSON lub Klucz Prywatny. Nie zapomnij powyższego hasła.',
      GEN_Label_3: 'Zapisz swój adres.',
      GEN_Label_4: 'Wydrukuj swój Portfel Papierowy, lub zachowaj obrazek z kodem QR. (opcjonalnie)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Ilość Portfeli do Wygenerowania',
      BULK_Label_2: 'Generuj Portfele',
      BULK_SuccessMsg: 'Sukces! Twoje portfele zostały wygenerowane.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Do Adresu: ',
      SEND_amount: 'Kwota do Wysłania: ',
      SEND_amount_short: 'Kwota',
      SEND_custom: 'Inny',
      SEND_gas: 'Paliwo',
      SEND_TransferTotal: 'Wyślij wszystkie środki',
      SEND_generate: 'Wygeneruj Transakcję',
      SEND_raw: 'Surowa Transakcja',
      SEND_signed: 'Podpisana Transakcja',
      SEND_trans: 'Wyślij Transakcję',
      SENDModal_Title: 'Ostrzeżenie! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Wysyłasz',
      SENDModal_Content_2: 'do adresu',
      SENDModal_Content_3: 'Jesteś pewien, że chcesz to zrobić?',
      SENDModal_Content_4: 'NOTKA: Jeśli wystąpi błąd, najprawdopodobniej musisz doładować ether do Twojego konta, na pokrycie kosztów paliwa do wysłania tokenów. Paliwo jest opłacane w ether.',
      SENDModal_No: 'Nie, zabierz mnie stąd!',
      SENDModal_Yes: 'Tak, jestem pewien! Zatwierdź transakcję.',

      /* Tokens */
      TOKEN_Addr: 'Adres: ',
      TOKEN_Symbol: 'Symbol Tokenu: ',
      TOKEN_Dec: 'Miejsc po przecinku: ',

      /* Send Transaction */
      TRANS_desc: 'Jeśli chcesz wysłać Tokeny, użyj zakładki "Wyślij Tokeny".',
      TRANS_warning: 'Jeśli używasz funkcji "Tylko ETH" lub "Tylko ETC" wysyłasz przez kontrakt. Niektóre serwisy mają problemy z rozpoznawaniem tego typu transakcji. Czytaj dalej.',
      TRANS_standard: 'ETH (Standardowa Transakcja)',
      TRANS_eth: 'Tylko ETH',
      TRANS_etc: 'Tylko ETC',
      TRANS_advanced: '+Zaawansowane: Dodaj Dane ',
      TRANS_data: ' Dane: ',
      TRANS_gas: ' Paliwo: ',
      TRANS_sendInfo: 'Standardowa transakcja, zużywająca 21000 paliwa, będzie kosztować 0.000441 ETH. My używamy ceny paliwa nieco-powyżej-minimum, co odpowiada 0.000000021 ETH aby upewnić się, że zostanie szybko zatwierdzona. Nie pobieramy żadnych dodatkowych opłat.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Transakcje "Tylko ETH" i "Tylko ETC"',
      TRANSModal_Content_0: 'Informacje na temat różnych transakcji i różnych odbiorców:',
      TRANSModal_Content_1: '**ETH (Standardowa Transakcja): ** generuje standardową transakcję bezpośrednio z jednego adresu do drugiego. Domyślnie spala 21000 paliwa. Prawdopodobnie transakcja ETH zostanie powielona na łańcuchu ETC jeżeli posiadasz obie waluty na tym samym adresie.',
      TRANSModal_Content_2: '**Tylko ETH: ** wysyła przez [Kontrakt zapobiegający powielaniu Timon\'a Rapp\'a (zalecany przez VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), który wysyła środki tylko na łańcuchu **ETH**.',
      TRANSModal_Content_3: '**Tylko ETC: ** wysyła przez [Kontrakt zapobiegający powielaniu Timon\'a Rapp\'a (zalecany przez VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), który wysyła środki tylko na łańcuchu **ETC**. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** używaj tylko Transakcji Standardowych. Jeżeli wyślesz z opcją "Tylko...", będziesz musiał skontaktować się z pomocą techniczną usługodawcy w celu manualnego zatwierdzenia środków lub ich zwrotu. Możesz też użyć [narzędzia Shapeshift](https://split.shapeshift.io/)  do rozdzielenia środków.',
      TRANSModal_Content_5: '**Kraken i Poloniex:** nie są znane żadne utrudnienia. Używaj dowolnie.',
      TRANSModal_Yes: 'Super, już rozumiem.',
      TRANSModal_No: 'O boziu, strasznie zakręcone. Pomóżcie.',

      /* Offline Transaction */
      OFFLINE_Title: 'Generuj i Wyślij Transakcję Offline',
      OFFLINE_Desc: 'Wygenerowanie transakcji może zostać wykonane w trzech krokach. Kroki 1 i 3 wykonasz na komputerze z internetem, krok 2 na komputerze bez połączenia z internetem. To gwarantuje, że Twoje klucze prywatne nigdy nie mają styczności z urządzeniem podłączonym do internetu.',
      OFFLLINE_Step1_Title: 'Krok 1: Wygeneruj Informacje (Komputer Online)',
      OFFLINE_Step1_Button: 'Wygeneruj Informacje',
      OFFLINE_Step1_Label_1: 'Od Adresu: ',
      OFFLINE_Step1_Label_2: 'Notka: To jest adres NADAWCY, czyli adres Twojego konta, które starasz sie odizolować od internetu. Wyróżnik jest generowany dla tego konta.',
      OFFLINE_Step2_Title: 'Krok 2: Wygeneruj transakcję (Komputer Offline)',
      OFFLINE_Step2_Label_1: 'Do Adresu: ',
      OFFLINE_Step2_Label_2: 'Wartość / Kwota do Wysłania',
      OFFLINE_Step2_Label_3: 'Cena Paliwa ',
      OFFLINE_Step2_Label_3b: 'To było wyświetlone w Kroku 1 na Komputerze Online.',
      OFFLINE_Step2_Label_4: 'Limit Paliwa ',
      OFFLINE_Step2_Label_4b: 'Domyślny limit paliwa to 21000. Kiedy wysyłasz kontrakt lub załączasz dane ta wartość może być inna, nie zużyte paliwo zostanie zwrócone na Twoje konto.',
      OFFLINE_Step2_Label_5: 'Wyróżnik',
      OFFLINE_Step2_Label_5b: 'To było wyświetlone w Kroku 1 na Komputerze Online.',
      OFFLINE_Step2_Label_6: 'Dane',
      OFFLINE_Step2_Label_6b: 'Wartość opcjonalna. Dane są zazwyczaj załączane jeżeli wysyłasz transakcje do kontraktów.',
      OFFLINE_Step2_Label_7: 'Wpisz / Wybierz Twój Klucz Prywatny / plik JSON.',
      OFFLINE_Step3_Title: 'Krok 3: Wyślij / Opublikuj Transakcję (Komputer Online)',
      OFFLINE_Step3_Label_1: 'Wklej tu podpisaną transakcję z Kroku 2 i kliknij przycisk "WYŚLIJ TRANSAKCJĘ".',

      /* DAO */
      DAO_bal1: 'w bloku 1,919,999',
      DAO_bal2: 'aktualny',
      DAO_TitleETH: 'Wypłać DAO do ETH',
      DAO_TitleETC: 'Wypłać DAO do ETC',
      DAO_ETC_Label_1: 'Na jaki adres chcesz wysłać swoje ETC?',
      DAO_ETC_Label_2: '"White Hat Group" (Grupa Białych Kapeluszy) ciężko pracowała, aby pomóc Ci odzyskać Twoje ETC. Jeżeli chcesz, możesz im podziękować wysyłając procent z wypłacanych przez Ciebie środków. ',
      DAO_Desc: 'Użyj tej zakładki aby wypłacić tokeny DAO w zamian za ETH. Jeżeli chcesz wysłać tokeny DAO użyj zakładki Wyślij Tokeny.',
      DAO_Inst: 'Tak. Po prostu naciśnij duży czerwony przycisk. To jest tak proste.',
      DAO_Warning: 'Jeśli dostajesz błąd "Niewystarczające środki na paliwo", musisz doładować konto niewielką ilością ETH aby pokryć koszty transakcji. Dodaj 0.01 ETH do tego konta i spróbuj ponownie. ',
      DAOModal_Title: 'Tylko się upewniam...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Zamierzasz wypłacić',
      DAOModal_2: 'DAO tokenów do',
      DAOModal_3: 'za', // "w zamian za"

      /* Digix */
      DGD_Desc: 'Odbierz swoje tokeny i odznaki DigixDAO (DGD). Aby odebrać, musisz być osobą uczestniczącą w wyprzedaży tokenów w 30-31 marca 2016.  Jeśli chcesz wysłać DGD, użyj zakładki Wyślij Tokeny.',
      DGD_Label_1: 'Szacunkowa Opłata:',
      DGD_Label_2: 'Zapewniona Maksymalna Opłata:',
      DGD_Label_3: 'Cena Paliwa:',
      DGD_Generate: 'Wygeneruj Żądanie',
      DGD_Content: 'Jesteś w trakcie odbierania tokenów DGD.',

      /* Deploy Contracts */
      NAV_DeployContract: 'Wyślij Kontrakt',
      DEP_generate: 'Wygeneruj Kod Bajtowy',
      DEP_generated: 'Wygenerowany Kod Bajtowy',
      DEP_signtx: 'Podpisz Transakcję',
      DEP_interface: 'Wygeneruj Interfejs',

      /* My Wallet */
      MYWAL_Nick: 'Nazwa Portfela',
      MYWAL_Address: 'Adres Portfela',
      MYWAL_Bal: 'Środki',
      MYWAL_Edit: 'Edytuj',
      MYWAL_View: 'Podgląd',
      MYWAL_Remove: 'Usuń',
      MYWAL_RemoveWal: 'Usuń Portfel:',
      MYWAL_WatchOnly: 'Twoje Konta Tylko-do-Podglądu',
      MYWAL_Viewing: 'Podgląd Portfela: ',
      MYWAL_Hide: 'Ukryj Dane Portfela',
      MYWAL_Edit_2: 'Edytuj Portfel: ',
      MYWAL_Name: 'Nazwa Portfela',
      MYWAL_Content_1: 'Uwaga! Zaraz usuniesz swój portfel: ',
      MYWAL_Content_2: 'Upewnij się, że **zapisałeś klucz prywatny/plik Keystore i hasło** powiązane z tym portfelem zanim je usuniesz.',
      MYWAL_Content_3: 'Jeśli będziesz chciał w przyszłości używać ten portfel ze swoim MyEtherWallet CX, będziesz musiał go ponownie dodać używając klucza prywatnego/pliku JSON i hasła.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Ta zakładka pozwoli Ci na odczyt kluczy prywatnych, pobranie kopii portfeli oraz wydrukowanie portfeli papierowych. Pobrane za jej pomocą portfele możesz [zaimportować do Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Jeśli chcesz sprawdzić stan Twojego konta, zalecamy użyć eksploratora bloków np. [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Ta zakładka pozwala Ci na pobranie różnych typów kluczy prywatnych oraz ponowne wydrukowanie portfeli papierowych. ',
      VIEWWALLET_SuccessMsg: 'Sukces! Oto dane twojego portfela.',

      /* Chrome Extension */
      CX_error_1: 'Nie posiadasz żadnych zapisanych portfeli. ["Dodaj Portfel"](/cx-wallet.html#add-wallet)!',
      CX_quicksend: 'Wyślij',

      /* Error Messages */
      ERROR_1: 'Wprowadź prawidłową kwotę.',
      ERROR_2: 'Twoje hasło musi zawierać co najmniej 9 znaków. Upewnij się, że jest to silne hasło. ',
      ERROR_3: 'Przykro nam! Nie rozpoznajemy tego formatu pliku portfela. ',
      ERROR_4: 'To nie jest prawidłowy plik portfela. ',
      ERROR_5: 'Ta jednostka nie istnieje, użyj jednej z następujących jednostek ',
      ERROR_6: 'Błędny adres. ',
      ERROR_7: 'Błędne hasło. ',
      ERROR_8: 'Błędna wartość. ',
      ERROR_9: 'Błędny limit paliwa. ',
      ERROR_10: 'Błędne dane. ',
      ERROR_11: 'Błędna ilość paliwa. ',
      ERROR_12: 'Błędny wyróżnik. ',
      ERROR_13: 'Błąd podpisu transakcji. ',
      ERROR_14: 'Portfel z tą nazwą już istnieje. ',
      ERROR_15: 'Nie znaleziono portfela. ',
      ERROR_16: 'Wygląda, że propozycja z tym ID jeszcze nie istnieje, lub wystąpił błąd odczytu tej propozycji. ',
      ERROR_17: 'Portfel z tym adresem już istnieje w konfiguracji. Sprawdź zakładkę portfeli. ',
      ERROR_18: 'Musisz mieć co najmniej 0.001 ether na koncie aby pokryć koszty paliwa. Doładuj konto i spróbuj ponownie. ',
      ERROR_19: 'Całe paliwo było by zużyte w tej transakcji. Oznacza to, że głosowałeś już w tej propozycji albo minął termin głosowania.',
      ERROR_20: 'Nieprawidłowy symbol',
      SUCCESS_1: 'Prawidłowy adres',
      SUCCESS_2: 'Portfel został odszyfrowany',
      SUCCESS_3: 'Transakcja zgłoszona. TX ID: ',
      SUCCESS_4: 'Twój portfel został dodany: ',
      SUCCESS_5: 'Zagłosowałeś z powodzeniem. Dziękuję za bycie aktywnym uczestnikiem The DAO.',
      SUCCESS_6: 'Wybrany plik: ',

      /* Geth Error Messages */
      GETH_InvalidSender: 'Nieprawidłowy nadawca',
      GETH_Nonce: 'Wyróżnik transakcji za niski',
      GETH_Cheap: 'Cena paliwa poniżej akceptacji',
      GETH_Balance: 'Niewystarczająca ilość środków na koncie',
      GETH_NonExistentAccount: 'Konto nie istnieje lub niewystarczająca ilość środków',
      GETH_InsufficientFunds: 'Niewystarczająca ilość środków na paliwo * cena + kwota',
      GETH_IntrinsicGas: 'Paliwo poniżej ilości obowiązkowej',
      GETH_GasLimit: 'Przekroczono limit paliwa na blok',
      GETH_NegativeValue: 'Ujemna wartość',

      /* Tranlsation Info */
      translate_version: '3.0 (0.3)',
      Translator_Desc: 'Podziękowania tłumaczom: ',
      TranslatorName_1: '[egzi](?to=0xef39C3C51615B6e52e7D5B743BeaecdDcA822386&value=1.0#send-transaction)',
      TranslatorAddr_1: '0xef39C3C51615B6e52e7D5B743BeaecdDcA822386', // donation address 0x1234
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: '',
      TranslatorAddr_2: '',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: '',
      TranslatorAddr_3: '',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: '',
      TranslatorAddr_4: '',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: '',
      TranslatorAddr_5: '',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Jeśli wygenerowałeś portfel -lub- ściągnąłeś repozytorium przed **31.12.2015**, sprawdź swoje portfele i ściągnij nową wersję repozytorium. Kliknij po szczegóły.',
      HELP_Desc: 'Widzisz jakieś braki? Masz inne pytania? [Skontaktuj się z nami (tylko angielski)](mailto:myetherwallet@gmail.com), postaramy się odpowiedzieć, pomoże to nam również uaktualnić stronę aby w przyszłości była bardziej pomocna dla innych!',
      HELP_Remind_Title: 'W ramach uściślenia',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com i MyEtherWallet CX, jak również niektóre bazowe biblioteki Javascript, których używamy, są wciąż aktywnie rozwijane.** Pomimo tego, że dokładnie testujemy nasze oprogramowanie, pomimo że dziesiątki tysięcy portfeli zostało z powodzeniem wygenerowane przez użytkowników na całym świecie, zawsze istnieje pewne znikome prawdopodobieństwo, że nastąpi coś nieoczekiwanego, co spowoduje utratę Twoich środków. Nie inwestuj więc więcej niż jesteś gotów stracić i bądź ostrożny. Gdyby coś takiego się wydarzyło, będzie nam przykro, ale **nie weźmiemy za to odpowiedzialności**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com i MyEtherWallet CX nie są "portfelami internetowymi". Nie tworzysz kont internetowych i nie przekazujesz nam Twoich środków na przechowanie. W żadnym momencie Twoje klucze prywatne nie opuszczają Twojej przeglądarki/komputera. My jedynie ułatwiamy Ci tworzenie, zapisywanie, dostęp do twoich danych i interakcję z siecią Ethereum.',
      HELP_Remind_Desc_3: 'Jeśli utracisz swój klucz prywatny lub zapomnisz hasło, nie będzie możliwości odzyskania dostępu do Twojego portfela oraz środków tam zgromadzonych. Wykonaj kopie bezpieczeństwa i przechowuj je w wielu fizycznie niezależnych miejscach, nie tylko na Twoim komputerze!',

      HELP_0_Title: '0) Jestem zielony. Od czego mam zacząć?',
      HELP_0_Desc_1: 'MyEtherWallet daje Ci możliwość generowania nowych portfeli abyś mógł przechowywać własne środki samodzielnie, nie na portalu wymiany walut. Ten proces odbywa się w całości na Twoim komputerze, nie na naszych serwerach. Z tego powodu, gdy generujesz nowy portfel, **to Ty jesteś odpowiedzialny za jego bezpieczne przechowywanie**.',
      HELP_0_Desc_2: 'Wygeneruj nowy portfel.',
      HELP_0_Desc_3: 'Wykonaj kopię bezpieczeństwa.',
      HELP_0_Desc_4: 'Zweryfikuj, że masz dostęp do właśnie stworzonego portfela oraz że prawidłowo zachowałeś wszystkie niezbędne informacje.',
      HELP_0_Desc_5: 'Prześlij środki do nowo utworzonego portfela.',

      HELP_1_Title: '1) Jak mam utworzyć nowy portfel? ',
      HELP_1_Desc_1: 'Przejdź na zakładkę "Wygeneruj Portfel".',
      HELP_1_Desc_2: 'Przejdź na zakładkę "Dodaj Portfel" i zaznacz "Generuj Nowy Portfel"',
      HELP_1_Desc_3: 'Wpisz silne hasło. Jeśli uważasz, że mógłbyś je zapomnieć, zapisz je w jakimś bezpiecznym miejscu. Będziesz potrzebować tego hasła aby wysyłać transakcje.',
      HELP_1_Desc_4: 'Kliknij "GENERUJ".',
      HELP_1_Desc_5: 'Twój nowy portfel został właśnie wygenerowany.',

      HELP_2a_Title: '2a) Jak mam zapisać/wykonać kopię mojego portfela?',
      HELP_2a_Desc_1: 'Zawsze powinieneś wykonać zewnętrzną kopię bezpieczeństwa w wielu fizycznie niezależnych lokalizacjach - na przykład na nośniku USB i/lub kartce papieru.',
      HELP_2a_Desc_2: 'Zapisz swój adres. Możesz zachować go dla siebie lub udostępnić go innym. Inne osoby znając ten adres mogą Ci na niego wysyłać środki.',
      HELP_2a_Desc_3: 'Zachowaj klucz prywatny w przynajmniej jednym formacie. Nie udostępniaj go nikomu. Klucz prywatny będzie Ci potrzebny, jeśli będziesz chciał uzyskać dostęp do Twojego portfela i wysyłać z niego środki! Istnieją 3 formaty zapisu kluczy prywatnych:',
      HELP_2a_Desc_4: 'Umieść adres portfela, klucz prywatny i PDF z papierową wersją portfela w jednym folderze. Zapisz ten folder na komputerze i na nośniku USB.',
      HELP_2a_Desc_5: 'Wydrukuj portfel jeżeli posiadasz drukarkę. Jeżeli nie, zapisz klucz prywatny i adres na kartce papieru. Umieść go w bezpiecznym miejscu oddzielnie od komputera i nośnika USB.',
      HELP_2a_Desc_6: 'Pamiętaj, że musisz się zabezpieczyć przed utratą kluczy i hasła z powodu zagubienia, uszkodzenia lub zniszczenia dysku twardego, nośnika USB lub kartki z zapisanymi danymi. Przewiduj również możliwość wystąpienia katastrof obejmujących większe obszary (pożar, powódź).',

      HELP_2b_Title: '2b) Jak mogę utworzyć portfel w 100% odizolowany od sieci globalnej (Cold Wallet) wykorzystując MyEtherWallet?',
      HELP_2b_Desc_1: 'Wejdź na nasze konto github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Kliknij pobierz zip w górnym prawym rogu.',
      HELP_2b_Desc_3: 'Przenieś paczkę zip na odizolowany system.',
      HELP_2b_Desc_4: 'Rozpakuj paczkę i kliknij 2-krotnie `index.html`.',
      HELP_2b_Desc_5: 'Wygeneruj portfel przy użyciu silnego hasła.',
      HELP_2b_Desc_6: 'Zapisz adres. Zapisz klucz prywatny. Zapisz hasło jeżeli nie jesteś w stanie go zapamiętać po wsze czasy.',
      HELP_2b_Desc_7: 'Zapisz kopie zapasowe w formie papierowej lub na nośniku USB w wielu fizycznie odseparowanych lokalizacjach.',
      HELP_2b_Desc_8: 'Przejdź na zakładkę "Wyświetl informacje o portfelu" wprowadź klucz prywatny / hasło aby upewnić się, że są poprawne i odczytaj swój portfel. Sprawdź czy adres, który zapisałeś zgadza się z wyświetlonym.',

      HELP_3_Title: '3) Jak zweryfikować czy mam dostęp do portfela?',
      HELP_3_Desc_1: '**Zanim wyślesz jakieś środki do Twojego nowego portfela** powinieneś się upewnić, że masz do niego dostęp.',
      HELP_3_Desc_2: 'Przejdź na zakładkę "Wyświetl informacje o portfelu".',
      HELP_3_Desc_3: 'Przejdź na zakładkę "Wyświetl informacje o portfelu" na stronie MyEtherWallet.com.',
      HELP_3_Desc_4: 'Wybierz Twój plik portfela -lub- klucz prywatny i odblokuj portfel.',
      HELP_3_Desc_5: 'Jeżeli portfel jest szyfrowany automatycznie wyświetli się okienko tekstowe. Wpisz w nim hasło.',
      HELP_3_Desc_6: 'Kliknij przycisk "Odblokuj Portfel".',
      HELP_3_Desc_7: 'Informacje o Twoim portfelu powinny się wyświetlić. Odszukaj adres Twojego portfela obok okrągłej kolorowej ikonki. Ta ikona to wizualna reprezentacja adresu Twojego portfela. Upewnij się, że adres odpowiada adresowi zapisanemu w dokumencie tekstowym i na portfelu papierowym.',
      HELP_3_Desc_8: 'Jeśli planujesz trzymać w portfelu jakieś większe sumy, zalecamy w pierwszej kolejności wykonanie kilku testowych transakcji o mniejszej wartości. Prześlij do Twojego nowego portfela 0.001 ether, wejdź do portfela, prześlij te 0.001 ether na inny adres i upewnij się, że wszystko przebiegło jak należy.',

      HELP_4_Title: '4) Jak wysłać Ether z jednego portfela na inny?',
      HELP_4_Desc_1: 'Jeżeli planujesz przesłać większą sumę środków, najpierw powinieneś wysłać mniejszą kwotę, aby upewnić się, że wszystko przebiegło zgodnie z planem.',
      HELP_4_Desc_2: 'Przejdź na zakładkę "Wyślij Ether".',
      HELP_4_Desc_3: 'Wybierz Twój plik portfela -lub- wpisz klucz prywatny i odblokuj portfel.',
      HELP_4_Desc_4: 'Jeżeli portfel jest szyfrowany, automatycznie wyświetli się okienko tekstowe. Wpisz w nim hasło.',
      HELP_4_Desc_5: 'Kliknij przycisk "Odblokuj Portfel".',
      HELP_4_Desc_6: 'Wpisz adres, na który chcesz przesłać środki w pole "Do adresu:".',
      HELP_4_Desc_7: 'Wpisz kwotę do wysyłania. Możesz też kliknąć "Wyślij wszystkie dostępne środki", jeśli chcesz przesłać całą dostępną kwotę.',
      HELP_4_Desc_8: 'Notka: Od czerwca 2016, musisz się upewnić aby rozdzielić walutę ETC i ETH zanim prześlesz ether, jak byś to zrobił normalnie. Przejdź do pytania 6 poniżej po więcej informacji.',
      HELP_4_Desc_9: 'Kliknij "Wygeneruj i Podpisz Transakcję".',
      HELP_4_Desc_10: 'Pojawi się kilka kolejnych pól. Są to dane transakcji wygenerowane przez Twoją przeglądarkę.',
      HELP_4_Desc_11: 'Kliknij niebieski przycisk "Wyślij Transakcję" na dole strony.',
      HELP_4_Desc_12: 'Pojawi się okienko z potwierdzeniem. Zweryfikuj czy kwota i adres, na który wysyłasz są prawidłowe. Następnie kliknij "Tak, jestem pewien! Zatwierdź Transakcję.".',
      HELP_4_Desc_13: 'Transakcja zostanie wysłana i zostanie wyświetlony TX ID. Możesz kliknąć TX ID, aby zobaczyć tą transakcję w eksploratorze bloków. ',

      HELP_4CX_Title: '4)Jak wysłać Ether używając MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'Najpierw musisz dodać portfel. Po dodaniu portfela masz 2 możliwości do wyboru: funkcja "Wyślij" z ikony Rozszerzenia Chrome lub zakładka "Wyślij Ether" ze strony "Moje Portfele".',
      HELP_4CX_Desc_2: 'Wyślij:',
      HELP_4CX_Desc_3: 'Kliknij ikonę Rozszerzenia Chrome.',
      HELP_4CX_Desc_4: 'Kliknij przycisk "Wyślij".',
      HELP_4CX_Desc_5: 'Wybierz portfel, z którego chcesz wysłać środki.',
      HELP_4CX_Desc_6: 'Wpisz adres, do którego chcesz wysłać środki w pole "Do Adresu:".',
      HELP_4CX_Desc_7: 'Wpisz kwotę do wysłania. Możesz również kliknąć "Wyślij wszystkie dostępne środki" jeśli chcesz przesłać całą dostępną kwotę.',
      HELP_4CX_Desc_8: 'Kliknij "Wyślij Transakcję". ',
      HELP_4CX_Desc_9: 'Zweryfikuj czy kwota i adres na który wysyłasz są prawidłowe.',
      HELP_4CX_Desc_10: 'Wpisz hasło do tego portfela.',
      HELP_4CX_Desc_11: 'Kliknij "Wyślij Transakcję."',
      HELP_4CX_Desc_12: 'Używając zakładki "Wyślij Ether": ',

      HELP_5_Title: '5) Jak uruchomić MyEtherWallet offline/lokalnie? ',
      HELP_5_Desc_1: 'Możesz uruchomić MyEtherWallet lokalnie ze swojego komputera zamiast z serwerów GitHub\'a. Możesz wygenerować portfel całkowicie offline\'owo i wysyłać transakcje z zakładki "Wyślij offline".',
      HELP_5_Desc_2: 'Wejdź na nasze konto github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Kliknij pobierz zip w górnym prawym rogu.',
      HELP_5_Desc_4: 'Przenieś paczkę zip na odizolowany system.',
      HELP_5_Desc_5: 'Rozpakuj paczkę.',
      HELP_5_Desc_6: 'Kliknij 2-krotnie `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet działa teraz w całości na Twoim komputerze.',
      HELP_5_Desc_8: 'W razie gdybyś nie wiedział, musisz zachować cały folder, aby strona działała prawidłowo, nie tylko `index.html`. Nie ruszaj i nie przenoś nic innego w folderze. Jeżeli zachowujesz kopie repozytorium MyEtherWallet na przyszłość, zalecamy przechowywać je w formie spakowanego pliku ZIP, aby mieć pewność, że jego zawartość się nie zmieniła.',
      HELP_5_Desc_9: 'Ponieważ ciągle aktualizujemy MyEtherWallet, zalecamy co jakiś czas aktualizować  zapisaną wersję repozytorium.',

      HELP_5CX_Title: '5) Jak mogę zainstalować to rozszerzenie z repozytorium, zamiast z Chrome Web Store? ',
      HELP_5CX_Desc_1: 'Wejdź na nasze konto github i znajdź najnowszą wersję Rozszerzenia Chrome: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Przewiń na sam dół i kliknij prawym na najnowszą wersję. Kliknij "Zapisz link jako".',
      HELP_5CX_Desc_3: 'Wejdź w ustawienia przeglądarki Google Chrome (w menu w górnym prawym rogu).',
      HELP_5CX_Desc_4: 'Kliknij "Rozszerzenia" po lewej.',
      HELP_5CX_Desc_5: 'Kliknij "Tryb programisty" na górze strony.',
      HELP_5CX_Desc_6: 'Kliknij przycisk "Wczytaj rozszerzenie bez pakietu...".',
      HELP_5CX_Desc_7: 'Nawiguj do rozpakowanego folderu, który ściągnąłeś wcześniej. Kliknij "OK".',
      HELP_5CX_Desc_8: 'Rozszerzenie powinno się pojawić na liście i w pasku rozszerzeń przeglądarki Chrome.',

      HELP_6_Title: '6) Jak rozdzielić środki ETH / ETC? ',
      HELP_6_Desc_1: 'Kiedy w sieci Ethereum wprowadzono twarde zmiany (tzw. hard fork) w związku z wyprowadzeniem środków z The DAO, wszystkie środki ETH jakie posiadałeś mają teraz swoją równowartość w ETC. Jeśli wyślesz ETH za pomocą standardowej transakcji, zostaną wysłane również środki ETC. Aby temu zapobiec, musisz rozdzielić swoje środki z pierwotnego konta na dwa nowe konta. Idąc dalej, musisz się upewnić, że tylko ETH zostanie wysłane do konta ETH i tylko ETC zostanie wysłane do konta ETC.',
      HELP_6_Desc_2: 'Możesz też wysłać połączone środki ETH i ETC za pomocą standardowej transakcji do portalu Kraken lub Poloniex. Te kantory rozdzielą Twoje środki na ETH i ETC. Możesz wtedy wypłacić te środki do osobnych portfeli lub sprzedać ETC lub ETH.',
      HELP_6_Desc_3: '[Więcej informacji na temat portfeli i ataków powielających znajdziesz tutaj](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Wygeneruj nowy, czysty adres, na który trafią jedynie środki ETH.',
      HELP_6_Desc_5: 'Wygeneruj nowy, czysty adres, na który trafią jedynie środki ETC.',
      HELP_6_Desc_6: 'Wykonaj kopie zapasowe tych portfeli i upewnij się, że masz do nich dostęp. Zobacz punkty 2a i 3 powyżej.',
      HELP_6_Desc_7: 'Wyślij 0.1234 ETH do Twojego nowego adresu "ETH" używając opcji "Tylko ETH" na zakładce "Wyślij Ether".',
      HELP_6_Desc_8: 'Wyślij 0.5678 ETC do Twojego nowego adresu "ETC" używając opcji "Tylko ETC".',
      HELP_6_Desc_9: 'Sprawdź czy tylko kwota 0.1234 ETH została przesłana na etherscan.io. Sprawdź czy tylko kwota 0.5678 ETC została przesłana na gastracker.io.',
      HELP_6_Desc_10: 'Wyślij transakcję o wartości 0.0001 ETH z Twojego nowego portfela ETH. Sprawdź na etherscan.io. Upewnij się, że 0.0001 ETH zostało przesłane.',
      HELP_6_Desc_11: ' Wygeneruj transakcję o wartości 0.0002 ETC (ale nie wysyłaj) z Twojego nowego portfela ETC. Skopiuj zawartość pola "Podpisana Transakcja". ',
      HELP_6_Desc_12: 'Przejdź do [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction), wklej skopiowane dane na classicetherwallet.com na zakładce "Wyślij offline" na samym dole strony i wyślij transakcję. Sprawdź na gastracker.io czy 0.0002 ETC zostało przetransferowane.',
      HELP_6_Desc_13: 'Jeśli wszystko wysyła i odbiera się poprawnie, jesteś w domu.',
      HELP_6_Desc_14: 'Wyślij pozostałe środki ETH z opcją "Tylko ETH", następnie powtórz tą czynność dla ETC z opcją "Tylko ETC".',
      HELP_6_Desc_15: ' Po wykonaniu tych czynności możesz używać standardowych transakcji na nowo utworzonych kontach bez ryzyka ataku powielającego. ',

      HELP_7_Title: '7) Jak się wysyła Tokeny i jak tworzyć własne Tokeny?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) jest świetnym miejscem na przeglądanie tokenów oraz sprawdzenia ich ilości miejsc po przecinku.',
      HELP_7_Desc_1: 'Przejdź na zakładkę "Wyślij Tokeny".',
      HELP_7_Desc_2: 'Odblokuj portfel.',
      HELP_7_Desc_3: 'Wpisz adres, na który chcesz je przesłać w pole "Do Adresu:".',
      HELP_7_Desc_4: 'Wpisz wartość jaką chcesz wysłać.',
      HELP_7_Desc_5: 'Wybierz typ tokena, który chcesz wysłać.',
      HELP_7_Desc_6: 'Jeśli nie widzisz danego tokena:',
      HELP_7_Desc_7: 'Kliknij "Inny".',
      HELP_7_Desc_8: 'Wpisz adres, symbol i ilość miejsc po przecinku tokena. Wartości te są podawane przez twórców tokena, są również potrzebne podczas dodawania tokena do obserwowanych w aplikacji Mist.',
      HELP_7_Desc_9: 'Kliknij "Zapisz".',
      HELP_7_Desc_10: 'Możesz teraz wysyłać ten token, jak również odczytać stan konta dla tokenu w kolumnie obok.',
      HELP_7_Desc_11: 'Kliknij "Generuj Transakcję".',
      HELP_7_Desc_12: 'Pojawi się kilka kolejnych pól z danymi transakcji wygenerowanymi przez Twoją przeglądarkę.',
      HELP_7_Desc_13: 'Kliknij niebieski przycisk "Wyślij Transakcję", który znajduje się niżej.',
      HELP_7_Desc_14: 'Wyskoczy okienko. Zweryfikuj czy kwota i adres na który wysyłasz są prawidłowe. Następnie kliknij "Tak, jestem pewien! Zatwierdź transakcję.".',
      HELP_7_Desc_15: 'Transakcja zostanie zatwierdzona. TX ID zostanie wyświetlone. Możesz kliknąć TX ID aby zobaczyć status transakcji w eksploratorze.',

      HELP_8_Title: '8) Co się stanie, jeżeli wasza strona zniknie z sieci?',
      HELP_8_Desc_1: 'MyEtherWallet nie jest usługą portfela internetowego. Nie posiadasz loginu i nic nie jest zapisywane na naszych serwerach. To tylko interfejs, który pozwala korzystać z sieci Ethereum.',
      HELP_8_Desc_2: 'Jeżeli MyEtherWallet.com zostanie wyłączona, musiałbyś znaleźć inny sposób (jak Ethereum Wallet / Mist) na korzystanie z sieci Ethereum. Nie musiałbyś jednak wypłacić swoich środków z MyEtherWallet, ponieważ one nie znajdują się na MyEtherWallet, a na portfelach, które zostały wygenerowane za pomocą naszej strony.',
      HELP_8_Desc_3: 'Możesz w każdej chwili, w bardzo prosty sposób, zaimportować swoje nieszyfrowane klucze prywatne lub szyfrowane pliki w formacie Geth/Mist wprost do geth / Ethereum Wallet / Mist. Zobacz pytanie 12 poniżej.',
      HELP_8_Desc_4: 'W dodatku prawdopodobieństwo zamknięcia przez nas strony MyEtherWallet.com jest bliskie zeru. Koszty utrzymania strony są prawie żadne, ponieważ nie przechowujmy żadnych informacji. Jeśli nawet strona zostanie zamknięta, jest ona również i zawsze będzie publicznie dostępna na [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Możesz ściągnąć paczkę ZIP i uruchomić MyEtherWallet lokalnie na własnym komputerze. ',

      HELP_8CX_Title: '8) Co się stanie jeżeli MyEtherWallet CX zniknie?',
      HELP_8CX_Desc_1: 'Po pierwsze, wszystkie dane są zapisane na Twoim komputerze, nie na naszych serwerach. Wiem, że może Ci się to wydawać dziwne, ale kiedy patrzysz na Rozszerzenie Chrome, NIE patrzysz na coś zapisanego gdzieś na naszych serwerach - wszystko to jest na Twoim własnym komputerze.',
      HELP_8CX_Desc_2: 'Z tego powodu, jest **niezmiernie ważnym** aby wykonywać kopie bezpieczeństwa wszystkich nowych portfeli wygenerowanych za pomocą MyEtherWallet CX. W ten sposób, jeżeli cokolwiek stanie się MyEtherWallet CX lub Twojemu komputerowi, wciąż będziesz miał wszelkie niezbędne informacje potrzebne aby odzyskać dostęp do Twoich portfeli. Zobacz punkt 2a aby dowiedzieć się jak wykonać kopie bezpieczeństwa.',
      HELP_8CX_Desc_3: 'Jeżeli z jakiegoś powodu MyEtherWallet CX zniknie z Chrome Store, możesz wciąż znaleźć kod źródłowy na Github\'ie i załadować manualnie do Chrome. Zobacz pkt. 5 powyżej.',

      HELP_9_Title: '9) Czy zakładka "Wyślij Ether" działa offline?',
      HELP_9_Desc_1: ' Nie, zakładka wysyłania transakcji nie działa offline. Potrzebuje dostępu do internetu w celu pobrania aktualnej ceny paliwa, wyróżnika dla konta, oraz rozgłoszenia transakcji (wysłania). Jednakże wysyłana jest jedynie podpisana transakcja, nic więcej. Twój klucz prywatny w żadnym momencie nie opuszcza Twojego komputera. Teraz zapewniamy również funkcję "Wyślij Offline", która umożliwia przechowywanie kluczy prywatnych na komputerze, który fizycznie jest odizolowany od sieci zewnętrznej.',

      HELP_10_Title: '10) Jak wykonać transakcję offline (Cold Wallet)?',
      HELP_10_Desc_1: 'Przejdź na zakładkę "Wyślij Offline" na komputerze z dostępem do internetu.',
      HELP_10_Desc_2: 'Uzupełnij pole "Od Adresu". Zauważ, że jest to adres, z którego wypłacasz środki, nie adres, na który mają trafić. W ten sposób generowany jest wyróżnik i cena paliwa.',
      HELP_10_Desc_3: 'Przejdź na komputer bez dostępu do internetu. Uzupełnij pole "Do Adresu" i kwotę do wysłania.',
      HELP_10_Desc_4: 'Wpisz cenę paliwa jaka została wyświetlona na komputerze z internetem w kroku pierwszym.',
      HELP_10_Desc_5: 'Wpisz wyróżnik jaki został wyświetlony na komputerze z internetem w kroku pierwszym.',
      HELP_10_Desc_6: '"Limit Paliwa" ma domyślną wartość 21000. To pokryje koszty standardowej transakcji. Jeżeli będziesz wysyłać transakcję do kontraktu lub będziesz załączać jakieś dane do transakcji, musisz zwiększyć tą wartość. Nadpłata paliwa zostanie zwrócona.',
      HELP_10_Desc_7: 'Jeśli chcesz możesz załączyć dane do transakcji. Musisz wtedy jednak zapewnić więcej niż domyślne 21000 limitu paliwa. Dane wpisujemy w formacie HEX.',
      HELP_10_Desc_8: 'Wybierz Twój plik portfela -lub- klucz prywatny i odblokuj portfel.',
      HELP_10_Desc_9: 'Kliknij przycisk "Wygeneruj Transakcję".',
      HELP_10_Desc_10: 'W polu poniżej pojawią się dane podpisanej transakcji. Skopiuj jego zawartość na komputer z dostępem do internetu. ',
      HELP_10_Desc_11: 'Na komputerze z internetem wklej podpisaną transakcję w pole tekstowe w kroku 3 i kliknij "Wyślij Transakcję". To spowoduje rozgłoszenie transakcji.',

      HELP_11_Title: '11) Jak wysłać transakcję do kontraktu?',
      HELP_11_Desc_1: 'Wysyłanie do kontraktu zazwyczaj wymaga załączenia dodatkowych danych i/lub dodatkowej ilości paliwa',
      HELP_11_Desc_2: 'Przejdź na zakładkę "Wyślij Ether". ',
      HELP_11_Desc_3: 'Wybierz Twój plik portfela -lub- klucz prywatny i odblokuj portfel. ',
      HELP_11_Desc_4: 'Wpisz adres i kwotę do wysłania.',
      HELP_11_Desc_5: 'Kliknij "+Zaawansowane: Dodaj Więcej Paliwa lub Dane" pod polem z kwotą. Pojawią się 2 nowe pola gdzie możesz zwiększyć ilość paliwa powyżej domyślnej wartości 21000 lub wpisać dane do transakcji.',

      HELP_12_Title: '12) Jak zaimportować portfel utworzony w MyEtherWallet do geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Używając pliku Keystore Geth/Mist z MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Wejdź na zakładkę "Wyświetl informacje o portfelu".',
      HELP_12_Desc_3: 'Odblokuj portfel używając Twojego klucza prywatnego lub pliku portfela. ',
      HELP_12_Desc_4: 'Wejdź na zakładkę "Moje Portfele".',
      HELP_12_Desc_5: 'Zaznacz portfel jaki chcesz zaimportować do Mist, kliknij ikonkę "Podgląd", wpisz hasło i wejdź do podglądu. ',
      HELP_12_Desc_6: 'Znajdź sekcję "Plik Keystore/JSON (Zalecany · Szyfrowany · Format Mist/Geth)". Kliknij przycisk "Pobierz" pod spodem. W ten sposób uzyskałeś plik Keystore.',
      HELP_12_Desc_7: 'Uruchom aplikację Ethereum Wallet. ',
      HELP_12_Desc_8: 'W menu programu wejdź w: "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'Otworzy się folder z plikami ustawień. Skopiuj pobrany przed chwilą plik portfela (`UTC--2016-04-14......../`) do folderu keystore.',
      HELP_12_Desc_10: 'Twój portfel powinien się od razu pojawić na zakładce "Accounts."',
      HELP_12_Desc_11: 'Używając nieszyfrowanego klucza prywatnego...',
      HELP_12_Desc_12: 'Jeżeli jeszcze nie posiadasz nieszyfrowanego klucza prywatnego, wejdź na zakładkę "Wyświetl informacje o portfelu".',
      HELP_12_Desc_13: 'Wybierz swój plik portfela i odblokuj portfel.',
      HELP_12_Desc_14: 'Skopiuj "Klucz Prywatny (nieszyfrowany)".',
      HELP_12_Desc_15: 'Jeśli pracujesz na Mac\'u:',
      HELP_12_Desc_15b: 'Jeśli pracujesz na PC\'cie:',
      HELP_12_Desc_16: 'Otwórz Text Edit i wklej do niego skopiowany klucz prywatny.',
      HELP_12_Desc_17: 'Wejdź do paska menu i kliknij "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Zapisz ten plik na `desktop/` jako `nic_specjalnego_usun_mnie.txt`. Podczas zapisywania ustaw "UTF-8" i "If no extension is provided use .txt".',
      HELP_12_Desc_19: 'Otwórz terminal systemowy i uruchom następującą komendę: `geth account import ~/Desktop/nic_specjalnego_usun_mnie.txt`',
      HELP_12_Desc_20: 'Zostaniesz zapytany o hasło. To będzie hasło portfela w geth / Ethereum Wallet / Mist, które należy podać przy każdej transakcji, nie zapomnij tego hasła.',
      HELP_12_Desc_21: 'Po zaimportowaniu portfela, usuń `nic_specjalnego_usun_mnie.txt`',
      HELP_12_Desc_22: 'Po ponownym uruchomieniu aplikacji Ethereum Wallet Twój portfel pojawi się na zakładce "Accounts".',
      HELP_12_Desc_23: 'Otwórz Notatnik i wklej klucz prywatny',
      HELP_12_Desc_24: 'Zapisz plik notatnika jako `nic_specjalnego_usun_mnie.txt` na `C:\\`',
      HELP_12_Desc_25: 'Uruchom wiersz poleceń i wykonaj komendę: `geth account import C:\\nic_specjalnego_usun_mnie.txt`',
      HELP_12_Desc_26: 'Zostaniesz zapytany o hasło. To będzie hasło portfela w geth / Ethereum Wallet / Mist, które należy podać przy każdej transakcji, nie zapomnij tego hasła.',
      HELP_12_Desc_27: 'Po zaimportowaniu portfela, usuń `nic_specjalnego_usun_mnie.txt`',
      HELP_12_Desc_28: 'Po ponownym uruchomieniu aplikacji Ethereum Wallet Twój portfel pojawi się na zakładce "Accounts". ',

      HELP_13_Title: '13) Co oznacza "Gas Limit Too Low" ("Limit paliwa zbyt niski")?',
      HELP_13_Desc_1: 'Najprawdopodobniej oznacza to, że chcesz wysłać Ether do kontraktu. Wysyłanie do kontraktu wymaga nieco więcej danych, a więc również więcej paliwa. Na zakładce "Wyślij Ether" kliknij "+Zaawansowane: Dodaj Więcej Paliwa lub Dane" poniżej pola kwoty. Pojawią się 2 nowe pola gdzie możesz zwiększyć ilość paliwa powyżej domyślnej wartości 21000 lub wpisać dane do transakcji.',

      HELP_14_Title: '14) Niektóre strony wykorzystują ruchy myszką przy generowaniu klucza prywatnego. MyEtherWallet tego nie robi. Czy generator liczb losowych w MyEtherWallet jest bezpieczny?',
      HELP_14_Desc_1: 'Chociaż generowanie liczb losowych przy udziale ruchów myszki jest sprytnie pomyślane i rozumiemy dlaczego ludzie to lubią, to jednak rzeczywistość jest taka, że window.crypto zapewnia większą entropię niż ruchy myszką. Generowanie z ruchów myszki nie jest niebezpieczne, ale my (oraz znaczna liczba innych ekspertów kryptografii) wierzymy w window.crypto. W dodatku MyEtherWallet może być używane na urządzeniach dotykowych. Tutaj można przeczytać [rozmowę rozeźlonego reddit\'ora i Vitalik\'a Buterin\'a odnośnie ruchów myszki kontra window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) a tutaj jest [specyfikacja window.crypto w3](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Dlaczego portfel, który właśnie wygenerowałem nie pokazuje się w eksploratorze bloków? (np. etherchain, etherscan)',
      HELP_15_Desc_1: 'Adres pojawi się w eksploratorze bloków dopiero jak adres portfela będzie uczestniczył w jakichś transakcjach, np. jak wyślesz do niego jakieś środki.',

      HELP_16_Title: '16) Jak sprawdzić stan mojego konta? ',
      HELP_16_Desc_1: 'Możesz użyć eksploratora bloków jak [etherscan.io](http://etherscan.io/). Wklej swój adres w wyszukiwarkę na stronie eksploratora, pokaże ona stan Twojego konta oraz historię transakcji. Tak na przykład wygląda nasze [konto donacji](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) na etherscan.io. ',

      HELP_17_Title: '17) Dlaczeg stan mojego konta nie pojawia się, kiedy odblokowuje mój portfel? ',
      HELP_17_Desc_1: ' Najprawdopodobniej przyczyną tego jest firewall. API, które używamy do odczytu stanu konta oraz jego konwersji jest często blokowane przez firewall z różnych przyczyn. Wciąż możesz wysyłać transakcje, jednak stan konta musisz sprawdzać w inny sposób, np. na [etherscan.io](http://etherscan.io/)',

      HELP_18_Title: '18) Gdzie jest plik mojego portfela w geth?',

      HELP_19_Title: '19) Gdzie jest plik mojego portfela w Mist? ',
      HELP_19_Desc_1: 'Pliki programu Mist można znaleźć zazwyczaj w lokalizacjach wymienionych w pkt. 18, ale prościej jest uruchomić Mist, wybrać "Accounts" w górnym pasku, następnie "Backup" i "Accounts". Otworzy się folder, w którym znajdują się wspomniane pliki.',

      HELP_20_Title: '20) Gdzie jest mój plik portfela przed-sprzedaży?',
      HELP_20_Desc_1: 'Tam gdzie go zapisałeś ;). Był też wysłany mailem, sprawdź również tam. Szukaj pliku `"ethereum_wallet_backup.json"`. Portfel ten będzie zaszyfrowany hasłem jakie podałeś podczas procesu kupna na przed-sprzedaży.',

      HELP_21_Title: '21) Czy nie jest tak, że każdy może losowo sprawdzać różne klucze prywatne, a jak znajdzie taki ze środkami możę przelać je na swoje konto? ',
      HELP_21_Desc_1: 'Krótka odpowiedź: Tak. Jednak znalezienie któregokolwiek ze środkami zajęłoby więcej czasu niż wszechświat istnieje... więc... nie.',
      HELP_21_Desc_2: 'Długa wersja (dla przedszkolaka): Ethereum bazuje na [Kryptografii Klucza Publicznego (ECC)](https://pl.wikipedia.org/wiki/Kryptografia_klucza_publicznego), a dokładnie na [Kryptografii Krzywych Eliptycznych](https://eprint.iacr.org/2013/734.pdf) które są bardzo szeroko stosowane, nie tylko w Ethereum. Większość serwerów jest chroniona przez ECC. Kolejne przykłady to Bitcoin, SSH, TLS i wiele innych. Klucze w Ethereum to dokładnie odmiana 256-bitowa, która jest silniejsza niż 128-bitowa i 192-bitowa, które również są wciąż szeroko stosowane oraz uznawane przez ekspertów za bezpieczne. ',
      HELP_21_Desc_3: 'W tego typu zabezpieczeniu mamy 2 klucze: klucz prywatny i klucz publiczny. Z klucza prywatnego możemy szybko otrzymać klucz publiczny, ale otrzymanie klucza prywatnego z klucza publicznego jest niemożliwe. Biorąc pod uwagę, że cały internet i wszystkie sekrety świata używają tej metody kryptograficznej oznacza, że gdyby istniał sposób na otrzymanie klucza prywatnego z publicznego, to utrata Twoich środków z konta Ethereum byłaby najmniejszym zmartwieniem w świecie.',
      HELP_21_Desc_4: 'Idąc dalej, TAK jeżeli ktoś miałby Twój klucz prywatny mógłby z łatwością wypłacić środki z Twojego konta. Tak samo, jak by ktoś miał hasło do Twojego konta pocztowego, mógłby czytać Twoje maile, lub gdyby miał hasło bankowe, mógłby wypłacać z niego pieniądze. Możesz ściągnąć plik Keystore Twojego portfela, który jest kluczem prywatnym zaszyfrowanym hasłem. To jest tak jak by mieć hasło, które jest chronione innym hasłem.',
      HELP_21_Desc_5: 'Więc TAK, teoretycznie można by po prostu wpisywać 64 znaki w kodzie szesnastkowym do momentu trafienia na taki, który nie jest pusty. Co więcej zdolni ludzie mogą napisać program, który będzie bardzo szybko, automatycznie sprawdzał kolejne losowe kombinacje kluczy. Taka metoda nazywa się "brute-forcing" lub "mining". Różni ludzie zastanawiali się nad jej zastosowaniem długo i intensywnie. Z pomocą kilku wysokiej klasy serwerów mogliby być w stanie sprawdzać ponad 1 milion kluczy na sekundę. Jednak nawet wtedy koszt utrzymania pracy tych serwerów byłby wiele razy wyższy niż potencjalne zyski ze znalezienia jakichkolwiek środków. Bardziej prawdopodobne byłoby, że pierwsze trafienie nastąpi dopiero po śmierci Twojej i Twoich prawnuków.',
      HELP_21_Desc_6: 'Jeśli wiesz coś na temat Bitcoina, [to może dać Ci perspektywę:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *Aby zilustrować jak mało prawdopodobne to jest: załóżmy, że każdy satoshi (najmniejsza część Bitcoina, 0.00000001 BTC), każdego Bitcoina jaki kiedykolwiek będzie istnieć (21 milionów), został wysłany na swój własny unikalny klucz prywatny. Prawdopodobieństwo, że spośród wszystkich tych kluczy 2 odpowiadałyby tym samym adresom jest jak 1 do 100 kwintylionów.',
      HELP_21_Desc_7: '[Jeżeli byś chciał coś bardziej technicznego:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *Te liczby nie mają nic wspólnego z technologią na jakiej opiera się urządzenie. Są maksimami na jakie pozwala termodynamika, co silnie sugeruje, że skuteczne ataki brute-force przeciwko 256-bitowym kluczom będą nieosiągalne, dopóki komputery nie będą zbudowane z czegoś innego niż materia i będą zajmować trochę więcej niż wszechświat.',
      HELP_21_Desc_8: 'Oczywiście to wszystko ma miejsce przy założeniu, że klucze są generowane w prawdziwie losowy sposób i z wystarczającą entropią. Klucze tu wygenerowane spełniają te kryteria, tak samo jak klucze w Jaxx i Mist/geth. Portfele Ethereum są w większości całkiem niezłe. Z drugiej strony np. klucze wygenerowane przez ludzki umysł nie spełniają tych kryteriów, jako że ludzki umysł nie jest w stanie wygenerować prawdziwie losowego źródła. W otoczeniu Bitcoina w przeszłości pojawiło się kilka problemów związanych z brakiem odpowiedniej entropii lub brakiem pełnej losowości, ale to całkiem inny temat, być może na inny dzień.',

      HELP_SecCX_Title: 'Bezpieczeństwo - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Gdzie są zapisywane informacje przechowywane przez to rozszerzenie?',
      HELP_SecCX_Desc_2: 'Informacje przechowywane przez to Rozszerzenie Chrome jest zapisywane przez [chrome.storage](http://chrome.storage/). - w tym samym miejscu są przechowywane hasła zapisywane w przeglądarce Chrome.',
      HELP_SecCX_Desc_3: 'Jakie informacje są zapisywane? ',
      HELP_SecCX_Desc_4: 'Adres, nazwa konta, klucz prywatny są przechowywane w chrome.storage. Klucz prywatny jest zaszyfrowany hasłem jakie podano przy zakładaniu portfela. Nazwa i adres nie są szyfrowane.',
      HELP_SecCX_Desc_5: 'Dlaczego adres i nazwa konta nie są szyfrowane? ',
      HELP_SecCX_Desc_6: 'Jeżeli byśmy zaszyfrowali te informacje, konieczne było by podawanie hasła przy każdym sprawdzeniu stanu konta lub wyświetleniu jego nazwy. Jeśli to Cię niepokoi, możesz użyć MyEherWallet.com zamiast tego Rozszerzenia Chrome.',

      HELP_Sec_Title: 'Bezpieczeństwo',
      HELP_Sec_Desc_1: 'Jeśli pierwszym pytaniem jakie Ci się nasuwa jest "Dlaczego miałbym zaufać tym gościom?", to prawidłowy odruch. Być może to pozwoli Ci załagodzić obawy:',
      HELP_Sec_Desc_2: 'Działamy od sierpnia 2015. Jeśli wyszukasz ["myetherwallet" na reddit](https://www.reddit.com/search?q=myetherwallet), możesz znaleźć wielu ludzi, którzy używają naszego kodu bez najmniejszych problemów.',
      HELP_Sec_Desc_3: 'Nie ukradniemy Twoich pieniędzy ani Twoich kluczy prywatnych. Ta strona nie zawiera złośliwego kodu. W zasadzie, zakładka "Generuj Portfel" działa w pełni po stronie klienckiej. Oznacza to, że cały kod jest uruchamiany wyłącznie na **Twoim komputerze**, a jego rezultat nigdzie nie jest zapisywany ani nigdzie przesyłany.',
      HELP_Sec_Desc_4: 'Sprawdź adres URL -- Ta strona jest serwowana przez GitHub. Kod źródłowy jest dostępny pod: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Strona jest dostępna pod domenami: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) i [https://www.myetherwallet.com](https://www.myetherwallet.com). Możesz zweryfikować czy jest hostowana przez GitHub używając [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - ostatnie 2 rekordy "A" zawierają numery IP należące do GitHub\'a i są wykorzystywane do hostowania zewnętrznych domen.',
      HELP_Sec_Desc_5: ' Do generowania portfeli możesz pobrać [kod źródłowy](https://github.com/kvhnuke/etherwallet/tree/gh-pages). Zobacz punkt 5 powyżej.',
      HELP_Sec_Desc_6: 'Wykonaj test i sprawdź jakie połączenia sieciowe są aktywowane. Najprostszą metodą jest kliknięcie prawym przyciskiem myszy na stronie i "Zbadaj". Przejdź na zakładkę "Network". Wygeneruj testowy portfel. Zobaczysz, że nie są aktywowane żadne połączenia. Możesz zobaczyć coś wyglądającego jak data:image/gif i data:image/png. To są kody QR generowane... na Twoim komputerze... przez Twój komputer. Żadne dane nie były transferowane.',
      HELP_Sec_Desc_7: 'Teraz, żeby się upewnić przejdź na zakładkę "Resources". Możesz tu zobaczyć wszystkie elementy tworzące stronę. Jeśli przejdziesz przez Local Storage, Cookies i Cache zobaczysz, że nic nie jest przechowywane. Nic nie jst zapisywane. Odśwież stronę i wszystko zostanie wyczyszczone do wartości domyślnych.',
      HELP_Sec_Desc_8: 'Jeśli nie czujesz się komfortowo używając tego oprogramowania, bez względu na wszystko, nie używaj go. Stworzyliśmy te narzędzia jako pomoc w generowaniu nowych portfeli i wykonywaniu transakcji bez potrzeby zagłębiania się w linię poleceń lub prowadzenia pełnego węzła. Jeszcze raz, nie krępuj się z nami skontaktować jeżeli masz jakieś wątpliwości. Postaramy się odpowiedzieć tak szybko jak to możliwe. Dzięki! ',

      HELP_FAQ_Title: 'Więcej Pomocnych Odpowiedzi na Często Zadawane Pytania (tylko angielski)',
      HELP_Contact_Title: 'Sposoby Nawiązania Kontaktu (tylko angielski)'
    };

    module.exports = pl;
  }, {}], 47: [function (require, module, exports) {
    // Russian
    'use strict';

    var ru = function () {};
    ru.code = 'ru';
    ru.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: 'Неверный адрес отправителя',
      GETH_Nonce: 'Номер перевода (nonce) слишком мал',
      GETH_Cheap: 'Цена газа слишком низкая',
      GETH_Balance: 'Баланс недостаточен',
      GETH_NonExistentAccount: 'Счёт не существует или баланс счёта слишком мал',
      GETH_InsufficientFunds: 'Недостаточно средств для ГАЗ * ЦЕНА + СУММА',
      GETH_IntrinsicGas: 'Недостаточно газа для выполнения транзакции',
      GETH_GasLimit: 'Превышен лимит газа на блок',
      GETH_NegativeValue: 'Отрицательная сумма',

      /* Navigation*/
      NAV_YourWallets: 'Ваши кошельки',
      NAV_AddWallet: 'Добавить кошелёк',
      NAV_GenerateWallet: 'Создать кошелёк',
      NAV_BulkGenerate: 'Создать несколько кошельков',
      NAV_SendEther: 'Перевести эфир (ether)',
      NAV_SendTokens: 'Перевести токены',
      NAV_Offline: 'Оффлайн-перевод',
      NAV_WithdrawDAO: 'Обменять DAO',
      DAO_TitleLong: 'Обменять DAO токены на эфир (ether)',
      NAV_ClaimDGD: 'Получить DGD',
      DGD_TitleLong: 'Получить причитающиеся Вам DGD токены',
      NAV_DeployContract: 'Опубликовать контракт',
      NAV_MyWallets: 'Мои кошельки',
      NAV_ViewWallet: 'Информация о кошельке',
      NAV_Help: 'Справка',
      NAV_Contact: 'Контакты',

      /* General */
      x_Password: 'Пароль',
      x_Download: 'Скачать',
      x_Address: 'Ваш адрес',
      x_Save: 'Сохранить',
      x_Cancel: 'Отменить',
      x_AddessDesc: 'Это можно назвать "номер Вашего счёта" или "Ваш открытый ключ". Вы сообщаете этот адрес людям, чтобы они могли отправлять Вам эфир (ether). Картинка позволяет легко опознать Ваш адрес среди других адресов.',
      x_PrivKey: 'Закрытый ключ (не зашифрован)',
      x_PrivKey2: 'Закрытый ключ',
      x_PrivKeyDesc: 'Это незашифрованное текстовое представление Вашего закрытого ключа, для использования которого не требуется вводить пароль. Если посторонние узнают Ваш закрытый ключ, они смогут распоряжаться Вашим кошельком без ввода пароля. По этой причине, обычно рекомендуют использовать зашифрованную версию закрытого ключа.',
      x_Keystore: 'Файл Keystore/JSON (рекомендуется · зашифрован · совместим с Mist и geth)',
      x_Keystore2: 'Файл Keystore/JSON',
      x_KeystoreDesc: 'Этот файл Keystore/JSON использует формат совместимый с Mist и geth. Вы сможете в будущем импортировать его. Рекомендуется скачать этот файл и сделать резервную копию.',
      x_Json: 'Файл JSON (не зашифрован)',
      x_JsonDesc: 'Это Ваш незашифрованный закрытый ключ в формате JSON, для использования которого не требуется воодить пароль. Любой, у кого есть этот файл, может распоряжаться вашим кошельком и эфиром (ether) без ввода пароля.',
      x_PrintShort: 'Печать',
      x_Print: 'Напечатать бумажный кошелёк',
      x_PrintDesc: 'Для профи: Нажмите "Печать" и сохраните это в формате PDF, если у Вас нет принтера!',
      x_CSV: 'Файл CSV (не зашифрован)',
      x_TXT: 'Файл TXT (не зашифрован)',
      x_Wallet: 'кошелёк',

      /* Header */
      MEW_Warning_1: 'Всегда проверяйте URL перед тем, как воспользоваться существующим кошельком или создать новый. Опасайтесь поддельных (фишинговых) сайтов!',
      CX_Warning_1: 'Всегда имейте **резервную копию** всех кошельков, которые Вы храните здесь. Различные обстоятельства могут привести к тому, что данные, хранимые в этом расширении браузера Chrome, могут быть потеряны, например если Вы удалите или переустановите расширение. Это расширение облегчает использование Ваших кошельков, но оно **не является** надежным местом для их хранения.',
      MEW_Tagline: 'Ethereum кошелёк на javascript с открытым исходным кодом',
      CX_Tagline: 'Ethereum кошелёк на javascript с открытым исходным кодом в виде расширения для браузера Chrome',

      /* Footer */
      FOOTER_1: 'Написанный на javascript инструмент с открытым исходным кодом для создания Ethereum кошельков и выполнения транзакций.',
      FOOTER_1b: 'Авторы:',
      FOOTER_2: 'Пожертвования приветствуются:',
      FOOTER_3: 'Создание кошелька на стороне клиента от',
      FOOTER_4: 'Отказ от ответственности',

      /* Sidebar */
      sidebar_AccountInfo: 'Информация о счёте: ',
      sidebar_AccountAddr: 'Адрес (номер) счёта: ',
      sidebar_AccountBal: 'Баланс счёта: ',
      sidebar_TokenBal: 'Балансы токенов: ',
      sidebar_Equiv: 'Эквивалентные значения: ',
      sidebar_TransHistory: 'История транзакций: ',
      sidebar_DGDBal: 'Информация о распродаже DGD:',
      sidebar_donation: 'MyEtherWallet — это бесплатный сервис с открытым исходным кодом, заботящийся о Вашей безопасности и неприкосновенности Вашей частной жизни. Чем больше пожертвований мы получаем, тем больше времени мы проводим, добавляя новые возможности, прислушиваясь к Вашим пожеланиям и предоставляя Вам то, что Вам необходимо. Мы — всего лишь два человека, пытающиеся изменить Мир. Вы поможете нам?',
      sidebar_donate: 'Пожертвовать',
      sidebar_thanks: 'СПАСИБО!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Каким способом Вы хотите получать доступ к своему кошельку?',
      decrypt_Title: 'Выберите формат Вашего закрытого ключа:',
      decrypt_Select: 'Выберите кошелёк:',

      /* Add Wallet */
      ADD_Label_1: 'Что Вы хотите сделать?',
      ADD_Radio_1: 'Создать новый кошелёк',
      ADD_Radio_2: 'Выбрать файл с кошельком (Keystore/JSON)',
      ADD_Radio_2_alt: 'Выбрать файл с кошельком: ',
      ADD_Radio_2_short: 'ВЫБРАТЬ ФАЙЛ С КОШЕЛЬКОМ...',
      ADD_Radio_3: 'Вставить или ввести Ваш закрытый ключ',
      ADD_Radio_4: 'Добавить счёт в список слежения',
      ADD_Label_2: 'Присвоить название:',
      ADD_Label_3: 'Ваш кошелёк зашифрован.  Пожалуйста, введите пароль: ',
      ADD_Label_4: 'Добавить счёт в список слежения',
      ADD_Warning_1: 'Вы можете добавить счёт в "список слежения" на вкладке "кошельки", не загружая закрытый ключ. Добавление счёта в список слежения не означает, что вы имеете доступ к этому счёту, или можете распоряжаться эфиром (ether), лежащим на нём.',
      ADD_Label_5: 'Введите адрес: ',
      ADD_Label_6: 'Отпереть кошелёк',
      ADD_Label_6_short: 'Отпереть',
      ADD_Label_7: 'Добавить счёт',

      /* Generate Wallets */
      GEN_desc: 'Если Вы хотите создать несколько кошельков, Вы можете сделать это здесь: ',
      GEN_Label_1: 'Введите сложный пароль (не менее 9 символов)',
      GEN_Placeholder_1: 'Не забудьте сохранить это!',
      GEN_SuccessMsg: 'Поздравляем! Ваш кошелёк успешно создан.',
      GEN_Warning: 'В будущем, для доступа к этому кошельку **Вам понадобится либо файл Keystore/JSON вместе с паролем,  либо зарытый ключ**. Пожалуйста, сохраните их и сделайте резервную копию! Если Вы потеряете их, то не сможете восстановить доступ к Вашему кошельку. Обратитесь к [справке](https://www.myetherwallet.com/#help) за инструкциями.',
      GEN_Label_2: 'Сохраните Ваш файл Keystore/JSON или зарытый ключ. Не забывайте Ваш пароль!',
      GEN_Label_3: 'Сохраните Ваш адрес.',
      GEN_Label_4: 'Напечатайте бумажный кошелёк или сохраните QR код. (по желанию)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Сколько кошельков создать',
      BULK_Label_2: 'Создать кошельки',
      BULK_SuccessMsg: 'Поздравляем! Ваши кошельки успешно созданы.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Адрес получателя: ',
      SEND_amount: 'Сумма перевода: ',
      SEND_amount_short: 'Сумма',
      SEND_custom: 'Другое',
      SEND_gas: 'Газ',
      SEND_TransferTotal: 'Перевести весь доступный баланс', // updated to be shorter
      SEND_generate: 'Сформировать транзакцию',
      SEND_raw: 'Готовая транзакция',
      SEND_signed: 'Подписанная транзакция',
      SEND_trans: 'Отправить транзакцию',
      SENDModal_Title: 'Внимание! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Вы собираетесь перевести',
      SENDModal_Content_2: 'на адрес',
      SENDModal_Content_3: 'Вы уверены, что хотите сделать это?',
      SENDModal_Content_4: 'К СВЕДЕНИЮ: Если произошла ошибка, Вам скорее всего надо положить ещё немного эфира (ether) на Ваш счёт, чтобы покрыть расходы на газ при пре переводе токенов. Расходы на газ оплачиваются эфиром (ether).',
      SENDModal_No: 'Нет, отменить транзакцию!',
      SENDModal_Yes: 'Да, я уверен! Выполнить транзакцию.',

      /* Tokens */
      TOKEN_Addr: 'Адрес: ',
      TOKEN_Symbol: 'Символ токена: ',
      TOKEN_Dec: 'Дробность (знаков после запятой): ',

      /* Send Transaction */
      TRANS_desc: 'Если Вы хотите перевести токены, используйте страницу "Отправить токены".',
      TRANS_warning: 'Если Вы используете функции "только ETH" или "только ETC", перевод будет выполнен с помощью контракта. У некоторых сервисов могут возникнуть проблемы с приёмом таких переводов. Уточните этот вопрос.',
      TRANS_standard: 'Эфир (ether, обычная транзакция)',
      TRANS_eth: 'Только ETH',
      TRANS_etc: 'Только ETC',
      TRANS_advanced: '+Дополнительно: добавить данные ',
      TRANS_data: ' Данные: ',
      TRANS_gas: ' Газ: ',
      TRANS_sendInfo: 'Стандартная транзакция, использующая 21000 газа, будет стоить 0,000441 эфира (ether). Мы указываем цену газа немного выше минимально возможной: 0,000000021 эфира (ether), для того, чтобы ускорить выполнение танзакций. Мы не берём комиссию за выполнение транзакций.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Транзакции вида "только ETH" и "только ETC"',
      TRANSModal_Content_0: 'О видах транзакций и сервисах:',
      TRANSModal_Content_1: '**Эфир (ether, обычная транзакция): ** Выполняет обычный перевод напрямую с одного адреса на другой. Используется стандартное количесвто газа: 21000. В большинстве случаев, перевод ETH, выполненный этим способом, можно будет продублировать для ETC.',
      TRANSModal_Content_2: '**Только ETH: ** Выполняет перевод через [контракт Тимона Раппа, защищающий от дублирования переводов (рекомендован ВБ)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), поэтому перевод будет выполнен только в **ETH**.',
      TRANSModal_Content_3: '**Только ETC: ** Выполняет перевод через [контракт Тимона Раппа, защищающий от дублирования переводов (рекомендован ВБ)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/), поэтому перевод будет выполнен только в **ETC**. ',
      TRANSModal_Content_4: '**Coinbase и ShapeShift: ** Отправляйте им только обычные транзакции. Если Вы отправите им транзакцию вида "только ...", то Вам придётся обращаться к их службе поддержки, чтобы они вручную пополнили Ваш баланс или вернули бы Вам Ваш эфир (ether). [Вы также можете попробовать использовать инструмент "split" от Shapeshift.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Проблем не выявлено.  Можно использовать транзакции любого вида.',
      TRANSModal_Yes: 'Спасибо, я всё понял.',
      TRANSModal_No: 'Чёрт, теперь я окончательно запутался.  Помогите мне.',

      /* Offline Transaction */
      OFFLINE_Title: 'Сформировать и отправить оффлайн транзакцию',
      OFFLINE_Desc: 'Оффлайн транзакция формируется за тра шага. Вы должны выполнить шаги №1 и №3 на компьютере, подключённом к интернету (на онлайн компьютере), а шаг №2 на компьютере, отсоединённом от сети (на оффлайн компьютере). Это гарантирует, что подключённые к интернет устройства не получат доступа к Вашим закрытым ключам.',
      OFFLLINE_Step1_Title: 'Шаг №1: Подготовка информации (онлайн компьютер)',
      OFFLINE_Step1_Button: 'Подготовка информации',
      OFFLINE_Step1_Label_1: 'Адрес отправителя: ',
      OFFLINE_Step1_Label_2: 'Внимание: Это адрес ОТПРАВИТЕЛЯ, а не адрес получателя. № перевода (nonce) определяется для адреса отправителя. При использовании оффлайн компьютера, физически изолированного от сети, это будет адрес счёта "холодного хранения" (cold-storage).',
      OFFLINE_Step2_Title: 'Шаг №2: Формирование транзакции (оффлайн компьютер)',
      OFFLINE_Step2_Label_1: 'Адрес получателя: ',
      OFFLINE_Step2_Label_2: 'Сумма перевода',
      OFFLINE_Step2_Label_3: 'Цена газа ',
      OFFLINE_Step2_Label_3b: 'Это отображалось на шаге №1 на Вашем онлайн компьютере.',
      OFFLINE_Step2_Label_4: 'Лимит газа ',
      OFFLINE_Step2_Label_4b: 'Лимит газа по умолчанию: 21000. При использовании контрактов или передаче дополнительных данных может быть необходимо указать другое значение. Неистраченный газ будет Вам возвращён.',
      OFFLINE_Step2_Label_5: '№ перевода (nonce)',
      OFFLINE_Step2_Label_5b: 'Это отображалось на шаге №1 на Вашем онлайн компьютере.',
      OFFLINE_Step2_Label_6: 'Данные',
      OFFLINE_Step2_Label_6b: 'Это необязательный параметр. Данные обычно указывают при использовании контрактов.',
      OFFLINE_Step2_Label_7: 'Выберите или введите ваш закрытый ключ или JSON.',
      OFFLINE_Step3_Title: 'Шаг №3: Выполнить транзакцию (онлайн компьютер)',
      OFFLINE_Step3_Label_1: 'Вставьте подписанную транзакцию с шага №2 и нажмите кнопку "ВЫПОЛНИТЬ ТРАНЗАКЦИЮ".',

      /* DAO */
      DAO_bal1: 'на момент создания блока №1.919.999',
      DAO_bal2: 'текущий',
      DAO_TitleETH: 'Обменять DAO токены на ETH',
      DAO_TitleETC: 'Обменять DAO токены на ETC',
      DAO_ETC_Label_1: 'На какой адрес зачислить ETC?',
      DAO_ETC_Label_2: 'Группа "White Hat" работала не покладая рук для того, чтобы Вы смогли получить обратно Ваш ETC. Вы можете сказать им "спасибо", пожертвовав небольшой процент от суммы, если хотите, конечно. ',
      DAO_Desc: 'Используйте эту вкладку, чтобы обменять Ваши DAO токены на эфир (ether). Если вы хотите перевести DAO токены, используйте вкладку "Перевести токены".',
      DAO_Inst: 'Да. Просто нажмите большую красную кнопку. Это действительно просто.',
      DAO_Warning: 'Если Вы видите ошибку "Недостаточно средств для оплаты газа", то это значит, что на Вашем счету не хватает эфира (ether), чтобы покрыть расходы на газ. Переведите 0,001 эфира (ether) на Ваш счёт и попробуйте снова. ',
      DAOModal_Title: 'Просто чтобы убедиться...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Вы собираетесь обменять',
      DAOModal_2: 'DAO токенов. На адрес',
      DAOModal_3: 'будет зачислено', // "in return for"

      /* Digix */
      DGD_Desc: 'Получить причитающиеся Вам DigixDAO (DGD) токены и бэйджи. Вы можете получить причитающиеся Вам токены, если Вы участвовали в в распродаже токенов 30–31 марта 2016 года.  Если Вы хотите перевести DGD токены, используйте вкладку "Перевести токены".',
      DGD_Label_1: 'Предположительный размер комиссии:',
      DGD_Label_2: 'Максимальный размер комиссии:',
      DGD_Label_3: 'Цена газа:',
      DGD_Generate: 'Сформировать требование',
      DGD_Content: 'Вы собираетесь затребовать причитающиеся Вам DGD токены.',

      /* Deploy Contracts */
      DEP_generate: 'Сформировать байткод',
      DEP_generated: 'Сформированный байткод',
      DEP_signtx: 'Подписать транзакцию',
      DEP_interface: 'Сформированный интерфейс',

      /* My Wallet */
      MYWAL_Nick: 'Название кошелька',
      MYWAL_Address: 'Адрес кошелька',
      MYWAL_Bal: 'Баланс',
      MYWAL_Edit: 'Редактировать',
      MYWAL_View: 'Просмотреть',
      MYWAL_Remove: 'Удалить',
      MYWAL_RemoveWal: 'Удалить кошелёк:',
      MYWAL_WatchOnly: 'Список слежения',
      MYWAL_Viewing: 'Просматриваемый кошелёк: ',
      MYWAL_Hide: 'Скрыть информацию о кошельке',
      MYWAL_Edit_2: 'Редактировать кошелёк: ',
      MYWAL_Name: 'Имя кошелька',
      MYWAL_Content_1: 'Внимание! Вы собираетесь удалить кошелёк: ',
      MYWAL_Content_2: ' Убедитесь, что Вы **сохранили закрытый ключ или файл Keystore / JSON и пароль** от этого кошелька, прежде чем Вы удалите этот кошелёк.',
      MYWAL_Content_3: 'Если Вы планируете в будущем использовать этот кошелёк в MyEtherWallet CX, Вам надо будет вручную заново добавить его, указав закрытый ключ или файл JSON и пароль.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Позволяет скачать закрытые ключи в различных форматах, а также повторно напечатать Ваши бумажные кошельки. Вам это понадобится, когда Вы захотите [импортировать Ваши счета в geth или Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Для проверки баланса Ваших счетов мы рекомендуем использовать браузер блокчейна, например [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Позволяет Вам скачать Ваши закрытые ключи в различных форматах, а также повторно напечатать Ваши бумажные кошельки. ',
      VIEWWALLET_SuccessMsg: 'Поздравляем! Вот информация о Вашем кошельке.',

      /* Chrome Extension */
      CX_error_1: 'У Вас нет сохранённых кошельков. Чтобы создать кошелёк, нажмите ["Создать кошелёк"](/cx-wallet.html#add-wallet)!',
      CX_quicksend: 'Моментальный перевод', // if no appropriate translation, just use "Send"


      /* Error Messages */
      ERROR_1: 'Пожалуйста, введите сумму корректно.',
      ERROR_2: 'Пароль должен содержать не менее 9 символов. Пожалуйста, используйте сложный пароль. ',
      ERROR_3: 'К сожалению, мы не смогли определить формат файла кошелька. ',
      ERROR_4: 'Этот файл не является файлом кошелька. ',
      ERROR_5: 'Такая единица измерения не существует. Пожалуйста, укажите одну из следующих единиц измерения ',
      ERROR_6: 'Неправильный адрес. ',
      ERROR_7: 'Неверный пароль. ',
      ERROR_8: 'Некорректная сумма. ',
      ERROR_9: 'Некорректно указан лимит газа. ',
      ERROR_10: 'Недопустимые данные. ',
      ERROR_11: 'Некорректно указано количество газа. ',
      ERROR_12: 'Неверный номер перевода (nonce). ',
      ERROR_13: 'Подписанная транзакция некорректна. ',
      ERROR_14: 'Кошелёк с таким названием уже существует. ',
      ERROR_15: 'Кошелёк не найден. ',
      ERROR_16: 'Предложение с таким идентификатором не существует или при чтении предложения произошла ошибка. ',
      ERROR_17: 'Кошелёк с таким адресом уже находится в хранилище. Просмотрите в списке кошельков. ',
      ERROR_18: 'Вам необходимо иметь не менее 0.001 эфира (ether) на Вашем счету, чтобы покрыть расходы на газ. Пожалуйста, пложите немного эфира (ether) на счёт и попробуйте снова. ',
      ERROR_19: 'Транзакция могла бы истратить весь газ. Это значит, что Вы уже голосовали по данному предложению, или период обсуждения данного предложения закончился.',
      ERROR_20: 'Неправильный символ',
      SUCCESS_1: 'Адрес указан верно',
      SUCCESS_2: 'Кошелёк успешно расшифрован',
      SUCCESS_3: 'Транзакция отправлена на выполнение. TX ID: ',
      SUCCESS_4: 'Ваш кошелёк успешно добавлен: ',
      SUCCESS_5: 'Ваш голос учтён. Спасибо Вам за активное участие в работе DAO.',
      SUCCESS_6: 'Выбранный файл: ',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Спасибо нашим переводчикам: ',
      TranslatorName_1: '[Михаил Владимиров](https://www.myetherwallet.com/?gaslimit=21000&to=0x6ff323e36bfdb20502b23780695f4e77e36cde95&value=1.0#send-transaction)',
      TranslatorAddr_1: '0x6ff323e36bfdb20502b23780695f4e77e36cde95',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'Если вы используете ПК:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = ru;
  }, {}], 48: [function (require, module, exports) {
    // Turkish
    'use strict';

    var tr = function () {};
    tr.code = 'tr';
    tr.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: 'Invalid sender',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas price too low for acceptance',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Account does not exist or account balance too low',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      NAV_DeployContract: 'Sözleşme kur',

      /* Navigation*/
      NAV_YourWallets: 'Cüzdanin',
      NAV_AddWallet: 'Cüzdan ekle',
      NAV_GenerateWallet: 'Cüzdan oluştur',
      NAV_BulkGenerate: 'Birkaç Cüzdan oluştur',
      NAV_SendEther: 'Ether gönder',
      NAV_SendTokens: 'Tokens gönder',
      NAV_Offline: 'Offline gönder',
      NAV_WithdrawDAO: 'DAO çek',
      DAO_TitleLong: 'DAO tokenlerini ETH olarak çek',
      NAV_ClaimDGD: 'DGD talep et',
      DGD_TitleLong: 'DGD tokenlerini talep et',
      NAV_MyWallets: 'Cüzdanim',
      NAV_ViewWallet: 'Cüzdan bilgilerni göster',
      NAV_Help: 'Yardim et',
      NAV_Contact: 'Iletişime geç',

      /* General */
      x_AddessDesc: 'Bu "hesap numarası" veya "genel anahtar" dir. Birisi ether göndermek istiyorsa bu adresi kullanmasi gerekir. Ikon adresini kontrol etmek kolay bir yoldur',
      x_Address: 'Adresin',
      x_Cancel: 'Iptal et',
      x_Download: 'Indir',
      x_Json: 'JSON dosya (şifrelenmemis)',
      x_JsonDesc: 'Bu özel anahtarinin sifresiz, JSON formatidir. Demekki parolasiz cüzdanini acabilirsin. Özel anahatarina sahip olan herkez sifresiz cüzdani aca bilir.',
      x_Keystore: 'Keystore/JSON dosya (Tavsiye edilen· şifrelenmiş · Mist/Geth formati)',
      x_Keystore2: 'Keystore/JSON dosya',
      x_KeystoreDesc: 'This Keystore / JSON file matches the format used by Mist & Geth so you can easily import it in the future. It is the recommended file to download and back up.',
      x_Password: 'Parola',
      x_Print: 'Cüzdanin kağıt versiyonunu yazdir',
      x_PrintDesc: 'ProTavsiye: Eğer yazıcınız olmasa bile, "Yazdır" seçeneğini tıklayın ve PDF dosyası olarak kaydedin!',
      x_PrintShort: 'Yazdir',
      x_PrivKey: 'Özel anahtar (şifrelenmemis)',
      x_PrivKey2: 'Özel anahtar',
      x_PrivKeyDesc: 'Bu özel anahtarinin şifrelenmemiş metin sürümüdür. Birisi şifrelenmemiş özel anahtarı bulduysa, şifre olmadan cüzdani acabilir. Bu nedenle, şifrelenmiş sürümlerini genellikle tavsiye edilir.',
      x_Save: 'Indir',
      x_TXT: 'TXT dosya (şifrelenmemis)',
      x_CSV: 'CSV dosya (şifrelenmemis)',
      x_Wallet: 'Cüzdan',

      /* Header */
      MEW_Warning_1: 'Cüzdani acmadan veya yeni bir cüzdan olusturmadan önce her zaman URL\'yi gözden geçirin. Phishing sitelerinden dikkat!',
      CX_Warning_1: 'Burda kaydetdigin tüm cüzdanlari **yedeklediginden** emin ol. Make sure you have **external backups** of any wallets you store here. Many things could happen that would cause you to lose the data in this Chrome Extension, including uninstalling and reinstalling the extension. This extension is a way to easily access your wallets, **not** a way to back them up.',
      MEW_Tagline: 'Acik kaynak JavaScript Client-Side Ether cüzdani',
      CX_Tagline: 'Acik kaynak JavaScript Client-Side Ether cüzdani Chrome Extension',

      /* Footer */
      FOOTER_1: 'Acik kaynak, javascript Client-Side Ethererum cüzdani ve Ether islemleri',
      FOOTER_1b: 'tarafından yaratıldı',
      FOOTER_2: 'Bağışlar büyük takdirle kabuledilir:',
      FOOTER_3: 'Client-side cüzdan olusturma',
      FOOTER_4: 'Disclaimer',

      /* Sidebar */
      sidebar_AccountInfo: 'Hesap bilgiler: ',
      sidebar_AccountAddr: 'Hesap adres: ',
      sidebar_AccountBal: 'Bakiye: ',
      sidebar_TokenBal: 'Token bakiye: ',
      sidebar_Equiv: 'Eşdeğer Değerler: ', /* Belki sadece Esdeger yeter */
      sidebar_TransHistory: 'Işlem geçmişi: ',
      sidebar_DGDBal: 'DGD Crowdsale bilgileri: ',
      sidebar_donation: 'MyEtherWallet gizlilik ve güvenlike adanmış ücretsiz ve açık kaynak kodlu bir hizmettir. Ne kadar cok bagis edilirse o kadar cok yeni özellik programlamaya, görüşlerinizi işlemeye yatitim yapabiliriz. Biz sadece dünyayı değiştirmek isteyen iki kişiyiz. Bize yardım edermisin?',
      sidebar_donate: 'Bağışta bulun',
      sidebar_thanks: 'TEŞEKKÜRLER!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Cüzdanını nasıl acmak istersin?',
      decrypt_Title: 'Özel anahtarinin formatini sec:',
      decrypt_Select: 'Bir cüzdan sec:',

      /* Add Wallet */
      ADD_Label_1: 'Ne yapmak istiyorsun?',
      ADD_Radio_1: 'Yeni cüzdan olustur',
      ADD_Radio_2: 'Cüzdan dosyayi sec (Keystore / JSON)',
      ADD_Radio_2_alt: 'Cüzdan dosyayi sec: ',
      ADD_Radio_2_short: 'CÜZDAN DOSYAYI SEC...',
      ADD_Radio_3: 'Özel anahatarini Yaspistir/Yaz ',
      ADD_Radio_4: 'Izlenecek hesap adresi ekle', /* maybe another word for watch/izlencek --> Takip edilecek? */
      ADD_Label_2: 'Bir nickname oluştur: ',
      ADD_Label_3: 'Cüzdan şifrelidir. Parolayi yaz:  ',
      ADD_Label_4: 'Izlenecek hesap adresi ekle',
      ADD_Warning_1: 'Özel anahtar yazmadan cüzdan sekmesinde "izlemek" için herhangi bir hesap ekleyebilirsin. Bu demek ** degilki ** cüzdani acabilirsin, veya ondan Ether aktarabilirsin.',
      ADD_Label_5: 'Adresi ekle: ',
      ADD_Label_6: 'Cüzdani ac: ',
      ADD_Label_6_short: 'Ac',
      ADD_Label_7: 'Hesap ekle',

      /* Generate Wallets */
      GEN_desc: 'Birden birkac cüzdan olusturmak istiryorsan burdan yapabilirsin: ',
      GEN_Label_1: 'Güçlü bir şifre sec (en az 9 sembol)',
      GEN_Placeholder_1: 'Bunu kaydetmeyi unutma!',
      GEN_SuccessMsg: 'Başarı! Cüzdan oluşturuldu.',
      GEN_Warning: 'Ilerde cüzdanini acmak icin **Keystore/JSON dosyan ve parolan veya özel anahtarin** lazim olacak. Lütfen kaydet ve  dista yedekle! Kaydedilmemiş cüzdanini kurtarmanin hiçbir yolu yoktur. Talimatlar icin yardim [help page](https://www.myetherwallet.com/#help) sayfasini oku ',
      GEN_Label_2: 'Keystore/JSON dosyayi veya özel anahtranini kaydet. Yukarıdaki şifreni unutma.',
      GEN_Label_3: 'Adresini kaydet.',
      GEN_Label_4: 'Cüzdanin kağıt versiyonunu yazdir veya QR code versiyonunu sakla. (Isteye bagli)',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Oluşturulacak cüzdan sayısı',
      BULK_Label_2: 'Cüzdanlari olustur',
      BULK_SuccessMsg: 'Başarı! Cüzdanlarin olusturuldu.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Bu Adrese gönder: ',
      SEND_amount: 'Gönderilecek miktar: ',
      SEND_amount_short: 'Miktar',
      SEND_custom: 'Kullaniciya özel', /*maybe another word here too */
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Tüm dengeyi gönder',
      SEND_generate: 'Generate Transaction',
      SEND_raw: 'İşlem oluştur ikili sistem', /* add Binär */
      SEND_signed: 'Imzali İşlem',
      SEND_trans: 'Islemi gönder',
      SENDModal_Title: 'Uyarı! ',

      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'şu an ',
      SENDModal_Content_2: 'bu adresse',
      SENDModal_Content_3: 'Göndermek üzeresin. Emin misin?',
      SENDModal_Content_4: 'NOTA: Eger bir hata ile karsilasirsan, büyük olasilikla token göndermeye gereken gaz maliyetini karsilamak için hesabina eter eklemen gerekir. Gas ether olarak ödenir.',
      SENDModal_No: 'Hayir, cikar beni burdan!',
      SENDModal_Yes: 'Evet, Eminim! Islemi tamamla.',

      /* Tokens */
      TOKEN_Addr: 'Adres: ',
      TOKEN_Symbol: 'Token symbolu: ',
      TOKEN_Dec: 'Ondalık: ',

      /* Send Transaction */
      TRANS_desc: 'Eğer Token göndermek istiyorsan, bunun yerine "Token Gönder" sayfasını kullan.',
      TRANS_warning: '"Yalnızca ETH" ya da "Yalnızca ETC" fonksiyonu kullanıyorsan, bir sözleşme yoluyla gönderiyorsun. Bazı servisler bu işlemleri kabul etmekde sorunları var. Daha fazla oku.',
      TRANS_standard: 'ETH (Standart işlem)',
      TRANS_eth: 'Yalnızca ETH',
      TRANS_etc: 'Yalnızca ETC',
      TRANS_advanced: '+Gelişmiş: Veri ekle',
      TRANS_data: 'Veri: ',
      TRANS_gas: 'Gas: ',
      TRANS_sendInfo: '21000 gaz kullanan standart bir islem 0.000441 ETH ile mal olur. Biz hizli bir sekilde mayinlanmasi için, 0.000000021 ETH\'dan biraz daha yüksek gaz fiyatini kullaniyoruz. Biz herhangi bir islem ücreti almiyoruz.',

      /* Send Transaction Modals */
      TRANSModal_Title: '"Yalnızca ETH" and "Yalnızca ETC" islemler',
      TRANSModal_Content_0: 'Farklı işlemler ve farklı hizmetleri hakkında bir not:',
      TRANSModal_Content_1: '**ETH (Standart islem): ** Bu standart bir islem baslatir bir hesapten direkt baska bir hesapa. Standart gas 21000\'dir. Bu islemlen gönderileren islem ETC zincirinde\'de yer bulabilir.',
      TRANSModal_Content_2: '**Only ETH: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETH** chain.',
      TRANSModal_Content_3: '**Only ETC: ** This sends via [Timon Rapp\'s replay protection contract (as recommended by VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) so that you only send on the **ETC** chain. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Only send via Standard Transaction. If you send via the "Only" contracts, you will need to reach out to their support staff to manually add your balance or refund you. [You can try Shapeshift\'s "split" tool as well.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** Bilinen sorun yok, ikisinden birini sec', /* */
      TRANSModal_Yes: 'Güzel, şimdi anladım.',
      TRANSModal_No: 'Aman, kafam daha cok karıştı. Yardım et.',

      /* Offline Transaction */
      OFFLINE_Title: 'Olustur & offline islem',
      OFFLINE_Desc: 'Offline islemler 3. adimda gerçeklestirir. 1. ve 3. adimi internete bagli olan bir bilgisayarda, 2. adimi offline olan bir bilgisayarda tamamliyorsun. Böyle özel anahtarinin internete bagli olan bir bilgisayara ulasmasini engelnenir.',
      OFFLLINE_Step1_Title: 'Adim 1: Bilgileri olustur (Online Bilgisayar)',
      OFFLINE_Step1_Button: 'Bilgileri olustur',
      OFFLINE_Step1_Label_1: 'Adres\'den: ',
      OFFLINE_Step1_Label_2: 'Nota: This is the FROM address, not the TO address. Nonce is generated from the originating account. If using an airgapped computer, it would be the address of the cold-storage account.',
      OFFLINE_Step2_Title: 'Adim 2: Generate Transaction (Offline Computer)',
      OFFLINE_Step2_Label_1: 'Adrese: ',
      OFFLINE_Step2_Label_2: 'Gönderilen miktar',
      OFFLINE_Step2_Label_3: 'Gas fiyati ',
      OFFLINE_Step2_Label_3b: 'Bu online bilgisayarınızda adım 1\'de gösterilirdi.',
      OFFLINE_Step2_Label_4: 'Gas limiti ',
      OFFLINE_Step2_Label_4b: '21000 is the default gas limit. When you send contracts or add\'l data, this may need to be different. Any unused gas will be returned to you.',
      OFFLINE_Step2_Label_5: 'Veri',
      OFFLINE_Step2_Label_5b: 'Bu online bilgisayarınızda adım 1\'de gösterilir.',
      OFFLINE_Step2_Label_6: 'Veri',
      OFFLINE_Step2_Label_6b: 'Bu istege bagli. Data is often used when you send transactions to contracts.',
      OFFLINE_Step2_Label_7: 'Enter / Select your Private Key / JSON.',
      OFFLINE_Step3_Title: 'Adim 3: Gönder / Islemi duyur (Online Computer)',
      OFFLINE_Step3_Label_1: 'Paste the signed transaction from Step 2 here and press the "SEND TRANSACTION" button.',

      /* DAO */
      DAO_bal1: 'block 1,919,999\'ta',
      DAO_bal2: 'şimdiki',
      DAO_TitleETH: 'DAO ETH olarak cek',
      DAO_TitleETC: 'DAO ETC olarak cek',
      DAO_ETC_Label_1: 'ETC hangi adrese gönderilmesini istiyorsun',
      DAO_ETC_Label_2: '"Beyaz Şapka Grubu" ETC\'lerini geri almak için yorulmadan çalışmaktadır. Eğer istiyorsan, senin çekiminden yüzdesi bağışlayarak "teşekkür ederim" diyebilirsin.',
      DAO_Desc: 'Use this tab to Withdraw your DAO Tokens for ETH **& ETC**. If you wish to send DAO, please use the Send Tokens Tab.',
      DAO_Inst: 'Evet. Sadece büyük kırmızı düğmeye bas. Bu kadar kolay.',
      DAO_Warning: 'If you are getting an "Insufficient balance for gas" error, you must have a small amount of ether in your account in order to cover the cost of gas. Add 0.001 ether to this account and try again. ',
      DAOModal_Title: 'Sadece emin olmak için...',

      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: 'Cekmek üzeresin',
      DAOModal_2: 'DAO token\'i ',
      DAOModal_3: ' yerine', // "in return for"

      /* Digix */
      DGD_Desc: 'Claim your DigixDAO (DGD) tokens & badges. In order to claim, you must have participated in the token sale on March 30th/31st, 2016.  If you wish to send DGD, please use the Send Tokens Tab.',
      DGD_Label_1: 'Tahmini bedel:',
      DGD_Label_2: 'Maximum bedel:',
      DGD_Label_3: 'Gas fiyati:',
      DGD_Generate: 'Talep oluştur', /* Maybe "Talep" is the wrong word for "Claim" */
      DGD_Content: 'Suan DGD token\'lerini talep etmekdesin.',

      /* Deploy Contracts */
      DEP_generate: 'Bytecode oluştur',
      DEP_generated: 'Oluşturulan Bytecode',
      DEP_signtx: 'Islmemi Imzala',
      DEP_interface: 'Interface oluştur',

      /* My Wallet */
      MYWAL_Nick: 'Cüzdan nickname',
      MYWAL_Address: 'Cüzdan adres',
      MYWAL_Bal: 'Bakiye',
      MYWAL_Edit: 'Düzenle',
      MYWAL_View: 'Göster',
      MYWAL_Remove: 'Kaldir',
      MYWAL_RemoveWal: 'Cüzdani kaldir:',
      MYWAL_WatchOnly: 'Sadece izlenen hesaplar',
      MYWAL_Viewing: 'Izlenen Cüzdan: ',
      MYWAL_Hide: 'Cüzdan bilgilerini gizle',
      MYWAL_Edit_2: 'Cüzdani düzenle: ',
      MYWAL_Name: 'Cüzdan Ismi',
      MYWAL_Content_1: 'Uyarı! Cüzdanını silmek üzeresin: ',
      MYWAL_Content_2: 'Bunu kaldırmadan önce ** özel anahtarıni ve / veya Keystore Dosya ve şifreni ** kaydettiğinden emin ol.',
      MYWAL_Content_3: 'If you want to use this wallet with your MyEtherWallet CX in the future, you will need to manually re-add it using the private key/JSON and password.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'This allows you to download different versions of private keys and re-print your paper wallet. You may want to do this in order to [import your account into Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). If you want to check your balance, we recommend using a blockchain explorer like [etherscan.io](http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'This allows you to download different versions of private keys and re-print your paper wallet. ',
      VIEWWALLET_SuccessMsg: 'Success! Here are your wallet details.',

      /* Chrome Extension */
      CX_error_1: 'Su an cüzdan eklenmemis. Cüzdan ekle tikla ["Add Wallet"](/cx-wallet.html#add-wallet) ve bir cüzdan ekle!',
      CX_quicksend: 'Gönder', // if no appropriate translation, just use "Send" maybe add hizli

      /* Error Messages */
      ERROR_1: 'Geçerli tutar yaz.',
      ERROR_2: 'Sifren en az 9 sembol\'dan olusmasi lazim. Güçlü bir parola sectiginden emin ol. ',
      ERROR_3: 'Sorry! We don\'t recognize this type of wallet file. ',
      ERROR_4: 'Geçerli bir cüzdan dosyası değil. ',
      ERROR_5: 'This unit doesn\'t exists, please use the one of the following units Var olmayan bir birim, bu birimlerden birini kullan lütfen',
      ERROR_6: 'Geçersiz adres. ',
      ERROR_7: 'Geçersiz parola. ',
      ERROR_8: 'Yetersiz bakiye. ', /*maybe yetersiz bakiye */
      ERROR_9: 'Geçersiz gas limit. ',
      ERROR_10: 'Geçersiz data value. ',
      ERROR_11: 'Yetersiz gas. ', /*maybe yetersiz gas */
      ERROR_12: 'Geçersiz veri. ',
      ERROR_13: 'Geçersiz imzali isleme. ',
      ERROR_14: 'Secdigin Nickname baska bir cüzdanda kullaniliyor. ',
      ERROR_15: 'Cüzdan bulunmadi. ',
      ERROR_16: 'It doesnt look like a proposal with this ID exists yet or there is an error reading this proposal. ',
      ERROR_17: 'A wallet with this address already exists in storage. Please check your wallets page. ',
      ERROR_18: 'You need to have at least 0.001 ether in your account to cover the cost of gas. Please add some ether and try again. ',
      ERROR_19: 'All gas would be used on this transaction. This means you have already voted on this proposal or the debate period has ended.',
      ERROR_20: 'Geçersiz sembol',
      SUCCESS_1: 'Geçerli adres',
      SUCCESS_2: 'Cüzdan basariyla desifre edildi',
      SUCCESS_3: 'İşlem teslim edildi TX ID: ',
      SUCCESS_4: 'Cüzdanın başarıyla eklendi: ',
      SUCCESS_5: 'Başarıyla oy verdiniz. DAO aktif bir katılımcı olduğunuz için teşekkür ederiz.',
      SUCCESS_6: 'Dosya secildi ',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Thank you to our translators: ',
      TranslatorName_1: '[ffidan61](https://www.myetherwallet.com/?gaslimit=21000&to=0xF1Fdf8635cc35a084B97905F62a021cAd71fbC21&value=1.0#send-transaction)',
      TranslatorAddr_1: '0xF1Fdf8635cc35a084B97905F62a021cAd71fbC21',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositting a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generatea a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension relase: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and reply attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your account and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own account? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = tr;
  }, {}], 49: [function (require, module, exports) {
    'use strict';
    //var ar = require('./ar');
    //var bg = require('./bg');

    var de = require('./de');
    var el = require('./el');
    var en = require('./en');
    //var es = require('./es');
    //var et = require('./et');
    var fi = require('./fi');
    var fr = require('./fr');
    //var he = require('./he');
    //var hi = require('./hi');
    var hu = require('./hu');
    var id = require('./id');
    var it = require('./it');
    var ja = require('./ja');
    //var ko = require('./ko');
    var nl = require('./nl');
    var no = require('./no');
    var pl = require('./pl');
    //var pt = require('./pt');
    //var ptbr = require('./ptbr');
    var ru = require('./ru');
    //var sk = require('./sk');
    //var sl = require('./sl');
    //var sv = require('./sv');
    var tr = require('./tr');
    //var uk = require('./uk');
    var vi = require('./vi');
    var zh = require('./zh');

    var translate = function ($translateProvider) {
      //$translateProvider.translations(ar.code, translate.marked(ar.data));
      //$translateProvider.translations(bg.code, translate.marked(bg.data));
      $translateProvider.translations(de.code, translate.marked(de.data));
      $translateProvider.translations(el.code, translate.marked(el.data));
      $translateProvider.translations(en.code, translate.marked(en.data));
      //$translateProvider.translations(es.code, translate.marked(es.data));
      //$translateProvider.translations(et.code, translate.marked(et.data));
      $translateProvider.translations(fi.code, translate.marked(fi.data));
      $translateProvider.translations(fr.code, translate.marked(fr.data));
      //$translateProvider.translations(he.code, translate.marked(he.data));
      //$translateProvider.translations(hi.code, translate.marked(hi.data));
      $translateProvider.translations(hu.code, translate.marked(hu.data));
      $translateProvider.translations(id.code, translate.marked(id.data));
      $translateProvider.translations(it.code, translate.marked(it.data));
      $translateProvider.translations(ja.code, translate.marked(ja.data));
      //$translateProvider.translations(ko.code, translate.marked(ko.data));
      $translateProvider.translations(nl.code, translate.marked(nl.data));
      $translateProvider.translations(no.code, translate.marked(no.data));
      $translateProvider.translations(pl.code, translate.marked(pl.data));
      //$translateProvider.translations(pt.code, translate.marked(pt.data));
      //$translateProvider.translations(ptbr.code, translate.marked(ptbr.data));
      $translateProvider.translations(ru.code, translate.marked(ru.data));
      //$translateProvider.translations(sk.code, translate.marked(sk.data));
      //$translateProvider.translations(sl.code, translate.marked(sl.data));
      //$translateProvider.translations(sv.code, translate.marked(sv.data));
      $translateProvider.translations(tr.code, translate.marked(tr.data));
      //$translateProvider.translations(uk.code, translate.marked(uk.data));
      $translateProvider.translations(vi.code, translate.marked(vi.data));
      $translateProvider.translations(zh.code, translate.marked(zh.data));
      $translateProvider.preferredLanguage('en');
      $translateProvider.useSanitizeValueStrategy(null);
    };

    translate.marked = function (data) {
      var tData = data;
      for (var key in tData) if (tData.hasOwnProperty(key)) tData[key] = marked(tData[key]);
      return tData;
    };
    module.exports = translate;
  }, { "./de": 35, "./el": 36, "./en": 37, "./fi": 38, "./fr": 39, "./hu": 40, "./id": 41, "./it": 42, "./ja": 43, "./nl": 44, "./no": 45, "./pl": 46, "./ru": 47, "./tr": 48, "./vi": 50, "./zh": 51 }], 50: [function (require, module, exports) {
    // Vietnamese
    'use strict';

    var vi = function () {};
    vi.code = 'vi';
    vi.data = {

      /* Geth Error Messages */
      GETH_InvalidSender: 'Sai người nhận',
      GETH_Nonce: 'Nonce too low',
      GETH_Cheap: 'Gas quá thấp',
      GETH_Balance: 'Insufficient balance',
      GETH_NonExistentAccount: 'Tài khoản không tồn tại hoặc số dư quá thấp',
      GETH_InsufficientFunds: 'Insufficient funds for gas * price + value',
      GETH_IntrinsicGas: 'Intrinsic gas too low',
      GETH_GasLimit: 'Exceeds block gas limit',
      GETH_NegativeValue: 'Negative value',

      /* Navigation*/
      NAV_YourWallets: 'Ví Của Bạn',
      NAV_AddWallet: 'Thêm Ví',
      NAV_GenerateWallet: 'Tạo Ví',
      NAV_BulkGenerate: 'Tạo Nhiều Ví',
      NAV_SendEther: 'Gửi Ether',
      NAV_SendTokens: 'Gửi Token',
      NAV_Offline: 'Giao Dịch Offline',
      NAV_WithdrawDAO: 'Thu Hồi DAO Token',
      DAO_TitleLong: 'Thu Hồi DAO Token và Hoàn Trả ETH',
      NAV_ClaimDGD: 'Khiếu Nại Về DGD',
      DGD_TitleLong: 'Khiếu Nại DGD Token Của Bạn',
      NAV_DeployContract: 'Phát Triển Hợp Đồng',
      NAV_MyWallets: 'Ví Của Tôi',
      NAV_ViewWallet: 'Thông Tin Ví',
      NAV_Help: 'Trợ Giúp',
      NAV_Contact: 'Liên Hệ',

      /* General */
      x_Address: 'Địa Chỉ Của Bạn',
      x_AddessDesc: 'Bạn có thể xem đây là Địa chỉ ví cá nhân của bạn. Bạn có thể gửi "Địa chỉ ví" này đến người mà bạn muốn nhận ETH từ họ. Biểu tượng bên cạnh giúp việc nhận dạng "Địa chỉ ví" của bạn dễ dàng hơn.',
      x_CSV: 'Định Dạng CSV (Không mã hoá)',
      x_Cancel: 'Huỷ',
      x_Download: 'Tải Về Máy',
      x_Json: 'Định Dạng JSON (Không mã hoá)',
      x_JsonDesc: 'Định Dạng JSON là một tập tin chứa dữ liệu ví chưa được mã hoá của Private Key. Bạn có thể đăng nhập vào ví của bạn bằng việc sử dụng định dạng JSON mà không cần đến mật khẩu. Vì vậy, bất kỳ người nào sở hữu định dạng  JSON của bạn thì họ đều có khả năng đăng nhập vào ví của bạn mà không cần đến mật khẩu.',
      x_Keystore: 'Định Dạng Keystore/JSON (Đã mã hoá. Định Dạng này sử dụng cho Mist/Geth)',
      x_Keystore2: 'Định Dạng Keystore / JSON',
      x_KeystoreDesc: 'Định dạng Keystore/JSON là tập một tin chứa dữ liệu ví đã được mã hoá của Private Key và sử dụng cho Mist & Geth. Do đó bạn có thể dễ dàng bỏ nó vào bên trong Mist & Geth và tiếp tục sử dụng ví của bạn. Đây là một tập tin được đề xuất nhằm sao lưu dữ liệu ví cá nhân.',
      x_Password: 'Mật Khẩu',
      x_Print: 'Tạo Ví Giấy',
      x_PrintDesc: 'Mẹo: kích chuột trái vào nút "In Ví" sau đó chọn "Save this as a PDF" để lưu nó thành định dạng PDF trên máy tính của bạn nếu bạn không sở hửu máy in cá nhân!',
      x_PrintShort: 'In Ví',
      x_PrivKey: 'Private Key (Không mã hoá)',
      x_PrivKey2: 'Private Key',
      x_PrivKeyDesc: 'Đây là một đoạn dữ liệu có định dạng bằng văn bản không bị mã hoá và nó chính là private key của bạn. Nếu người nào sở hữu Private Key của bạn thì họ có thể truy cập vào ví của bạn mà không cần đến mật khẩu. Vì vậy, Chúng tôi khuyên bạn nên dùng phiên bản có định dạng đã được mã hoá.',
      x_Save: 'Lưu',
      x_TXT: 'Định Dạng TXT (Không mã Hoá)',
      x_Wallet: 'Ví',

      /* Header */
      MEW_Warning_1: 'Chú Ý! Kiểm tra cẩn thận URL trước khi bạn muốn đăng nhập vào ví hoặc tạo một ví mới. Cảnh giác cao đối với những trang web lừa đảo!',
      CX_Warning_1: 'Hãy chắc chắn rằng bạn đã thực hiện việc sao lưu dữ liệu cho những ví bạn đang sử dụng tại đây. Nhiều khả năng có thể xảy ra sẽ dẩn đến việc mất đi dữ liệu mà bạn lưu tại phần mở rộng của Chrome (bao gồm việc gỡ bỏ cài đặt và cài đặt lại các phần mở rộng). Phần mở rộng này là cách dễ dàng để truy cập vào ví của bạn, nhưng nó không phải là nơi để bạn sao lưu dữ liệu.',
      MEW_Tagline: 'Open Source JavaScript Client-Side Ether Wallet',
      CX_Tagline: 'Open Source JavaScript Client-Side Ether Wallet Chrome Extension',

      /* Footer */
      FOOTER_1: 'An open source, javascript, client-side tool for generating Ethereum Wallets &amp; sending transactions.',
      FOOTER_1b: 'Nhà Phát Triển:',
      FOOTER_2: 'Quyên Góp & Ủng Hộ Vào "Quỹ Phát Triển" Từ Bạn Là Một Hành Động Đáng Trân Trọng:',
      FOOTER_3: 'Client-side wallet generation by',
      FOOTER_4: 'Những Điều Cần Lưu Ý',

      /* Sidebar */
      sidebar_AccountInfo: 'Thông Tin Tài Khoản: ',
      sidebar_AccountAddr: 'Địa Chỉ Tài Khoản: ',
      sidebar_AccountBal: 'Số Dư Tài Khoản: ',
      sidebar_TokenBal: 'Số Dư Token: ',
      sidebar_Equiv: 'Giá Trị Tương Đương: ',
      sidebar_TransHistory: 'Lịch Sử Giao Dịch: ',
      sidebar_DGDBal: 'Thông Tin Crowdsale DGD:',
      sidebar_donation: 'MyEtherWallet là một ứng dụng miễn phí được xây dựng trên mã nguồn mở nhằm bảo vệ quyền riêng tư và sự bảo mật của người sử dụng. các khoản quyên góp mà chúng tôi nhận được sẽ giúp chúng tôi có cơ hội dành nhiều thơi gian hơn cho việc lắng nghe những phản hồi từ người sử dụng nhằm tạo ra những ứng dụng mới nhằm đáp ứng những mong muốn từ người sử dụng. Chúng tôi hiện tại là hai cá nhân đang cố gắng làm cho thế giới ngày một tốt hơn. Hãy cùng chung giúp chúng tôi',
      sidebar_donate: 'Quyên Góp',
      sidebar_thanks: 'Xin Chân Thành Cảm Ơn!!!',

      /* Decrypt Panel */
      decrypt_Access: 'Làm thế nào để truy cập vào ví của bạn?',
      decrypt_Title: 'Chọn Loại Định Dạng Private Key Thích Hợp:',
      decrypt_Select: 'Chọn ví:',

      /* Add Wallet */
      ADD_Label_1: 'Bạn đang cần làm gì?',
      ADD_Radio_1: 'Tạo Ví Mới',
      ADD_Radio_2: 'Chọn Tập Tin Ví Của Bạn (Keystore / JSON)',
      ADD_Radio_2_alt: 'Chọn Tập Tin Ví Của Bạn: ',
      ADD_Radio_2_short: 'CHỌN TẬP TIN VÍ...',
      ADD_Radio_3: 'Dán/Gõ Private Key Ví Của Bạn ',
      ADD_Radio_4: 'Thêm Tài Khoản Để Theo Dõi',
      ADD_Label_2: 'Tạo Tên Gọi:',
      ADD_Label_3: 'Ví của bạn sẽ được giải mã. Xin vui lòng điền mật khẩu: ',
      ADD_Label_4: 'Thêm Tài Khoản Để Theo Dõi',
      ADD_Warning_1: 'Bạn có thể thêm bất kỳ tài khoản nào bạn muốn theo dõi trên ví mà không cần đến Mật khẩu bảo mật. Việc này không có nghĩa là bạn đã truy cập vào bên trong ví. Do đó bạn sẽ không thực hiện được giao dịch tại chức năng này.',
      ADD_Label_5: 'Điền Địa Chỉ Ví: ',
      ADD_Label_6: 'Mở Khoá Cho Ví Của Bạn: ',
      ADD_Label_6_short: 'Mở Khoá',
      ADD_Label_7: 'Thêm Tài Khoản',

      /* Generate Wallets */
      GEN_desc: 'Nếu bạn muốn tạo nhiều ví cùng một lúc, bạn có thể thực hiện tại đây: ',
      GEN_Label_1: 'Tạo mật khẩu thật mạnh nhằm bảo mật tài khoản (ít nhất 9 ký tự)',
      GEN_Placeholder_1: 'Lưu nó lại một cách cẩn thận!',
      GEN_SuccessMsg: 'Ví của bạn đã được tạo thành công.',
      GEN_Warning: '**Bạn cần sử dụng tập tin chứa định dạng Keystore/JSON cùng với Mật khẩu hoặc Private Key của bạn** cho việc đăng nhập vào ví này trong tương lai. Hãy sao lưu và cất giữ nó cẩn thận tại kho lưu trữ của bạn! Không có cách nào để khôi phục Ví của bạn nếu bạn không sao lưu dữ liệu ví lại. Đọc Thêm [trang trợ giúp] (https://www.myetherwallet.com/#help) để được hướng dẫn cụ thể.',
      GEN_Label_2: 'Lưu lại tập tin chứa định dạng Keystore/JSON hoặc Private Key. Đừng quên mật khẩu mà bạn đã tạo phía trên.',
      GEN_Label_3: 'Địa Chỉ Ví (bạn cần lưu lại cho việc sử dụng).',
      GEN_Label_4: 'Bạn có thể in ví giấy hoặc lưu giữ mã QR một cách cẩn thận.',

      /* Bulk Generate Wallets */
      BULK_Label_1: 'Số Lượng Ví Cần Tạo',
      BULK_Label_2: 'Tạo Ví',
      BULK_SuccessMsg: 'Ví của bạn đã được tạo thành công.',

      /* Sending Ether and Tokens */
      SEND_addr: 'Địa Chỉ Đến: ',
      SEND_amount: 'Số Lượng Cần Gửi: ',
      SEND_amount_short: 'Số Lượng',
      SEND_custom: 'Tuỳ Chỉnh',
      SEND_gas: 'Gas',
      SEND_TransferTotal: 'Gửi Hết Số Dư Hiện Có',
      SEND_generate: 'Tạo Giao Dịch',
      SEND_raw: 'Định Dạng Giao Dịch',
      SEND_signed: 'Chữ Ký Giao Dich',
      SEND_trans: 'Gửi Đi',
      SENDModal_Title: 'Cảnh Báo! ',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: 'Bạn muốn gửi đi',
      SENDModal_Content_2: 'Địa chỉ đến',
      SENDModal_Content_3: 'Bạn đã chắc chắn muốn thực hiện giao dịch này',
      SENDModal_Content_4: 'Lưu Ý: Nếu bạn gặp lỗi, bạn cần phải thêm ether vào tài khoản của bạn để thanh toán chi phí gas của việc gửi Token. Gas được thanh toán bằng ether.',
      SENDModal_No: 'Không, Đưa tôi ra khỏi đây!',
      SENDModal_Yes: 'Có, Tôi chắc chắn! Hãy thực hiện giao dịch.',

      /* Tokens */
      TOKEN_Addr: 'Địa Chỉ: ',
      TOKEN_Symbol: 'Ký Hiệu Token: ',
      TOKEN_Dec: 'Phân Số Thập Phân: ',

      /* Send Transaction */
      TRANS_desc: 'Nếu bạn muốn gửi Token, xin vui lòng sử dụng danh mục "Gửi Token".',
      TRANS_warning: 'Nếu bạn sử dụng chức năng "Chỉ ETH" hoặc "Chỉ ETC" trong việc gửi đi thông qua một hợp đồng thông minh. Những dịch vụ có chức năng chấp nhận các giao dịch. Đọc Thêm.',
      TRANS_standard: 'ETH (Giao Dịch Phổ Thông)',
      TRANS_eth: 'Chỉ ETH',
      TRANS_etc: 'Chỉ ETC',
      TRANS_advanced: 'Nâng Cao: Thêm Dữ Liệu',
      TRANS_data: 'Dữ Liệu:',
      TRANS_gas: 'Gas:',
      TRANS_sendInfo: 'Mỗi Giao dịch Phổ Thông sử dụng hết 21000 gas có giá tương đương 0.000441 ETH. Chúng tôi áp dụng giá Gas dành cho một giao dịch cao hơn so với mức tối thiểu là 0.000000021 ETH nhằm đảm bảo một giao dịch được diễn ra nhanh. Chúng tôi hoàn toàn không nhận được khoản tiền phát sinh nào từ phí giao dịch.',

      /* Send Transaction Modals */
      TRANSModal_Title: 'Giao Dịch "Chỉ ETH" Và "Chỉ ETC"',
      TRANSModal_Content_0: 'Một số lưu ý về sự khác biệt của từng loại giao dịch và sự khác biệt của từng dịch vụ:',
      TRANSModal_Content_1: '**ETH (Giao Dịch Phổ Thông): ** Phương pháp này mặc định rằng nó sẽ tạo giao dịch từ một địa chỉ gửi đến địa chỉ nhận khác và nó sẽ tiêu thụ hết 21000 gas. Theo giả thuyết thì bất kì số ETH gửi đi thông qua phương pháp này sẽ được thực hiện lại tương tự trên chuổi ETC.',
      TRANSModal_Content_2: '**Chỉ ETH: ** Phương pháp này sẽ thực hiện giao dịch thông qua [Hợp đồng thông minh nhằm "tránh việc phát lại" được phát triển bởi Timon Rapp (theo lời cảnh báo của VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) vì vậy giao dịch này chỉ được thực hiện trên chuổi **ETH**.',
      TRANSModal_Content_3: '**Chỉ ETC: ** Phương pháp này sẽ thực hiện giao dịch thông qua [Hợp đồng thông minh nhằm "tránh việc phát lại" được phát triển bởi Timon Rapp (theo lời cảnh báo của VB)](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/) vì vậy giao dịch này chỉ được thực hiện trên chuổi **ETC**. ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** Giao Dịch chỉ được thực hiện thông qua giao dịch phổ thông. Nếu bạn thực hiện thông qua hợp đồng "Chỉ", thì bạn cần phải liên hệ trực tiếp với nhân viên hỗ trợ của họ để họ tự thêm vào hoặc hoàn lại tiền cho bạn. [bạn cũng có thể thử với công cụ "chia tách" của Shapeshift.](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken & Poloniex:** không có sự cố nào xảy ra khi thực hiện giao dịch.',
      TRANSModal_Yes: 'Tuyệt vời, Tôi dã hiểu.',
      TRANSModal_No: 'Tôi gặp gặp phải một vài vấn đề khó hiểu.Làm ơn giúp tôi hiểu rõ hơn.',

      /* Offline Transaction */
      OFFLINE_Title: 'Tạo và Gửi đối với giao dịch offline',
      OFFLINE_Desc: 'Tạo một giao dịch Offline sẽ được thực hiện với 3 bước. bạn sẽ hoàn thành bước 1 và 3 trên cùng 1 máy tính đang trong tình trạng online và thực hiện bước 2 trên một máy tính đang trong tình trạng offline/airgapped. Việc này sẽ đảm bảo Private Key của bạn không có bất cứ một liên kết nào với một thiết bị đang kết nối internet nào khác.',
      OFFLLINE_Step1_Title: 'Bước 1: Tạo Thông Tin (Máy tính đang Online)',
      OFFLINE_Step1_Button: 'Tạo Thông Tin',
      OFFLINE_Step1_Label_1: 'Địa Chỉ Gửi: ',
      OFFLINE_Step1_Label_2: 'Lưu ý: Đây phải là tài khoản gửi, không phải tài khoản đến. Nonce sẽ được tạo ra từ tài khoản có nguồn gốc. Nếu sử dụng máy tính có tình trạng airgapped, thì nó sẽ trở thành địa chỉ của tài khoản lưu trữ lạnh.',
      OFFLINE_Step2_Title: 'Bước 2: Tạo Giao Dịch (Máy Tính Đang Offline)',
      OFFLINE_Step2_Label_1: 'Địa Chỉ Đến: ',
      OFFLINE_Step2_Label_2: 'Đơn vị / Tổng số gửi:',
      OFFLINE_Step2_Label_3: 'Giá Gas',
      OFFLINE_Step2_Label_3b: 'Điều này đã được hiển thị ở bước 1 trên máy tính trực tuyến của bạn.',
      OFFLINE_Step2_Label_4: 'Giới hạn Gas',
      OFFLINE_Step2_Label_4b: '21000 măc định sẽ là số gas giới hạn. khi bạn gửi đi một hợp đồng hoặc thêm dữ liệu, việc này sẽ cần phải làm khác đi. Lượng Gas không được sử dụng sẽ hoàn trả cho bạn.',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: 'Điều này đã được hiển thị ở bước 1 trên máy tính trực tuyến của bạn.',
      OFFLINE_Step2_Label_6: 'Dữ Liệu',
      OFFLINE_Step2_Label_6b: 'Đây là phần tùy chọn. Dữ liệu thường được sử dụng khi bạn gửi các giao dịch hợp đồng.',
      OFFLINE_Step2_Label_7: 'Nhập / Chọn  Private Key / JSON của bạn.',
      OFFLINE_Step3_Title: 'Bước 3: Gửi / Làm rõ Giao Dịch (Máy tính đang Online)',
      OFFLINE_Step3_Label_1: 'Dán chữ ký Giao Dịch được tạo từ Bước 2 vào đây và chọn nút "Thực hiện Giao Dịch".',

      /* DAO */
      DAO_bal1: 'Tại Block 1,919,999',
      DAO_bal2: 'Hiện Tại',
      DAO_TitleETH: 'Thu Hồi DAO Và Hoàn Trả ETH',
      DAO_TitleETC: 'Thu Hồi DAO Và Hoàn Trả ETC',
      DAO_ETC_Label_1: 'Địa chỉ mà bạn muốn số lượng ETC của bạn được gửi đến?',
      DAO_ETC_Label_2: 'Nhóm Whitehat đã làm việc cật lực để đòi lại số ETC và mang về cho bạn. Bạn có thể nói lời cảm ơn đến họ bằng cách quyên góp một phần tỷ lệ % từ khoảng hoàn lại của bạn. ',
      DAO_Desc: 'Sử dụng phần này cho việc thu hồi DAO Token và hoàn trả lại **ETH & ETC**. Nếu bạn muốn gửi DAO Token, xin vui lòng sử dụng mục "gửi Token".',
      DAO_Inst: 'Đúng rồi, Bạn chỉ cần chọn vào nút lớn màu đỏ.',
      DAO_Warning: 'Nếu bạn nhận được một thông báo lỗi "số dư tài khoản không đủ cho Gas", thì bạn cần có mộ lượng nhỏ ether trong tài khoản được dùng để thanh toán chi phí gas. Bạn hãy thêm vào 0.001 ether vào tài khoản và thực hiện lại. ',
      DAOModal_Title: 'Đảm bảo rằng...',
      DAOModal_1: 'Bạn Muốn thực hiện việc "Thu Hồi"',
      DAOModal_2: 'Số Dao Token đến',
      DAOModal_3: 'Hoàn Lại', // "in return for"

      /* Digix */
      DGD_Desc: 'Khiếu nại về DigixDAO(DGD) Token & Danh Hiệu. Để thực hiện việc khiếu nại, bạn phải tham gia vào buổi bán token vào ngày 30 và 31 tháng 3 năm 2016. Nếu bạn muốn gửi DGD, xin vui lòng sử dụng Mục "Gửi Token".',
      DGD_Label_1: 'Phí Giao Dịch Ước Tínhn:',
      DGD_Label_2: 'Cung Cấp Phí Tối Đa:',
      DGD_Label_3: 'Giá Gas:',
      DGD_Generate: 'Tạo Khiếu Nại',
      DGD_Content: 'Bạn Muốn Khiếu Nại về DGD Token?',

      /* Deploy Contracts */
      DEP_generate: 'Tạo Bytecode',
      DEP_generated: 'Bytecode Đã Được Tạo',
      DEP_signtx: 'Chữ Ký Giao Dịch',
      DEP_interface: 'Đã Tạo Giao Diện',

      /* My Wallet */
      MYWAL_Nick: 'Tên Gọi Của Ví',
      MYWAL_Address: 'Địa Chỉ Ví',
      MYWAL_Bal: 'Số Dư',
      MYWAL_Edit: 'Chỉnh Sửa',
      MYWAL_View: 'Xem',
      MYWAL_Remove: 'Gỡ Bỏ',
      MYWAL_RemoveWal: 'Gỡ Bỏ Ví:',
      MYWAL_WatchOnly: 'Tài khoản theo dõi của bạn',
      MYWAL_Viewing: 'Xem Ví: ',
      MYWAL_Hide: 'Ẩn Thông Tin Ví',
      MYWAL_Edit_2: 'Chỉnh Sửa Ví: ',
      MYWAL_Name: 'Tên Ví',
      MYWAL_Content_1: 'Cảnh Báo! Bạn Muốn gỡ bỏ Ví của bạn: ',
      MYWAL_Content_2: 'Hãy chắc chắn bạn đã **Lưu giữ Private Key hoặc Tập Tin chứa định dạng Keystore và mật khẩu** Trước khi bạn gỡ bỏ nó.',
      MYWAL_Content_3: 'Nếu bạn muốn sử dụng địa chỉ Ví này với MyEtherWallet CX trong tương lai, bạn sẽ cần phải tự thêm vào lại bằng cách sử dụng tập tin Private Key / JSON và mật khẩu.',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: 'Việc này cho phép bạn tải về các phiên bản khác nhau của Private Key và in lại ví giấy của bạn. Bạn có thể muốn làm điều này để [nhập tài khoản của bạn vào Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/). Nếu bạn muốn kiểm tra số dư của bạn, chúng tôi khuyên bạn sử dụng một blockchain explorer như [etherscan.io] (http://etherscan.io/).',
      VIEWWALLET_Subtitle_Short: 'Việc này cho phép bạn tải về các phiên bản khác nhau của Private Key và in lại ví giấy của bạn. ',
      VIEWWALLET_SuccessMsg: 'Đã Thành Công! Đây là thông tin chi tiết về Ví của bạn.',

      /* Chrome Extension */
      CX_error_1: 'Bạn không có bất kỳ ví nào được lưu lại. Chọn Nút ["Thêm Ví"](/cx-wallet.html#add-wallet) để thêm ví!',
      CX_quicksend: 'Gửi Nhanh', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: 'Vui lòng nhập số dư hợp lệ.',
      ERROR_2: 'Mật khẩu của bạn phải có ít nhất 9 ký tự. Hãy đảm bảo rằng nó là một mật khẩu mạnh. ',
      ERROR_3: 'Lấy làm tiếc! Chúng tôi không nhận ra loại Định Dạng từ tập tin ví. ',
      ERROR_4: 'Đây không phải là một tập tin ví hợp lệ. ',
      ERROR_5: 'Đơn vị này không tồn tại, xin vui lòng sử dụng một trong những đơn vị sau đây ',
      ERROR_6: 'Địa chỉ không hợp lệ. ',
      ERROR_7: 'Mật khẩu không hợp lệ. ',
      ERROR_8: 'Tổng số không hợp lệ. ',
      ERROR_9: 'Giới hạn gas không hợp lệ. ',
      ERROR_10: 'Dữ liệu không hợp lệ. ',
      ERROR_11: 'Tổng số gas không hợp lệ. ',
      ERROR_12: 'Nonce không hợp lệ. ',
      ERROR_13: 'Chữ ký giao dịch không hợp lệ. ',
      ERROR_14: 'Tên gọi này đã được sữ dụng. ',
      ERROR_15: 'Không tìm thấy Ví. ',
      ERROR_16: 'It doesnt look like a proposal with this ID exists yet or there is an error reading this proposal. ',
      ERROR_17: 'Đã có một ví với địa chỉ này đang tồn tại trong mục lưu trữ. Vui lòng kiểm tra trang ví của bạn. ',
      ERROR_18: 'Bạn cần có ít nhất 0.001 ether trong tài khoản để thanh toán chi phí gas. Hãy thêm một số ether và thực hiện lại. ',
      ERROR_19: 'Toàn bộ gas sẽ được sử dụng trong giao dịch này. Việc làm này có nghĩa là bạn đã bỏ phiếu cho đề xuất này hoặc kỳ hạn của cuộc tranh luận đã kết thúc.',
      ERROR_20: 'Biểu tượng không hợp lệ',
      SUCCESS_1: 'Địa Chỉ Hợp Lệ',
      SUCCESS_2: 'Ví đã được giải mã thành công',
      SUCCESS_3: 'Giao dịch đã gửi đi, TX ID:',
      SUCCESS_4: 'Ví của bạn đã được thêm thành công:',
      SUCCESS_5: 'Bạn đã bỏ phiếu thành công. Cảm ơn vì đã tham gia tích cực trong The DAO.',
      SUCCESS_6: 'Tập Tin Được Chọn: ',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: 'Chân Thành Cảm Ơn: ',
      TranslatorName_1: '[Phạm Thế Vũ](https://www.facebook.com/pham.vu.56211) · ',
      TranslatorAddr_1: 'https://www.facebook.com/pham.vu.56211',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: '[và Ethereum Vietnam](https://www.ethereumvn.com)',
      TranslatorAddr_2: 'https://www.facebook.com/ethereumvietnam https://www.ethereumvn.com',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'Nêu bạn khởi tạo tài khoản hoặc tải xuống tệp ví trước ngày 31 tháng 12 năm 2015, xin vui lòng kiểm tra dữ liệu ví và tải xuống phiên bản mới nhất của tệp. Bấm vào đây để biết thêm chi tiết.',
      HELP_Desc: 'Mọi thắc mắc và góp ý, xin vui lòng liên hệ với chúng tôi. [Liên Hệ](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Lưu ý:',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, và một số thư viện JavaScript vẫn đang được thử nghiệm.** Mặc dù chúng tôi đã chạy thử nghiệm nhiều lần và đã có hàng trăm ngàn tài khoản được đăng ký và sử dụng thành côngd trên khắp thế giới, khả năng sự cố xảy ra ngoài ý muốn là không thể tránh khỏi. Không nên đầu tư nhiều hơn số tiền bạn có thể mất, và thận trọng khi sử dụng . Trong trường hợp sự cố xảy ra , chúng tôi rất lấy làm tiếc sorry  nhưng * * Chúng tôi không chịu trách nhiệm về Ether thất lạc',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX không phải là "web wallet". Vì vậy thôn0 tin tài khoản và Ether của bạn không do chúng tôi nắm giữi. Mọi dữ liệu đều nằm trong máy tính cá nhân hay trình duyệt web của bạn. Chúng tôi chỉ cung cấp công cụ nhằm giúp đỡ người sử dụng lưu trữ và, truy cập thông tin của bạn và giao dịch trên hệ thống blockchain.',
      HELP_Remind_Desc_3: 'Nếu bạn không lưu trữ private key và mật khẩu, sẽ không có cách nào phục hồi và truy cập được dữ liệu ví. Lưu trữ các thông tin quan trọng qua nhiều cách và địa điểm khác nhau là cách tốt nhất để bảo vệ tài sản của bạn.',

      HELP_0_Title: '0) Tôi là người mới sử dụng; tôi nên bắt đầu từ đâu?',
      HELP_0_Desc_1: 'MyEtherWallet cung cấp công cụ cho bạn khả năng thiết lập ví và lưu trữ Ether chứ không phải sàn giao dịch. Mọi quá trình do bạn thực hiện đều diễn ra trên máy tính cá nhân của bạn chứ không tại bất kì server nào. Vì vậy, khi thiết lập ví cá nhân, **bạn là người có trách nhiệm hoàn toàn đối với bảo mật và an toàn của chính bản thân**.',
      HELP_0_Desc_2: 'Tạo ví mới.',
      HELP_0_Desc_3: 'Sao lưu ví như thế nào?.',
      HELP_0_Desc_4: 'Kiểm tra đăng nhập và sao lưu đúng cách các thông tin quan trọng.',
      HELP_0_Desc_5: 'Gửi Ether tới một ví mới.',

      HELP_1_Title: '1) Tạo ví mới bằng cách nào? ',
      HELP_1_Desc_1: 'Truy cập mục "Tạo Ví Mới".',
      HELP_1_Desc_2: 'Chọn "Thêm Ví" và bấm "Tạo Ví"',
      HELP_1_Desc_3: 'Nhập mật khẩu một cách thận trọng, nếu mật khẩu quá dài và khó nhớ, hãy sao lưu lại! Bạn sẽ cần mật khẩu này để thực hiện các giao dịch sau này.',
      HELP_1_Desc_4: 'Bám "Tạo Ví',
      HELP_1_Desc_5: 'Ví mới của bạn đã được khởi tạo!',

      HELP_2a_Title: '2a) Sao lưu thông tin ví như thế nào?',
      HELP_2a_Desc_1: 'Bạn luôn luôn nên sao lưu các dữ liệu quan trọng tại nhiều nơi không chỉ máy tính cá nhân của bạn nằm tránh thất lạc thông tin khi may tính không sử dụng được - ví dụ như USB hoặc in ra.',
      HELP_2a_Desc_2: 'Sao lưu địa chỉs. Địa chỉ này có thể được chia sẽ với người khác trong trường hợ cần thực hiện giao dịch.',
      HELP_2a_Desc_3: 'Sao lưu private key. Private Key này tuyệt đống không chia sẽ với người khác. Private key của bạn có thể được sử dụng nhằm truy cập ví và thực hiện các giao dịch mà không cần mật khẩu! Có 3 loại private keys:',
      HELP_2a_Desc_4: 'Sao lưu địa chỉ ví, private key, và bản PDF của ví giấy taị nơi an toàn ví dụ như ổ cứng hoặc USB.',
      HELP_2a_Desc_5: 'Nên in ví ra giấy hoặc viết các thông tin quan trọng lên giấy.',
      HELP_2a_Desc_6: 'Sao lưu nhiều cách khác nhau nhằm đảm bảo an toàn bảo mật và dữ liệu trong ví của bạn trong những trường hợp ổ cứng bị hư hại, hoặc thất lạc USB, ví giấy.',

      HELP_2b_Title: '2b) Bằng cách nào có thể lưu trữ dữ liệu local và offline trên MyEtherWallet?',
      HELP_2b_Desc_1: 'Tuy cập github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Bấm "download zip" ở góc trên bên phải.',
      HELP_2b_Desc_3: 'Tải tệp zip về máy.',
      HELP_2b_Desc_4: 'Giải nén và truy cập file `index.html`.',
      HELP_2b_Desc_5: 'Tạo ví như hướng dẫn.',
      HELP_2b_Desc_6: 'Sao lưu địa chỉ và private key.Sao lưu mật khẩu nếu khó nhớ.',
      HELP_2b_Desc_7: 'Sử dụng nhiều cách khác nhau để sao lưu (USB, Ổ cứng, in ra giấy.',
      HELP_2b_Desc_8: 'Đăng nhập để kiểm tra thông tin sao lưu là chính xác. Chú ý xác nhận địa chỉ lưu xuống và địa chỉ sau khi đăng nhậ cóp trùng khớ. ',

      HELP_3_Title: '3) Bằng cách nào để xác nhận mình có khả năng truy cập vào ví mới khởi tạo?',
      HELP_3_Desc_1: '**Trước khi thực hiện bất cứ giao dịch nào**, xin vui lòng kiểm tra và xác nhận khả năng truy cập.',
      HELP_3_Desc_2: 'Truy cập mục "Xem Ví".',
      HELP_3_Desc_3: 'Chọn mục "Xem thông tin ví".',
      HELP_3_Desc_4: 'Chọn  tệp ví tải xuống hoặc nhập private key để đăng nhập.',
      HELP_3_Desc_5: 'Nếu tệp ví của bạn đã đươc mã hóa, nhập mật khẩu để tiếp tục đăng nhập.',
      HELP_3_Desc_6: 'Bấm "Mở Khóa".',
      HELP_3_Desc_7: 'Sau khi thông tin ví được hiển thị, xác nhận địa chỉ ví cạnh hình tròn có nhiều màu sắc.Hình này tượng trưng cho địa chỉ ví của bạn.Dối chiếu thật kỹ địa chỉ hiển thị và địa chỉ bạn sao lưu.',
      HELP_3_Desc_8: 'Nếu bạn có ý định di chuyển một số lượng lớn Ether, chúng tôi khuyến khích thử nghiệm trước với 0.001 ether nhằm xác nhận mọi thao tác và truy cập ví nơi đến là chính xác.',

      HELP_4_Title: '4) Bằng cách nào để gửi Ether từ một ví tới một ví khác?',
      HELP_4_Desc_1: 'Nếu bạn có ý định di chuyển một số lượng lớn Ether, chúng tôi khuyến khích thử nghiệm trước với 0.001 ether nhằm xác nhận mọi thao tác và truy cập ví nơi đến là chính xác.',
      HELP_4_Desc_2: 'Truy cập mục "Gửi Ether".',
      HELP_4_Desc_3: 'Chọn  tệp ví tải xuống hoặc nhập private key để đăng nhập',
      HELP_4_Desc_4: 'Nếu tệp ví của bạn đã đươc mã hóa, nhập mật khẩu để tiếp tục đăng nhập.',
      HELP_4_Desc_5: 'Bấm "Mở Khóa"',
      HELP_4_Desc_6: 'Nhập địa chỉ nơi nhận tại mục "Địa Chỉ Đến:".',
      HELP_4_Desc_7: 'Nhập số lượng muốn gửi. Bạn cũng có thể chọn "Gửi Hết Số Dư Hiện Có" nếu muốn gửi toàn bộ số Ether trong tài khoản.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Nhập địa chỉ nơi nhận tại mục "Địa Chỉ Đến:".',
      HELP_4CX_Desc_7: 'Nhập số lượng muốn gửi. Bạn cũng có thể chọn "Gửi Hết Số Dư Hiện Có" nếu muốn gửi toàn bộ số Ether trong tài khoản.',
      HELP_4CX_Desc_8: 'Bấm "Gửi Đi". ',
      HELP_4CX_Desc_9: 'Kiểm tra và xác nhận địa chỉ nhận.',
      HELP_4CX_Desc_10: 'Nhập mật khẩu ví.',
      HELP_4CX_Desc_11: 'Xác nhận giao dịch',
      HELP_4CX_Desc_12: '',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generatea a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension relase: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and reply attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your account and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own account? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions',
      HELP_Contact_Title: 'Ways to Get in Touch'
    };

    module.exports = vi;
  }, {}], 51: [function (require, module, exports) {
    // Chinese
    'use strict';

    var zh = function () {};
    zh.code = 'zh';
    zh.data = {

      /* Navigation*/
      NAV_YourWallets: '你的钱包',
      NAV_AddWallet: '添加钱包',
      NAV_GenerateWallet: '生成钱包',
      NAV_BulkGenerate: '批量生成',
      NAV_SendEther: '发送以太币',
      NAV_SendTokens: '发送代币',
      NAV_Offline: '离线发送',
      NAV_WithdrawDAO: 'DAO提取DAO',
      DAO_TitleLong: '兑换DAO代币为ETH',
      NAV_ClaimDGD: '领取DGD代币',
      DGD_TitleLong: '领取你的DGD代币',
      NAV_DeployContract: '部署合约',
      NAV_MyWallets: '我的钱包',
      NAV_ViewWallet: '查看钱包信息',
      NAV_Help: '帮助',
      NAV_Contact: '联系我们',

      /* General */
      x_Address: '你的地址',
      x_AddessDesc: '你可以把地址理解为你的“账户”或者“公钥”。你将地址告诉别人，他们就可以向你发送以太币。那个图标有助于判别你的地址。',
      x_Cancel: '拒绝',
      x_CSV: 'CSV文件（未加密）',
      x_Download: '下载',
      x_Json: 'JSON文件（未加密）',
      x_JsonDesc: '这是你的未加密JSON格式的私钥文件。 这意味着你发送交易时不需要密码，也意味着拿到你的JSON文件的可以无需密码就可以控制你的钱包和以太币。',
      x_Keystore: 'Keystore/JSON File (Recommended · Encrypted · Mist/Geth Format)Keystore/JSON文件（推荐加密的Mist/Geth格式文件）',
      x_Keystore2: 'Keystore/JSON文件',
      x_KeystoreDesc: '这个Keystore/JSON文件和Mist、Geth使用的钱包文件是一样的，所以将来你可以非常容易地导入。 It is the recommended file to download and back up.推荐下载和备份这个文件。',
      x_Password: '密码',
      x_Print: '打印纸钱包',
      x_PrintDesc: '小技巧：点击打印，并保存为PDF格式，即使你没有打印机。',
      x_PrintShort: '打印',
      x_PrivKey: '私钥（未加密）',
      x_PrivKey2: '私钥',
      x_PrivKeyDesc: '这是未加密的文本格式私钥文件，这意味发送交易不需要密码。 如果某个人拿到了你的未加密的私钥，他们无需密码就能够控制你的钱包。 出于这个考虑，我们推荐你使用加密的私钥文件。',
      x_Save: '保存',
      x_TXT: 'TXT文件（未加密）',
      x_Wallet: '钱包',

      /* Header */
      MEW_Warning_1: '使用或者创建新钱包之前，一定要检查下网址是否正确。小心钓鱼网址！',
      CX_Warning_1: '确保你备份了保存在这里的所有钱包。 许多事情包括卸载和重装扩展，都将使你丢失Chrome扩展中的数据。这个扩展是一种使用钱包的简单方式，但不是备份钱包的方式。',
      MEW_Tagline: '开源JavaScript客户端以太币钱包',
      CX_Tagline: '开源JavaScript客户端以太币钱包Chrome扩展',

      /* Footer */
      FOOTER_1: '一个开源的生成以太坊钱包和发送交易的JavaScript客户端工具',
      FOOTER_1b: '创建者',
      FOOTER_2: '欢迎捐赠我们：',
      FOOTER_3: 'Client-side wallet generation by',
      FOOTER_4: '声明',

      /* Sidebar */
      sidebar_AccountInfo: '账户信息： ',
      sidebar_AccountAddr: '账户地址：',
      sidebar_AccountBal: '账户余额： ',
      sidebar_TokenBal: '代币余额：',
      sidebar_Equiv: '价值： ',
      sidebar_TransHistory: '交易历史： ',
      sidebar_DGDBal: 'DGD代币众筹信息：',
      sidebar_donation: 'MyEtherWallet是保护你的隐私和安全的免费、开源服务。 我们收到的捐赠越多，我们开发新特性、听取你的反馈的时间就越多。我们只是两个尝试改变世界的两个开发者。您能帮助我们吗？',
      sidebar_donate: '捐赠',
      sidebar_thanks: '感谢你！！！',

      /* Decrypt Panel */
      decrypt_Access: '你将怎样使用钱包？',
      decrypt_Title: '选择你的私钥文件格式：',
      decrypt_Select: '选择一个钱包：',

      /* Add Wallet */
      ADD_Label_1: '你想执行什么操作？',
      ADD_Radio_1: '生成新钱包',
      ADD_Radio_2: '选择你的钱包文件（Keystore/JSON）',
      ADD_Radio_2_alt: '选择你的钱包文件：',
      ADD_Radio_2_short: '选择钱包文件...',
      ADD_Radio_3: '粘贴/输入你的私钥 ',
      ADD_Radio_4: '添加一个查看账户',
      ADD_Label_2: '生成一个钱包昵称：',
      ADD_Label_3: '你的钱包被加密，请输入密码：',
      ADD_Label_4: '添加一个查看账户',
      ADD_Warning_1: '你可以钱包标签页面添加任何要查看的账户，不需要上传私钥。这不意味着你可以使用钱包和发送以太币。',
      ADD_Label_5: '输入地址：',
      ADD_Label_6: '解锁钱包',
      ADD_Label_6_short: '解锁',
      ADD_Label_7: '增加账户',

      /* Generate Wallets */
      GEN_desc: '如果你想生成多个钱包，你可以在这里进行：',
      GEN_Label_1: '输入一个强密码（至少9位）',
      GEN_Placeholder_1: '不要忘记保存！',
      GEN_SuccessMsg: '成功！你的钱包已经生成。',
      GEN_Warning: '将来使用钱包时，你需要Keystore/JSON文件或者私钥。 请做好保存和备份。 如果你没有保存，没有办法恢复钱包。 请阅读[帮助页面](https://www.myetherwallet.com/#help)，获得更多信息。',
      GEN_Label_2: '保存你的Keystore/JSON或者私钥。不要忘记你的密码。',
      GEN_Label_3: '保存你的地址。',
      GEN_Label_4: '打印你的纸钱包，或者存储二维码。（可选）',

      /* Bulk Generate Wallets */
      BULK_Label_1: '打算生成的钱包数量',
      BULK_Label_2: '生成钱包',
      BULK_SuccessMsg: '成功！你的钱包生成好了。',

      /* Sending Ether and Tokens */
      SEND_addr: '发送至地址：',
      SEND_amount: '转账数额：',
      SEND_amount_short: '数额',
      SEND_custom: 'Custom',
      SEND_gas: 'Gas',
      SEND_TransferTotal: '发送所有余额',
      SEND_generate: '生成交易',
      SEND_raw: '未生效交易',
      SEND_signed: '签名交易',
      SEND_trans: '发送交易',
      SENDModal_Title: '警告！',
      /* full sentence reads "You are about to send "10 ETH" to address "0x1234". Are you sure you want to do this? " */
      SENDModal_Content_1: '你将发送',
      SENDModal_Content_2: '到地址',
      SENDModal_Content_3: '你确定这样做吗？',
      SENDModal_Content_4: '注意：如果你遇到错误，你最有可能向你的账户添加以太币，用以支付发送代币所需的gas。 Gas is paid in ether.Gas用以太币支付。',
      SENDModal_No: '不，离开这里。',
      SENDModal_Yes: '是的，我确定！发送交易。',

      /* Tokens */
      TOKEN_Addr: '地址：',
      TOKEN_Symbol: '代币符号：',
      TOKEN_Dec: '小数点位数：',

      /* Send Transaction */
      TRANS_desc: '如果你想发送代币，请使用“发送代币”页面。',
      TRANS_warning: '如果你使用“只发送ETH”或则“只发送ETC”功能，那么你是通过合约发送交易。 一些服务（例如交易所充值）接收这些交易时会遇到问题。阅读更多内容。',
      TRANS_standard: '发送ETH（标准交易）',
      TRANS_eth: '只发送ETH',
      TRANS_etc: '只发送ETC',
      TRANS_advanced: '高级功能：增加更多Gas或者数据',
      TRANS_data: '数据：',
      TRANS_gas: 'Gas：',
      TRANS_sendInfo: '一笔标准交易需要21000gas，花费0.000441以太币。我们将gas价格设为0.000000021以太币，略高于最低价格，以保证交易被快速打包。我们不收取交易费用。',

      /* Send Transaction Modals */
      TRANSModal_Title: '“只发送ETH”和“只发送ETC”交易',
      TRANSModal_Content_0: '注意不同的交易和不同的服务：',
      TRANSModal_Content_1: '**发送ETH（标准交易）：** 这将生成一个默认交易，直接从一个地址发送到另一个地址。它的默认gas是21000。 用这种方式发送ETH可能会在ETC链上重放。',
      TRANSModal_Content_2: '**只发送：ETH：** 这是通过[Timon Rapp的重放保护合约（VB推荐）](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/)， 所以你只会在ETH链上发送交易。',
      TRANSModal_Content_3: '**只发送：ETC：** 这是通过[Timon Rapp的重放保护合约（VB推荐）](https://blog.ethereum.org/2016/07/26/onward_from_the_hard_fork/)， 所以你只会在ETH链上发送交易。 ',
      TRANSModal_Content_4: '**Coinbase & ShapeShift: ** 通过标准交易只发送ETH或者ETC。如果你通过“只发送ETH或者ETC”合约发送交易，你需要联系他们的客服，让他们手动增加你的余额或者返币给你。 [你也可以尝试Shapeshift的”分割“工具。](https://split.shapeshift.io/)',
      TRANSModal_Content_5: '**Kraken、Poloniex交易所：**向这两个交易所地址发送没币有遇到问题。可以使用。',
      TRANSModal_Yes: '我理解了。',
      TRANSModal_No: '我更加糊涂了，请帮助我。',

      /* Offline Transaction */
      OFFLINE_Title: '生成、发送离线交易',
      OFFLINE_Desc: '生成离线交易需要3个步骤。步骤1和步骤3在连网的电脑上完成，步骤2在离线电脑上完成。这确保了你的私钥不会接触到联网设备。',
      OFFLLINE_Step1_Title: '步骤1：生成信息（联网电脑）',
      OFFLINE_Step1_Button: '生成信息',
      OFFLINE_Step1_Label_1: '发自地址：',
      OFFLINE_Step1_Label_2: '注意：这是发自地址，不是发往地址。 Nonce是从起始账户生成的。如果使用一台隔离电脑，它就是冷存储的账户地址。',
      OFFLINE_Step2_Title: '步骤2：生成交易（离线电脑）',
      OFFLINE_Step2_Label_1: '发往地址：',
      OFFLINE_Step2_Label_2: '发送数额',
      OFFLINE_Step2_Label_3: 'Gas价格',
      OFFLINE_Step2_Label_3b: '在你的连网电脑的第1步骤中显示了。',
      OFFLINE_Step2_Label_4: 'Gas限制',
      OFFLINE_Step2_Label_4b: '21000是默认的gas限制。当你发送合约或者添加数据时，gas限制可能会不同。没使用的gas将返回给你。',
      OFFLINE_Step2_Label_5: 'Nonce',
      OFFLINE_Step2_Label_5b: '在你的连网电脑的第1步中显示了。',
      OFFLINE_Step2_Label_6: '数据',
      OFFLINE_Step2_Label_6b: '这是可选项。当你向合约发送交易时，往往需要用到数据。',
      OFFLINE_Step2_Label_7: '输入/选择你的私钥文件/JSON',
      OFFLINE_Step3_Title: '步骤3：发送/公开交易（连网电脑）',
      OFFLINE_Step3_Label_1: '将步骤2的签名交易粘贴到这里，点击“发送交易”按钮。',

      /* DAO */
      DAO_bal1: '在第1919999个区块',
      DAO_bal2: '当前',
      DAO_TitleETH: '销毁DAO代币，取回ETH',
      DAO_TitleETC: '销毁DAO代币，取回ETC',
      DAO_ETC_Label_1: '你想把ETC发送到哪个地址？',
      DAO_ETC_Label_2: '白帽黑客为取回你的ETC不知疲倦地工作。 你可以将一定比例的ETC捐赠给白帽黑客，以表感谢之意。 ',
      DAO_Desc: '使用这个标签销毁DAO代币，换回ETH和ETC。如果你想发送DAO，请使用发送代币标签。',
      DAO_Inst: '是的。只需按红色按钮。非常简单。',
      DAO_Warning: '如果你遇到了“余额不足以支付gas"的错误，你的账户中必须有少量以太币，以支付gas费用。向这个账户发送0.001以太币，再次尝试。',
      DAOModal_Title: '确保...',
      // full sentence is "You are about to withdraw 100 DAO tokens to address 0x12344 for 1 ETH.
      DAOModal_1: '你将要销毁',
      DAOModal_2: 'DAO代币',
      DAOModal_3: '换回ETH，并发送到地址', // "in return for"

      /* Digix */
      DGD_Desc: '认领你的DigixDAO(DGD）代币和勋章。只有你参加了2016年3月30日和31日的代币预售，才可以认领DGD代币。 如果你想发送DGD，请使用发送代币标签。',
      DGD_Label_1: '预计所需交易费用：',
      DGD_Label_2: '最多交易费用',
      DGD_Label_3: 'Gas价格：',
      DGD_Generate: '生成认领',
      DGD_Content: '你将认领你的DGD代币。',

      /* Deploy Contracts */
      DEP_generate: '生成字节码',
      DEP_generated: '生成字节码',
      DEP_signtx: '签名交易',
      DEP_interface: '生成界面',

      /* My Wallet */
      MYWAL_Nick: '钱包昵称',
      MYWAL_Address: '钱包地址',
      MYWAL_Bal: '余额',
      MYWAL_Edit: '编辑',
      MYWAL_View: '查看',
      MYWAL_Remove: '移除',
      MYWAL_RemoveWal: '移除钱包：',
      MYWAL_WatchOnly: '你的只可查看账户',
      MYWAL_Viewing: '查看钱包：',
      MYWAL_Hide: '隐藏钱包信息',
      MYWAL_Edit_2: '编辑钱包：',
      MYWAL_Name: '钱包名字',
      MYWAL_Content_1: '警告！你将移除你的钱包：',
      MYWAL_Content_2: '确保在移除以前你已经保存了私钥和Keystore文件，并记住了密码。',
      MYWAL_Content_3: '如果你想将来在MyEtherWallet插件中使用该钱包，你需要手动添加私钥/JSON文件和密码。',

      /* View Wallet Details */
      VIEWWALLET_Subtitle: '这允许你下载不同格式的私钥和重新打印你的纸钱包。为了将[你的账户导入到Geth/Mist](http://ethereum.stackexchange.com/questions/465/how-to-import-a-plain-private-key-into-geth/)，你可能需要这个操作。如果你想查看你的余额，我们推荐使用区块浏览器，例如[etherscan.io](http://etherscan.io/)。',
      VIEWWALLET_Subtitle_Short: '这允许你下载不同格式的私钥和重新打印你的纸钱包。',
      VIEWWALLET_SuccessMsg: '成功！这是你的钱包细节！',

      /* Chrome Extension */
      CX_error_1: '你没有已保存的钱包。点击["添加钱包"](/cx-wallet.html#add-wallet)，添加一个钱包。',
      CX_quicksend: '快速发送', // if no appropriate translation, just use "Send"

      /* Error Messages */
      ERROR_1: '请输入有效数额。',
      ERROR_2: '你的密码至少需要设置为9位。请确保密码足够强。',
      ERROR_3: '抱歉！我们不能识别这种类型的钱包文件。 ',
      ERROR_4: '这不是一个有效的钱包文件。 ',
      ERROR_5: 'This unit doesn\'t exists, please use the one of the following units 这个单位不存在，请用下面给出的单位',
      ERROR_6: '无效地址。',
      ERROR_7: '无效密码。 ',
      ERROR_8: '无效数额。 ',
      ERROR_9: '无效gas上限。',
      ERROR_10: '无效数据值。',
      ERROR_11: '无效gas数额。 ',
      ERROR_12: '无效nonce。',
      ERROR_13: '无效签名交易。 ',
      ERROR_14: '已经有一个钱包使用该昵称。 ',
      ERROR_15: '找不到钱包。',
      ERROR_16: '看起来这个提议不存在或者读取这个提议时出现错误。',
      ERROR_17: '这个地址钱包已经存在于存储中。请查看你的钱包页面。',
      ERROR_18: '你的账户需要至少0.001以太币，已支付gas费用。请添加一些以太币，再次尝试。',
      ERROR_19: '所有的gas将用于这笔交易。 这意味着你已经对这个提议进行投票或者辩论期已经结束。',
      ERROR_20: '无效符号',
      SUCCESS_1: '有效地址',
      SUCCESS_2: '钱包解密成功',
      SUCCESS_3: '交易已提交。TX ID：',
      SUCCESS_4: '成功添加你的钱包：',
      SUCCESS_5: '你已经成功投票。感谢你积极参与The DAO。',
      SUCCESS_6: '选择的文件：',

      /* Geth Error Messages */
      GETH_InvalidSender: '无效发送者',
      GETH_Nonce: 'Nonce太低',
      GETH_Cheap: 'Gas价格太低，不被接受',
      GETH_Balance: '余额不足',
      GETH_NonExistentAccount: '账户不存在或者账户余额太低',
      GETH_InsufficientFunds: '余额不足，余额低于 gas * price + 发送数额',
      GETH_IntrinsicGas: '固有gas太低',
      GETH_GasLimit: '超过区块gas上限',
      GETH_NegativeValue: '负值',

      /* Tranlsation Info */
      translate_version: '0.3',
      Translator_Desc: '感谢中文译者：',
      TranslatorName_1: '[ Shaoping@ethfans.org （少平）]((https://www.myetherwallet.com/?gaslimit=21000&to=0x4dF5698B1B0195FC44Fe1D2d6037CE33F215c740&value=1.0#send-transaction))',
      TranslatorAddr_1: '0x4dF5698B1B0195FC44Fe1D2d6037CE33F215c740',
      /* Translator 1: Insert Comments Here */
      TranslatorName_2: ' ',
      TranslatorAddr_2: ' ',
      /* Translator 2: Insert Comments Here */
      TranslatorName_3: ' ',
      TranslatorAddr_3: ' ',
      /* Translator 3: Insert Comments Here */
      TranslatorName_4: ' ',
      TranslatorAddr_4: ' ',
      /* Translator 4: Insert Comments Here */
      TranslatorName_5: ' ',
      TranslatorAddr_5: ' ',
      /* Translator 5: Insert Comments Here */

      /* Help - Nothing after this point has to be translated. If you feel like being extra helpful, go for it. */
      HELP_Warning: 'If you created a wallet -or- downloaded the repo before **Dec. 31st, 2015**, please check your wallets &amp; download a new version of the repo. Click for details.',
      HELP_Desc: 'Do you see something missing? Have another question? [Get in touch with us](mailto:myetherwallet@gmail.com), and we will not only answer your question, we will update this page to be more useful to people in the future!',
      HELP_Remind_Title: 'Some reminders',
      HELP_Remind_Desc_1: '**Ethereum, MyEtherWallet.com & MyEtherWallet CX, and some of the underlying Javascript libraries we use are under active development.** While we have thoroughly tested & tens of thousands of wallets have been successfully created by people all over the globe, there is always the remote possibility that something unexpected happens that causes your ETH to be lost. Please do not invest more than you are willing to lose, and please be careful. If something were to happen, we are sorry, but **we are not responsible for the lost Ether**.',
      HELP_Remind_Desc_2: 'MyEtherWallet.com & MyEtherWallet CX are not "web wallets". You do not create an account or give us your Ether to hold onto. All data never leaves your computer/your browser. We make it easy for you to create, save, and access your information and interact with the blockchain.',
      HELP_Remind_Desc_3: 'If you do not save your private key & password, there is no way to recover access to your wallet or the funds it holds.  Back them up in multiple physical locations &ndash; not just on your computer!',

      HELP_0_Title: '0) I\'m new. What do I do?',
      HELP_0_Desc_1: 'MyEtherWallet gives you the ability to generate new wallets so you can store your Ether yourself, not on an exchange. This process happens entirely on your computer, not our servers. Therefore, when you generate a new wallet, **you are responsible for safely backing it up**.',
      HELP_0_Desc_2: 'Create a new wallet.',
      HELP_0_Desc_3: 'Back the wallet up.',
      HELP_0_Desc_4: 'Verify you have access to this new wallet and have correctly saved all necessary information.',
      HELP_0_Desc_5: 'Transfer Ether to this new wallet.',

      HELP_1_Title: '1) How do I create a new wallet? ',
      HELP_1_Desc_1: 'Go to the "Generate Wallet" page.',
      HELP_1_Desc_2: 'Go to the "Add Wallet" page & select "Generate New Wallet"',
      HELP_1_Desc_3: 'Enter a strong password. If you think you may forget it, save it somewhere safe. You will need this password to send transactions.',
      HELP_1_Desc_4: 'Click "GENERATE".',
      HELP_1_Desc_5: 'Your wallet has now been generated.',

      HELP_2a_Title: '2a) How do I save/backup my wallet?',
      HELP_2a_Desc_1: 'You should always back up your wallet externally and in multiple physical locations - like on a USB drive and/or a piece of paper.',
      HELP_2a_Desc_2: 'Save the address. You can keep it to yourself or share it with others. That way, others can transfer ether to you.',
      HELP_2a_Desc_3: 'Save versions of the private key. Do not share it with anyone else. Your private key is necessary when you want to access your Ether to send it! There are 3 types of private keys:',
      HELP_2a_Desc_4: 'Place your address, versions of the private key, and the PDF version of your paper wallet in a folder. Save this on your computer and a USB drive.',
      HELP_2a_Desc_5: 'Print the wallet if you have a printer. Otherwise, write down your private key and address on a piece of paper. Store this as a secure location, separate from your computer and the USB drive.',
      HELP_2a_Desc_6: 'Keep in mind, you must prevent loss of the keys and password due to loss or failure of you hard drive failure, or USB drive, or piece of paper. You also must keep in mind physical loss / damage of an entire area (think fire or flood).',

      HELP_2b_Title: '2b) How do I safely / offline / cold storage with MyEtherWallet?',
      HELP_2b_Desc_1: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_2b_Desc_2: 'Click download zip in the upper right.',
      HELP_2b_Desc_3: 'Move zip to an airgapped computer.',
      HELP_2b_Desc_4: 'Unzip it and double-click `index.html`.',
      HELP_2b_Desc_5: 'Generate a wallet with a strong password.',
      HELP_2b_Desc_6: 'Save the address. Save versions of the private key. Save the password if you might not remember it forever.',
      HELP_2b_Desc_7: 'Store these papers / USBs in multiple physically separate locations.',
      HELP_2b_Desc_8: 'Go to the "View Wallet Info" page and type in your private key / password to ensure they are correct and access your wallet. Check that the address you wrote down is the same.',

      HELP_3_Title: '3) How do I verify I have access to my new wallet?',
      HELP_3_Desc_1: '**Before you send any Ether to your new wallet**, you should ensure you have access to it.',
      HELP_3_Desc_2: 'Navigate to the "View Wallet Info" page.',
      HELP_3_Desc_3: 'Navigate to the MyEtherWallet.com "View Wallet Info" page.',
      HELP_3_Desc_4: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_3_Desc_5: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_3_Desc_6: 'Click the "Unlock Wallet" button.',
      HELP_3_Desc_7: 'Your wallet information should show up. Find your account address, next to a colorful, circular icon. This icon visually represents your address. Be certain that the address is the address you have saved to your text document and is on your paper wallet.',
      HELP_3_Desc_8: 'If you are planning on holding a large amount of ether, we recommend that send a small amount of ether from new wallet before depositing a large amount. Send 0.001 ether to your new wallet, access that wallet, send that 0.001 ether to another address, and ensure everything works smoothly.',

      HELP_4_Title: '4) How do I send Ether from one wallet to another?',
      HELP_4_Desc_1: 'If you plan to move a large amount of ether, you should test sending a small amount to your wallet first to ensure everything goes as planned.',
      HELP_4_Desc_2: 'Navigate to the "Send Ether" page.',
      HELP_4_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_4_Desc_4: 'If the wallet is encrypted, a text box will automatically appear. Enter the password.',
      HELP_4_Desc_5: 'Click the "Unlock Wallet" button.',
      HELP_4_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4_Desc_8: 'Note: Since the end of June 2016, you will need to make sure to split your ETH/ETC before sending ether like you normally would. See Question #6 below for more information.',
      HELP_4_Desc_9: 'Click "Generate Transaction".',
      HELP_4_Desc_10: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_4_Desc_11: 'Click the blue "Send Transaction" button below that.',
      HELP_4_Desc_12: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_4_Desc_13: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain. ',

      HELP_4CX_Title: '4) How do I send Ether using MyEtherWallet CX?',
      HELP_4CX_Desc_1: 'First, you need to add a wallet. Once you have done that, you have 2 options: the "QuickSend" functionality from the Chrome Extension icon or the "Send Ether" page.',
      HELP_4CX_Desc_2: 'QuickSend:',
      HELP_4CX_Desc_3: 'Click the Chrome Extension Icon.',
      HELP_4CX_Desc_4: 'Click the "QuickSend" button.',
      HELP_4CX_Desc_5: 'Select the wallet you wish to send from.',
      HELP_4CX_Desc_6: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_4CX_Desc_7: 'Enter the amount you would like to send. You can also click the "Send Entire Balance" link if you would like the transfer the entire balance.',
      HELP_4CX_Desc_8: 'Click "Send Transaction". ',
      HELP_4CX_Desc_9: 'Verify the address and the amount you are sending is correct.',
      HELP_4CX_Desc_10: 'Enter the password for that wallet.',
      HELP_4CX_Desc_11: 'Click "Send Transaction."',
      HELP_4CX_Desc_12: 'Using "Send Ether" Page: ',

      HELP_5_Title: '5) How do I run MyEtherWallet.com offline/locally? ',
      HELP_5_Desc_1: 'You can run MyEtherWallet.com on your computer instead of from the GitHub servers. You can generate a wallet completely offline and send transactions from the "Offline Transaction" page.',
      HELP_5_Desc_2: 'Go to our github: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages).',
      HELP_5_Desc_3: 'Click download zip in the upper right.',
      HELP_5_Desc_4: 'Move zip to an airgapped computer.',
      HELP_5_Desc_5: 'Unzip it.',
      HELP_5_Desc_6: 'Double-Click `index.html`.',
      HELP_5_Desc_7: 'MyEtherWallet.com is now running entirely on your computer.',
      HELP_5_Desc_8: 'In case you are not familiar, you need to keep the entire folder in order to run the website, not just `index.html`. Don\'t touch or move anything around in the folder. If you are storing a backup of the MyEtherWallet repo for the future, we recommend just storing the ZIP so you can be sure the folder contents stay intact.',
      HELP_5_Desc_9: 'As we are constantly updating MyEtherWallet.com, we recommend you periodically update your saved version of the repo.',

      HELP_5CX_Title: '5) How can I install this extension from the repo instead of the Chrome Store? ',
      HELP_5CX_Desc_1: 'Go to our github and find the most recent Chrome Extension release: [https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases](https://github.com/kvhnuke/etherwallet/tree/mercury/chrome-extension-releases).',
      HELP_5CX_Desc_2: 'Scroll to the very bottom and right click on the latest release. Click "save link as".',
      HELP_5CX_Desc_3: 'Go to Google Chrome and find you settings (in the menu in the upper right).',
      HELP_5CX_Desc_4: 'Click "Extensions" on the left.',
      HELP_5CX_Desc_5: 'Check the "Developer Mode" button at the top of that page.',
      HELP_5CX_Desc_6: 'Click the "Load unpacked extension..." button.',
      HELP_5CX_Desc_7: 'Navigate to the now-unzipped folder that you downloaded earlier. Click "select".',
      HELP_5CX_Desc_8: 'The extension should now show up in your extensions and in your Chrome Extension bar.',

      HELP_6_Title: '6) How do I split my ETH / ETC? ',
      HELP_6_Desc_1: 'When the hard fork happened, any ETH you had in your wallet now has an equal amount of ETC. If you send ETH using a standard transaction, it will also send ETC. To prevent this, you must "split" your original wallet into two wallets. Moving forward, you need to make sure only ETH goes to your ETH wallet and only ETC goes to your ETC wallet.',
      HELP_6_Desc_2: 'You can also send all your ETH & ETC using a standard transaction to Kraken or Poloniex. These exchanges will automatically split your ETH and ETC. You can then move those funds to new wallets, or sell your ETC or ETH.',
      HELP_6_Desc_3: '[Even more information about wallets and replay attacks can be found here](https://steemit.com/ethereum/@ktmgen/eli5-understanding-wallets-in-eth-and-etc-a-comment-from-reddit).',
      HELP_6_Desc_4: 'Generate a new clean post-fork ETH wallet for yourself (to be the final destination of pure ETH).',
      HELP_6_Desc_5: 'Generate a new clean post-fork ETC wallet for yourself (to be the final destination of pure ETC).',
      HELP_6_Desc_6: 'Back up these new wallets and verify you can access them. See #2a and #3 above.',
      HELP_6_Desc_7: 'Send 0.1234 ETH to your new "ETH" wallet using "Only ETH" option on the "Send Ether" page.',
      HELP_6_Desc_8: 'Send 0.5678 ETC to your new "ETC" wallet using "Only ETC" option on the "Send Ether" page.',
      HELP_6_Desc_9: 'Check that only the 0.1234 ETH moved on etherscan.io. Check that only the 0.5678 ETC moved on gastracker.io.',
      HELP_6_Desc_10: 'Send a 0.0001 ETH transaction from your new ETH wallet. Check etherscan.io. Make sure the 0.0001 ETH moved.',
      HELP_6_Desc_11: 'Generate (but do not send) a 0.0002 ETC transaction from your new ETC wallet. Copy the "Signed Transaction" field. ',
      HELP_6_Desc_12: 'Go to [classicetherwallet.com](http://classicetherwallet.com/#offline-transaction) and paste that ETC TX into classicetherwallet.com\'s offline tab at the very bottom and send. Check gastracker.io. Make sure the 0.0002 ETC moved.',
      HELP_6_Desc_13: 'If everything receives correctly and sends correctly then you are golden.',
      HELP_6_Desc_14: 'Send total remaining ETH balance using the "Only ETH" option and repeat for the ETC balance using "Only ETC".',
      HELP_6_Desc_15: 'Moving forward, you can use the standard transactions for these new wallets without risk of replay attacks. ',

      HELP_7_Title: '7) How do I send Tokens & add custom tokens?',
      HELP_7_Desc_0: '[Ethplorer.io](https://ethplorer.io/) is a great way to explore tokens and find the decimals of a token.',
      HELP_7_Desc_1: 'Navigate to the "Send Token" page.',
      HELP_7_Desc_2: 'Unlock your wallet.',
      HELP_7_Desc_3: 'Enter the address you would like to send to in the "To Address:" field.',
      HELP_7_Desc_4: 'Enter the amount you would like to send.',
      HELP_7_Desc_5: 'Select which token you would like to send.',
      HELP_7_Desc_6: 'If you do not see the token listed:',
      HELP_7_Desc_7: 'Click "Custom".',
      HELP_7_Desc_8: 'Enter the address, name, and decimals of the token. These are provided by the developers of the token and are also needed when you "Add a Watch Token" to Mist.',
      HELP_7_Desc_9: 'Click "Save".',
      HELP_7_Desc_10: 'You can now send that token as well as see it\'s balance in the sidebar.',
      HELP_7_Desc_11: 'Click "Generate Transaction".',
      HELP_7_Desc_12: 'A couple more fields will appear. This is your browser generating the transaction.',
      HELP_7_Desc_13: 'Click the blue "Send Transaction" button below that.',
      HELP_7_Desc_14: 'A pop-up will appear. Verify that the amount and the address you are sending to are correct. Then click "Yes, I am sure! Make transaction." button.',
      HELP_7_Desc_15: 'The transaction will be submitted. The TX ID will display. You can click that TX ID to see it on the blockchain.',

      HELP_8_Title: '8) What happens if your site goes down?',
      HELP_8_Desc_1: 'MyEtherWallet is not a web wallet. You don\'t have a login and nothing ever gets saved to our servers. It is simply an interface that allows you interact with the blockchain.',
      HELP_8_Desc_2: 'If MyEtherWallet.com goes down, you would have to find another way (like geth or Ethereum Wallet / Mist) to do what we are doing. But you wouldn\'t have to "get" your Ether out of MyEtherWallet because it\'s not in MyEtherWallet. It\'s in whatever wallet your generated via our site.',
      HELP_8_Desc_3: 'You can import your unencrypted private key and your Geth/Mist Format (encrypted) files directly into geth / Ethereum Wallet / Mist very easily now. See question #12 below.',
      HELP_8_Desc_4: 'In addition, the likelihood of us taking MyEtherWallet down is slim to none. It costs us almost nothing to maintain as we aren\'t storing any information. If we do take the domain down, it still is, and always will be, publicly available at [https://github.com/kvhnuke/etherwallet](https://github.com/kvhnuke/etherwallet/tree/gh-pages). You can download the ZIP there and run it locally. ',

      HELP_8CX_Title: '8) What happens if MyEtherWallet CX disappears?',
      HELP_8CX_Desc_1: 'First, all data is saved on your computer, not our servers. I know it can be confusing, but when you look at the Chrome Extension, you are NOT looking at stuff saved on our servers somewhere - it\'s all saved on your own computer.',
      HELP_8CX_Desc_2: 'That said, it is **very important** that you back up all your information for any new wallets generated with MyEtherWallet CX. That way if anything happens to MyEtherWallet CX or your computer, you still have all the information necessary to access your Ether. See the #2a for how to back up your wallets.',
      HELP_8CX_Desc_3: 'If for some reason MyEtherWallet CX disappears from the Chrome Store, you can find the source on Github and load it manually. See #5 above.',

      HELP_9_Title: '9) Is the "Send Ether" page offline?',
      HELP_9_Desc_1: ' No, the send transaction page is not offline. It needs the internet in order to get the current gas price, nonce of your account, and broadcast the transaction (aka "send"). However, it only sends the signed transaction. Your private key safely stays with you. We also now provide an "Offline Transaction" page so that you can ensure your private keys are on an offline/airgapped computer at all times.',

      HELP_10_Title: '10) How do I make an offline transaction?',
      HELP_10_Desc_1: 'Navigate to the "Offline Transaction" page via your online computer.',
      HELP_10_Desc_2: 'Enter the "From Address". Please note, this is the address you are sending FROM, not TO. This generates the nonce and gas price.',
      HELP_10_Desc_3: 'Move to your offline computer. Enter the "TO ADDRESS" and the "AMOUNT" you wish to send.',
      HELP_10_Desc_4: 'Enter the "GAS PRICE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_5: 'Enter the "NONCE" as it was displayed to you on your online computer in step #1.',
      HELP_10_Desc_6: 'The "GAS LIMIT" has a default value of 21000. This will cover a standard transaction. If you are sending to a contract or are including additional data with your transaction, you will need to increase the gas limit. Any excess gas will be returned to you.',
      HELP_10_Desc_7: 'If you wish, enter some data. If you enter data, you will need to include more than the 21000 default gas limit. All data is in HEX format.',
      HELP_10_Desc_8: 'Select your wallet file -or- your private key and unlock your wallet.',
      HELP_10_Desc_9: 'Press the "GENERATE SIGNED TRANSACTION" button.',
      HELP_10_Desc_10: 'The data field below this button will populate with your signed transaction. Copy this and move it back to your online computer. ',
      HELP_10_Desc_11: 'On your online computer, paste the signed transaction into the text field in step #3 and click "SEND Ether". This will broadcast your transaction.',

      HELP_11_Title: '11) How do I send to a contract?',
      HELP_11_Desc_1: 'Sending to a contract often requires you to include data or additional gas or both',
      HELP_11_Desc_2: 'Navigate to the "Send Ether" page. ',
      HELP_11_Desc_3: 'Select your wallet file -or- your private key and unlock your wallet. ',
      HELP_11_Desc_4: 'Enter a "To Address" and "Amount to Send"',
      HELP_11_Desc_5: 'Click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_12_Title: '12) How do I import a wallet created with MyEtherWallet into geth / Ethereum Wallet / Mist?',
      HELP_12_Desc_1: 'Using an Geth/Mist JSON file from MyEtherWallet v2+....',
      HELP_12_Desc_2: 'Go to the "View Wallet Info" page.',
      HELP_12_Desc_3: 'Unlock your wallet using your **encrypted** private key or JSON file. ',
      HELP_12_Desc_4: 'Go to the "My Wallets" page.',
      HELP_12_Desc_5: 'Select the wallet you want to import into Mist, click the "View" icon, enter your password, and access your wallet. ',
      HELP_12_Desc_6: 'Find the "Download JSON file - Geth/Mist Format (encrypted)" section. Press the "Download" button below that. You now have your keystore file.',
      HELP_12_Desc_7: 'Open the Ethereum Wallet application. ',
      HELP_12_Desc_8: 'In the menu bar, go "Accounts" -> "Backup" -> "Accounts"',
      HELP_12_Desc_9: 'This will open your keystore folder. Copy the file you just downloaded (`UTC--2016-04-14......../`) into that keystore folder.',
      HELP_12_Desc_10: 'Your account should show up immediately under "Accounts."',
      HELP_12_Desc_11: 'Using your unencrypted private key...',
      HELP_12_Desc_12: 'If you do not already have your unencrypted private key, navigate to the "View Wallet Details" page.',
      HELP_12_Desc_13: 'Select your wallet file -or- enter/paste your private key to unlock your wallet.',
      HELP_12_Desc_14: 'Copy Your Private Key (unencrypted).',
      HELP_12_Desc_15: 'If you are on a Mac:',
      HELP_12_Desc_15b: 'If you are on a PC:',
      HELP_12_Desc_16: 'Open Text Edit and paste this private key.',
      HELP_12_Desc_17: 'Go to the menu bar and click "Format" -> "Make Plain Text".',
      HELP_12_Desc_18: 'Save this file to your `desktop/` as `nothing_special_delete_me.txt`. Make sure it says "UTF-8" and "If no extension is provided use .txt" in the save dialog.',
      HELP_12_Desc_19: 'Open terminal and run the following command: `geth account import ~/Desktop/nothing_special_delete_me.txt`',
      HELP_12_Desc_20: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it. ',
      HELP_12_Desc_21: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_22: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts".',
      HELP_12_Desc_23: 'Open Notepad & paste the private key',
      HELP_12_Desc_24: 'Save the file as `nothing_special_delete_me.txt` at `C:`',
      HELP_12_Desc_25: 'Run the command, `geth account import C:\\nothing_special_delete_me.txt`',
      HELP_12_Desc_26: 'This will prompt you to make a new password. This is the password you will use in geth / Ethereum Wallet / Mist whenever you send a transaction, so don\'t forget it.',
      HELP_12_Desc_27: 'After successful import, delete `nothing_special_delete_me.txt`',
      HELP_12_Desc_28: 'The next time you open the Ethereum Wallet application, your account will be listed under "Accounts". ',

      HELP_13_Title: '13) What does "Gas Limit Too Low" Mean?',
      HELP_13_Desc_1: 'Most likely, this means you are attempting to send Ether to a contract. Sending to a contract requires a bit more data and therefore a bit more gas. On the "Send Ether" page, click the "+ Advanced: Add More Gas or Data" button below the amount field. This will display two additional fields that you can use to increase the gas above the default 21000, or add data to your transaction.',

      HELP_14_Title: '14) Some sites randomize (seed) the private key generation via mouse movements. MyEtherWallet.com doesn\'t do this. Is the random number generation for MyEtherWallet safe?',
      HELP_14_Desc_1: 'While the mouse moving thing is clever and we understand why people like it, the reality is window.crypto ensures more entropy than your mouse movements. The mouse movements aren\'t unsafe, it\'s just that we (and tons of other crypto experiments) believe in window.crypto. In addition, MyEtherWallet.com can be used on touch devices. Here\'s a [conversation between an angry redditor and Vitalik Buterin regarding mouse movements v. window.crypto](https://www.reddit.com/r/ethereum/comments/2bilqg/note_there_is_a_paranoid_highsecurity_way_to/cj5sgrm) and here is the [the window.crypto w3 spec](https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-GlobalCrypto).',

      HELP_15_Title: '15) Why hasn\'t the account I just created show up in the blockchain explorer? (ie: etherchain, etherscan)',
      HELP_15_Desc_1: 'Accounts will only show up in a blockchain explorer once the account has activity on it&mdash;for example, once you have transferred some Ether to it.',

      HELP_16_Title: '16) How do I check the balance of my account? ',
      HELP_16_Desc_1: 'You can use a blockchain explorer like [etherscan.io](http://etherscan.io/). Paste your address into the search bar and it will pull up your address and transaction history. For example, here\'s what our [donation account](http://etherscan.io/address/0x7cb57b5a97eabe94205c07890be4c1ad31e486a8) looks like on etherscan.io',

      HELP_17_Title: '17) Why isn\'t my balance showing up when I unlock my wallet? ',
      HELP_17_Desc_1: ' This is most likely due to the fact that you are behind a firewall. The API that we use to get the balance and convert said balance is often blocked by firewalls for whatever reason. You will still be able to send transactions, you just need to use a different method to see said balance, like etherscan.io',

      HELP_18_Title: '18) Where is my geth wallet file?',

      HELP_19_Title: '19) Where is my Mist wallet file? ',
      HELP_19_Desc_1: 'Mist files are typically found in the file locations above, but it\'s much easier to open Mist, select "Accounts" in the top bar, select "Backup", and select "Accounts". This will open the folder where your files are stored.',

      HELP_20_Title: '20) Where is my pre-sale wallet file?',
      HELP_20_Desc_1: 'Wherever you saved it. ;) It also was emailed to you, so check there. Look for the file called `"ethereum_wallet_backup.json"` and select that file. This wallet file will be encrypted with a password that you created during the purchase of the pre-sale.',

      HELP_21_Title: '21) Couldn\'t everybody put in random private keys, look for a balance, and send to their own address? ',
      HELP_21_Desc_1: 'Short version: yes, but finding an account with a balance would take longer than the universe...so...no.',
      HELP_21_Desc_2: 'Long ELI5 Version: So Ethereum is based on [Public Key Cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), specifically [Elliptic curve cryptography](https://eprint.iacr.org/2013/734.pdf) which is very widely used, not just in Ethereum. Most servers are protected via ECC. Bitcoin uses the same, as well as SSH and TLS and a lot of other stuff. The Ethereum keys specifically are 256-bit keys, which are stronger than 128-bit and 192-bit, which are also widely used and still considered secure by experts.',
      HELP_21_Desc_3: 'In this you have a private key and a public key. The private key can derive the public key, but the public key cannot be turned back into the private key. The fact that the internet and the world’s secrets are using this cryptography means that if there is a way to go from public key to private key, your lost ether is the least of everyone’s problems.',
      HELP_21_Desc_4: 'Now, that said, YES if someone else has your private key then they can indeed send ether from your account. Just like if someone has your password to your email, they can read and send your email, or the password to your bank account, they could make transfers. You could download the Keystore version of your private key which is the private key that is encrypted with a password. This is like having a password that is also protected by another password.',
      HELP_21_Desc_5: 'And YES, in theory you could just type in a string of 64 hexadecimal characters until you got one that matched. In fact, smart people could write a program to very quickly check random private keys. This is known as "brute-forcing" or "mining" private keys. People have thought about this long and hard. With a few very high end servers, they may be able to check 1M+ keys / second. However, even checking that many per second would not yield access to make the cost of running those servers even close to worthwhile - it is more likely you, and your great-grandchildren, will die before getting a match.',
      HELP_21_Desc_6: 'If you know anything about Bitcoin, [this will put it in perspective:](http://bitcoin.stackexchange.com/questions/32331/two-people-with-same-public-address-how-will-people-network-know-how-to-deliver) *To illustrate how unlikely this is: suppose every satoshi of every bitcoin ever to be generated was sent to its own unique private keys. The probability that among those keys there could be two that would correspond to the same address is roughly one in 100 quintillion.',
      HELP_21_Desc_7: '[If you want something a bit more technical:](http://security.stackexchange.com/questions/25375/why-not-use-larger-cipher-keys/25392#25392) *These numbers have nothing to do with the technology of the devices; they are the maximums that thermodynamics will allow. And they strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space.',
      HELP_21_Desc_8: 'Of course, this all assumes that keys are generated in a truly random way & with sufficient entropy. The keys generated here meet that criteria, as do Jaxx and Mist/geth. The Ethereum wallets are all pretty good. Keys generated by brainwallets do not, as a person\'s brain is not capable of creating a truly random seed. There have been a number of other issues regarding lack of entropy or seeds not being generated in a truly random way in Bitcoin-land, but that\'s a separate issue that can wait for another day.',

      HELP_SecCX_Title: 'Security - MyEtherWallet CX ',
      HELP_SecCX_Desc_1: 'Where is this extension saving my information?',
      HELP_SecCX_Desc_2: 'The information you store in this Chrome Extension is saved via [chrome.storage](http://chrome.storage/). - this is the same place your passwords are saved when you save your password in Chrome.',
      HELP_SecCX_Desc_3: 'What information is saved? ',
      HELP_SecCX_Desc_4: 'The address, nickname, private key is stored in chrome.storage. The private key is encrypted using the password you set when you added the wallet. The nickname and wallet address is not encrypted.',
      HELP_SecCX_Desc_5: 'Why aren\'t the nickname and wallet address encrypted? ',
      HELP_SecCX_Desc_6: 'If we were to encrypt these items, you would need to enter a password each time you wanted to view your account balance or view the nicknames. If this concerns you, we recommend you use MyEtherWallet.com instead of this Chrome Extension.',

      HELP_Sec_Title: 'Security安全',
      HELP_Sec_Desc_1: 'If one of your first questions is "Why should I trust these people?", that is a good thing. Hopefully the following will help ease your fears. ',
      HELP_Sec_Desc_2: 'We\'ve been up and running since August 2015. If you search for ["myetherwallet" on reddit](https://www.reddit.com/search?q=myetherwallet), you can see numerous people who use us with great success.',
      HELP_Sec_Desc_3: 'We aren\'t going to take your money or steal your private key(s). There is no malicious code on this site. In fact the "GENERATE WALLET" pages are completely client-side. That means that all the code is executed on ** your computer** and it is never saved and transmitted anywhere.',
      HELP_Sec_Desc_4: 'Check the URL -- This site is being served through GitHub and you can see the source code here: [https://github.com/kvhnuke/etherwallet/tree/gh-pages](https://github.com/kvhnuke/etherwallet/tree/gh-pages) to the domains: [http://kvhnuke.github.io/etherwallet/](http://kvhnuke.github.io/etherwallet) and [https://www.myetherwallet.com](https://www.myetherwallet.com). You can verify it\'s hosted at GitHub by using [viewdns.info/dnsrecord/?domain=myetherwallet.com](http://viewdns.info/dnsrecord/?domain=myetherwallet.com") - last two A record IPs are owned by GitHub for their custom domain hosting.',
      HELP_Sec_Desc_5: 'For generating wallets, you can download the [source code](https://github.com/kvhnuke/etherwallet/tree/gh-pages). See #5 above.',
      HELP_Sec_Desc_6: 'Do a test run and check and see what network activity is happening. The easiest way for you to do this is to right click on the page and click "inspect element". Go to the "Network" tab. Generate a test wallet. You will see there is no network activity. You may see something happening that looks like data:image/gif and data:image/png. Those are the QR codes being generated...on your computer...by your computer. No bytes were transferred.',
      HELP_Sec_Desc_7: 'Now, to be safe, move over to the "Resources" page. Here you can see all the different elements that make up a website. If you click through Local Storage, Cookies, and Cache, you will see nothing is being stored. Nothing is being saved. Refresh the page and you are back to square one.',
      HELP_Sec_Desc_8: 'If you do not feel comfortable using this tool, then by all means, do not use it. We created this tool as a helpful way for people to generate wallets and make transactions without needing to dive into command line or run a full node. Again, feel free to reach out if you have concerns and we will respond as quickly as possible. Thanks! ',

      HELP_FAQ_Title: 'More Helpful Answers to Frequent Questions 常见问题的更多有用回答',
      HELP_Contact_Title: 'Ways to Get in Touch 联系方式'
    };

    module.exports = zh;
  }, {}], 52: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var uiFuncs = function () {};
      uiFuncs.getTxData = function ($scope) {
        return {
          to: $scope.tx.to,
          value: $scope.tx.value,
          unit: $scope.tx.unit,
          gasLimit: $scope.tx.gasLimit,
          data: $scope.tx.data,
          from: $scope.wallet.getAddressString(),
          privKey: $scope.wallet.getPrivateKeyString()
        };
      };
      uiFuncs.isTxDataValid = function (txData) {
        if (txData.to != "0xCONTRACT" && !ethFuncs.validateEtherAddress(txData.to)) throw globalFuncs.errorMsgs[5];else if (!globalFuncs.isNumeric(txData.value) || parseFloat(txData.value) < 0) throw globalFuncs.errorMsgs[7];else if (!globalFuncs.isNumeric(txData.gasLimit) || parseFloat(txData.gasLimit) <= 0) throw globalFuncs.errorMsgs[8];else if (!ethFuncs.validateHexString(txData.data)) throw globalFuncs.errorMsgs[9];
        if (txData.to == "0xCONTRACT") txData.to = '';
      };
      uiFuncs.generateTx = function (txData, isClassic, callback) {
        try {
          uiFuncs.isTxDataValid(txData);
          ajaxReq.getTransactionData(txData.from, isClassic, function (data) {
            if (data.error) throw data.msg;
            data = data.data;
            var rawTx = {
              nonce: ethFuncs.sanitizeHex(data.nonce),
              gasPrice: ethFuncs.sanitizeHex(ethFuncs.addTinyMoreToGas(data.gasprice)),
              gasLimit: ethFuncs.sanitizeHex(ethFuncs.decimalToHex(txData.gasLimit)),
              to: ethFuncs.sanitizeHex(txData.to),
              value: ethFuncs.sanitizeHex(ethFuncs.decimalToHex(etherUnits.toWei(txData.value, txData.unit))),
              data: ethFuncs.sanitizeHex(txData.data)
            };
            var eTx = new ethUtil.Tx(rawTx);
            eTx.sign(new Buffer(txData.privKey, 'hex'));
            rawTx.rawTx = JSON.stringify(rawTx);
            rawTx.signedTx = '0x' + eTx.serialize().toString('hex');
            rawTx.isError = false;
            if (callback !== undefined) callback(rawTx);
          });
        } catch (e) {
          if (callback !== undefined) callback({
            isError: true,
            error: e
          });
        }
      };
      uiFuncs.sendTx = function (signedTx, isClassic, callback) {
        ajaxReq.sendRawTx(signedTx, isClassic, function (data) {
          var resp = {};
          if (data.error) {
            resp = {
              isError: true,
              error: globalFuncs.getGethMsg(data.msg)
            };
          } else {
            resp = {
              isError: false,
              data: data.data
            };
          }
          if (callback !== undefined) callback(resp);
        });
      };
      uiFuncs.transferAllBalance = function (fromAdd, gasLimit, isClassic, callback) {
        try {
          ajaxReq.getTransactionData(fromAdd, isClassic, function (data) {
            if (data.error) throw data.msg;
            data = data.data;
            var gasPrice = new BigNumber(ethFuncs.sanitizeHex(ethFuncs.addTinyMoreToGas(data.gasprice))).times(gasLimit);
            var maxVal = new BigNumber(data.balance).minus(gasPrice);
            maxVal = etherUnits.toEther(maxVal, 'wei') < 0 ? 0 : etherUnits.toEther(maxVal, 'wei');
            if (callback !== undefined) callback({
              isError: false,
              unit: "ether",
              value: maxVal
            });
          });
        } catch (e) {
          if (callback !== undefined) callback({
            isError: true,
            error: e
          });
        }
      };
      module.exports = uiFuncs;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 53: [function (require, module, exports) {
    'use strict';

    var validator = function () {};
    validator.isValidAddress = function (address) {
      return ethFuncs.validateEtherAddress(address);
    };
    validator.isPositiveNumber = function (value) {
      return globalFuncs.isNumeric(value) && parseFloat(value) >= 0;
    };
    validator.isValidHex = function (hex) {
      return ethFuncs.validateHexString(hex);
    };
    validator.isValidPrivKey = function (privkeyLen) {
      return privkeyLen == 64 || privkeyLen == 128 || privkeyLen == 132;
    };
    validator.isPasswordLenValid = function (pass, len) {
      if (pass === 'undefined' || pass == null) return false;
      return pass.length > len;
    };
    module.exports = validator;
  }, {}], 54: [function (require, module, exports) {
    /**
     * @license AngularJS v1.5.8
     * (c) 2010-2016 Google, Inc. http://angularjs.org
     * License: MIT
     */
    (function (window, angular) {
      'use strict';

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *     Any commits to this file should be reviewed with security in mind.  *
       *   Changes to this file can potentially create security vulnerabilities. *
       *          An approval from 2 Core members with history of modifying      *
       *                         this file is required.                          *
       *                                                                         *
       *  Does the change somehow allow for arbitrary javascript to be executed? *
       *    Or allows for someone to change the prototype of built-in objects?   *
       *     Or gives undesired access to variables likes document or window?    *
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      var $sanitizeMinErr = angular.$$minErr('$sanitize');
      var bind;
      var extend;
      var forEach;
      var isDefined;
      var lowercase;
      var noop;
      var htmlParser;
      var htmlSanitizeWriter;

      /**
       * @ngdoc module
       * @name ngSanitize
       * @description
       *
       * # ngSanitize
       *
       * The `ngSanitize` module provides functionality to sanitize HTML.
       *
       *
       * <div doc-module-components="ngSanitize"></div>
       *
       * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
       */

      /**
       * @ngdoc service
       * @name $sanitize
       * @kind function
       *
       * @description
       *   Sanitizes an html string by stripping all potentially dangerous tokens.
       *
       *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
       *   then serialized back to properly escaped html string. This means that no unsafe input can make
       *   it into the returned string.
       *
       *   The whitelist for URL sanitization of attribute values is configured using the functions
       *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
       *   `$compileProvider`}.
       *
       *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
       *
       * @param {string} html HTML input.
       * @returns {string} Sanitized HTML.
       *
       * @example
         <example module="sanitizeExample" deps="angular-sanitize.js">
         <file name="index.html">
           <script>
               angular.module('sanitizeExample', ['ngSanitize'])
                 .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
                   $scope.snippet =
                     '<p style="color:blue">an html\n' +
                     '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
                     'snippet</p>';
                   $scope.deliberatelyTrustDangerousSnippet = function() {
                     return $sce.trustAsHtml($scope.snippet);
                   };
                 }]);
           </script>
           <div ng-controller="ExampleController">
              Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
             <table>
               <tr>
                 <td>Directive</td>
                 <td>How</td>
                 <td>Source</td>
                 <td>Rendered</td>
               </tr>
               <tr id="bind-html-with-sanitize">
                 <td>ng-bind-html</td>
                 <td>Automatically uses $sanitize</td>
                 <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
                 <td><div ng-bind-html="snippet"></div></td>
               </tr>
               <tr id="bind-html-with-trust">
                 <td>ng-bind-html</td>
                 <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
                 <td>
                 <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
      &lt;/div&gt;</pre>
                 </td>
                 <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
               </tr>
               <tr id="bind-default">
                 <td>ng-bind</td>
                 <td>Automatically escapes</td>
                 <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
                 <td><div ng-bind="snippet"></div></td>
               </tr>
             </table>
             </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should sanitize the html snippet by default', function() {
             expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
               toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
           });
      
           it('should inline raw snippet if bound to a trusted value', function() {
             expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
               toBe("<p style=\"color:blue\">an html\n" +
                    "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
                    "snippet</p>");
           });
      
           it('should escape snippet without any filter', function() {
             expect(element(by.css('#bind-default div')).getInnerHtml()).
               toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
                    "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
                    "snippet&lt;/p&gt;");
           });
      
           it('should update', function() {
             element(by.model('snippet')).clear();
             element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
             expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
               toBe('new <b>text</b>');
             expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
               'new <b onclick="alert(1)">text</b>');
             expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
               "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
           });
         </file>
         </example>
       */

      /**
       * @ngdoc provider
       * @name $sanitizeProvider
       *
       * @description
       * Creates and configures {@link $sanitize} instance.
       */
      function $SanitizeProvider() {
        var svgEnabled = false;

        this.$get = ['$$sanitizeUri', function ($$sanitizeUri) {
          if (svgEnabled) {
            extend(validElements, svgElements);
          }
          return function (html) {
            var buf = [];
            htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
              return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
            }));
            return buf.join('');
          };
        }];

        /**
         * @ngdoc method
         * @name $sanitizeProvider#enableSvg
         * @kind function
         *
         * @description
         * Enables a subset of svg to be supported by the sanitizer.
         *
         * <div class="alert alert-warning">
         *   <p>By enabling this setting without taking other precautions, you might expose your
         *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
         *   outside of the containing element and be rendered over other elements on the page (e.g. a login
         *   link). Such behavior can then result in phishing incidents.</p>
         *
         *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
         *   tags within the sanitized content:</p>
         *
         *   <br>
         *
         *   <pre><code>
         *   .rootOfTheIncludedContent svg {
         *     overflow: hidden !important;
         *   }
         *   </code></pre>
         * </div>
         *
         * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
         * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
         *    without an argument or self for chaining otherwise.
         */
        this.enableSvg = function (enableSvg) {
          if (isDefined(enableSvg)) {
            svgEnabled = enableSvg;
            return this;
          } else {
            return svgEnabled;
          }
        };

        //////////////////////////////////////////////////////////////////////////////////////////////////
        // Private stuff
        //////////////////////////////////////////////////////////////////////////////////////////////////

        bind = angular.bind;
        extend = angular.extend;
        forEach = angular.forEach;
        isDefined = angular.isDefined;
        lowercase = angular.lowercase;
        noop = angular.noop;

        htmlParser = htmlParserImpl;
        htmlSanitizeWriter = htmlSanitizeWriterImpl;

        // Regular Expressions for parsing tags and attributes
        var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,

        // Match everything outside of normal chars and " (quote character)
        NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;

        // Good source of info about elements and attributes
        // http://dev.w3.org/html5/spec/Overview.html#semantics
        // http://simon.html5.org/html-elements

        // Safe Void Elements - HTML5
        // http://dev.w3.org/html5/spec/Overview.html#void-elements
        var voidElements = toMap("area,br,col,hr,img,wbr");

        // Elements that you can, intentionally, leave open (and which close themselves)
        // http://dev.w3.org/html5/spec/Overview.html#optional-tags
        var optionalEndTagBlockElements = toMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
            optionalEndTagInlineElements = toMap("rp,rt"),
            optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);

        // Safe Block Elements - HTML5
        var blockElements = extend({}, optionalEndTagBlockElements, toMap("address,article," + "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," + "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul"));

        // Inline Elements - HTML5
        var inlineElements = extend({}, optionalEndTagInlineElements, toMap("a,abbr,acronym,b," + "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," + "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));

        // SVG Elements
        // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
        // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
        // They can potentially allow for arbitrary javascript to be executed. See #11290
        var svgElements = toMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," + "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," + "radialGradient,rect,stop,svg,switch,text,title,tspan");

        // Blocked Elements (will be stripped)
        var blockedElements = toMap("script,style");

        var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);

        //Attributes that have href and hence need to be sanitized
        var uriAttrs = toMap("background,cite,href,longdesc,src,xlink:href");

        var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' + 'valign,value,vspace,width');

        // SVG attributes (without "id" and "name" attributes)
        // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
        var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' + 'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' + 'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' + 'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' + 'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' + 'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' + 'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' + 'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' + 'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' + 'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' + 'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' + 'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' + 'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' + 'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' + 'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

        var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);

        function toMap(str, lowercaseKeys) {
          var obj = {},
              items = str.split(','),
              i;
          for (i = 0; i < items.length; i++) {
            obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
          }
          return obj;
        }

        var inertBodyElement;
        (function (window) {
          var doc;
          if (window.document && window.document.implementation) {
            doc = window.document.implementation.createHTMLDocument("inert");
          } else {
            throw $sanitizeMinErr('noinert', "Can't create an inert html document");
          }
          var docElement = doc.documentElement || doc.getDocumentElement();
          var bodyElements = docElement.getElementsByTagName('body');

          // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one
          if (bodyElements.length === 1) {
            inertBodyElement = bodyElements[0];
          } else {
            var html = doc.createElement('html');
            inertBodyElement = doc.createElement('body');
            html.appendChild(inertBodyElement);
            doc.appendChild(html);
          }
        })(window);

        /**
         * @example
         * htmlParser(htmlString, {
         *     start: function(tag, attrs) {},
         *     end: function(tag) {},
         *     chars: function(text) {},
         *     comment: function(text) {}
         * });
         *
         * @param {string} html string
         * @param {object} handler
         */
        function htmlParserImpl(html, handler) {
          if (html === null || html === undefined) {
            html = '';
          } else if (typeof html !== 'string') {
            html = '' + html;
          }
          inertBodyElement.innerHTML = html;

          //mXSS protection
          var mXSSAttempts = 5;
          do {
            if (mXSSAttempts === 0) {
              throw $sanitizeMinErr('uinput', "Failed to sanitize html because the input is unstable");
            }
            mXSSAttempts--;

            // strip custom-namespaced attributes on IE<=11
            if (window.document.documentMode) {
              stripCustomNsAttrs(inertBodyElement);
            }
            html = inertBodyElement.innerHTML; //trigger mXSS
            inertBodyElement.innerHTML = html;
          } while (html !== inertBodyElement.innerHTML);

          var node = inertBodyElement.firstChild;
          while (node) {
            switch (node.nodeType) {
              case 1:
                // ELEMENT_NODE
                handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
                break;
              case 3:
                // TEXT NODE
                handler.chars(node.textContent);
                break;
            }

            var nextNode;
            if (!(nextNode = node.firstChild)) {
              if (node.nodeType == 1) {
                handler.end(node.nodeName.toLowerCase());
              }
              nextNode = node.nextSibling;
              if (!nextNode) {
                while (nextNode == null) {
                  node = node.parentNode;
                  if (node === inertBodyElement) break;
                  nextNode = node.nextSibling;
                  if (node.nodeType == 1) {
                    handler.end(node.nodeName.toLowerCase());
                  }
                }
              }
            }
            node = nextNode;
          }

          while (node = inertBodyElement.firstChild) {
            inertBodyElement.removeChild(node);
          }
        }

        function attrToMap(attrs) {
          var map = {};
          for (var i = 0, ii = attrs.length; i < ii; i++) {
            var attr = attrs[i];
            map[attr.name] = attr.value;
          }
          return map;
        }

        /**
         * Escapes all potentially dangerous characters, so that the
         * resulting string can be safely inserted into attribute or
         * element text.
         * @param value
         * @returns {string} escaped text
         */
        function encodeEntities(value) {
          return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (value) {
            var hi = value.charCodeAt(0);
            var low = value.charCodeAt(1);
            return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
          }).replace(NON_ALPHANUMERIC_REGEXP, function (value) {
            return '&#' + value.charCodeAt(0) + ';';
          }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
        }

        /**
         * create an HTML/XML writer which writes to buffer
         * @param {Array} buf use buf.join('') to get out sanitized html string
         * @returns {object} in the form of {
         *     start: function(tag, attrs) {},
         *     end: function(tag) {},
         *     chars: function(text) {},
         *     comment: function(text) {}
         * }
         */
        function htmlSanitizeWriterImpl(buf, uriValidator) {
          var ignoreCurrentElement = false;
          var out = bind(buf, buf.push);
          return {
            start: function (tag, attrs) {
              tag = lowercase(tag);
              if (!ignoreCurrentElement && blockedElements[tag]) {
                ignoreCurrentElement = tag;
              }
              if (!ignoreCurrentElement && validElements[tag] === true) {
                out('<');
                out(tag);
                forEach(attrs, function (value, key) {
                  var lkey = lowercase(key);
                  var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';
                  if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
                    out(' ');
                    out(key);
                    out('="');
                    out(encodeEntities(value));
                    out('"');
                  }
                });
                out('>');
              }
            },
            end: function (tag) {
              tag = lowercase(tag);
              if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
                out('</');
                out(tag);
                out('>');
              }
              if (tag == ignoreCurrentElement) {
                ignoreCurrentElement = false;
              }
            },
            chars: function (chars) {
              if (!ignoreCurrentElement) {
                out(encodeEntities(chars));
              }
            }
          };
        }

        /**
         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
         * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
         * to allow any of these custom attributes. This method strips them all.
         *
         * @param node Root element to process
         */
        function stripCustomNsAttrs(node) {
          if (node.nodeType === window.Node.ELEMENT_NODE) {
            var attrs = node.attributes;
            for (var i = 0, l = attrs.length; i < l; i++) {
              var attrNode = attrs[i];
              var attrName = attrNode.name.toLowerCase();
              if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
                node.removeAttributeNode(attrNode);
                i--;
                l--;
              }
            }
          }

          var nextNode = node.firstChild;
          if (nextNode) {
            stripCustomNsAttrs(nextNode);
          }

          nextNode = node.nextSibling;
          if (nextNode) {
            stripCustomNsAttrs(nextNode);
          }
        }
      }

      function sanitizeText(chars) {
        var buf = [];
        var writer = htmlSanitizeWriter(buf, noop);
        writer.chars(chars);
        return buf.join('');
      }

      // define ngSanitize module and register $sanitize service
      angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

      /**
       * @ngdoc filter
       * @name linky
       * @kind function
       *
       * @description
       * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
       * plain email address links.
       *
       * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
       *
       * @param {string} text Input text.
       * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
       * @param {object|function(url)} [attributes] Add custom attributes to the link element.
       *
       *    Can be one of:
       *
       *    - `object`: A map of attributes
       *    - `function`: Takes the url as a parameter and returns a map of attributes
       *
       *    If the map of attributes contains a value for `target`, it overrides the value of
       *    the target parameter.
       *
       *
       * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
       *
       * @usage
         <span ng-bind-html="linky_expression | linky"></span>
       *
       * @example
         <example module="linkyExample" deps="angular-sanitize.js">
           <file name="index.html">
             <div ng-controller="ExampleController">
             Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
             <table>
               <tr>
                 <th>Filter</th>
                 <th>Source</th>
                 <th>Rendered</th>
               </tr>
               <tr id="linky-filter">
                 <td>linky filter</td>
                 <td>
                   <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
                 </td>
                 <td>
                   <div ng-bind-html="snippet | linky"></div>
                 </td>
               </tr>
               <tr id="linky-target">
                <td>linky target</td>
                <td>
                  <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
                </td>
                <td>
                  <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
                </td>
               </tr>
               <tr id="linky-custom-attributes">
                <td>linky custom attributes</td>
                <td>
                  <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
                </td>
                <td>
                  <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
                </td>
               </tr>
               <tr id="escaped-html">
                 <td>no filter</td>
                 <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
                 <td><div ng-bind="snippet"></div></td>
               </tr>
             </table>
           </file>
           <file name="script.js">
             angular.module('linkyExample', ['ngSanitize'])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.snippet =
                   'Pretty text with some links:\n'+
                   'http://angularjs.org/,\n'+
                   'mailto:us@somewhere.org,\n'+
                   'another@somewhere.org,\n'+
                   'and one more: ftp://127.0.0.1/.';
                 $scope.snippetWithSingleURL = 'http://angularjs.org/';
               }]);
           </file>
           <file name="protractor.js" type="protractor">
             it('should linkify the snippet with urls', function() {
               expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
                   toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                        'another@somewhere.org, and one more: ftp://127.0.0.1/.');
               expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
             });
      
             it('should not linkify snippet without the linky filter', function() {
               expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
                   toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                        'another@somewhere.org, and one more: ftp://127.0.0.1/.');
               expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
             });
      
             it('should update', function() {
               element(by.model('snippet')).clear();
               element(by.model('snippet')).sendKeys('new http://link.');
               expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
                   toBe('new http://link.');
               expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
               expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
                   .toBe('new http://link.');
             });
      
             it('should work with the target property', function() {
              expect(element(by.id('linky-target')).
                  element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
                  toBe('http://angularjs.org/');
              expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
             });
      
             it('should optionally add custom attributes', function() {
              expect(element(by.id('linky-custom-attributes')).
                  element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
                  toBe('http://angularjs.org/');
              expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
             });
           </file>
         </example>
       */
      angular.module('ngSanitize').filter('linky', ['$sanitize', function ($sanitize) {
        var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
            MAILTO_REGEXP = /^mailto:/i;

        var linkyMinErr = angular.$$minErr('linky');
        var isDefined = angular.isDefined;
        var isFunction = angular.isFunction;
        var isObject = angular.isObject;
        var isString = angular.isString;

        return function (text, target, attributes) {
          if (text == null || text === '') return text;
          if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);

          var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
            return attributes;
          } : function getEmptyAttributesObject() {
            return {};
          };

          var match;
          var raw = text;
          var html = [];
          var url;
          var i;
          while (match = raw.match(LINKY_URL_REGEXP)) {
            // We can not end in these as they are sometimes found at the end of the sentence
            url = match[0];
            // if we did not match ftp/http/www/mailto then assume mailto
            if (!match[2] && !match[4]) {
              url = (match[3] ? 'http://' : 'mailto:') + url;
            }
            i = match.index;
            addText(raw.substr(0, i));
            addLink(url, match[0].replace(MAILTO_REGEXP, ''));
            raw = raw.substring(i + match[0].length);
          }
          addText(raw);
          return $sanitize(html.join(''));

          function addText(text) {
            if (!text) {
              return;
            }
            html.push(sanitizeText(text));
          }

          function addLink(url, text) {
            var key,
                linkAttributes = attributesFn(url);
            html.push('<a ');

            for (key in linkAttributes) {
              html.push(key + '="' + linkAttributes[key] + '" ');
            }

            if (isDefined(target) && !('target' in linkAttributes)) {
              html.push('target="', target, '" ');
            }
            html.push('href="', url.replace(/"/g, '&quot;'), '">');
            addText(text);
            html.push('</a>');
          }
        };
      }]);
    })(window, window.angular);
  }, {}], 55: [function (require, module, exports) {
    require('./angular-sanitize');
    module.exports = 'ngSanitize';
  }, { "./angular-sanitize": 54 }], 56: [function (require, module, exports) {
    /*!
     * angular-translate - v2.12.1 - 2016-09-15
     * 
     * Copyright (c) 2016 The angular-translate team, Pascal Precht; Licensed MIT
     */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module unless amdModuleId is set
        define([], function () {
          return factory();
        });
      } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
      } else {
        factory();
      }
    })(this, function () {

      $translateMissingTranslationHandlerLog.$inject = ['$log'];
      angular.module('pascalprecht.translate')

      /**
       * @ngdoc object
       * @name pascalprecht.translate.$translateMissingTranslationHandlerLog
       * @requires $log
       *
       * @description
       * Uses angular's `$log` service to give a warning when trying to translate a
       * translation id which doesn't exist.
       *
       * @returns {function} Handler function
       */
      .factory('$translateMissingTranslationHandlerLog', $translateMissingTranslationHandlerLog);

      function $translateMissingTranslationHandlerLog($log) {

        'use strict';

        return function (translationId) {
          $log.warn('Translation for ' + translationId + ' doesn\'t exist');
        };
      }

      $translateMissingTranslationHandlerLog.displayName = '$translateMissingTranslationHandlerLog';
      return 'pascalprecht.translate';
    });
  }, {}], 57: [function (require, module, exports) {
    /*!
     * angular-translate - v2.12.1 - 2016-09-15
     * 
     * Copyright (c) 2016 The angular-translate team, Pascal Precht; Licensed MIT
     */
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module unless amdModuleId is set
        define([], function () {
          return factory();
        });
      } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
      } else {
        factory();
      }
    })(this, function () {

      /**
       * @ngdoc overview
       * @name pascalprecht.translate
       *
       * @description
       * The main module which holds everything together.
       */
      runTranslate.$inject = ['$translate'];
      $translate.$inject = ['$STORAGE_KEY', '$windowProvider', '$translateSanitizationProvider', 'pascalprechtTranslateOverrider'];
      $translateDefaultInterpolation.$inject = ['$interpolate', '$translateSanitization'];
      translateDirective.$inject = ['$translate', '$interpolate', '$compile', '$parse', '$rootScope'];
      translateAttrDirective.$inject = ['$translate', '$rootScope'];
      translateCloakDirective.$inject = ['$translate', '$rootScope'];
      translateFilterFactory.$inject = ['$parse', '$translate'];
      $translationCache.$inject = ['$cacheFactory'];
      angular.module('pascalprecht.translate', ['ng']).run(runTranslate);

      function runTranslate($translate) {

        'use strict';

        var key = $translate.storageKey(),
            storage = $translate.storage();

        var fallbackFromIncorrectStorageValue = function () {
          var preferred = $translate.preferredLanguage();
          if (angular.isString(preferred)) {
            $translate.use(preferred);
            // $translate.use() will also remember the language.
            // So, we don't need to call storage.put() here.
          } else {
            storage.put(key, $translate.use());
          }
        };

        fallbackFromIncorrectStorageValue.displayName = 'fallbackFromIncorrectStorageValue';

        if (storage) {
          if (!storage.get(key)) {
            fallbackFromIncorrectStorageValue();
          } else {
            $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue);
          }
        } else if (angular.isString($translate.preferredLanguage())) {
          $translate.use($translate.preferredLanguage());
        }
      }

      runTranslate.displayName = 'runTranslate';

      /**
       * @ngdoc object
       * @name pascalprecht.translate.$translateSanitizationProvider
       *
       * @description
       *
       * Configurations for $translateSanitization
       */
      angular.module('pascalprecht.translate').provider('$translateSanitization', $translateSanitizationProvider);

      function $translateSanitizationProvider() {

        'use strict';

        var $sanitize,
            $sce,
            currentStrategy = null,
            // TODO change to either 'sanitize', 'escape' or ['sanitize', 'escapeParameters'] in 3.0.
        hasConfiguredStrategy = false,
            hasShownNoStrategyConfiguredWarning = false,
            strategies;

        /**
         * Definition of a sanitization strategy function
         * @callback StrategyFunction
         * @param {string|object} value - value to be sanitized (either a string or an interpolated value map)
         * @param {string} mode - either 'text' for a string (translation) or 'params' for the interpolated params
         * @return {string|object}
         */

        /**
         * @ngdoc property
         * @name strategies
         * @propertyOf pascalprecht.translate.$translateSanitizationProvider
         *
         * @description
         * Following strategies are built-in:
         * <dl>
         *   <dt>sanitize</dt>
         *   <dd>Sanitizes HTML in the translation text using $sanitize</dd>
         *   <dt>escape</dt>
         *   <dd>Escapes HTML in the translation</dd>
         *   <dt>sanitizeParameters</dt>
         *   <dd>Sanitizes HTML in the values of the interpolation parameters using $sanitize</dd>
         *   <dt>escapeParameters</dt>
         *   <dd>Escapes HTML in the values of the interpolation parameters</dd>
         *   <dt>escaped</dt>
         *   <dd>Support legacy strategy name 'escaped' for backwards compatibility (will be removed in 3.0)</dd>
         * </dl>
         *
         */

        strategies = {
          sanitize: function (value, mode /*, context*/) {
            if (mode === 'text') {
              value = htmlSanitizeValue(value);
            }
            return value;
          },
          escape: function (value, mode /*, context*/) {
            if (mode === 'text') {
              value = htmlEscapeValue(value);
            }
            return value;
          },
          sanitizeParameters: function (value, mode /*, context*/) {
            if (mode === 'params') {
              value = mapInterpolationParameters(value, htmlSanitizeValue);
            }
            return value;
          },
          escapeParameters: function (value, mode /*, context*/) {
            if (mode === 'params') {
              value = mapInterpolationParameters(value, htmlEscapeValue);
            }
            return value;
          },
          sce: function (value, mode, context) {
            if (mode === 'text') {
              value = htmlTrustValue(value);
            } else if (mode === 'params') {
              if (context !== 'filter') {
                // do html escape in filter context #1101
                value = mapInterpolationParameters(value, htmlEscapeValue);
              }
            }
            return value;
          },
          sceParameters: function (value, mode /*, context*/) {
            if (mode === 'params') {
              value = mapInterpolationParameters(value, htmlTrustValue);
            }
            return value;
          }
        };
        // Support legacy strategy name 'escaped' for backwards compatibility.
        // TODO should be removed in 3.0
        strategies.escaped = strategies.escapeParameters;

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateSanitizationProvider#addStrategy
         * @methodOf pascalprecht.translate.$translateSanitizationProvider
         *
         * @description
         * Adds a sanitization strategy to the list of known strategies.
         *
         * @param {string} strategyName - unique key for a strategy
         * @param {StrategyFunction} strategyFunction - strategy function
         * @returns {object} this
         */
        this.addStrategy = function (strategyName, strategyFunction) {
          strategies[strategyName] = strategyFunction;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateSanitizationProvider#removeStrategy
         * @methodOf pascalprecht.translate.$translateSanitizationProvider
         *
         * @description
         * Removes a sanitization strategy from the list of known strategies.
         *
         * @param {string} strategyName - unique key for a strategy
         * @returns {object} this
         */
        this.removeStrategy = function (strategyName) {
          delete strategies[strategyName];
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateSanitizationProvider#useStrategy
         * @methodOf pascalprecht.translate.$translateSanitizationProvider
         *
         * @description
         * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
         *
         * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
         * @returns {object} this
         */
        this.useStrategy = function (strategy) {
          hasConfiguredStrategy = true;
          currentStrategy = strategy;
          return this;
        };

        /**
         * @ngdoc object
         * @name pascalprecht.translate.$translateSanitization
         * @requires $injector
         * @requires $log
         *
         * @description
         * Sanitizes interpolation parameters and translated texts.
         *
         */
        this.$get = ['$injector', '$log', function ($injector, $log) {

          var cachedStrategyMap = {};

          var applyStrategies = function (value, mode, context, selectedStrategies) {
            angular.forEach(selectedStrategies, function (selectedStrategy) {
              if (angular.isFunction(selectedStrategy)) {
                value = selectedStrategy(value, mode, context);
              } else if (angular.isFunction(strategies[selectedStrategy])) {
                value = strategies[selectedStrategy](value, mode, context);
              } else if (angular.isString(strategies[selectedStrategy])) {
                if (!cachedStrategyMap[strategies[selectedStrategy]]) {
                  try {
                    cachedStrategyMap[strategies[selectedStrategy]] = $injector.get(strategies[selectedStrategy]);
                  } catch (e) {
                    cachedStrategyMap[strategies[selectedStrategy]] = function () {};
                    throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
                  }
                }
                value = cachedStrategyMap[strategies[selectedStrategy]](value, mode, context);
              } else {
                throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
              }
            });
            return value;
          };

          // TODO: should be removed in 3.0
          var showNoStrategyConfiguredWarning = function () {
            if (!hasConfiguredStrategy && !hasShownNoStrategyConfiguredWarning) {
              $log.warn('pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.');
              hasShownNoStrategyConfiguredWarning = true;
            }
          };

          if ($injector.has('$sanitize')) {
            $sanitize = $injector.get('$sanitize');
          }
          if ($injector.has('$sce')) {
            $sce = $injector.get('$sce');
          }

          return {
            /**
             * @ngdoc function
             * @name pascalprecht.translate.$translateSanitization#useStrategy
             * @methodOf pascalprecht.translate.$translateSanitization
             *
             * @description
             * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
             *
             * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
             */
            useStrategy: function (self) {
              return function (strategy) {
                self.useStrategy(strategy);
              };
            }(this),

            /**
             * @ngdoc function
             * @name pascalprecht.translate.$translateSanitization#sanitize
             * @methodOf pascalprecht.translate.$translateSanitization
             *
             * @description
             * Sanitizes a value.
             *
             * @param {string|object} value The value which should be sanitized.
             * @param {string} mode The current sanitization mode, either 'params' or 'text'.
             * @param {string|StrategyFunction|array} [strategy] Optional custom strategy which should be used instead of the currently selected strategy.
             * @param {string} [context] The context of this call: filter, service. Default is service
             * @returns {string|object} sanitized value
             */
            sanitize: function (value, mode, strategy, context) {
              if (!currentStrategy) {
                showNoStrategyConfiguredWarning();
              }

              if (!strategy && strategy !== null) {
                strategy = currentStrategy;
              }

              if (!strategy) {
                return value;
              }

              if (!context) {
                context = 'service';
              }

              var selectedStrategies = angular.isArray(strategy) ? strategy : [strategy];
              return applyStrategies(value, mode, context, selectedStrategies);
            }
          };
        }];

        var htmlEscapeValue = function (value) {
          var element = angular.element('<div></div>');
          element.text(value); // not chainable, see #1044
          return element.html();
        };

        var htmlSanitizeValue = function (value) {
          if (!$sanitize) {
            throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as \'escape\'.');
          }
          return $sanitize(value);
        };

        var htmlTrustValue = function (value) {
          if (!$sce) {
            throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sce service.');
          }
          return $sce.trustAsHtml(value);
        };

        var mapInterpolationParameters = function (value, iteratee, stack) {
          if (angular.isDate(value)) {
            return value;
          } else if (angular.isObject(value)) {
            var result = angular.isArray(value) ? [] : {};

            if (!stack) {
              stack = [];
            } else {
              if (stack.indexOf(value) > -1) {
                throw new Error('pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object');
              }
            }

            stack.push(value);
            angular.forEach(value, function (propertyValue, propertyKey) {

              /* Skipping function properties. */
              if (angular.isFunction(propertyValue)) {
                return;
              }

              result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee, stack);
            });
            stack.splice(-1, 1); // remove last

            return result;
          } else if (angular.isNumber(value)) {
            return value;
          } else {
            return iteratee(value);
          }
        };
      }

      /**
       * @ngdoc object
       * @name pascalprecht.translate.$translateProvider
       * @description
       *
       * $translateProvider allows developers to register translation-tables, asynchronous loaders
       * and similar to configure translation behavior directly inside of a module.
       *
       */
      angular.module('pascalprecht.translate').constant('pascalprechtTranslateOverrider', {}).provider('$translate', $translate);

      function $translate($STORAGE_KEY, $windowProvider, $translateSanitizationProvider, pascalprechtTranslateOverrider) {

        'use strict';

        var $translationTable = {},
            $preferredLanguage,
            $availableLanguageKeys = [],
            $languageKeyAliases,
            $fallbackLanguage,
            $fallbackWasString,
            $uses,
            $nextLang,
            $storageFactory,
            $storageKey = $STORAGE_KEY,
            $storagePrefix,
            $missingTranslationHandlerFactory,
            $interpolationFactory,
            $interpolatorFactories = [],
            $loaderFactory,
            $cloakClassName = 'translate-cloak',
            $loaderOptions,
            $notFoundIndicatorLeft,
            $notFoundIndicatorRight,
            $postCompilingEnabled = false,
            $forceAsyncReloadEnabled = false,
            $nestedObjectDelimeter = '.',
            $isReady = false,
            $keepContent = false,
            loaderCache,
            directivePriority = 0,
            statefulFilter = true,
            postProcessFn,
            uniformLanguageTagResolver = 'default',
            languageTagResolver = {
          'default': function (tag) {
            return (tag || '').split('-').join('_');
          },
          java: function (tag) {
            var temp = (tag || '').split('-').join('_');
            var parts = temp.split('_');
            return parts.length > 1 ? parts[0].toLowerCase() + '_' + parts[1].toUpperCase() : temp;
          },
          bcp47: function (tag) {
            var temp = (tag || '').split('_').join('-');
            var parts = temp.split('-');
            return parts.length > 1 ? parts[0].toLowerCase() + '-' + parts[1].toUpperCase() : temp;
          },
          'iso639-1': function (tag) {
            var temp = (tag || '').split('_').join('-');
            var parts = temp.split('-');
            return parts[0].toLowerCase();
          }
        };

        var version = '2.12.1';

        // tries to determine the browsers language
        var getFirstBrowserLanguage = function () {

          // internal purpose only
          if (angular.isFunction(pascalprechtTranslateOverrider.getLocale)) {
            return pascalprechtTranslateOverrider.getLocale();
          }

          var nav = $windowProvider.$get().navigator,
              browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
              i,
              language;

          // support for HTML 5.1 "navigator.languages"
          if (angular.isArray(nav.languages)) {
            for (i = 0; i < nav.languages.length; i++) {
              language = nav.languages[i];
              if (language && language.length) {
                return language;
              }
            }
          }

          // support for other well known properties in browsers
          for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
            language = nav[browserLanguagePropertyKeys[i]];
            if (language && language.length) {
              return language;
            }
          }

          return null;
        };
        getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage';

        // tries to determine the browsers locale
        var getLocale = function () {
          var locale = getFirstBrowserLanguage() || '';
          if (languageTagResolver[uniformLanguageTagResolver]) {
            locale = languageTagResolver[uniformLanguageTagResolver](locale);
          }
          return locale;
        };
        getLocale.displayName = 'angular-translate/service: getLocale';

        /**
         * @name indexOf
         * @private
         *
         * @description
         * indexOf polyfill. Kinda sorta.
         *
         * @param {array} array Array to search in.
         * @param {string} searchElement Element to search for.
         *
         * @returns {int} Index of search element.
         */
        var indexOf = function (array, searchElement) {
          for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === searchElement) {
              return i;
            }
          }
          return -1;
        };

        /**
         * @name trim
         * @private
         *
         * @description
         * trim polyfill
         *
         * @returns {string} The string stripped of whitespace from both ends
         */
        var trim = function () {
          return this.toString().replace(/^\s+|\s+$/g, '');
        };

        var negotiateLocale = function (preferred) {
          if (!preferred) {
            return;
          }

          var avail = [],
              locale = angular.lowercase(preferred),
              i = 0,
              n = $availableLanguageKeys.length;

          for (; i < n; i++) {
            avail.push(angular.lowercase($availableLanguageKeys[i]));
          }

          // Check for an exact match in our list of available keys
          if (indexOf(avail, locale) > -1) {
            return preferred;
          }

          if ($languageKeyAliases) {
            var alias;
            for (var langKeyAlias in $languageKeyAliases) {
              if ($languageKeyAliases.hasOwnProperty(langKeyAlias)) {
                var hasWildcardKey = false;
                var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) && angular.lowercase(langKeyAlias) === angular.lowercase(preferred);

                if (langKeyAlias.slice(-1) === '*') {
                  hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length - 1);
                }
                if (hasExactKey || hasWildcardKey) {
                  alias = $languageKeyAliases[langKeyAlias];
                  if (indexOf(avail, angular.lowercase(alias)) > -1) {
                    return alias;
                  }
                }
              }
            }
          }

          // Check for a language code without region
          var parts = preferred.split('_');

          if (parts.length > 1 && indexOf(avail, angular.lowercase(parts[0])) > -1) {
            return parts[0];
          }

          // If everything fails, return undefined.
          return;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#translations
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Registers a new translation table for specific language key.
         *
         * To register a translation table for specific language, pass a defined language
         * key as first parameter.
         *
         * <pre>
         *  // register translation table for language: 'de_DE'
         *  $translateProvider.translations('de_DE', {
         *    'GREETING': 'Hallo Welt!'
         *  });
         *
         *  // register another one
         *  $translateProvider.translations('en_US', {
         *    'GREETING': 'Hello world!'
         *  });
         * </pre>
         *
         * When registering multiple translation tables for for the same language key,
         * the actual translation table gets extended. This allows you to define module
         * specific translation which only get added, once a specific module is loaded in
         * your app.
         *
         * Invoking this method with no arguments returns the translation table which was
         * registered with no language key. Invoking it with a language key returns the
         * related translation table.
         *
         * @param {string} langKey A language key.
         * @param {object} translationTable A plain old JavaScript object that represents a translation table.
         *
         */
        var translations = function (langKey, translationTable) {

          if (!langKey && !translationTable) {
            return $translationTable;
          }

          if (langKey && !translationTable) {
            if (angular.isString(langKey)) {
              return $translationTable[langKey];
            }
          } else {
            if (!angular.isObject($translationTable[langKey])) {
              $translationTable[langKey] = {};
            }
            angular.extend($translationTable[langKey], flatObject(translationTable));
          }
          return this;
        };

        this.translations = translations;

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#cloakClassName
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         *
         * Let's you change the class name for `translate-cloak` directive.
         * Default class name is `translate-cloak`.
         *
         * @param {string} name translate-cloak class name
         */
        this.cloakClassName = function (name) {
          if (!name) {
            return $cloakClassName;
          }
          $cloakClassName = name;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#nestedObjectDelimeter
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         *
         * Let's you change the delimiter for namespaced translations.
         * Default delimiter is `.`.
         *
         * @param {string} delimiter namespace separator
         */
        this.nestedObjectDelimeter = function (delimiter) {
          if (!delimiter) {
            return $nestedObjectDelimeter;
          }
          $nestedObjectDelimeter = delimiter;
          return this;
        };

        /**
         * @name flatObject
         * @private
         *
         * @description
         * Flats an object. This function is used to flatten given translation data with
         * namespaces, so they are later accessible via dot notation.
         */
        var flatObject = function (data, path, result, prevKey) {
          var key, keyWithPath, keyWithShortPath, val;

          if (!path) {
            path = [];
          }
          if (!result) {
            result = {};
          }
          for (key in data) {
            if (!Object.prototype.hasOwnProperty.call(data, key)) {
              continue;
            }
            val = data[key];
            if (angular.isObject(val)) {
              flatObject(val, path.concat(key), result, key);
            } else {
              keyWithPath = path.length ? '' + path.join($nestedObjectDelimeter) + $nestedObjectDelimeter + key : key;
              if (path.length && key === prevKey) {
                // Create shortcut path (foo.bar == foo.bar.bar)
                keyWithShortPath = '' + path.join($nestedObjectDelimeter);
                // Link it to original path
                result[keyWithShortPath] = '@:' + keyWithPath;
              }
              result[keyWithPath] = val;
            }
          }
          return result;
        };
        flatObject.displayName = 'flatObject';

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#addInterpolation
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Adds interpolation services to angular-translate, so it can manage them.
         *
         * @param {object} factory Interpolation service factory
         */
        this.addInterpolation = function (factory) {
          $interpolatorFactories.push(factory);
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use interpolation functionality of messageformat.js.
         * This is useful when having high level pluralization and gender selection.
         */
        this.useMessageFormatInterpolation = function () {
          return this.useInterpolation('$translateMessageFormatInterpolation');
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useInterpolation
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate which interpolation style to use as default, application-wide.
         * Simply pass a factory/service name. The interpolation service has to implement
         * the correct interface.
         *
         * @param {string} factory Interpolation service name.
         */
        this.useInterpolation = function (factory) {
          $interpolationFactory = factory;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Simply sets a sanitation strategy type.
         *
         * @param {string} value Strategy type.
         */
        this.useSanitizeValueStrategy = function (value) {
          $translateSanitizationProvider.useStrategy(value);
          return this;
        };

        /**
          * @ngdoc function
          * @name pascalprecht.translate.$translateProvider#preferredLanguage
          * @methodOf pascalprecht.translate.$translateProvider
          *
          * @description
          * Tells the module which of the registered translation tables to use for translation
          * at initial startup by passing a language key. Similar to `$translateProvider#use`
          * only that it says which language to **prefer**.
          *
          * @param {string} langKey A language key.
          */
        this.preferredLanguage = function (langKey) {
          if (langKey) {
            setupPreferredLanguage(langKey);
            return this;
          }
          return $preferredLanguage;
        };
        var setupPreferredLanguage = function (langKey) {
          if (langKey) {
            $preferredLanguage = langKey;
          }
          return $preferredLanguage;
        };
        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Sets an indicator which is used when a translation isn't found. E.g. when
         * setting the indicator as 'X' and one tries to translate a translation id
         * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
         *
         * Internally this methods sets a left indicator and a right indicator using
         * `$translateProvider.translationNotFoundIndicatorLeft()` and
         * `$translateProvider.translationNotFoundIndicatorRight()`.
         *
         * **Note**: These methods automatically add a whitespace between the indicators
         * and the translation id.
         *
         * @param {string} indicator An indicator, could be any string.
         */
        this.translationNotFoundIndicator = function (indicator) {
          this.translationNotFoundIndicatorLeft(indicator);
          this.translationNotFoundIndicatorRight(indicator);
          return this;
        };

        /**
         * ngdoc function
         * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Sets an indicator which is used when a translation isn't found left to the
         * translation id.
         *
         * @param {string} indicator An indicator.
         */
        this.translationNotFoundIndicatorLeft = function (indicator) {
          if (!indicator) {
            return $notFoundIndicatorLeft;
          }
          $notFoundIndicatorLeft = indicator;
          return this;
        };

        /**
         * ngdoc function
         * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Sets an indicator which is used when a translation isn't found right to the
         * translation id.
         *
         * @param {string} indicator An indicator.
         */
        this.translationNotFoundIndicatorRight = function (indicator) {
          if (!indicator) {
            return $notFoundIndicatorRight;
          }
          $notFoundIndicatorRight = indicator;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#fallbackLanguage
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells the module which of the registered translation tables to use when missing translations
         * at initial startup by passing a language key. Similar to `$translateProvider#use`
         * only that it says which language to **fallback**.
         *
         * @param {string||array} langKey A language key.
         *
         */
        this.fallbackLanguage = function (langKey) {
          fallbackStack(langKey);
          return this;
        };

        var fallbackStack = function (langKey) {
          if (langKey) {
            if (angular.isString(langKey)) {
              $fallbackWasString = true;
              $fallbackLanguage = [langKey];
            } else if (angular.isArray(langKey)) {
              $fallbackWasString = false;
              $fallbackLanguage = langKey;
            }
            if (angular.isString($preferredLanguage) && indexOf($fallbackLanguage, $preferredLanguage) < 0) {
              $fallbackLanguage.push($preferredLanguage);
            }

            return this;
          } else {
            if ($fallbackWasString) {
              return $fallbackLanguage[0];
            } else {
              return $fallbackLanguage;
            }
          }
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#use
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Set which translation table to use for translation by given language key. When
         * trying to 'use' a language which isn't provided, it'll throw an error.
         *
         * You actually don't have to use this method since `$translateProvider#preferredLanguage`
         * does the job too.
         *
         * @param {string} langKey A language key.
         */
        this.use = function (langKey) {
          if (langKey) {
            if (!$translationTable[langKey] && !$loaderFactory) {
              // only throw an error, when not loading translation data asynchronously
              throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
            }
            $uses = langKey;
            return this;
          }
          return $uses;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#resolveClientLocale
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
         *
         * @returns {string} the current client/browser language key
         */
        this.resolveClientLocale = function () {
          return getLocale();
        };

        /**
          * @ngdoc function
          * @name pascalprecht.translate.$translateProvider#storageKey
          * @methodOf pascalprecht.translate.$translateProvider
          *
          * @description
          * Tells the module which key must represent the choosed language by a user in the storage.
          *
          * @param {string} key A key for the storage.
          */
        var storageKey = function (key) {
          if (!key) {
            if ($storagePrefix) {
              return $storagePrefix + $storageKey;
            }
            return $storageKey;
          }
          $storageKey = key;
          return this;
        };

        this.storageKey = storageKey;

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useUrlLoader
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
         *
         * @param {string} url Url
         * @param {Object=} options Optional configuration object
         */
        this.useUrlLoader = function (url, options) {
          return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options));
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
         *
         * @param {Object=} options Optional configuration object
         */
        this.useStaticFilesLoader = function (options) {
          return this.useLoader('$translateStaticFilesLoader', options);
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useLoader
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use any other service as loader.
         *
         * @param {string} loaderFactory Factory name to use
         * @param {Object=} options Optional configuration object
         */
        this.useLoader = function (loaderFactory, options) {
          $loaderFactory = loaderFactory;
          $loaderOptions = options || {};
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useLocalStorage
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
         *
         */
        this.useLocalStorage = function () {
          return this.useStorage('$translateLocalStorage');
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useCookieStorage
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
         */
        this.useCookieStorage = function () {
          return this.useStorage('$translateCookieStorage');
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useStorage
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use custom service as storage layer.
         */
        this.useStorage = function (storageFactory) {
          $storageFactory = storageFactory;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#storagePrefix
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Sets prefix for storage key.
         *
         * @param {string} prefix Storage key prefix
         */
        this.storagePrefix = function (prefix) {
          if (!prefix) {
            return prefix;
          }
          $storagePrefix = prefix;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to use built-in log handler when trying to translate
         * a translation Id which doesn't exist.
         *
         * This is actually a shortcut method for `useMissingTranslationHandler()`.
         *
         */
        this.useMissingTranslationHandlerLog = function () {
          return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Expects a factory name which later gets instantiated with `$injector`.
         * This method can be used to tell angular-translate to use a custom
         * missingTranslationHandler. Just build a factory which returns a function
         * and expects a translation id as argument.
         *
         * Example:
         * <pre>
         *  app.config(function ($translateProvider) {
         *    $translateProvider.useMissingTranslationHandler('customHandler');
         *  });
         *
         *  app.factory('customHandler', function (dep1, dep2) {
         *    return function (translationId) {
         *      // something with translationId and dep1 and dep2
         *    };
         *  });
         * </pre>
         *
         * @param {string} factory Factory name
         */
        this.useMissingTranslationHandler = function (factory) {
          $missingTranslationHandlerFactory = factory;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#usePostCompiling
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * If post compiling is enabled, all translated values will be processed
         * again with AngularJS' $compile.
         *
         * Example:
         * <pre>
         *  app.config(function ($translateProvider) {
         *    $translateProvider.usePostCompiling(true);
         *  });
         * </pre>
         *
         * @param {string} factory Factory name
         */
        this.usePostCompiling = function (value) {
          $postCompilingEnabled = !!value;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#forceAsyncReload
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * If force async reload is enabled, async loader will always be called
         * even if $translationTable already contains the language key, adding
         * possible new entries to the $translationTable.
         *
         * Example:
         * <pre>
         *  app.config(function ($translateProvider) {
         *    $translateProvider.forceAsyncReload(true);
         *  });
         * </pre>
         *
         * @param {boolean} value - valid values are true or false
         */
        this.forceAsyncReload = function (value) {
          $forceAsyncReloadEnabled = !!value;
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#uniformLanguageTag
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate which language tag should be used as a result when determining
         * the current browser language.
         *
         * This setting must be set before invoking {@link pascalprecht.translate.$translateProvider#methods_determinePreferredLanguage determinePreferredLanguage()}.
         *
         * <pre>
         * $translateProvider
         *   .uniformLanguageTag('bcp47')
         *   .determinePreferredLanguage()
         * </pre>
         *
         * The resolver currently supports:
         * * default
         *     (traditionally: hyphens will be converted into underscores, i.e. en-US => en_US)
         *     en-US => en_US
         *     en_US => en_US
         *     en-us => en_us
         * * java
         *     like default, but the second part will be always in uppercase
         *     en-US => en_US
         *     en_US => en_US
         *     en-us => en_US
         * * BCP 47 (RFC 4646 & 4647)
         *     en-US => en-US
         *     en_US => en-US
         *     en-us => en-US
         *
         * See also:
         * * http://en.wikipedia.org/wiki/IETF_language_tag
         * * http://www.w3.org/International/core/langtags/
         * * http://tools.ietf.org/html/bcp47
         *
         * @param {string|object} options - options (or standard)
         * @param {string} options.standard - valid values are 'default', 'bcp47', 'java'
         */
        this.uniformLanguageTag = function (options) {

          if (!options) {
            options = {};
          } else if (angular.isString(options)) {
            options = {
              standard: options
            };
          }

          uniformLanguageTagResolver = options.standard;

          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Tells angular-translate to try to determine on its own which language key
         * to set as preferred language. When `fn` is given, angular-translate uses it
         * to determine a language key, otherwise it uses the built-in `getLocale()`
         * method.
         *
         * The `getLocale()` returns a language key in the format `[lang]_[country]` or
         * `[lang]` depending on what the browser provides.
         *
         * Use this method at your own risk, since not all browsers return a valid
         * locale (see {@link pascalprecht.translate.$translateProvider#methods_uniformLanguageTag uniformLanguageTag()}).
         *
         * @param {Function=} fn Function to determine a browser's locale
         */
        this.determinePreferredLanguage = function (fn) {

          var locale = fn && angular.isFunction(fn) ? fn() : getLocale();

          if (!$availableLanguageKeys.length) {
            $preferredLanguage = locale;
          } else {
            $preferredLanguage = negotiateLocale(locale) || locale;
          }

          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Registers a set of language keys the app will work with. Use this method in
         * combination with
         * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
         * When available languages keys are registered, angular-translate
         * tries to find the best fitting language key depending on the browsers locale,
         * considering your language key convention.
         *
         * @param {object} languageKeys Array of language keys the your app will use
         * @param {object=} aliases Alias map.
         */
        this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
          if (languageKeys) {
            $availableLanguageKeys = languageKeys;
            if (aliases) {
              $languageKeyAliases = aliases;
            }
            return this;
          }
          return $availableLanguageKeys;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#useLoaderCache
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Registers a cache for internal $http based loaders.
         * {@link pascalprecht.translate.$translationCache $translationCache}.
         * When false the cache will be disabled (default). When true or undefined
         * the cache will be a default (see $cacheFactory). When an object it will
         * be treat as a cache object itself: the usage is $http({cache: cache})
         *
         * @param {object} cache boolean, string or cache-object
         */
        this.useLoaderCache = function (cache) {
          if (cache === false) {
            // disable cache
            loaderCache = undefined;
          } else if (cache === true) {
            // enable cache using AJS defaults
            loaderCache = true;
          } else if (typeof cache === 'undefined') {
            // enable cache using default
            loaderCache = '$translationCache';
          } else if (cache) {
            // enable cache using given one (see $cacheFactory)
            loaderCache = cache;
          }
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#directivePriority
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Sets the default priority of the translate directive. The standard value is `0`.
         * Calling this function without an argument will return the current value.
         *
         * @param {number} priority for the translate-directive
         */
        this.directivePriority = function (priority) {
          if (priority === undefined) {
            // getter
            return directivePriority;
          } else {
            // setter with chaining
            directivePriority = priority;
            return this;
          }
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#statefulFilter
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * Since AngularJS 1.3, filters which are not stateless (depending at the scope)
         * have to explicit define this behavior.
         * Sets whether the translate filter should be stateful or stateless. The standard value is `true`
         * meaning being stateful.
         * Calling this function without an argument will return the current value.
         *
         * @param {boolean} state - defines the state of the filter
         */
        this.statefulFilter = function (state) {
          if (state === undefined) {
            // getter
            return statefulFilter;
          } else {
            // setter with chaining
            statefulFilter = state;
            return this;
          }
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#postProcess
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * The post processor will be intercept right after the translation result. It can modify the result.
         *
         * @param {object} fn Function or service name (string) to be called after the translation value has been set / resolved. The function itself will enrich every value being processed and then continue the normal resolver process
         */
        this.postProcess = function (fn) {
          if (fn) {
            postProcessFn = fn;
          } else {
            postProcessFn = undefined;
          }
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateProvider#keepContent
         * @methodOf pascalprecht.translate.$translateProvider
         *
         * @description
         * If keepContent is set to true than translate directive will always use innerHTML
         * as a default translation
         *
         * Example:
         * <pre>
         *  app.config(function ($translateProvider) {
         *    $translateProvider.keepContent(true);
         *  });
         * </pre>
         *
         * @param {boolean} value - valid values are true or false
         */
        this.keepContent = function (value) {
          $keepContent = !!value;
          return this;
        };

        /**
         * @ngdoc object
         * @name pascalprecht.translate.$translate
         * @requires $interpolate
         * @requires $log
         * @requires $rootScope
         * @requires $q
         *
         * @description
         * The `$translate` service is the actual core of angular-translate. It expects a translation id
         * and optional interpolate parameters to translate contents.
         *
         * <pre>
         *  $translate('HEADLINE_TEXT').then(function (translation) {
         *    $scope.translatedText = translation;
         *  });
         * </pre>
         *
         * @param {string|array} translationId A token which represents a translation id
         *                                     This can be optionally an array of translation ids which
         *                                     results that the function returns an object where each key
         *                                     is the translation id and the value the translation.
         * @param {object=} interpolateParams An object hash for dynamic values
         * @param {string} interpolationId The id of the interpolation to use
         * @param {string} defaultTranslationText the optional default translation text that is written as
         *                                        as default text in case it is not found in any configured language
         * @param {string} forceLanguage A language to be used instead of the current language
         * @returns {object} promise
         */
        this.$get = ['$log', '$injector', '$rootScope', '$q', function ($log, $injector, $rootScope, $q) {

          var Storage,
              defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'),
              pendingLoader = false,
              interpolatorHashMap = {},
              langPromises = {},
              fallbackIndex,
              startFallbackIteration;

          var $translate = function (translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage) {
            if (!$uses && $preferredLanguage) {
              $uses = $preferredLanguage;
            }
            var uses = forceLanguage && forceLanguage !== $uses ? // we don't want to re-negotiate $uses
            negotiateLocale(forceLanguage) || forceLanguage : $uses;

            // Check forceLanguage is present
            if (forceLanguage) {
              loadTranslationsIfMissing(forceLanguage);
            }

            // Duck detection: If the first argument is an array, a bunch of translations was requested.
            // The result is an object.
            if (angular.isArray(translationId)) {
              // Inspired by Q.allSettled by Kris Kowal
              // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
              // This transforms all promises regardless resolved or rejected
              var translateAll = function (translationIds) {
                var results = {}; // storing the actual results
                var promises = []; // promises to wait for
                // Wraps the promise a) being always resolved and b) storing the link id->value
                var translate = function (translationId) {
                  var deferred = $q.defer();
                  var regardless = function (value) {
                    results[translationId] = value;
                    deferred.resolve([translationId, value]);
                  };
                  // we don't care whether the promise was resolved or rejected; just store the values
                  $translate(translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage).then(regardless, regardless);
                  return deferred.promise;
                };
                for (var i = 0, c = translationIds.length; i < c; i++) {
                  promises.push(translate(translationIds[i]));
                }
                // wait for all (including storing to results)
                return $q.all(promises).then(function () {
                  // return the results
                  return results;
                });
              };
              return translateAll(translationId);
            }

            var deferred = $q.defer();

            // trim off any whitespace
            if (translationId) {
              translationId = trim.apply(translationId);
            }

            var promiseToWaitFor = function () {
              var promise = $preferredLanguage ? langPromises[$preferredLanguage] : langPromises[uses];

              fallbackIndex = 0;

              if ($storageFactory && !promise) {
                // looks like there's no pending promise for $preferredLanguage or
                // $uses. Maybe there's one pending for a language that comes from
                // storage.
                var langKey = Storage.get($storageKey);
                promise = langPromises[langKey];

                if ($fallbackLanguage && $fallbackLanguage.length) {
                  var index = indexOf($fallbackLanguage, langKey);
                  // maybe the language from storage is also defined as fallback language
                  // we increase the fallback language index to not search in that language
                  // as fallback, since it's probably the first used language
                  // in that case the index starts after the first element
                  fallbackIndex = index === 0 ? 1 : 0;

                  // but we can make sure to ALWAYS fallback to preferred language at least
                  if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
                    $fallbackLanguage.push($preferredLanguage);
                  }
                }
              }
              return promise;
            }();

            if (!promiseToWaitFor) {
              // no promise to wait for? okay. Then there's no loader registered
              // nor is a one pending for language that comes from storage.
              // We can just translate.
              determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses).then(deferred.resolve, deferred.reject);
            } else {
              var promiseResolved = function () {
                // $uses may have changed while waiting
                if (!forceLanguage) {
                  uses = $uses;
                }
                determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses).then(deferred.resolve, deferred.reject);
              };
              promiseResolved.displayName = 'promiseResolved';

              promiseToWaitFor['finally'](promiseResolved);
            }
            return deferred.promise;
          };

          /**
           * @name applyNotFoundIndicators
           * @private
           *
           * @description
           * Applies not fount indicators to given translation id, if needed.
           * This function gets only executed, if a translation id doesn't exist,
           * which is why a translation id is expected as argument.
           *
           * @param {string} translationId Translation id.
           * @returns {string} Same as given translation id but applied with not found
           * indicators.
           */
          var applyNotFoundIndicators = function (translationId) {
            // applying notFoundIndicators
            if ($notFoundIndicatorLeft) {
              translationId = [$notFoundIndicatorLeft, translationId].join(' ');
            }
            if ($notFoundIndicatorRight) {
              translationId = [translationId, $notFoundIndicatorRight].join(' ');
            }
            return translationId;
          };

          /**
           * @name useLanguage
           * @private
           *
           * @description
           * Makes actual use of a language by setting a given language key as used
           * language and informs registered interpolators to also use the given
           * key as locale.
           *
           * @param {string} key Locale key.
           */
          var useLanguage = function (key) {
            $uses = key;

            // make sure to store new language key before triggering success event
            if ($storageFactory) {
              Storage.put($translate.storageKey(), $uses);
            }

            $rootScope.$emit('$translateChangeSuccess', { language: key });

            // inform default interpolator
            defaultInterpolator.setLocale($uses);

            var eachInterpolator = function (interpolator, id) {
              interpolatorHashMap[id].setLocale($uses);
            };
            eachInterpolator.displayName = 'eachInterpolatorLocaleSetter';

            // inform all others too!
            angular.forEach(interpolatorHashMap, eachInterpolator);
            $rootScope.$emit('$translateChangeEnd', { language: key });
          };

          /**
           * @name loadAsync
           * @private
           *
           * @description
           * Kicks of registered async loader using `$injector` and applies existing
           * loader options. When resolved, it updates translation tables accordingly
           * or rejects with given language key.
           *
           * @param {string} key Language key.
           * @return {Promise} A promise.
           */
          var loadAsync = function (key) {
            if (!key) {
              throw 'No language key specified for loading.';
            }

            var deferred = $q.defer();

            $rootScope.$emit('$translateLoadingStart', { language: key });
            pendingLoader = true;

            var cache = loaderCache;
            if (typeof cache === 'string') {
              // getting on-demand instance of loader
              cache = $injector.get(cache);
            }

            var loaderOptions = angular.extend({}, $loaderOptions, {
              key: key,
              $http: angular.extend({}, {
                cache: cache
              }, $loaderOptions.$http)
            });

            var onLoaderSuccess = function (data) {
              var translationTable = {};
              $rootScope.$emit('$translateLoadingSuccess', { language: key });

              if (angular.isArray(data)) {
                angular.forEach(data, function (table) {
                  angular.extend(translationTable, flatObject(table));
                });
              } else {
                angular.extend(translationTable, flatObject(data));
              }
              pendingLoader = false;
              deferred.resolve({
                key: key,
                table: translationTable
              });
              $rootScope.$emit('$translateLoadingEnd', { language: key });
            };
            onLoaderSuccess.displayName = 'onLoaderSuccess';

            var onLoaderError = function (key) {
              $rootScope.$emit('$translateLoadingError', { language: key });
              deferred.reject(key);
              $rootScope.$emit('$translateLoadingEnd', { language: key });
            };
            onLoaderError.displayName = 'onLoaderError';

            $injector.get($loaderFactory)(loaderOptions).then(onLoaderSuccess, onLoaderError);

            return deferred.promise;
          };

          if ($storageFactory) {
            Storage = $injector.get($storageFactory);

            if (!Storage.get || !Storage.put) {
              throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or put() method!');
            }
          }

          // if we have additional interpolations that were added via
          // $translateProvider.addInterpolation(), we have to map'em
          if ($interpolatorFactories.length) {
            var eachInterpolationFactory = function (interpolatorFactory) {
              var interpolator = $injector.get(interpolatorFactory);
              // setting initial locale for each interpolation service
              interpolator.setLocale($preferredLanguage || $uses);
              // make'em recognizable through id
              interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
            };
            eachInterpolationFactory.displayName = 'interpolationFactoryAdder';

            angular.forEach($interpolatorFactories, eachInterpolationFactory);
          }

          /**
           * @name getTranslationTable
           * @private
           *
           * @description
           * Returns a promise that resolves to the translation table
           * or is rejected if an error occurred.
           *
           * @param langKey
           * @returns {Q.promise}
           */
          var getTranslationTable = function (langKey) {
            var deferred = $q.defer();
            if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
              deferred.resolve($translationTable[langKey]);
            } else if (langPromises[langKey]) {
              var onResolve = function (data) {
                translations(data.key, data.table);
                deferred.resolve(data.table);
              };
              onResolve.displayName = 'translationTableResolver';
              langPromises[langKey].then(onResolve, deferred.reject);
            } else {
              deferred.reject();
            }
            return deferred.promise;
          };

          /**
           * @name getFallbackTranslation
           * @private
           *
           * @description
           * Returns a promise that will resolve to the translation
           * or be rejected if no translation was found for the language.
           * This function is currently only used for fallback language translation.
           *
           * @param langKey The language to translate to.
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {Q.promise}
           */
          var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {
            var deferred = $q.defer();

            var onResolve = function (translationTable) {
              if (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
                Interpolator.setLocale(langKey);
                var translation = translationTable[translationId];
                if (translation.substr(0, 2) === '@:') {
                  getFallbackTranslation(langKey, translation.substr(2), interpolateParams, Interpolator).then(deferred.resolve, deferred.reject);
                } else {
                  var interpolatedValue = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'service');
                  interpolatedValue = applyPostProcessing(translationId, translationTable[translationId], interpolatedValue, interpolateParams, langKey);

                  deferred.resolve(interpolatedValue);
                }
                Interpolator.setLocale($uses);
              } else {
                deferred.reject();
              }
            };
            onResolve.displayName = 'fallbackTranslationResolver';

            getTranslationTable(langKey).then(onResolve, deferred.reject);

            return deferred.promise;
          };

          /**
           * @name getFallbackTranslationInstant
           * @private
           *
           * @description
           * Returns a translation
           * This function is currently only used for fallback language translation.
           *
           * @param langKey The language to translate to.
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {string} translation
           */
          var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {
            var result,
                translationTable = $translationTable[langKey];

            if (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
              Interpolator.setLocale(langKey);
              result = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'filter');
              result = applyPostProcessing(translationId, translationTable[translationId], result, interpolateParams, langKey);
              if (result.substr(0, 2) === '@:') {
                return getFallbackTranslationInstant(langKey, result.substr(2), interpolateParams, Interpolator);
              }
              Interpolator.setLocale($uses);
            }

            return result;
          };

          /**
           * @name translateByHandler
           * @private
           *
           * Translate by missing translation handler.
           *
           * @param translationId
           * @param interpolateParams
           * @param defaultTranslationText
           * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
           * absent
           */
          var translateByHandler = function (translationId, interpolateParams, defaultTranslationText) {
            // If we have a handler factory - we might also call it here to determine if it provides
            // a default text for a translationid that can't be found anywhere in our tables
            if ($missingTranslationHandlerFactory) {
              var resultString = $injector.get($missingTranslationHandlerFactory)(translationId, $uses, interpolateParams, defaultTranslationText);
              if (resultString !== undefined) {
                return resultString;
              } else {
                return translationId;
              }
            } else {
              return translationId;
            }
          };

          /**
           * @name resolveForFallbackLanguage
           * @private
           *
           * Recursive helper function for fallbackTranslation that will sequentially look
           * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
           *
           * @param fallbackLanguageIndex
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {Q.promise} Promise that will resolve to the translation.
           */
          var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator, defaultTranslationText) {
            var deferred = $q.defer();

            if (fallbackLanguageIndex < $fallbackLanguage.length) {
              var langKey = $fallbackLanguage[fallbackLanguageIndex];
              getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(function (data) {
                deferred.resolve(data);
              }, function () {
                // Look in the next fallback language for a translation.
                // It delays the resolving by passing another promise to resolve.
                return resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator, defaultTranslationText).then(deferred.resolve, deferred.reject);
              });
            } else {
              // No translation found in any fallback language
              // if a default translation text is set in the directive, then return this as a result
              if (defaultTranslationText) {
                deferred.resolve(defaultTranslationText);
              } else {
                // if no default translation is set and an error handler is defined, send it to the handler
                // and then return the result
                if ($missingTranslationHandlerFactory) {
                  deferred.resolve(translateByHandler(translationId, interpolateParams));
                } else {
                  deferred.reject(translateByHandler(translationId, interpolateParams));
                }
              }
            }
            return deferred.promise;
          };

          /**
           * @name resolveForFallbackLanguageInstant
           * @private
           *
           * Recursive helper function for fallbackTranslation that will sequentially look
           * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
           *
           * @param fallbackLanguageIndex
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {string} translation
           */
          var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
            var result;

            if (fallbackLanguageIndex < $fallbackLanguage.length) {
              var langKey = $fallbackLanguage[fallbackLanguageIndex];
              result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);
              if (!result) {
                result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
              }
            }
            return result;
          };

          /**
           * Translates with the usage of the fallback languages.
           *
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {Q.promise} Promise, that resolves to the translation.
           */
          var fallbackTranslation = function (translationId, interpolateParams, Interpolator, defaultTranslationText) {
            // Start with the fallbackLanguage with index 0
            return resolveForFallbackLanguage(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator, defaultTranslationText);
          };

          /**
           * Translates with the usage of the fallback languages.
           *
           * @param translationId
           * @param interpolateParams
           * @param Interpolator
           * @returns {String} translation
           */
          var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {
            // Start with the fallbackLanguage with index 0
            return resolveForFallbackLanguageInstant(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);
          };

          var determineTranslation = function (translationId, interpolateParams, interpolationId, defaultTranslationText, uses) {

            var deferred = $q.defer();

            var table = uses ? $translationTable[uses] : $translationTable,
                Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;

            // if the translation id exists, we can just interpolate it
            if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
              var translation = table[translationId];

              // If using link, rerun $translate with linked translationId and return it
              if (translation.substr(0, 2) === '@:') {

                $translate(translation.substr(2), interpolateParams, interpolationId, defaultTranslationText, uses).then(deferred.resolve, deferred.reject);
              } else {
                //
                var resolvedTranslation = Interpolator.interpolate(translation, interpolateParams, 'service');
                resolvedTranslation = applyPostProcessing(translationId, translation, resolvedTranslation, interpolateParams, uses);
                deferred.resolve(resolvedTranslation);
              }
            } else {
              var missingTranslationHandlerTranslation;
              // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
              if ($missingTranslationHandlerFactory && !pendingLoader) {
                missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, defaultTranslationText);
              }

              // since we couldn't translate the inital requested translation id,
              // we try it now with one or more fallback languages, if fallback language(s) is
              // configured.
              if (uses && $fallbackLanguage && $fallbackLanguage.length) {
                fallbackTranslation(translationId, interpolateParams, Interpolator, defaultTranslationText).then(function (translation) {
                  deferred.resolve(translation);
                }, function (_translationId) {
                  deferred.reject(applyNotFoundIndicators(_translationId));
                });
              } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
                // looks like the requested translation id doesn't exists.
                // Now, if there is a registered handler for missing translations and no
                // asyncLoader is pending, we execute the handler
                if (defaultTranslationText) {
                  deferred.resolve(defaultTranslationText);
                } else {
                  deferred.resolve(missingTranslationHandlerTranslation);
                }
              } else {
                if (defaultTranslationText) {
                  deferred.resolve(defaultTranslationText);
                } else {
                  deferred.reject(applyNotFoundIndicators(translationId));
                }
              }
            }
            return deferred.promise;
          };

          var determineTranslationInstant = function (translationId, interpolateParams, interpolationId, uses) {

            var result,
                table = uses ? $translationTable[uses] : $translationTable,
                Interpolator = defaultInterpolator;

            // if the interpolation id exists use custom interpolator
            if (interpolatorHashMap && Object.prototype.hasOwnProperty.call(interpolatorHashMap, interpolationId)) {
              Interpolator = interpolatorHashMap[interpolationId];
            }

            // if the translation id exists, we can just interpolate it
            if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
              var translation = table[translationId];

              // If using link, rerun $translate with linked translationId and return it
              if (translation.substr(0, 2) === '@:') {
                result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId, uses);
              } else {
                result = Interpolator.interpolate(translation, interpolateParams, 'filter');
                result = applyPostProcessing(translationId, translation, result, interpolateParams, uses);
              }
            } else {
              var missingTranslationHandlerTranslation;
              // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
              if ($missingTranslationHandlerFactory && !pendingLoader) {
                missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams);
              }

              // since we couldn't translate the inital requested translation id,
              // we try it now with one or more fallback languages, if fallback language(s) is
              // configured.
              if (uses && $fallbackLanguage && $fallbackLanguage.length) {
                fallbackIndex = 0;
                result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);
              } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
                // looks like the requested translation id doesn't exists.
                // Now, if there is a registered handler for missing translations and no
                // asyncLoader is pending, we execute the handler
                result = missingTranslationHandlerTranslation;
              } else {
                result = applyNotFoundIndicators(translationId);
              }
            }

            return result;
          };

          var clearNextLangAndPromise = function (key) {
            if ($nextLang === key) {
              $nextLang = undefined;
            }
            langPromises[key] = undefined;
          };

          var applyPostProcessing = function (translationId, translation, resolvedTranslation, interpolateParams, uses) {
            var fn = postProcessFn;

            if (fn) {

              if (typeof fn === 'string') {
                // getting on-demand instance
                fn = $injector.get(fn);
              }
              if (fn) {
                return fn(translationId, translation, resolvedTranslation, interpolateParams, uses);
              }
            }

            return resolvedTranslation;
          };

          var loadTranslationsIfMissing = function (key) {
            if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {
              langPromises[key] = loadAsync(key).then(function (translation) {
                translations(translation.key, translation.table);
                return translation;
              });
            }
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#preferredLanguage
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the language key for the preferred language.
           *
           * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
           *
           * @return {string} preferred language key
           */
          $translate.preferredLanguage = function (langKey) {
            if (langKey) {
              setupPreferredLanguage(langKey);
            }
            return $preferredLanguage;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#cloakClassName
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the configured class name for `translate-cloak` directive.
           *
           * @return {string} cloakClassName
           */
          $translate.cloakClassName = function () {
            return $cloakClassName;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#nestedObjectDelimeter
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the configured delimiter for nested namespaces.
           *
           * @return {string} nestedObjectDelimeter
           */
          $translate.nestedObjectDelimeter = function () {
            return $nestedObjectDelimeter;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#fallbackLanguage
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the language key for the fallback languages or sets a new fallback stack.
           *
           * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
           *
           * @return {string||array} fallback language key
           */
          $translate.fallbackLanguage = function (langKey) {
            if (langKey !== undefined && langKey !== null) {
              fallbackStack(langKey);

              // as we might have an async loader initiated and a new translation language might have been defined
              // we need to add the promise to the stack also. So - iterate.
              if ($loaderFactory) {
                if ($fallbackLanguage && $fallbackLanguage.length) {
                  for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                    if (!langPromises[$fallbackLanguage[i]]) {
                      langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
                    }
                  }
                }
              }
              $translate.use($translate.use());
            }
            if ($fallbackWasString) {
              return $fallbackLanguage[0];
            } else {
              return $fallbackLanguage;
            }
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#useFallbackLanguage
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Sets the first key of the fallback language stack to be used for translation.
           * Therefore all languages in the fallback array BEFORE this key will be skipped!
           *
           * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
           * get back to the whole stack
           */
          $translate.useFallbackLanguage = function (langKey) {
            if (langKey !== undefined && langKey !== null) {
              if (!langKey) {
                startFallbackIteration = 0;
              } else {
                var langKeyPosition = indexOf($fallbackLanguage, langKey);
                if (langKeyPosition > -1) {
                  startFallbackIteration = langKeyPosition;
                }
              }
            }
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#proposedLanguage
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the language key of language that is currently loaded asynchronously.
           *
           * @return {string} language key
           */
          $translate.proposedLanguage = function () {
            return $nextLang;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#storage
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns registered storage.
           *
           * @return {object} Storage
           */
          $translate.storage = function () {
            return Storage;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#negotiateLocale
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns a language key based on available languages and language aliases. If a
           * language key cannot be resolved, returns undefined.
           *
           * If no or a falsy key is given, returns undefined.
           *
           * @param {string} [key] Language key
           * @return {string|undefined} Language key or undefined if no language key is found.
           */
          $translate.negotiateLocale = negotiateLocale;

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#use
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Tells angular-translate which language to use by given language key. This method is
           * used to change language at runtime. It also takes care of storing the language
           * key in a configured store to let your app remember the choosed language.
           *
           * When trying to 'use' a language which isn't available it tries to load it
           * asynchronously with registered loaders.
           *
           * Returns promise object with loaded language file data or string of the currently used language.
           *
           * If no or a falsy key is given it returns the currently used language key.
           * The returned string will be ```undefined``` if setting up $translate hasn't finished.
           * @example
           * $translate.use("en_US").then(function(data){
           *   $scope.text = $translate("HELLO");
           * });
           *
           * @param {string} [key] Language key
           * @return {object|string} Promise with loaded language data or the language key if a falsy param was given.
           */
          $translate.use = function (key) {
            if (!key) {
              return $uses;
            }

            var deferred = $q.defer();

            $rootScope.$emit('$translateChangeStart', { language: key });

            // Try to get the aliased language key
            var aliasedKey = negotiateLocale(key);
            // Ensure only registered language keys will be loaded
            if ($availableLanguageKeys.length > 0 && !aliasedKey) {
              return $q.reject(key);
            }

            if (aliasedKey) {
              key = aliasedKey;
            }

            // if there isn't a translation table for the language we've requested,
            // we load it asynchronously
            $nextLang = key;
            if (($forceAsyncReloadEnabled || !$translationTable[key]) && $loaderFactory && !langPromises[key]) {
              langPromises[key] = loadAsync(key).then(function (translation) {
                translations(translation.key, translation.table);
                deferred.resolve(translation.key);
                if ($nextLang === key) {
                  useLanguage(translation.key);
                }
                return translation;
              }, function (key) {
                $rootScope.$emit('$translateChangeError', { language: key });
                deferred.reject(key);
                $rootScope.$emit('$translateChangeEnd', { language: key });
                return $q.reject(key);
              });
              langPromises[key]['finally'](function () {
                clearNextLangAndPromise(key);
              });
            } else if (langPromises[key]) {
              // we are already loading this asynchronously
              // resolve our new deferred when the old langPromise is resolved
              langPromises[key].then(function (translation) {
                if ($nextLang === translation.key) {
                  useLanguage(translation.key);
                }
                deferred.resolve(translation.key);
                return translation;
              }, function (key) {
                // find first available fallback language if that request has failed
                if (!$uses && $fallbackLanguage && $fallbackLanguage.length > 0 && $fallbackLanguage[0] !== key) {
                  return $translate.use($fallbackLanguage[0]).then(deferred.resolve, deferred.reject);
                } else {
                  return deferred.reject(key);
                }
              });
            } else {
              deferred.resolve(key);
              useLanguage(key);
            }

            return deferred.promise;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#resolveClientLocale
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
           *
           * @returns {string} the current client/browser language key
           */
          $translate.resolveClientLocale = function () {
            return getLocale();
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#storageKey
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the key for the storage.
           *
           * @return {string} storage key
           */
          $translate.storageKey = function () {
            return storageKey();
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#isPostCompilingEnabled
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns whether post compiling is enabled or not
           *
           * @return {bool} storage key
           */
          $translate.isPostCompilingEnabled = function () {
            return $postCompilingEnabled;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#isForceAsyncReloadEnabled
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns whether force async reload is enabled or not
           *
           * @return {boolean} forceAsyncReload value
           */
          $translate.isForceAsyncReloadEnabled = function () {
            return $forceAsyncReloadEnabled;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#isKeepContent
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns whether keepContent or not
           *
           * @return {boolean} keepContent value
           */
          $translate.isKeepContent = function () {
            return $keepContent;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#refresh
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
           * the module will drop all existent translation tables and load new version of those which
           * are currently in use.
           *
           * Refresh means that the module will drop target translation table and try to load it again.
           *
           * In case there are no loaders registered the refresh() method will throw an Error.
           *
           * If the module is able to refresh translation tables refresh() method will broadcast
           * $translateRefreshStart and $translateRefreshEnd events.
           *
           * @example
           * // this will drop all currently existent translation tables and reload those which are
           * // currently in use
           * $translate.refresh();
           * // this will refresh a translation table for the en_US language
           * $translate.refresh('en_US');
           *
           * @param {string} langKey A language key of the table, which has to be refreshed
           *
           * @return {promise} Promise, which will be resolved in case a translation tables refreshing
           * process is finished successfully, and reject if not.
           */
          $translate.refresh = function (langKey) {
            if (!$loaderFactory) {
              throw new Error('Couldn\'t refresh translation table, no loader registered!');
            }

            var deferred = $q.defer();

            function resolve() {
              deferred.resolve();
              $rootScope.$emit('$translateRefreshEnd', { language: langKey });
            }

            function reject() {
              deferred.reject();
              $rootScope.$emit('$translateRefreshEnd', { language: langKey });
            }

            $rootScope.$emit('$translateRefreshStart', { language: langKey });

            if (!langKey) {
              // if there's no language key specified we refresh ALL THE THINGS!
              var tables = [],
                  loadingKeys = {};

              // reload registered fallback languages
              if ($fallbackLanguage && $fallbackLanguage.length) {
                for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                  tables.push(loadAsync($fallbackLanguage[i]));
                  loadingKeys[$fallbackLanguage[i]] = true;
                }
              }

              // reload currently used language
              if ($uses && !loadingKeys[$uses]) {
                tables.push(loadAsync($uses));
              }

              var allTranslationsLoaded = function (tableData) {
                $translationTable = {};
                angular.forEach(tableData, function (data) {
                  translations(data.key, data.table);
                });
                if ($uses) {
                  useLanguage($uses);
                }
                resolve();
              };
              allTranslationsLoaded.displayName = 'refreshPostProcessor';

              $q.all(tables).then(allTranslationsLoaded, reject);
            } else if ($translationTable[langKey]) {

              var oneTranslationsLoaded = function (data) {
                translations(data.key, data.table);
                if (langKey === $uses) {
                  useLanguage($uses);
                }
                resolve();
                return data;
              };
              oneTranslationsLoaded.displayName = 'refreshPostProcessor';

              loadAsync(langKey).then(oneTranslationsLoaded, reject);
            } else {
              reject();
            }
            return deferred.promise;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#instant
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns a translation instantly from the internal state of loaded translation. All rules
           * regarding the current language, the preferred language of even fallback languages will be
           * used except any promise handling. If a language was not found, an asynchronous loading
           * will be invoked in the background.
           *
           * @param {string|array} translationId A token which represents a translation id
           *                                     This can be optionally an array of translation ids which
           *                                     results that the function's promise returns an object where
           *                                     each key is the translation id and the value the translation.
           * @param {object} interpolateParams Params
           * @param {string} interpolationId The id of the interpolation to use
           * @param {string} forceLanguage A language to be used instead of the current language
           *
           * @return {string|object} translation
           */
          $translate.instant = function (translationId, interpolateParams, interpolationId, forceLanguage) {

            // we don't want to re-negotiate $uses
            var uses = forceLanguage && forceLanguage !== $uses ? // we don't want to re-negotiate $uses
            negotiateLocale(forceLanguage) || forceLanguage : $uses;

            // Detect undefined and null values to shorten the execution and prevent exceptions
            if (translationId === null || angular.isUndefined(translationId)) {
              return translationId;
            }

            // Check forceLanguage is present
            if (forceLanguage) {
              loadTranslationsIfMissing(forceLanguage);
            }

            // Duck detection: If the first argument is an array, a bunch of translations was requested.
            // The result is an object.
            if (angular.isArray(translationId)) {
              var results = {};
              for (var i = 0, c = translationId.length; i < c; i++) {
                results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId, forceLanguage);
              }
              return results;
            }

            // We discarded unacceptable values. So we just need to verify if translationId is empty String
            if (angular.isString(translationId) && translationId.length < 1) {
              return translationId;
            }

            // trim off any whitespace
            if (translationId) {
              translationId = trim.apply(translationId);
            }

            var result,
                possibleLangKeys = [];
            if ($preferredLanguage) {
              possibleLangKeys.push($preferredLanguage);
            }
            if (uses) {
              possibleLangKeys.push(uses);
            }
            if ($fallbackLanguage && $fallbackLanguage.length) {
              possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
            }
            for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
              var possibleLangKey = possibleLangKeys[j];
              if ($translationTable[possibleLangKey]) {
                if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
                  result = determineTranslationInstant(translationId, interpolateParams, interpolationId, uses);
                }
              }
              if (typeof result !== 'undefined') {
                break;
              }
            }

            if (!result && result !== '') {
              if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {
                result = applyNotFoundIndicators(translationId);
              } else {
                // Return translation of default interpolator if not found anything.
                result = defaultInterpolator.interpolate(translationId, interpolateParams, 'filter');
                if ($missingTranslationHandlerFactory && !pendingLoader) {
                  result = translateByHandler(translationId, interpolateParams);
                }
              }
            }

            return result;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#versionInfo
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the current version information for the angular-translate library
           *
           * @return {string} angular-translate version
           */
          $translate.versionInfo = function () {
            return version;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#loaderCache
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns the defined loaderCache.
           *
           * @return {boolean|string|object} current value of loaderCache
           */
          $translate.loaderCache = function () {
            return loaderCache;
          };

          // internal purpose only
          $translate.directivePriority = function () {
            return directivePriority;
          };

          // internal purpose only
          $translate.statefulFilter = function () {
            return statefulFilter;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#isReady
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns whether the service is "ready" to translate (i.e. loading 1st language).
           *
           * See also {@link pascalprecht.translate.$translate#methods_onReady onReady()}.
           *
           * @return {boolean} current value of ready
           */
          $translate.isReady = function () {
            return $isReady;
          };

          var $onReadyDeferred = $q.defer();
          $onReadyDeferred.promise.then(function () {
            $isReady = true;
          });

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#onReady
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * Returns whether the service is "ready" to translate (i.e. loading 1st language).
           *
           * See also {@link pascalprecht.translate.$translate#methods_isReady isReady()}.
           *
           * @param {Function=} fn Function to invoke when service is ready
           * @return {object} Promise resolved when service is ready
           */
          $translate.onReady = function (fn) {
            var deferred = $q.defer();
            if (angular.isFunction(fn)) {
              deferred.promise.then(fn);
            }
            if ($isReady) {
              deferred.resolve();
            } else {
              $onReadyDeferred.promise.then(deferred.resolve);
            }
            return deferred.promise;
          };

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translate#getAvailableLanguageKeys
           * @methodOf pascalprecht.translate.$translate
           *
           * @description
           * This function simply returns the registered language keys being defined before in the config phase
           * With this, an application can use the array to provide a language selection dropdown or similar
           * without any additional effort
           *
           * @returns {object} returns the list of possibly registered language keys and mapping or null if not defined
           */
          $translate.getAvailableLanguageKeys = function () {
            if ($availableLanguageKeys.length > 0) {
              return $availableLanguageKeys;
            }
            return null;
          };

          // Whenever $translateReady is being fired, this will ensure the state of $isReady
          var globalOnReadyListener = $rootScope.$on('$translateReady', function () {
            $onReadyDeferred.resolve();
            globalOnReadyListener(); // one time only
            globalOnReadyListener = null;
          });
          var globalOnChangeListener = $rootScope.$on('$translateChangeEnd', function () {
            $onReadyDeferred.resolve();
            globalOnChangeListener(); // one time only
            globalOnChangeListener = null;
          });

          if ($loaderFactory) {

            // If at least one async loader is defined and there are no
            // (default) translations available we should try to load them.
            if (angular.equals($translationTable, {})) {
              if ($translate.use()) {
                $translate.use($translate.use());
              }
            }

            // Also, if there are any fallback language registered, we start
            // loading them asynchronously as soon as we can.
            if ($fallbackLanguage && $fallbackLanguage.length) {
              var processAsyncResult = function (translation) {
                translations(translation.key, translation.table);
                $rootScope.$emit('$translateChangeEnd', { language: translation.key });
                return translation;
              };
              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                var fallbackLanguageId = $fallbackLanguage[i];
                if ($forceAsyncReloadEnabled || !$translationTable[fallbackLanguageId]) {
                  langPromises[fallbackLanguageId] = loadAsync(fallbackLanguageId).then(processAsyncResult);
                }
              }
            }
          } else {
            $rootScope.$emit('$translateReady', { language: $translate.use() });
          }

          return $translate;
        }];
      }

      $translate.displayName = 'displayName';

      /**
       * @ngdoc object
       * @name pascalprecht.translate.$translateDefaultInterpolation
       * @requires $interpolate
       *
       * @description
       * Uses angular's `$interpolate` services to interpolate strings against some values.
       *
       * Be aware to configure a proper sanitization strategy.
       *
       * See also:
       * * {@link pascalprecht.translate.$translateSanitization}
       *
       * @return {object} $translateDefaultInterpolation Interpolator service
       */
      angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', $translateDefaultInterpolation);

      function $translateDefaultInterpolation($interpolate, $translateSanitization) {

        'use strict';

        var $translateInterpolator = {},
            $locale,
            $identifier = 'default';

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
         * @methodOf pascalprecht.translate.$translateDefaultInterpolation
         *
         * @description
         * Sets current locale (this is currently not use in this interpolation).
         *
         * @param {string} locale Language key or locale.
         */
        $translateInterpolator.setLocale = function (locale) {
          $locale = locale;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
         * @methodOf pascalprecht.translate.$translateDefaultInterpolation
         *
         * @description
         * Returns an identifier for this interpolation service.
         *
         * @returns {string} $identifier
         */
        $translateInterpolator.getInterpolationIdentifier = function () {
          return $identifier;
        };

        /**
         * @deprecated will be removed in 3.0
         * @see {@link pascalprecht.translate.$translateSanitization}
         */
        $translateInterpolator.useSanitizeValueStrategy = function (value) {
          $translateSanitization.useStrategy(value);
          return this;
        };

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
         * @methodOf pascalprecht.translate.$translateDefaultInterpolation
         *
         * @description
         * Interpolates given value agains given interpolate params using angulars
         * `$interpolate` service.
         *
         * Since AngularJS 1.5, `value` must not be a string but can be anything input.
         *
         * @returns {string} interpolated string.
         */
        $translateInterpolator.interpolate = function (value, interpolationParams, context) {
          interpolationParams = interpolationParams || {};
          interpolationParams = $translateSanitization.sanitize(interpolationParams, 'params', undefined, context);

          var interpolatedText;
          if (angular.isNumber(value)) {
            // numbers are safe
            interpolatedText = '' + value;
          } else if (angular.isString(value)) {
            // strings must be interpolated (that's the job here)
            interpolatedText = $interpolate(value)(interpolationParams);
            interpolatedText = $translateSanitization.sanitize(interpolatedText, 'text', undefined, context);
          } else {
            // neither a number or a string, cant interpolate => empty string
            interpolatedText = '';
          }

          return interpolatedText;
        };

        return $translateInterpolator;
      }

      $translateDefaultInterpolation.displayName = '$translateDefaultInterpolation';

      angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc directive
       * @name pascalprecht.translate.directive:translate
       * @requires $interpolate, 
       * @requires $compile, 
       * @requires $parse, 
       * @requires $rootScope
       * @restrict AE
       *
       * @description
       * Translates given translation id either through attribute or DOM content.
       * Internally it uses $translate service to translate the translation id. It possible to
       * pass an optional `translate-values` object literal as string into translation id.
       *
       * @param {string=} translate Translation id which could be either string or interpolated string.
       * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
       * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
       * @param {string=} translate-default will be used unless translation was successful
       * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translateProvider#methods_usePostCompiling}
       * @param {boolean=} translate-keep-content (default true if present) defines that in case a KEY could not be translated, that the existing content is left in the innerHTML}
       *
       * @example
         <example module="ngView">
          <file name="index.html">
            <div ng-controller="TranslateCtrl">
      
              <pre translate="TRANSLATION_ID"></pre>
              <pre translate>TRANSLATION_ID</pre>
              <pre translate translate-attr-title="TRANSLATION_ID"></pre>
              <pre translate="{{translationId}}"></pre>
              <pre translate>{{translationId}}</pre>
              <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
              <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
              <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
              <pre translate translate-values="{{values}}">WITH_VALUES</pre>
              <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>
              <pre translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hi"></pre>
      
            </div>
          </file>
          <file name="script.js">
            angular.module('ngView', ['pascalprecht.translate'])
      
            .config(function ($translateProvider) {
      
              $translateProvider.translations('en',{
                'TRANSLATION_ID': 'Hello there!',
                'WITH_VALUES': 'The following value is dynamic: {{value}}',
                'WITH_CAMEL_CASE_KEY': 'The interpolation key is camel cased: {{camelCaseKey}}'
              }).preferredLanguage('en');
      
            });
      
            angular.module('ngView').controller('TranslateCtrl', function ($scope) {
              $scope.translationId = 'TRANSLATION_ID';
      
              $scope.values = {
                value: 78
              };
            });
          </file>
          <file name="scenario.js">
            it('should translate', function () {
              inject(function ($rootScope, $compile) {
                $rootScope.translationId = 'TRANSLATION_ID';
      
                element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
                $rootScope.$digest();
                expect(element.text()).toBe('Hello there!');
      
                element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
                $rootScope.$digest();
                expect(element.text()).toBe('Hello there!');
      
                element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
                $rootScope.$digest();
                expect(element.text()).toBe('Hello there!');
      
                element = $compile('<p translate>{{translationId}}</p>')($rootScope);
                $rootScope.$digest();
                expect(element.text()).toBe('Hello there!');
      
                element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
                $rootScope.$digest();
                expect(element.attr('title')).toBe('Hello there!');
      
                element = $compile('<p translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hello"></p>')($rootScope);
                $rootScope.$digest();
                expect(element.text()).toBe('The interpolation key is camel cased: Hello');
              });
            });
          </file>
         </example>
       */
      .directive('translate', translateDirective);
      function translateDirective($translate, $interpolate, $compile, $parse, $rootScope) {

        'use strict';

        /**
         * @name trim
         * @private
         *
         * @description
         * trim polyfill
         *
         * @returns {string} The string stripped of whitespace from both ends
         */

        var trim = function () {
          return this.toString().replace(/^\s+|\s+$/g, '');
        };

        return {
          restrict: 'AE',
          scope: true,
          priority: $translate.directivePriority(),
          compile: function (tElement, tAttr) {

            var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined;

            var translateInterpolation = tAttr.translateInterpolation ? tAttr.translateInterpolation : undefined;

            var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);

            var interpolateRegExp = '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)',
                watcherRegExp = '^(.*)' + $interpolate.startSymbol() + '(.*)' + $interpolate.endSymbol() + '(.*)';

            return function linkFn(scope, iElement, iAttr) {

              scope.interpolateParams = {};
              scope.preText = '';
              scope.postText = '';
              scope.translateNamespace = getTranslateNamespace(scope);
              var translationIds = {};

              var initInterpolationParams = function (interpolateParams, iAttr, tAttr) {
                // initial setup
                if (iAttr.translateValues) {
                  angular.extend(interpolateParams, $parse(iAttr.translateValues)(scope.$parent));
                }
                // initially fetch all attributes if existing and fill the params
                if (translateValueExist) {
                  for (var attr in tAttr) {
                    if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                      var attributeName = angular.lowercase(attr.substr(14, 1)) + attr.substr(15);
                      interpolateParams[attributeName] = tAttr[attr];
                    }
                  }
                }
              };

              // Ensures any change of the attribute "translate" containing the id will
              // be re-stored to the scope's "translationId".
              // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
              var observeElementTranslation = function (translationId) {

                // Remove any old watcher
                if (angular.isFunction(observeElementTranslation._unwatchOld)) {
                  observeElementTranslation._unwatchOld();
                  observeElementTranslation._unwatchOld = undefined;
                }

                if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {
                  var iElementText = trim.apply(iElement.text());

                  // Resolve translation id by inner html if required
                  var interpolateMatches = iElementText.match(interpolateRegExp);
                  // Interpolate translation id if required
                  if (angular.isArray(interpolateMatches)) {
                    scope.preText = interpolateMatches[1];
                    scope.postText = interpolateMatches[3];
                    translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent);
                    var watcherMatches = iElementText.match(watcherRegExp);
                    if (angular.isArray(watcherMatches) && watcherMatches[2] && watcherMatches[2].length) {
                      observeElementTranslation._unwatchOld = scope.$watch(watcherMatches[2], function (newValue) {
                        translationIds.translate = newValue;
                        updateTranslations();
                      });
                    }
                  } else {
                    // do not assigne the translation id if it is empty.
                    translationIds.translate = !iElementText ? undefined : iElementText;
                  }
                } else {
                  translationIds.translate = translationId;
                }
                updateTranslations();
              };

              var observeAttributeTranslation = function (translateAttr) {
                iAttr.$observe(translateAttr, function (translationId) {
                  translationIds[translateAttr] = translationId;
                  updateTranslations();
                });
              };

              // initial setup with values
              initInterpolationParams(scope.interpolateParams, iAttr, tAttr);

              var firstAttributeChangedEvent = true;
              iAttr.$observe('translate', function (translationId) {
                if (typeof translationId === 'undefined') {
                  // case of element "<translate>xyz</translate>"
                  observeElementTranslation('');
                } else {
                  // case of regular attribute
                  if (translationId !== '' || !firstAttributeChangedEvent) {
                    translationIds.translate = translationId;
                    updateTranslations();
                  }
                }
                firstAttributeChangedEvent = false;
              });

              for (var translateAttr in iAttr) {
                if (iAttr.hasOwnProperty(translateAttr) && translateAttr.substr(0, 13) === 'translateAttr' && translateAttr.length > 13) {
                  observeAttributeTranslation(translateAttr);
                }
              }

              iAttr.$observe('translateDefault', function (value) {
                scope.defaultText = value;
                updateTranslations();
              });

              if (translateValuesExist) {
                iAttr.$observe('translateValues', function (interpolateParams) {
                  if (interpolateParams) {
                    scope.$parent.$watch(function () {
                      angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
                    });
                  }
                });
              }

              if (translateValueExist) {
                var observeValueAttribute = function (attrName) {
                  iAttr.$observe(attrName, function (value) {
                    var attributeName = angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15);
                    scope.interpolateParams[attributeName] = value;
                  });
                };
                for (var attr in iAttr) {
                  if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                    observeValueAttribute(attr);
                  }
                }
              }

              // Master update function
              var updateTranslations = function () {
                for (var key in translationIds) {
                  if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {
                    updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText, scope.translateNamespace);
                  }
                }
              };

              // Put translation processing function outside loop
              var updateTranslation = function (translateAttr, translationId, scope, interpolateParams, defaultTranslationText, translateNamespace) {
                if (translationId) {
                  // if translation id starts with '.' and translateNamespace given, prepend namespace
                  if (translateNamespace && translationId.charAt(0) === '.') {
                    translationId = translateNamespace + translationId;
                  }

                  $translate(translationId, interpolateParams, translateInterpolation, defaultTranslationText, scope.translateLanguage).then(function (translation) {
                    applyTranslation(translation, scope, true, translateAttr);
                  }, function (translationId) {
                    applyTranslation(translationId, scope, false, translateAttr);
                  });
                } else {
                  // as an empty string cannot be translated, we can solve this using successful=false
                  applyTranslation(translationId, scope, false, translateAttr);
                }
              };

              var applyTranslation = function (value, scope, successful, translateAttr) {
                if (!successful) {
                  if (typeof scope.defaultText !== 'undefined') {
                    value = scope.defaultText;
                  }
                }
                if (translateAttr === 'translate') {
                  // default translate into innerHTML
                  if (successful || !successful && !$translate.isKeepContent() && typeof iAttr.translateKeepContent === 'undefined') {
                    iElement.empty().append(scope.preText + value + scope.postText);
                  }
                  var globallyEnabled = $translate.isPostCompilingEnabled();
                  var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
                  var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
                  if (globallyEnabled && !locallyDefined || locallyEnabled) {
                    $compile(iElement.contents())(scope);
                  }
                } else {
                  // translate attribute
                  var attributeName = iAttr.$attr[translateAttr];
                  if (attributeName.substr(0, 5) === 'data-') {
                    // ensure html5 data prefix is stripped
                    attributeName = attributeName.substr(5);
                  }
                  attributeName = attributeName.substr(15);
                  iElement.attr(attributeName, value);
                }
              };

              if (translateValuesExist || translateValueExist || iAttr.translateDefault) {
                scope.$watch('interpolateParams', updateTranslations, true);
              }

              // Replaced watcher on translateLanguage with event listener
              scope.$on('translateLanguageChanged', updateTranslations);

              // Ensures the text will be refreshed after the current language was changed
              // w/ $translate.use(...)
              var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

              // ensure translation will be looked up at least one
              if (iElement.text().length) {
                if (iAttr.translate) {
                  observeElementTranslation(iAttr.translate);
                } else {
                  observeElementTranslation('');
                }
              } else if (iAttr.translate) {
                // ensure attribute will be not skipped
                observeElementTranslation(iAttr.translate);
              }
              updateTranslations();
              scope.$on('$destroy', unbind);
            };
          }
        };
      }

      /**
       * Returns the scope's namespace.
       * @private
       * @param scope
       * @returns {string}
       */
      function getTranslateNamespace(scope) {
        'use strict';

        if (scope.translateNamespace) {
          return scope.translateNamespace;
        }
        if (scope.$parent) {
          return getTranslateNamespace(scope.$parent);
        }
      }

      translateDirective.displayName = 'translateDirective';

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc directive
       * @name pascalprecht.translate.directive:translate-attr
       * @restrict A
       *
       * @description
       * Translates attributes like translate-attr-ATTR, but with an object like ng-class.
       * Internally it uses `translate` service to translate translation id. It possible to
       * pass an optional `translate-values` object literal as string into translation id.
       *
       * @param {string=} translate-attr Object literal mapping attributes to translation ids.
       * @param {string=} translate-values Values to pass into the translation ids. Can be passed as object literal string.
       *
       * @example
         <example module="ngView">
          <file name="index.html">
            <div ng-controller="TranslateCtrl">
      
              <input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{value: 5}" />
      
            </div>
          </file>
          <file name="script.js">
            angular.module('ngView', ['pascalprecht.translate'])
      
            .config(function ($translateProvider) {
      
              $translateProvider.translations('en',{
                'TRANSLATION_ID': 'Hello there!',
                'WITH_VALUES': 'The following value is dynamic: {{value}}',
              }).preferredLanguage('en');
      
            });
      
            angular.module('ngView').controller('TranslateCtrl', function ($scope) {
              $scope.translationId = 'TRANSLATION_ID';
      
              $scope.values = {
                value: 78
              };
            });
          </file>
          <file name="scenario.js">
            it('should translate', function () {
              inject(function ($rootScope, $compile) {
                $rootScope.translationId = 'TRANSLATION_ID';
      
                element = $compile('<input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{ value: 5 }" />')($rootScope);
                $rootScope.$digest();
                expect(element.attr('placeholder)).toBe('Hello there!');
                expect(element.attr('title)).toBe('The following value is dynamic: 5');
              });
            });
          </file>
         </example>
       */
      .directive('translateAttr', translateAttrDirective);
      function translateAttrDirective($translate, $rootScope) {

        'use strict';

        return {
          restrict: 'A',
          priority: $translate.directivePriority(),
          link: function linkFn(scope, element, attr) {

            var translateAttr,
                translateValues,
                previousAttributes = {};

            // Main update translations function
            var updateTranslations = function () {
              angular.forEach(translateAttr, function (translationId, attributeName) {
                if (!translationId) {
                  return;
                }
                previousAttributes[attributeName] = true;

                // if translation id starts with '.' and translateNamespace given, prepend namespace
                if (scope.translateNamespace && translationId.charAt(0) === '.') {
                  translationId = scope.translateNamespace + translationId;
                }
                $translate(translationId, translateValues, attr.translateInterpolation, undefined, scope.translateLanguage).then(function (translation) {
                  element.attr(attributeName, translation);
                }, function (translationId) {
                  element.attr(attributeName, translationId);
                });
              });

              // Removing unused attributes that were previously used
              angular.forEach(previousAttributes, function (flag, attributeName) {
                if (!translateAttr[attributeName]) {
                  element.removeAttr(attributeName);
                  delete previousAttributes[attributeName];
                }
              });
            };

            // Watch for attribute changes
            watchAttribute(scope, attr.translateAttr, function (newValue) {
              translateAttr = newValue;
            }, updateTranslations);
            // Watch for value changes
            watchAttribute(scope, attr.translateValues, function (newValue) {
              translateValues = newValue;
            }, updateTranslations);

            if (attr.translateValues) {
              scope.$watch(attr.translateValues, updateTranslations, true);
            }

            // Replaced watcher on translateLanguage with event listener
            scope.$on('translateLanguageChanged', updateTranslations);

            // Ensures the text will be refreshed after the current language was changed
            // w/ $translate.use(...)
            var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

            updateTranslations();
            scope.$on('$destroy', unbind);
          }
        };
      }

      function watchAttribute(scope, attribute, valueCallback, changeCallback) {
        'use strict';

        if (!attribute) {
          return;
        }
        if (attribute.substr(0, 2) === '::') {
          attribute = attribute.substr(2);
        } else {
          scope.$watch(attribute, function (newValue) {
            valueCallback(newValue);
            changeCallback();
          }, true);
        }
        valueCallback(scope.$eval(attribute));
      }

      translateAttrDirective.displayName = 'translateAttrDirective';

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc directive
       * @name pascalprecht.translate.directive:translateCloak
       * @requires $rootScope
       * @requires $translate
       * @restrict A
       *
       * $description
       * Adds a `translate-cloak` class name to the given element where this directive
       * is applied initially and removes it, once a loader has finished loading.
       *
       * This directive can be used to prevent initial flickering when loading translation
       * data asynchronously.
       *
       * The class name is defined in
       * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
       *
       * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
       *                                  or hiding the cloak. Basically it relies on the translation
       *                                  resolve.
       */
      .directive('translateCloak', translateCloakDirective);

      function translateCloakDirective($translate, $rootScope) {

        'use strict';

        return {
          compile: function (tElement) {
            var applyCloak = function () {
              tElement.addClass($translate.cloakClassName());
            },
                removeCloak = function () {
              tElement.removeClass($translate.cloakClassName());
            };
            $translate.onReady(function () {
              removeCloak();
            });
            applyCloak();

            return function linkFn(scope, iElement, iAttr) {
              if (iAttr.translateCloak && iAttr.translateCloak.length) {
                // Register a watcher for the defined translation allowing a fine tuned cloak
                iAttr.$observe('translateCloak', function (translationId) {
                  $translate(translationId).then(removeCloak, applyCloak);
                });
                // Register for change events as this is being another indicicator revalidating the cloak)
                $rootScope.$on('$translateChangeSuccess', function () {
                  $translate(iAttr.translateCloak).then(removeCloak, applyCloak);
                });
              }
            };
          }
        };
      }

      translateCloakDirective.displayName = 'translateCloakDirective';

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc directive
       * @name pascalprecht.translate.directive:translateNamespace
       * @restrict A
       *
       * @description
       * Translates given translation id either through attribute or DOM content.
       * Internally it uses `translate` filter to translate translation id. It possible to
       * pass an optional `translate-values` object literal as string into translation id.
       *
       * @param {string=} translate namespace name which could be either string or interpolated string.
       *
       * @example
         <example module="ngView">
          <file name="index.html">
            <div translate-namespace="CONTENT">
      
              <div>
                  <h1 translate>.HEADERS.TITLE</h1>
                  <h1 translate>.HEADERS.WELCOME</h1>
              </div>
      
              <div translate-namespace=".HEADERS">
                  <h1 translate>.TITLE</h1>
                  <h1 translate>.WELCOME</h1>
              </div>
      
            </div>
          </file>
          <file name="script.js">
            angular.module('ngView', ['pascalprecht.translate'])
      
            .config(function ($translateProvider) {
      
              $translateProvider.translations('en',{
                'TRANSLATION_ID': 'Hello there!',
                'CONTENT': {
                  'HEADERS': {
                      TITLE: 'Title'
                  }
                },
                'CONTENT.HEADERS.WELCOME': 'Welcome'
              }).preferredLanguage('en');
      
            });
      
          </file>
         </example>
       */
      .directive('translateNamespace', translateNamespaceDirective);

      function translateNamespaceDirective() {

        'use strict';

        return {
          restrict: 'A',
          scope: true,
          compile: function () {
            return {
              pre: function (scope, iElement, iAttrs) {
                scope.translateNamespace = getTranslateNamespace(scope);

                if (scope.translateNamespace && iAttrs.translateNamespace.charAt(0) === '.') {
                  scope.translateNamespace += iAttrs.translateNamespace;
                } else {
                  scope.translateNamespace = iAttrs.translateNamespace;
                }
              }
            };
          }
        };
      }

      /**
       * Returns the scope's namespace.
       * @private
       * @param scope
       * @returns {string}
       */
      function getTranslateNamespace(scope) {
        'use strict';

        if (scope.translateNamespace) {
          return scope.translateNamespace;
        }
        if (scope.$parent) {
          return getTranslateNamespace(scope.$parent);
        }
      }

      translateNamespaceDirective.displayName = 'translateNamespaceDirective';

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc directive
       * @name pascalprecht.translate.directive:translateLanguage
       * @restrict A
       *
       * @description
       * Forces the language to the directives in the underlying scope.
       *
       * @param {string=} translate language that will be negotiated.
       *
       * @example
         <example module="ngView">
          <file name="index.html">
            <div>
      
              <div>
                  <h1 translate>HELLO</h1>
              </div>
      
              <div translate-language="de">
                  <h1 translate>HELLO</h1>
              </div>
      
            </div>
          </file>
          <file name="script.js">
            angular.module('ngView', ['pascalprecht.translate'])
      
            .config(function ($translateProvider) {
      
              $translateProvider
                .translations('en',{
                  'HELLO': 'Hello world!'
                })
                .translations('de',{
                  'HELLO': 'Hallo Welt!'
                })
                .preferredLanguage('en');
      
            });
      
          </file>
         </example>
       */
      .directive('translateLanguage', translateLanguageDirective);

      function translateLanguageDirective() {

        'use strict';

        return {
          restrict: 'A',
          scope: true,
          compile: function () {
            return function linkFn(scope, iElement, iAttrs) {

              iAttrs.$observe('translateLanguage', function (newTranslateLanguage) {
                scope.translateLanguage = newTranslateLanguage;
              });

              scope.$watch('translateLanguage', function () {
                scope.$broadcast('translateLanguageChanged');
              });
            };
          }
        };
      }

      translateLanguageDirective.displayName = 'translateLanguageDirective';

      angular.module('pascalprecht.translate')
      /**
       * @ngdoc filter
       * @name pascalprecht.translate.filter:translate
       * @requires $parse
       * @requires pascalprecht.translate.$translate
       * @function
       *
       * @description
       * Uses `$translate` service to translate contents. Accepts interpolate parameters
       * to pass dynamized values though translation.
       *
       * @param {string} translationId A translation id to be translated.
       * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
       *
       * @returns {string} Translated text.
       *
       * @example
         <example module="ngView">
          <file name="index.html">
            <div ng-controller="TranslateCtrl">
      
              <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
              <pre>{{ translationId | translate }}</pre>
              <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
              <pre>{{ 'WITH_VALUES' | translate:values }}</pre>
      
            </div>
          </file>
          <file name="script.js">
            angular.module('ngView', ['pascalprecht.translate'])
      
            .config(function ($translateProvider) {
      
              $translateProvider.translations('en', {
                'TRANSLATION_ID': 'Hello there!',
                'WITH_VALUES': 'The following value is dynamic: {{value}}'
              });
              $translateProvider.preferredLanguage('en');
      
            });
      
            angular.module('ngView').controller('TranslateCtrl', function ($scope) {
              $scope.translationId = 'TRANSLATION_ID';
      
              $scope.values = {
                value: 78
              };
            });
          </file>
         </example>
       */
      .filter('translate', translateFilterFactory);

      function translateFilterFactory($parse, $translate) {

        'use strict';

        var translateFilter = function (translationId, interpolateParams, interpolation, forceLanguage) {
          if (!angular.isObject(interpolateParams)) {
            interpolateParams = $parse(interpolateParams)(this);
          }

          return $translate.instant(translationId, interpolateParams, interpolation, forceLanguage);
        };

        if ($translate.statefulFilter()) {
          translateFilter.$stateful = true;
        }

        return translateFilter;
      }

      translateFilterFactory.displayName = 'translateFilterFactory';

      angular.module('pascalprecht.translate')

      /**
       * @ngdoc object
       * @name pascalprecht.translate.$translationCache
       * @requires $cacheFactory
       *
       * @description
       * The first time a translation table is used, it is loaded in the translation cache for quick retrieval. You
       * can load translation tables directly into the cache by consuming the
       * `$translationCache` service directly.
       *
       * @return {object} $cacheFactory object.
       */
      .factory('$translationCache', $translationCache);

      function $translationCache($cacheFactory) {

        'use strict';

        return $cacheFactory('translations');
      }

      $translationCache.displayName = '$translationCache';
      return 'pascalprecht.translate';
    });
  }, {}], 58: [function (require, module, exports) {
    /**
     * @license AngularJS v1.5.8
     * (c) 2010-2016 Google, Inc. http://angularjs.org
     * License: MIT
     */
    (function (window) {
      'use strict';

      /**
       * @description
       *
       * This object provides a utility for producing rich Error messages within
       * Angular. It can be called as follows:
       *
       * var exampleMinErr = minErr('example');
       * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
       *
       * The above creates an instance of minErr in the example namespace. The
       * resulting error will have a namespaced error code of example.one.  The
       * resulting error will replace {0} with the value of foo, and {1} with the
       * value of bar. The object is not restricted in the number of arguments it can
       * take.
       *
       * If fewer arguments are specified than necessary for interpolation, the extra
       * interpolation markers will be preserved in the final string.
       *
       * Since data will be parsed statically during a build step, some restrictions
       * are applied with respect to how minErr instances are created and called.
       * Instances should have names of the form namespaceMinErr for a minErr created
       * using minErr('namespace') . Error codes, namespaces and template strings
       * should all be static strings, not variables or general expressions.
       *
       * @param {string} module The namespace to use for the new minErr instance.
       * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
       *   error from returned function, for cases when a particular type of error is useful.
       * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
       */

      function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        return function () {
          var SKIP_INDEXES = 2;

          var templateArgs = arguments,
              code = templateArgs[0],
              message = '[' + (module ? module + ':' : '') + code + '] ',
              template = templateArgs[1],
              paramPrefix,
              i;

          message += template.replace(/\{\d+\}/g, function (match) {
            var index = +match.slice(1, -1),
                shiftedIndex = index + SKIP_INDEXES;

            if (shiftedIndex < templateArgs.length) {
              return toDebugString(templateArgs[shiftedIndex]);
            }

            return match;
          });

          message += '\nhttp://errors.angularjs.org/1.5.8/' + (module ? module + '/' : '') + code;

          for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
            message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' + encodeURIComponent(toDebugString(templateArgs[i]));
          }

          return new ErrorConstructor(message);
        };
      }

      /* We need to tell jshint what variables are being exported */
      /* global angular: true,
        msie: true,
        jqLite: true,
        jQuery: true,
        slice: true,
        splice: true,
        push: true,
        toString: true,
        ngMinErr: true,
        angularModule: true,
        uid: true,
        REGEX_STRING_REGEXP: true,
        VALIDITY_STATE_PROPERTY: true,
      
        lowercase: true,
        uppercase: true,
        manualLowercase: true,
        manualUppercase: true,
        nodeName_: true,
        isArrayLike: true,
        forEach: true,
        forEachSorted: true,
        reverseParams: true,
        nextUid: true,
        setHashKey: true,
        extend: true,
        toInt: true,
        inherit: true,
        merge: true,
        noop: true,
        identity: true,
        valueFn: true,
        isUndefined: true,
        isDefined: true,
        isObject: true,
        isBlankObject: true,
        isString: true,
        isNumber: true,
        isDate: true,
        isArray: true,
        isFunction: true,
        isRegExp: true,
        isWindow: true,
        isScope: true,
        isFile: true,
        isFormData: true,
        isBlob: true,
        isBoolean: true,
        isPromiseLike: true,
        trim: true,
        escapeForRegexp: true,
        isElement: true,
        makeMap: true,
        includes: true,
        arrayRemove: true,
        copy: true,
        equals: true,
        csp: true,
        jq: true,
        concat: true,
        sliceArgs: true,
        bind: true,
        toJsonReplacer: true,
        toJson: true,
        fromJson: true,
        convertTimezoneToLocal: true,
        timezoneToOffset: true,
        startingTag: true,
        tryDecodeURIComponent: true,
        parseKeyValue: true,
        toKeyValue: true,
        encodeUriSegment: true,
        encodeUriQuery: true,
        angularInit: true,
        bootstrap: true,
        getTestability: true,
        snake_case: true,
        bindJQuery: true,
        assertArg: true,
        assertArgFn: true,
        assertNotHasOwnProperty: true,
        getter: true,
        getBlockNodes: true,
        hasOwnProperty: true,
        createMap: true,
      
        NODE_TYPE_ELEMENT: true,
        NODE_TYPE_ATTRIBUTE: true,
        NODE_TYPE_TEXT: true,
        NODE_TYPE_COMMENT: true,
        NODE_TYPE_DOCUMENT: true,
        NODE_TYPE_DOCUMENT_FRAGMENT: true,
      */

      ////////////////////////////////////

      /**
       * @ngdoc module
       * @name ng
       * @module ng
       * @installation
       * @description
       *
       * # ng (core module)
       * The ng module is loaded by default when an AngularJS application is started. The module itself
       * contains the essential components for an AngularJS application to function. The table below
       * lists a high level breakdown of each of the services/factories, filters, directives and testing
       * components available within this core module.
       *
       * <div doc-module-components="ng"></div>
       */

      var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

      // The name of a form control's ValidityState property.
      // This is used so that it's possible for internal tests to create mock ValidityStates.
      var VALIDITY_STATE_PROPERTY = 'validity';

      var hasOwnProperty = Object.prototype.hasOwnProperty;

      var lowercase = function (string) {
        return isString(string) ? string.toLowerCase() : string;
      };
      var uppercase = function (string) {
        return isString(string) ? string.toUpperCase() : string;
      };

      var manualLowercase = function (s) {
        /* jshint bitwise: false */
        return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
          return String.fromCharCode(ch.charCodeAt(0) | 32);
        }) : s;
      };
      var manualUppercase = function (s) {
        /* jshint bitwise: false */
        return isString(s) ? s.replace(/[a-z]/g, function (ch) {
          return String.fromCharCode(ch.charCodeAt(0) & ~32);
        }) : s;
      };

      // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
      // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
      // with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
      if ('i' !== 'I'.toLowerCase()) {
        lowercase = manualLowercase;
        uppercase = manualUppercase;
      }

      var msie,
          // holds major version number for IE, or NaN if UA is not IE.
      jqLite,
          // delay binding since jQuery could be loaded after us.
      jQuery,
          // delay binding
      slice = [].slice,
          splice = [].splice,
          push = [].push,
          toString = Object.prototype.toString,
          getPrototypeOf = Object.getPrototypeOf,
          ngMinErr = minErr('ng'),


      /** @name angular */
      angular = window.angular || (window.angular = {}),
          angularModule,
          uid = 0;

      /**
       * documentMode is an IE-only property
       * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
       */
      msie = window.document.documentMode;

      /**
       * @private
       * @param {*} obj
       * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
       *                   String ...)
       */
      function isArrayLike(obj) {

        // `null`, `undefined` and `window` are not array-like
        if (obj == null || isWindow(obj)) return false;

        // arrays, strings and jQuery/jqLite objects are array like
        // * jqLite is either the jQuery or jqLite constructor function
        // * we have to check the existence of jqLite first as this method is called
        //   via the forEach method when constructing the jqLite object in the first place
        if (isArray(obj) || isString(obj) || jqLite && obj instanceof jqLite) return true;

        // Support: iOS 8.2 (not reproducible in simulator)
        // "length" in obj used to prevent JIT error (gh-11508)
        var length = "length" in Object(obj) && obj.length;

        // NodeList objects (with `item` method) and
        // other objects with suitable length characteristics are array-like
        return isNumber(length) && (length >= 0 && (length - 1 in obj || obj instanceof Array) || typeof obj.item == 'function');
      }

      /**
       * @ngdoc function
       * @name angular.forEach
       * @module ng
       * @kind function
       *
       * @description
       * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
       * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
       * is the value of an object property or an array element, `key` is the object property key or
       * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
       *
       * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
       * using the `hasOwnProperty` method.
       *
       * Unlike ES262's
       * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
       * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
       * return the value provided.
       *
         ```js
           var values = {name: 'misko', gender: 'male'};
           var log = [];
           angular.forEach(values, function(value, key) {
             this.push(key + ': ' + value);
           }, log);
           expect(log).toEqual(['name: misko', 'gender: male']);
         ```
       *
       * @param {Object|Array} obj Object to iterate over.
       * @param {Function} iterator Iterator function.
       * @param {Object=} context Object to become context (`this`) for the iterator function.
       * @returns {Object|Array} Reference to `obj`.
       */

      function forEach(obj, iterator, context) {
        var key, length;
        if (obj) {
          if (isFunction(obj)) {
            for (key in obj) {
              // Need to check if hasOwnProperty exists,
              // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
              if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else if (isArray(obj) || isArrayLike(obj)) {
            var isPrimitive = typeof obj !== 'object';
            for (key = 0, length = obj.length; key < length; key++) {
              if (isPrimitive || key in obj) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else if (obj.forEach && obj.forEach !== forEach) {
            obj.forEach(iterator, context, obj);
          } else if (isBlankObject(obj)) {
            // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
            for (key in obj) {
              iterator.call(context, obj[key], key, obj);
            }
          } else if (typeof obj.hasOwnProperty === 'function') {
            // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
            for (key in obj) {
              if (obj.hasOwnProperty(key)) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          } else {
            // Slow path for objects which do not have a method `hasOwnProperty`
            for (key in obj) {
              if (hasOwnProperty.call(obj, key)) {
                iterator.call(context, obj[key], key, obj);
              }
            }
          }
        }
        return obj;
      }

      function forEachSorted(obj, iterator, context) {
        var keys = Object.keys(obj).sort();
        for (var i = 0; i < keys.length; i++) {
          iterator.call(context, obj[keys[i]], keys[i]);
        }
        return keys;
      }

      /**
       * when using forEach the params are value, key, but it is often useful to have key, value.
       * @param {function(string, *)} iteratorFn
       * @returns {function(*, string)}
       */
      function reverseParams(iteratorFn) {
        return function (value, key) {
          iteratorFn(key, value);
        };
      }

      /**
       * A consistent way of creating unique IDs in angular.
       *
       * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
       * we hit number precision issues in JavaScript.
       *
       * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
       *
       * @returns {number} an unique alpha-numeric string
       */
      function nextUid() {
        return ++uid;
      }

      /**
       * Set or clear the hashkey for an object.
       * @param obj object
       * @param h the hashkey (!truthy to delete the hashkey)
       */
      function setHashKey(obj, h) {
        if (h) {
          obj.$$hashKey = h;
        } else {
          delete obj.$$hashKey;
        }
      }

      function baseExtend(dst, objs, deep) {
        var h = dst.$$hashKey;

        for (var i = 0, ii = objs.length; i < ii; ++i) {
          var obj = objs[i];
          if (!isObject(obj) && !isFunction(obj)) continue;
          var keys = Object.keys(obj);
          for (var j = 0, jj = keys.length; j < jj; j++) {
            var key = keys[j];
            var src = obj[key];

            if (deep && isObject(src)) {
              if (isDate(src)) {
                dst[key] = new Date(src.valueOf());
              } else if (isRegExp(src)) {
                dst[key] = new RegExp(src);
              } else if (src.nodeName) {
                dst[key] = src.cloneNode(true);
              } else if (isElement(src)) {
                dst[key] = src.clone();
              } else {
                if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
                baseExtend(dst[key], [src], true);
              }
            } else {
              dst[key] = src;
            }
          }
        }

        setHashKey(dst, h);
        return dst;
      }

      /**
       * @ngdoc function
       * @name angular.extend
       * @module ng
       * @kind function
       *
       * @description
       * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
       * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
       * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
       *
       * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
       * {@link angular.merge} for this.
       *
       * @param {Object} dst Destination object.
       * @param {...Object} src Source object(s).
       * @returns {Object} Reference to `dst`.
       */
      function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), false);
      }

      /**
      * @ngdoc function
      * @name angular.merge
      * @module ng
      * @kind function
      *
      * @description
      * Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
      * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
      * by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
      *
      * Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
      * objects, performing a deep copy.
      *
      * @param {Object} dst Destination object.
      * @param {...Object} src Source object(s).
      * @returns {Object} Reference to `dst`.
      */
      function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), true);
      }

      function toInt(str) {
        return parseInt(str, 10);
      }

      function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
      }

      /**
       * @ngdoc function
       * @name angular.noop
       * @module ng
       * @kind function
       *
       * @description
       * A function that performs no operations. This function can be useful when writing code in the
       * functional style.
         ```js
           function foo(callback) {
             var result = calculateResult();
             (callback || angular.noop)(result);
           }
         ```
       */
      function noop() {}
      noop.$inject = [];

      /**
       * @ngdoc function
       * @name angular.identity
       * @module ng
       * @kind function
       *
       * @description
       * A function that returns its first argument. This function is useful when writing code in the
       * functional style.
       *
         ```js
         function transformer(transformationFn, value) {
           return (transformationFn || angular.identity)(value);
         };
      
         // E.g.
         function getResult(fn, input) {
           return (fn || angular.identity)(input);
         };
      
         getResult(function(n) { return n * 2; }, 21);   // returns 42
         getResult(null, 21);                            // returns 21
         getResult(undefined, 21);                       // returns 21
         ```
       *
       * @param {*} value to be returned.
       * @returns {*} the value passed in.
       */
      function identity($) {
        return $;
      }
      identity.$inject = [];

      function valueFn(value) {
        return function valueRef() {
          return value;
        };
      }

      function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== toString;
      }

      /**
       * @ngdoc function
       * @name angular.isUndefined
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is undefined.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is undefined.
       */
      function isUndefined(value) {
        return typeof value === 'undefined';
      }

      /**
       * @ngdoc function
       * @name angular.isDefined
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is defined.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is defined.
       */
      function isDefined(value) {
        return typeof value !== 'undefined';
      }

      /**
       * @ngdoc function
       * @name angular.isObject
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
       * considered to be objects. Note that JavaScript arrays are objects.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is an `Object` but not `null`.
       */
      function isObject(value) {
        // http://jsperf.com/isobject4
        return value !== null && typeof value === 'object';
      }

      /**
       * Determine if a value is an object with a null prototype
       *
       * @returns {boolean} True if `value` is an `Object` with a null prototype
       */
      function isBlankObject(value) {
        return value !== null && typeof value === 'object' && !getPrototypeOf(value);
      }

      /**
       * @ngdoc function
       * @name angular.isString
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is a `String`.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a `String`.
       */
      function isString(value) {
        return typeof value === 'string';
      }

      /**
       * @ngdoc function
       * @name angular.isNumber
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is a `Number`.
       *
       * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
       *
       * If you wish to exclude these then you can use the native
       * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
       * method.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a `Number`.
       */
      function isNumber(value) {
        return typeof value === 'number';
      }

      /**
       * @ngdoc function
       * @name angular.isDate
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a value is a date.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a `Date`.
       */
      function isDate(value) {
        return toString.call(value) === '[object Date]';
      }

      /**
       * @ngdoc function
       * @name angular.isArray
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is an `Array`.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is an `Array`.
       */
      var isArray = Array.isArray;

      /**
       * @ngdoc function
       * @name angular.isFunction
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is a `Function`.
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a `Function`.
       */
      function isFunction(value) {
        return typeof value === 'function';
      }

      /**
       * Determines if a value is a regular expression object.
       *
       * @private
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a `RegExp`.
       */
      function isRegExp(value) {
        return toString.call(value) === '[object RegExp]';
      }

      /**
       * Checks if `obj` is a window object.
       *
       * @private
       * @param {*} obj Object to check
       * @returns {boolean} True if `obj` is a window obj.
       */
      function isWindow(obj) {
        return obj && obj.window === obj;
      }

      function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
      }

      function isFile(obj) {
        return toString.call(obj) === '[object File]';
      }

      function isFormData(obj) {
        return toString.call(obj) === '[object FormData]';
      }

      function isBlob(obj) {
        return toString.call(obj) === '[object Blob]';
      }

      function isBoolean(value) {
        return typeof value === 'boolean';
      }

      function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
      }

      var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
      function isTypedArray(value) {
        return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
      }

      function isArrayBuffer(obj) {
        return toString.call(obj) === '[object ArrayBuffer]';
      }

      var trim = function (value) {
        return isString(value) ? value.trim() : value;
      };

      // Copied from:
      // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
      // Prereq: s is a string.
      var escapeForRegexp = function (s) {
        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
      };

      /**
       * @ngdoc function
       * @name angular.isElement
       * @module ng
       * @kind function
       *
       * @description
       * Determines if a reference is a DOM element (or wrapped jQuery element).
       *
       * @param {*} value Reference to check.
       * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
       */
      function isElement(node) {
        return !!(node && (node.nodeName // We are a direct element.
        || node.prop && node.attr && node.find)); // We have an on and find method part of jQuery API.
      }

      /**
       * @param str 'key1,key2,...'
       * @returns {object} in the form of {key1:true, key2:true, ...}
       */
      function makeMap(str) {
        var obj = {},
            items = str.split(','),
            i;
        for (i = 0; i < items.length; i++) {
          obj[items[i]] = true;
        }
        return obj;
      }

      function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
      }

      function includes(array, obj) {
        return Array.prototype.indexOf.call(array, obj) != -1;
      }

      function arrayRemove(array, value) {
        var index = array.indexOf(value);
        if (index >= 0) {
          array.splice(index, 1);
        }
        return index;
      }

      /**
       * @ngdoc function
       * @name angular.copy
       * @module ng
       * @kind function
       *
       * @description
       * Creates a deep copy of `source`, which should be an object or an array.
       *
       * * If no destination is supplied, a copy of the object or array is created.
       * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
       *   are deleted and then all elements/properties from the source are copied to it.
       * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
       * * If `source` is identical to `destination` an exception will be thrown.
       *
       * <br />
       * <div class="alert alert-warning">
       *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
       *   and on `destination`) will be ignored.
       * </div>
       *
       * @param {*} source The source that will be used to make a copy.
       *                   Can be any type, including primitives, `null`, and `undefined`.
       * @param {(Object|Array)=} destination Destination into which the source is copied. If
       *     provided, must be of the same type as `source`.
       * @returns {*} The copy or updated `destination`, if `destination` was specified.
       *
       * @example
        <example module="copyExample">
          <file name="index.html">
            <div ng-controller="ExampleController">
              <form novalidate class="simple-form">
                <label>Name: <input type="text" ng-model="user.name" /></label><br />
                <label>Age:  <input type="number" ng-model="user.age" /></label><br />
                Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
                        <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
                <button ng-click="reset()">RESET</button>
                <button ng-click="update(user)">SAVE</button>
              </form>
              <pre>form = {{user | json}}</pre>
              <pre>master = {{master | json}}</pre>
            </div>
          </file>
          <file name="script.js">
            // Module: copyExample
            angular.
              module('copyExample', []).
              controller('ExampleController', ['$scope', function($scope) {
                $scope.master = {};
      
                $scope.reset = function() {
                  // Example with 1 argument
                  $scope.user = angular.copy($scope.master);
                };
      
                $scope.update = function(user) {
                  // Example with 2 arguments
                  angular.copy(user, $scope.master);
                };
      
                $scope.reset();
              }]);
          </file>
        </example>
       */
      function copy(source, destination) {
        var stackSource = [];
        var stackDest = [];

        if (destination) {
          if (isTypedArray(destination) || isArrayBuffer(destination)) {
            throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
          }
          if (source === destination) {
            throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
          }

          // Empty the destination object
          if (isArray(destination)) {
            destination.length = 0;
          } else {
            forEach(destination, function (value, key) {
              if (key !== '$$hashKey') {
                delete destination[key];
              }
            });
          }

          stackSource.push(source);
          stackDest.push(destination);
          return copyRecurse(source, destination);
        }

        return copyElement(source);

        function copyRecurse(source, destination) {
          var h = destination.$$hashKey;
          var key;
          if (isArray(source)) {
            for (var i = 0, ii = source.length; i < ii; i++) {
              destination.push(copyElement(source[i]));
            }
          } else if (isBlankObject(source)) {
            // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
            for (key in source) {
              destination[key] = copyElement(source[key]);
            }
          } else if (source && typeof source.hasOwnProperty === 'function') {
            // Slow path, which must rely on hasOwnProperty
            for (key in source) {
              if (source.hasOwnProperty(key)) {
                destination[key] = copyElement(source[key]);
              }
            }
          } else {
            // Slowest path --- hasOwnProperty can't be called as a method
            for (key in source) {
              if (hasOwnProperty.call(source, key)) {
                destination[key] = copyElement(source[key]);
              }
            }
          }
          setHashKey(destination, h);
          return destination;
        }

        function copyElement(source) {
          // Simple values
          if (!isObject(source)) {
            return source;
          }

          // Already copied values
          var index = stackSource.indexOf(source);
          if (index !== -1) {
            return stackDest[index];
          }

          if (isWindow(source) || isScope(source)) {
            throw ngMinErr('cpws', "Can't copy! Making copies of Window or Scope instances is not supported.");
          }

          var needsRecurse = false;
          var destination = copyType(source);

          if (destination === undefined) {
            destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
            needsRecurse = true;
          }

          stackSource.push(source);
          stackDest.push(destination);

          return needsRecurse ? copyRecurse(source, destination) : destination;
        }

        function copyType(source) {
          switch (toString.call(source)) {
            case '[object Int8Array]':
            case '[object Int16Array]':
            case '[object Int32Array]':
            case '[object Float32Array]':
            case '[object Float64Array]':
            case '[object Uint8Array]':
            case '[object Uint8ClampedArray]':
            case '[object Uint16Array]':
            case '[object Uint32Array]':
              return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

            case '[object ArrayBuffer]':
              //Support: IE10
              if (!source.slice) {
                var copied = new ArrayBuffer(source.byteLength);
                new Uint8Array(copied).set(new Uint8Array(source));
                return copied;
              }
              return source.slice(0);

            case '[object Boolean]':
            case '[object Number]':
            case '[object String]':
            case '[object Date]':
              return new source.constructor(source.valueOf());

            case '[object RegExp]':
              var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
              re.lastIndex = source.lastIndex;
              return re;

            case '[object Blob]':
              return new source.constructor([source], { type: source.type });
          }

          if (isFunction(source.cloneNode)) {
            return source.cloneNode(true);
          }
        }
      }

      /**
       * @ngdoc function
       * @name angular.equals
       * @module ng
       * @kind function
       *
       * @description
       * Determines if two objects or two values are equivalent. Supports value types, regular
       * expressions, arrays and objects.
       *
       * Two objects or values are considered equivalent if at least one of the following is true:
       *
       * * Both objects or values pass `===` comparison.
       * * Both objects or values are of the same type and all of their properties are equal by
       *   comparing them with `angular.equals`.
       * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
       * * Both values represent the same regular expression (In JavaScript,
       *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
       *   representation matches).
       *
       * During a property comparison, properties of `function` type and properties with names
       * that begin with `$` are ignored.
       *
       * Scope and DOMWindow objects are being compared only by identify (`===`).
       *
       * @param {*} o1 Object or value to compare.
       * @param {*} o2 Object or value to compare.
       * @returns {boolean} True if arguments are equal.
       *
       * @example
         <example module="equalsExample" name="equalsExample">
           <file name="index.html">
            <div ng-controller="ExampleController">
              <form novalidate>
                <h3>User 1</h3>
                Name: <input type="text" ng-model="user1.name">
                Age: <input type="number" ng-model="user1.age">
      
                <h3>User 2</h3>
                Name: <input type="text" ng-model="user2.name">
                Age: <input type="number" ng-model="user2.age">
      
                <div>
                  <br/>
                  <input type="button" value="Compare" ng-click="compare()">
                </div>
                User 1: <pre>{{user1 | json}}</pre>
                User 2: <pre>{{user2 | json}}</pre>
                Equal: <pre>{{result}}</pre>
              </form>
            </div>
          </file>
          <file name="script.js">
              angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
                $scope.user1 = {};
                $scope.user2 = {};
                $scope.result;
                $scope.compare = function() {
                  $scope.result = angular.equals($scope.user1, $scope.user2);
                };
              }]);
          </file>
        </example>
       */
      function equals(o1, o2) {
        if (o1 === o2) return true;
        if (o1 === null || o2 === null) return false;
        if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
        var t1 = typeof o1,
            t2 = typeof o2,
            length,
            key,
            keySet;
        if (t1 == t2 && t1 == 'object') {
          if (isArray(o1)) {
            if (!isArray(o2)) return false;
            if ((length = o1.length) == o2.length) {
              for (key = 0; key < length; key++) {
                if (!equals(o1[key], o2[key])) return false;
              }
              return true;
            }
          } else if (isDate(o1)) {
            if (!isDate(o2)) return false;
            return equals(o1.getTime(), o2.getTime());
          } else if (isRegExp(o1)) {
            if (!isRegExp(o2)) return false;
            return o1.toString() == o2.toString();
          } else {
            if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
            keySet = createMap();
            for (key in o1) {
              if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
              if (!equals(o1[key], o2[key])) return false;
              keySet[key] = true;
            }
            for (key in o2) {
              if (!(key in keySet) && key.charAt(0) !== '$' && isDefined(o2[key]) && !isFunction(o2[key])) return false;
            }
            return true;
          }
        }
        return false;
      }

      var csp = function () {
        if (!isDefined(csp.rules)) {

          var ngCspElement = window.document.querySelector('[ng-csp]') || window.document.querySelector('[data-ng-csp]');

          if (ngCspElement) {
            var ngCspAttribute = ngCspElement.getAttribute('ng-csp') || ngCspElement.getAttribute('data-ng-csp');
            csp.rules = {
              noUnsafeEval: !ngCspAttribute || ngCspAttribute.indexOf('no-unsafe-eval') !== -1,
              noInlineStyle: !ngCspAttribute || ngCspAttribute.indexOf('no-inline-style') !== -1
            };
          } else {
            csp.rules = {
              noUnsafeEval: noUnsafeEval(),
              noInlineStyle: false
            };
          }
        }

        return csp.rules;

        function noUnsafeEval() {
          try {
            /* jshint -W031, -W054 */
            new Function('');
            /* jshint +W031, +W054 */
            return false;
          } catch (e) {
            return true;
          }
        }
      };

      /**
       * @ngdoc directive
       * @module ng
       * @name ngJq
       *
       * @element ANY
       * @param {string=} ngJq the name of the library available under `window`
       * to be used for angular.element
       * @description
       * Use this directive to force the angular.element library.  This should be
       * used to force either jqLite by leaving ng-jq blank or setting the name of
       * the jquery variable under window (eg. jQuery).
       *
       * Since angular looks for this directive when it is loaded (doesn't wait for the
       * DOMContentLoaded event), it must be placed on an element that comes before the script
       * which loads angular. Also, only the first instance of `ng-jq` will be used and all
       * others ignored.
       *
       * @example
       * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
       ```html
       <!doctype html>
       <html ng-app ng-jq>
       ...
       ...
       </html>
       ```
       * @example
       * This example shows how to use a jQuery based library of a different name.
       * The library name must be available at the top most 'window'.
       ```html
       <!doctype html>
       <html ng-app ng-jq="jQueryLib">
       ...
       ...
       </html>
       ```
       */
      var jq = function () {
        if (isDefined(jq.name_)) return jq.name_;
        var el;
        var i,
            ii = ngAttrPrefixes.length,
            prefix,
            name;
        for (i = 0; i < ii; ++i) {
          prefix = ngAttrPrefixes[i];
          if (el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
            name = el.getAttribute(prefix + 'jq');
            break;
          }
        }

        return jq.name_ = name;
      };

      function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
      }

      function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
      }

      /* jshint -W101 */
      /**
       * @ngdoc function
       * @name angular.bind
       * @module ng
       * @kind function
       *
       * @description
       * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
       * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
       * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
       * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
       *
       * @param {Object} self Context which `fn` should be evaluated in.
       * @param {function()} fn Function to be bound.
       * @param {...*} args Optional arguments to be prebound to the `fn` function call.
       * @returns {function()} Function that wraps the `fn` with all the specified bindings.
       */
      /* jshint +W101 */
      function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        if (isFunction(fn) && !(fn instanceof RegExp)) {
          return curryArgs.length ? function () {
            return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
          } : function () {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self);
          };
        } else {
          // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
          return fn;
        }
      }

      function toJsonReplacer(key, value) {
        var val = value;

        if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
          val = undefined;
        } else if (isWindow(value)) {
          val = '$WINDOW';
        } else if (value && window.document === value) {
          val = '$DOCUMENT';
        } else if (isScope(value)) {
          val = '$SCOPE';
        }

        return val;
      }

      /**
       * @ngdoc function
       * @name angular.toJson
       * @module ng
       * @kind function
       *
       * @description
       * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
       * stripped since angular uses this notation internally.
       *
       * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
       * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
       *    If set to an integer, the JSON output will contain that many spaces per indentation.
       * @returns {string|undefined} JSON-ified string representing `obj`.
       * @knownIssue
       *
       * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
       * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
       * `Date.prototype.toJSON` method as follows:
       *
       * ```
       * var _DatetoJSON = Date.prototype.toJSON;
       * Date.prototype.toJSON = function() {
       *   try {
       *     return _DatetoJSON.call(this);
       *   } catch(e) {
       *     if (e instanceof RangeError) {
       *       return null;
       *     }
       *     throw e;
       *   }
       * };
       * ```
       *
       * See https://github.com/angular/angular.js/pull/14221 for more information.
       */
      function toJson(obj, pretty) {
        if (isUndefined(obj)) return undefined;
        if (!isNumber(pretty)) {
          pretty = pretty ? 2 : null;
        }
        return JSON.stringify(obj, toJsonReplacer, pretty);
      }

      /**
       * @ngdoc function
       * @name angular.fromJson
       * @module ng
       * @kind function
       *
       * @description
       * Deserializes a JSON string.
       *
       * @param {string} json JSON string to deserialize.
       * @returns {Object|Array|string|number} Deserialized JSON string.
       */
      function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
      }

      var ALL_COLONS = /:/g;
      function timezoneToOffset(timezone, fallback) {
        // IE/Edge do not "understand" colon (`:`) in timezone
        timezone = timezone.replace(ALL_COLONS, '');
        var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
      }

      function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
      }

      function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
      }

      /**
       * @returns {string} Returns the string representation of the element.
       */
      function startingTag(element) {
        element = jqLite(element).clone();
        try {
          // turns out IE does not let you set .html() on elements which
          // are not allowed to have children. So we just ignore it.
          element.empty();
        } catch (e) {}
        var elemHtml = jqLite('<div>').append(element).html();
        try {
          return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
            return '<' + lowercase(nodeName);
          });
        } catch (e) {
          return lowercase(elemHtml);
        }
      }

      /////////////////////////////////////////////////

      /**
       * Tries to decode the URI component without throwing an exception.
       *
       * @private
       * @param str value potential URI component to check.
       * @returns {boolean} True if `value` can be decoded
       * with the decodeURIComponent function.
       */
      function tryDecodeURIComponent(value) {
        try {
          return decodeURIComponent(value);
        } catch (e) {
          // Ignore any invalid uri component.
        }
      }

      /**
       * Parses an escaped url query string into key-value pairs.
       * @returns {Object.<string,boolean|Array>}
       */
      function parseKeyValue( /**string*/keyValue) {
        var obj = {};
        forEach((keyValue || "").split('&'), function (keyValue) {
          var splitPoint, key, val;
          if (keyValue) {
            key = keyValue = keyValue.replace(/\+/g, '%20');
            splitPoint = keyValue.indexOf('=');
            if (splitPoint !== -1) {
              key = keyValue.substring(0, splitPoint);
              val = keyValue.substring(splitPoint + 1);
            }
            key = tryDecodeURIComponent(key);
            if (isDefined(key)) {
              val = isDefined(val) ? tryDecodeURIComponent(val) : true;
              if (!hasOwnProperty.call(obj, key)) {
                obj[key] = val;
              } else if (isArray(obj[key])) {
                obj[key].push(val);
              } else {
                obj[key] = [obj[key], val];
              }
            }
          }
        });
        return obj;
      }

      function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function (value, key) {
          if (isArray(value)) {
            forEach(value, function (arrayValue) {
              parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
            });
          } else {
            parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
          }
        });
        return parts.length ? parts.join('&') : '';
      }

      /**
       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
       * segments:
       *    segment       = *pchar
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
      }

      /**
       * This method is intended for encoding *key* or *value* parts of query component. We need a custom
       * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
       * encoded per http://tools.ietf.org/html/rfc3986:
       *    query       = *( pchar / "/" / "?" )
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
      }

      var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

      function getNgAttribute(element, ngAttr) {
        var attr,
            i,
            ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
          attr = ngAttrPrefixes[i] + ngAttr;
          if (isString(attr = element.getAttribute(attr))) {
            return attr;
          }
        }
        return null;
      }

      /**
       * @ngdoc directive
       * @name ngApp
       * @module ng
       *
       * @element ANY
       * @param {angular.Module} ngApp an optional application
       *   {@link angular.module module} name to load.
       * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
       *   created in "strict-di" mode. This means that the application will fail to invoke functions which
       *   do not use explicit function annotation (and are thus unsuitable for minification), as described
       *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
       *   tracking down the root of these bugs.
       *
       * @description
       *
       * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
       * designates the **root element** of the application and is typically placed near the root element
       * of the page - e.g. on the `<body>` or `<html>` tags.
       *
       * There are a few things to keep in mind when using `ngApp`:
       * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
       *   found in the document will be used to define the root element to auto-bootstrap as an
       *   application. To run multiple applications in an HTML document you must manually bootstrap them using
       *   {@link angular.bootstrap} instead.
       * - AngularJS applications cannot be nested within each other.
       * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
       *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
       *   {@link ngRoute.ngView `ngView`}.
       *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
       *   causing animations to stop working and making the injector inaccessible from outside the app.
       *
       * You can specify an **AngularJS module** to be used as the root module for the application.  This
       * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
       * should contain the application code needed or have dependencies on other modules that will
       * contain the code. See {@link angular.module} for more information.
       *
       * In the example below if the `ngApp` directive were not placed on the `html` element then the
       * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
       * would not be resolved to `3`.
       *
       * `ngApp` is the easiest, and most common way to bootstrap an application.
       *
       <example module="ngAppDemo">
         <file name="index.html">
         <div ng-controller="ngAppDemoController">
           I can add: {{a}} + {{b}} =  {{ a+b }}
         </div>
         </file>
         <file name="script.js">
         angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
           $scope.a = 1;
           $scope.b = 2;
         });
         </file>
       </example>
       *
       * Using `ngStrictDi`, you would see something like this:
       *
       <example ng-app-included="true">
         <file name="index.html">
         <div ng-app="ngAppStrictDemo" ng-strict-di>
             <div ng-controller="GoodController1">
                 I can add: {{a}} + {{b}} =  {{ a+b }}
      
                 <p>This renders because the controller does not fail to
                    instantiate, by using explicit annotation style (see
                    script.js for details)
                 </p>
             </div>
      
             <div ng-controller="GoodController2">
                 Name: <input ng-model="name"><br />
                 Hello, {{name}}!
      
                 <p>This renders because the controller does not fail to
                    instantiate, by using explicit annotation style
                    (see script.js for details)
                 </p>
             </div>
      
             <div ng-controller="BadController">
                 I can add: {{a}} + {{b}} =  {{ a+b }}
      
                 <p>The controller could not be instantiated, due to relying
                    on automatic function annotations (which are disabled in
                    strict mode). As such, the content of this section is not
                    interpolated, and there should be an error in your web console.
                 </p>
             </div>
         </div>
         </file>
         <file name="script.js">
         angular.module('ngAppStrictDemo', [])
           // BadController will fail to instantiate, due to relying on automatic function annotation,
           // rather than an explicit annotation
           .controller('BadController', function($scope) {
             $scope.a = 1;
             $scope.b = 2;
           })
           // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
           // due to using explicit annotations using the array style and $inject property, respectively.
           .controller('GoodController1', ['$scope', function($scope) {
             $scope.a = 1;
             $scope.b = 2;
           }])
           .controller('GoodController2', GoodController2);
           function GoodController2($scope) {
             $scope.name = "World";
           }
           GoodController2.$inject = ['$scope'];
         </file>
         <file name="style.css">
         div[ng-controller] {
             margin-bottom: 1em;
             -webkit-border-radius: 4px;
             border-radius: 4px;
             border: 1px solid;
             padding: .5em;
         }
         div[ng-controller^=Good] {
             border-color: #d6e9c6;
             background-color: #dff0d8;
             color: #3c763d;
         }
         div[ng-controller^=Bad] {
             border-color: #ebccd1;
             background-color: #f2dede;
             color: #a94442;
             margin-bottom: 0;
         }
         </file>
       </example>
       */
      function angularInit(element, bootstrap) {
        var appElement,
            module,
            config = {};

        // The element `element` has priority over any other element.
        forEach(ngAttrPrefixes, function (prefix) {
          var name = prefix + 'app';

          if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
            appElement = element;
            module = element.getAttribute(name);
          }
        });
        forEach(ngAttrPrefixes, function (prefix) {
          var name = prefix + 'app';
          var candidate;

          if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
            appElement = candidate;
            module = candidate.getAttribute(name);
          }
        });
        if (appElement) {
          config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
          bootstrap(appElement, module ? [module] : [], config);
        }
      }

      /**
       * @ngdoc function
       * @name angular.bootstrap
       * @module ng
       * @description
       * Use this function to manually start up angular application.
       *
       * For more information, see the {@link guide/bootstrap Bootstrap guide}.
       *
       * Angular will detect if it has been loaded into the browser more than once and only allow the
       * first loaded script to be bootstrapped and will report a warning to the browser console for
       * each of the subsequent scripts. This prevents strange results in applications, where otherwise
       * multiple instances of Angular try to work on the DOM.
       *
       * <div class="alert alert-warning">
       * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
       * They must use {@link ng.directive:ngApp ngApp}.
       * </div>
       *
       * <div class="alert alert-warning">
       * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
       * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
       * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
       * causing animations to stop working and making the injector inaccessible from outside the app.
       * </div>
       *
       * ```html
       * <!doctype html>
       * <html>
       * <body>
       * <div ng-controller="WelcomeController">
       *   {{greeting}}
       * </div>
       *
       * <script src="angular.js"></script>
       * <script>
       *   var app = angular.module('demo', [])
       *   .controller('WelcomeController', function($scope) {
       *       $scope.greeting = 'Welcome!';
       *   });
       *   angular.bootstrap(document, ['demo']);
       * </script>
       * </body>
       * </html>
       * ```
       *
       * @param {DOMElement} element DOM element which is the root of angular application.
       * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
       *     Each item in the array should be the name of a predefined module or a (DI annotated)
       *     function that will be invoked by the injector as a `config` block.
       *     See: {@link angular.module modules}
       * @param {Object=} config an object for defining configuration options for the application. The
       *     following keys are supported:
       *
       * * `strictDi` - disable automatic function annotation for the application. This is meant to
       *   assist in finding bugs which break minified code. Defaults to `false`.
       *
       * @returns {auto.$injector} Returns the newly created injector for this app.
       */
      function bootstrap(element, modules, config) {
        if (!isObject(config)) config = {};
        var defaultConfig = {
          strictDi: false
        };
        config = extend(defaultConfig, config);
        var doBootstrap = function () {
          element = jqLite(element);

          if (element.injector()) {
            var tag = element[0] === window.document ? 'document' : startingTag(element);
            // Encode angle brackets to prevent input from being sanitized to empty string #8683.
            throw ngMinErr('btstrpd', "App already bootstrapped with this element '{0}'", tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
          }

          modules = modules || [];
          modules.unshift(['$provide', function ($provide) {
            $provide.value('$rootElement', element);
          }]);

          if (config.debugInfoEnabled) {
            // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
            modules.push(['$compileProvider', function ($compileProvider) {
              $compileProvider.debugInfoEnabled(true);
            }]);
          }

          modules.unshift('ng');
          var injector = createInjector(modules, config.strictDi);
          injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', function bootstrapApply(scope, element, compile, injector) {
            scope.$apply(function () {
              element.data('$injector', injector);
              compile(element)(scope);
            });
          }]);
          return injector;
        };

        var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
          config.debugInfoEnabled = true;
          window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
        }

        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
          return doBootstrap();
        }

        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
        angular.resumeBootstrap = function (extraModules) {
          forEach(extraModules, function (module) {
            modules.push(module);
          });
          return doBootstrap();
        };

        if (isFunction(angular.resumeDeferredBootstrap)) {
          angular.resumeDeferredBootstrap();
        }
      }

      /**
       * @ngdoc function
       * @name angular.reloadWithDebugInfo
       * @module ng
       * @description
       * Use this function to reload the current application with debug information turned on.
       * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
       *
       * See {@link ng.$compileProvider#debugInfoEnabled} for more.
       */
      function reloadWithDebugInfo() {
        window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
        window.location.reload();
      }

      /**
       * @name angular.getTestability
       * @module ng
       * @description
       * Get the testability service for the instance of Angular on the given
       * element.
       * @param {DOMElement} element DOM element which is the root of angular application.
       */
      function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) {
          throw ngMinErr('test', 'no injector found for element argument to getTestability');
        }
        return injector.get('$$testability');
      }

      var SNAKE_CASE_REGEXP = /[A-Z]/g;
      function snake_case(name, separator) {
        separator = separator || '_';
        return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase();
        });
      }

      var bindJQueryFired = false;
      function bindJQuery() {
        var originalCleanData;

        if (bindJQueryFired) {
          return;
        }

        // bind to jQuery if present;
        var jqName = jq();
        jQuery = isUndefined(jqName) ? window.jQuery : // use jQuery (if present)
        !jqName ? undefined : // use jqLite
        window[jqName]; // use jQuery specified by `ngJq`

        // Use jQuery if it exists with proper functionality, otherwise default to us.
        // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
        // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
        // versions. It will not work for sure with jQuery <1.7, though.
        if (jQuery && jQuery.fn.on) {
          jqLite = jQuery;
          extend(jQuery.fn, {
            scope: JQLitePrototype.scope,
            isolateScope: JQLitePrototype.isolateScope,
            controller: JQLitePrototype.controller,
            injector: JQLitePrototype.injector,
            inheritedData: JQLitePrototype.inheritedData
          });

          // All nodes removed from the DOM via various jQuery APIs like .remove()
          // are passed through jQuery.cleanData. Monkey-patch this method to fire
          // the $destroy event on all removed nodes.
          originalCleanData = jQuery.cleanData;
          jQuery.cleanData = function (elems) {
            var events;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
              events = jQuery._data(elem, "events");
              if (events && events.$destroy) {
                jQuery(elem).triggerHandler('$destroy');
              }
            }
            originalCleanData(elems);
          };
        } else {
          jqLite = JQLite;
        }

        angular.element = jqLite;

        // Prevent double-proxying.
        bindJQueryFired = true;
      }

      /**
       * throw error if the argument is falsy.
       */
      function assertArg(arg, name, reason) {
        if (!arg) {
          throw ngMinErr('areq', "Argument '{0}' is {1}", name || '?', reason || "required");
        }
        return arg;
      }

      function assertArgFn(arg, name, acceptArrayAnnotation) {
        if (acceptArrayAnnotation && isArray(arg)) {
          arg = arg[arg.length - 1];
        }

        assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
        return arg;
      }

      /**
       * throw error if the name given is hasOwnProperty
       * @param  {String} name    the name to test
       * @param  {String} context the context in which the name is used, such as module or directive
       */
      function assertNotHasOwnProperty(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
        }
      }

      /**
       * Return the value accessible from the object by path. Any undefined traversals are ignored
       * @param {Object} obj starting object
       * @param {String} path path to traverse
       * @param {boolean} [bindFnToScope=true]
       * @returns {Object} value as accessible by path
       */
      //TODO(misko): this function needs to be removed
      function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        var keys = path.split('.');
        var key;
        var lastInstance = obj;
        var len = keys.length;

        for (var i = 0; i < len; i++) {
          key = keys[i];
          if (obj) {
            obj = (lastInstance = obj)[key];
          }
        }
        if (!bindFnToScope && isFunction(obj)) {
          return bind(lastInstance, obj);
        }
        return obj;
      }

      /**
       * Return the DOM siblings between the first and last node in the given array.
       * @param {Array} array like object
       * @returns {Array} the inputted object or a jqLite collection containing the nodes
       */
      function getBlockNodes(nodes) {
        // TODO(perf): update `nodes` instead of creating a new object?
        var node = nodes[0];
        var endNode = nodes[nodes.length - 1];
        var blockNodes;

        for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
          if (blockNodes || nodes[i] !== node) {
            if (!blockNodes) {
              blockNodes = jqLite(slice.call(nodes, 0, i));
            }
            blockNodes.push(node);
          }
        }

        return blockNodes || nodes;
      }

      /**
       * Creates a new object without a prototype. This object is useful for lookup without having to
       * guard against prototypically inherited properties via hasOwnProperty.
       *
       * Related micro-benchmarks:
       * - http://jsperf.com/object-create2
       * - http://jsperf.com/proto-map-lookup/2
       * - http://jsperf.com/for-in-vs-object-keys2
       *
       * @returns {Object}
       */
      function createMap() {
        return Object.create(null);
      }

      var NODE_TYPE_ELEMENT = 1;
      var NODE_TYPE_ATTRIBUTE = 2;
      var NODE_TYPE_TEXT = 3;
      var NODE_TYPE_COMMENT = 8;
      var NODE_TYPE_DOCUMENT = 9;
      var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

      /**
       * @ngdoc type
       * @name angular.Module
       * @module ng
       * @description
       *
       * Interface for configuring angular {@link angular.module modules}.
       */

      function setupModuleLoader(window) {

        var $injectorMinErr = minErr('$injector');
        var ngMinErr = minErr('ng');

        function ensure(obj, name, factory) {
          return obj[name] || (obj[name] = factory());
        }

        var angular = ensure(window, 'angular', Object);

        // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
        angular.$$minErr = angular.$$minErr || minErr;

        return ensure(angular, 'module', function () {
          /** @type {Object.<string, angular.Module>} */
          var modules = {};

          /**
           * @ngdoc function
           * @name angular.module
           * @module ng
           * @description
           *
           * The `angular.module` is a global place for creating, registering and retrieving Angular
           * modules.
           * All modules (angular core or 3rd party) that should be available to an application must be
           * registered using this mechanism.
           *
           * Passing one argument retrieves an existing {@link angular.Module},
           * whereas passing more than one argument creates a new {@link angular.Module}
           *
           *
           * # Module
           *
           * A module is a collection of services, directives, controllers, filters, and configuration information.
           * `angular.module` is used to configure the {@link auto.$injector $injector}.
           *
           * ```js
           * // Create a new module
           * var myModule = angular.module('myModule', []);
           *
           * // register a new service
           * myModule.value('appName', 'MyCoolApp');
           *
           * // configure existing services inside initialization blocks.
           * myModule.config(['$locationProvider', function($locationProvider) {
           *   // Configure existing providers
           *   $locationProvider.hashPrefix('!');
           * }]);
           * ```
           *
           * Then you can create an injector and load your modules like this:
           *
           * ```js
           * var injector = angular.injector(['ng', 'myModule'])
           * ```
           *
           * However it's more likely that you'll just use
           * {@link ng.directive:ngApp ngApp} or
           * {@link angular.bootstrap} to simplify this process for you.
           *
           * @param {!string} name The name of the module to create or retrieve.
           * @param {!Array.<string>=} requires If specified then new module is being created. If
           *        unspecified then the module is being retrieved for further configuration.
           * @param {Function=} configFn Optional configuration function for the module. Same as
           *        {@link angular.Module#config Module#config()}.
           * @returns {angular.Module} new module with the {@link angular.Module} api.
           */
          return function module(name, requires, configFn) {
            var assertNotHasOwnProperty = function (name, context) {
              if (name === 'hasOwnProperty') {
                throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
              }
            };

            assertNotHasOwnProperty(name, 'module');
            if (requires && modules.hasOwnProperty(name)) {
              modules[name] = null;
            }
            return ensure(modules, name, function () {
              if (!requires) {
                throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " + "the module name or forgot to load it. If registering a module ensure that you " + "specify the dependencies as the second argument.", name);
              }

              /** @type {!Array.<Array.<*>>} */
              var invokeQueue = [];

              /** @type {!Array.<Function>} */
              var configBlocks = [];

              /** @type {!Array.<Function>} */
              var runBlocks = [];

              var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

              /** @type {angular.Module} */
              var moduleInstance = {
                // Private state
                _invokeQueue: invokeQueue,
                _configBlocks: configBlocks,
                _runBlocks: runBlocks,

                /**
                 * @ngdoc property
                 * @name angular.Module#requires
                 * @module ng
                 *
                 * @description
                 * Holds the list of modules which the injector will load before the current module is
                 * loaded.
                 */
                requires: requires,

                /**
                 * @ngdoc property
                 * @name angular.Module#name
                 * @module ng
                 *
                 * @description
                 * Name of the module.
                 */
                name: name,

                /**
                 * @ngdoc method
                 * @name angular.Module#provider
                 * @module ng
                 * @param {string} name service name
                 * @param {Function} providerType Construction function for creating new instance of the
                 *                                service.
                 * @description
                 * See {@link auto.$provide#provider $provide.provider()}.
                 */
                provider: invokeLaterAndSetModuleName('$provide', 'provider'),

                /**
                 * @ngdoc method
                 * @name angular.Module#factory
                 * @module ng
                 * @param {string} name service name
                 * @param {Function} providerFunction Function for creating new instance of the service.
                 * @description
                 * See {@link auto.$provide#factory $provide.factory()}.
                 */
                factory: invokeLaterAndSetModuleName('$provide', 'factory'),

                /**
                 * @ngdoc method
                 * @name angular.Module#service
                 * @module ng
                 * @param {string} name service name
                 * @param {Function} constructor A constructor function that will be instantiated.
                 * @description
                 * See {@link auto.$provide#service $provide.service()}.
                 */
                service: invokeLaterAndSetModuleName('$provide', 'service'),

                /**
                 * @ngdoc method
                 * @name angular.Module#value
                 * @module ng
                 * @param {string} name service name
                 * @param {*} object Service instance object.
                 * @description
                 * See {@link auto.$provide#value $provide.value()}.
                 */
                value: invokeLater('$provide', 'value'),

                /**
                 * @ngdoc method
                 * @name angular.Module#constant
                 * @module ng
                 * @param {string} name constant name
                 * @param {*} object Constant value.
                 * @description
                 * Because the constants are fixed, they get applied before other provide methods.
                 * See {@link auto.$provide#constant $provide.constant()}.
                 */
                constant: invokeLater('$provide', 'constant', 'unshift'),

                /**
                * @ngdoc method
                * @name angular.Module#decorator
                * @module ng
                * @param {string} name The name of the service to decorate.
                * @param {Function} decorFn This function will be invoked when the service needs to be
                *                           instantiated and should return the decorated service instance.
                * @description
                * See {@link auto.$provide#decorator $provide.decorator()}.
                */
                decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

                /**
                 * @ngdoc method
                 * @name angular.Module#animation
                 * @module ng
                 * @param {string} name animation name
                 * @param {Function} animationFactory Factory function for creating new instance of an
                 *                                    animation.
                 * @description
                 *
                 * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
                 *
                 *
                 * Defines an animation hook that can be later used with
                 * {@link $animate $animate} service and directives that use this service.
                 *
                 * ```js
                 * module.animation('.animation-name', function($inject1, $inject2) {
                 *   return {
                 *     eventName : function(element, done) {
                 *       //code to run the animation
                 *       //once complete, then run done()
                 *       return function cancellationFunction(element) {
                 *         //code to cancel the animation
                 *       }
                 *     }
                 *   }
                 * })
                 * ```
                 *
                 * See {@link ng.$animateProvider#register $animateProvider.register()} and
                 * {@link ngAnimate ngAnimate module} for more information.
                 */
                animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

                /**
                 * @ngdoc method
                 * @name angular.Module#filter
                 * @module ng
                 * @param {string} name Filter name - this must be a valid angular expression identifier
                 * @param {Function} filterFactory Factory function for creating new instance of filter.
                 * @description
                 * See {@link ng.$filterProvider#register $filterProvider.register()}.
                 *
                 * <div class="alert alert-warning">
                 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
                 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
                 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
                 * (`myapp_subsection_filterx`).
                 * </div>
                 */
                filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

                /**
                 * @ngdoc method
                 * @name angular.Module#controller
                 * @module ng
                 * @param {string|Object} name Controller name, or an object map of controllers where the
                 *    keys are the names and the values are the constructors.
                 * @param {Function} constructor Controller constructor function.
                 * @description
                 * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
                 */
                controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

                /**
                 * @ngdoc method
                 * @name angular.Module#directive
                 * @module ng
                 * @param {string|Object} name Directive name, or an object map of directives where the
                 *    keys are the names and the values are the factories.
                 * @param {Function} directiveFactory Factory function for creating new instance of
                 * directives.
                 * @description
                 * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
                 */
                directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

                /**
                 * @ngdoc method
                 * @name angular.Module#component
                 * @module ng
                 * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
                 * @param {Object} options Component definition object (a simplified
                 *    {@link ng.$compile#directive-definition-object directive definition object})
                 *
                 * @description
                 * See {@link ng.$compileProvider#component $compileProvider.component()}.
                 */
                component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

                /**
                 * @ngdoc method
                 * @name angular.Module#config
                 * @module ng
                 * @param {Function} configFn Execute this function on module load. Useful for service
                 *    configuration.
                 * @description
                 * Use this method to register work which needs to be performed on module loading.
                 * For more about how to configure services, see
                 * {@link providers#provider-recipe Provider Recipe}.
                 */
                config: config,

                /**
                 * @ngdoc method
                 * @name angular.Module#run
                 * @module ng
                 * @param {Function} initializationFn Execute this function after injector creation.
                 *    Useful for application initialization.
                 * @description
                 * Use this method to register work which should be performed when the injector is done
                 * loading all modules.
                 */
                run: function (block) {
                  runBlocks.push(block);
                  return this;
                }
              };

              if (configFn) {
                config(configFn);
              }

              return moduleInstance;

              /**
               * @param {string} provider
               * @param {string} method
               * @param {String=} insertMethod
               * @returns {angular.Module}
               */
              function invokeLater(provider, method, insertMethod, queue) {
                if (!queue) queue = invokeQueue;
                return function () {
                  queue[insertMethod || 'push']([provider, method, arguments]);
                  return moduleInstance;
                };
              }

              /**
               * @param {string} provider
               * @param {string} method
               * @returns {angular.Module}
               */
              function invokeLaterAndSetModuleName(provider, method) {
                return function (recipeName, factoryFunction) {
                  if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
                  invokeQueue.push([provider, method, arguments]);
                  return moduleInstance;
                };
              }
            });
          };
        });
      }

      /* global shallowCopy: true */

      /**
       * Creates a shallow copy of an object, an array or a primitive.
       *
       * Assumes that there are no proto properties for objects.
       */
      function shallowCopy(src, dst) {
        if (isArray(src)) {
          dst = dst || [];

          for (var i = 0, ii = src.length; i < ii; i++) {
            dst[i] = src[i];
          }
        } else if (isObject(src)) {
          dst = dst || {};

          for (var key in src) {
            if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
              dst[key] = src[key];
            }
          }
        }

        return dst || src;
      }

      /* global toDebugString: true */

      function serializeObject(obj) {
        var seen = [];

        return JSON.stringify(obj, function (key, val) {
          val = toJsonReplacer(key, val);
          if (isObject(val)) {

            if (seen.indexOf(val) >= 0) return '...';

            seen.push(val);
          }
          return val;
        });
      }

      function toDebugString(obj) {
        if (typeof obj === 'function') {
          return obj.toString().replace(/ \{[\s\S]*$/, '');
        } else if (isUndefined(obj)) {
          return 'undefined';
        } else if (typeof obj !== 'string') {
          return serializeObject(obj);
        }
        return obj;
      }

      /* global angularModule: true,
        version: true,
      
        $CompileProvider,
      
        htmlAnchorDirective,
        inputDirective,
        inputDirective,
        formDirective,
        scriptDirective,
        selectDirective,
        styleDirective,
        optionDirective,
        ngBindDirective,
        ngBindHtmlDirective,
        ngBindTemplateDirective,
        ngClassDirective,
        ngClassEvenDirective,
        ngClassOddDirective,
        ngCloakDirective,
        ngControllerDirective,
        ngFormDirective,
        ngHideDirective,
        ngIfDirective,
        ngIncludeDirective,
        ngIncludeFillContentDirective,
        ngInitDirective,
        ngNonBindableDirective,
        ngPluralizeDirective,
        ngRepeatDirective,
        ngShowDirective,
        ngStyleDirective,
        ngSwitchDirective,
        ngSwitchWhenDirective,
        ngSwitchDefaultDirective,
        ngOptionsDirective,
        ngTranscludeDirective,
        ngModelDirective,
        ngListDirective,
        ngChangeDirective,
        patternDirective,
        patternDirective,
        requiredDirective,
        requiredDirective,
        minlengthDirective,
        minlengthDirective,
        maxlengthDirective,
        maxlengthDirective,
        ngValueDirective,
        ngModelOptionsDirective,
        ngAttributeAliasDirectives,
        ngEventDirectives,
      
        $AnchorScrollProvider,
        $AnimateProvider,
        $CoreAnimateCssProvider,
        $$CoreAnimateJsProvider,
        $$CoreAnimateQueueProvider,
        $$AnimateRunnerFactoryProvider,
        $$AnimateAsyncRunFactoryProvider,
        $BrowserProvider,
        $CacheFactoryProvider,
        $ControllerProvider,
        $DateProvider,
        $DocumentProvider,
        $ExceptionHandlerProvider,
        $FilterProvider,
        $$ForceReflowProvider,
        $InterpolateProvider,
        $IntervalProvider,
        $$HashMapProvider,
        $HttpProvider,
        $HttpParamSerializerProvider,
        $HttpParamSerializerJQLikeProvider,
        $HttpBackendProvider,
        $xhrFactoryProvider,
        $jsonpCallbacksProvider,
        $LocationProvider,
        $LogProvider,
        $ParseProvider,
        $RootScopeProvider,
        $QProvider,
        $$QProvider,
        $$SanitizeUriProvider,
        $SceProvider,
        $SceDelegateProvider,
        $SnifferProvider,
        $TemplateCacheProvider,
        $TemplateRequestProvider,
        $$TestabilityProvider,
        $TimeoutProvider,
        $$RAFProvider,
        $WindowProvider,
        $$jqLiteProvider,
        $$CookieReaderProvider
      */

      /**
       * @ngdoc object
       * @name angular.version
       * @module ng
       * @description
       * An object that contains information about the current AngularJS version.
       *
       * This object has the following properties:
       *
       * - `full` – `{string}` – Full version string, such as "0.9.18".
       * - `major` – `{number}` – Major version number, such as "0".
       * - `minor` – `{number}` – Minor version number, such as "9".
       * - `dot` – `{number}` – Dot version number, such as "18".
       * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
       */
      var version = {
        full: '1.5.8', // all of these placeholder strings will be replaced by grunt's
        major: 1, // package task
        minor: 5,
        dot: 8,
        codeName: 'arbitrary-fallbacks'
      };

      function publishExternalAPI(angular) {
        extend(angular, {
          'bootstrap': bootstrap,
          'copy': copy,
          'extend': extend,
          'merge': merge,
          'equals': equals,
          'element': jqLite,
          'forEach': forEach,
          'injector': createInjector,
          'noop': noop,
          'bind': bind,
          'toJson': toJson,
          'fromJson': fromJson,
          'identity': identity,
          'isUndefined': isUndefined,
          'isDefined': isDefined,
          'isString': isString,
          'isFunction': isFunction,
          'isObject': isObject,
          'isNumber': isNumber,
          'isElement': isElement,
          'isArray': isArray,
          'version': version,
          'isDate': isDate,
          'lowercase': lowercase,
          'uppercase': uppercase,
          'callbacks': { $$counter: 0 },
          'getTestability': getTestability,
          '$$minErr': minErr,
          '$$csp': csp,
          'reloadWithDebugInfo': reloadWithDebugInfo
        });

        angularModule = setupModuleLoader(window);

        angularModule('ng', ['ngLocale'], ['$provide', function ngModule($provide) {
          // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
          $provide.provider({
            $$sanitizeUri: $$SanitizeUriProvider
          });
          $provide.provider('$compile', $CompileProvider).directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
          }).directive({
            ngInclude: ngIncludeFillContentDirective
          }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
          $provide.provider({
            $anchorScroll: $AnchorScrollProvider,
            $animate: $AnimateProvider,
            $animateCss: $CoreAnimateCssProvider,
            $$animateJs: $$CoreAnimateJsProvider,
            $$animateQueue: $$CoreAnimateQueueProvider,
            $$AnimateRunner: $$AnimateRunnerFactoryProvider,
            $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
            $browser: $BrowserProvider,
            $cacheFactory: $CacheFactoryProvider,
            $controller: $ControllerProvider,
            $document: $DocumentProvider,
            $exceptionHandler: $ExceptionHandlerProvider,
            $filter: $FilterProvider,
            $$forceReflow: $$ForceReflowProvider,
            $interpolate: $InterpolateProvider,
            $interval: $IntervalProvider,
            $http: $HttpProvider,
            $httpParamSerializer: $HttpParamSerializerProvider,
            $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
            $httpBackend: $HttpBackendProvider,
            $xhrFactory: $xhrFactoryProvider,
            $jsonpCallbacks: $jsonpCallbacksProvider,
            $location: $LocationProvider,
            $log: $LogProvider,
            $parse: $ParseProvider,
            $rootScope: $RootScopeProvider,
            $q: $QProvider,
            $$q: $$QProvider,
            $sce: $SceProvider,
            $sceDelegate: $SceDelegateProvider,
            $sniffer: $SnifferProvider,
            $templateCache: $TemplateCacheProvider,
            $templateRequest: $TemplateRequestProvider,
            $$testability: $$TestabilityProvider,
            $timeout: $TimeoutProvider,
            $window: $WindowProvider,
            $$rAF: $$RAFProvider,
            $$jqLite: $$jqLiteProvider,
            $$HashMap: $$HashMapProvider,
            $$cookieReader: $$CookieReaderProvider
          });
        }]);
      }

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *     Any commits to this file should be reviewed with security in mind.  *
       *   Changes to this file can potentially create security vulnerabilities. *
       *          An approval from 2 Core members with history of modifying      *
       *                         this file is required.                          *
       *                                                                         *
       *  Does the change somehow allow for arbitrary javascript to be executed? *
       *    Or allows for someone to change the prototype of built-in objects?   *
       *     Or gives undesired access to variables likes document or window?    *
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      /* global JQLitePrototype: true,
        addEventListenerFn: true,
        removeEventListenerFn: true,
        BOOLEAN_ATTR: true,
        ALIASED_ATTR: true,
      */

      //////////////////////////////////
      //JQLite
      //////////////////////////////////

      /**
       * @ngdoc function
       * @name angular.element
       * @module ng
       * @kind function
       *
       * @description
       * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
       *
       * If jQuery is available, `angular.element` is an alias for the
       * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
       * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
       *
       * jqLite is a tiny, API-compatible subset of jQuery that allows
       * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
       * commonly needed functionality with the goal of having a very small footprint.
       *
       * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
       * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
       * specific version of jQuery if multiple versions exist on the page.
       *
       * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
       * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
       *
       * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
       * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
       * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
       *
       * ## Angular's jqLite
       * jqLite provides only the following jQuery methods:
       *
       * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
       * - [`after()`](http://api.jquery.com/after/)
       * - [`append()`](http://api.jquery.com/append/)
       * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
       * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
       * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
       * - [`clone()`](http://api.jquery.com/clone/)
       * - [`contents()`](http://api.jquery.com/contents/)
       * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
       *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
       * - [`data()`](http://api.jquery.com/data/)
       * - [`detach()`](http://api.jquery.com/detach/)
       * - [`empty()`](http://api.jquery.com/empty/)
       * - [`eq()`](http://api.jquery.com/eq/)
       * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
       * - [`hasClass()`](http://api.jquery.com/hasClass/)
       * - [`html()`](http://api.jquery.com/html/)
       * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
       * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
       * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
       * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
       * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
       * - [`prepend()`](http://api.jquery.com/prepend/)
       * - [`prop()`](http://api.jquery.com/prop/)
       * - [`ready()`](http://api.jquery.com/ready/)
       * - [`remove()`](http://api.jquery.com/remove/)
       * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
       * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
       * - [`removeData()`](http://api.jquery.com/removeData/)
       * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
       * - [`text()`](http://api.jquery.com/text/)
       * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
       * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
       * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
       * - [`val()`](http://api.jquery.com/val/)
       * - [`wrap()`](http://api.jquery.com/wrap/)
       *
       * ## jQuery/jqLite Extras
       * Angular also provides the following additional methods and events to both jQuery and jqLite:
       *
       * ### Events
       * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
       *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
       *    element before it is removed.
       *
       * ### Methods
       * - `controller(name)` - retrieves the controller of the current element or its parent. By default
       *   retrieves controller associated with the `ngController` directive. If `name` is provided as
       *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
       *   `'ngModel'`).
       * - `injector()` - retrieves the injector of the current element or its parent.
       * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
       *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
       *   be enabled.
       * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
       *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
       *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
       *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
       * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
       *   parent element is reached.
       *
       * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
       * https://github.com/angular/angular.js/issues/14251 for more information.
       *
       * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
       * @returns {Object} jQuery object.
       */

      JQLite.expando = 'ng339';

      var jqCache = JQLite.cache = {},
          jqId = 1,
          addEventListenerFn = function (element, type, fn) {
        element.addEventListener(type, fn, false);
      },
          removeEventListenerFn = function (element, type, fn) {
        element.removeEventListener(type, fn, false);
      };

      /*
       * !!! This is an undocumented "private" function !!!
       */
      JQLite._data = function (node) {
        //jQuery always returns an object on cache miss
        return this.cache[node[this.expando]] || {};
      };

      function jqNextId() {
        return ++jqId;
      }

      var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
      var MOZ_HACK_REGEXP = /^moz([A-Z])/;
      var MOUSE_EVENT_MAP = { mouseleave: "mouseout", mouseenter: "mouseover" };
      var jqLiteMinErr = minErr('jqLite');

      /**
       * Converts snake_case to camelCase.
       * Also there is special case for Moz prefix starting with upper case letter.
       * @param name Name to normalize
       */
      function camelCase(name) {
        return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
          return offset ? letter.toUpperCase() : letter;
        }).replace(MOZ_HACK_REGEXP, 'Moz$1');
      }

      var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
      var HTML_REGEXP = /<|&#?\w+;/;
      var TAG_NAME_REGEXP = /<([\w:-]+)/;
      var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

      var wrapMap = {
        'option': [1, '<select multiple="multiple">', '</select>'],

        'thead': [1, '<table>', '</table>'],
        'col': [2, '<table><colgroup>', '</colgroup></table>'],
        'tr': [2, '<table><tbody>', '</tbody></table>'],
        'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        '_default': [0, "", ""]
      };

      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;

      function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
      }

      function jqLiteAcceptsData(node) {
        // The window object can accept data but has no nodeType
        // Otherwise we are only interested in elements (1) and documents (9)
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
      }

      function jqLiteHasData(node) {
        for (var key in jqCache[node.ng339]) {
          return true;
        }
        return false;
      }

      function jqLiteCleanData(nodes) {
        for (var i = 0, ii = nodes.length; i < ii; i++) {
          jqLiteRemoveData(nodes[i]);
        }
      }

      function jqLiteBuildFragment(html, context) {
        var tmp,
            tag,
            wrap,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i;

        if (jqLiteIsTextNode(html)) {
          // Convert non-html into a text node
          nodes.push(context.createTextNode(html));
        } else {
          // Convert html into DOM nodes
          tmp = fragment.appendChild(context.createElement("div"));
          tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

          // Descend through wrappers to the right content
          i = wrap[0];
          while (i--) {
            tmp = tmp.lastChild;
          }

          nodes = concat(nodes, tmp.childNodes);

          tmp = fragment.firstChild;
          tmp.textContent = "";
        }

        // Remove wrapper from fragment
        fragment.textContent = "";
        fragment.innerHTML = ""; // Clear inner HTML
        forEach(nodes, function (node) {
          fragment.appendChild(node);
        });

        return fragment;
      }

      function jqLiteParseHTML(html, context) {
        context = context || window.document;
        var parsed;

        if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
          return [context.createElement(parsed[1])];
        }

        if (parsed = jqLiteBuildFragment(html, context)) {
          return parsed.childNodes;
        }

        return [];
      }

      function jqLiteWrapNode(node, wrapper) {
        var parent = node.parentNode;

        if (parent) {
          parent.replaceChild(wrapper, node);
        }

        wrapper.appendChild(node);
      }

      // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
      var jqLiteContains = window.Node.prototype.contains || function (arg) {
        // jshint bitwise: false
        return !!(this.compareDocumentPosition(arg) & 16);
        // jshint bitwise: true
      };

      /////////////////////////////////////////////
      function JQLite(element) {
        if (element instanceof JQLite) {
          return element;
        }

        var argIsString;

        if (isString(element)) {
          element = trim(element);
          argIsString = true;
        }
        if (!(this instanceof JQLite)) {
          if (argIsString && element.charAt(0) != '<') {
            throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
          }
          return new JQLite(element);
        }

        if (argIsString) {
          jqLiteAddNodes(this, jqLiteParseHTML(element));
        } else {
          jqLiteAddNodes(this, element);
        }
      }

      function jqLiteClone(element) {
        return element.cloneNode(true);
      }

      function jqLiteDealoc(element, onlyDescendants) {
        if (!onlyDescendants) jqLiteRemoveData(element);

        if (element.querySelectorAll) {
          var descendants = element.querySelectorAll('*');
          for (var i = 0, l = descendants.length; i < l; i++) {
            jqLiteRemoveData(descendants[i]);
          }
        }
      }

      function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

        var expandoStore = jqLiteExpandoStore(element);
        var events = expandoStore && expandoStore.events;
        var handle = expandoStore && expandoStore.handle;

        if (!handle) return; //no listeners registered

        if (!type) {
          for (type in events) {
            if (type !== '$destroy') {
              removeEventListenerFn(element, type, handle);
            }
            delete events[type];
          }
        } else {

          var removeHandler = function (type) {
            var listenerFns = events[type];
            if (isDefined(fn)) {
              arrayRemove(listenerFns || [], fn);
            }
            if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
              removeEventListenerFn(element, type, handle);
              delete events[type];
            }
          };

          forEach(type.split(' '), function (type) {
            removeHandler(type);
            if (MOUSE_EVENT_MAP[type]) {
              removeHandler(MOUSE_EVENT_MAP[type]);
            }
          });
        }
      }

      function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];

        if (expandoStore) {
          if (name) {
            delete expandoStore.data[name];
            return;
          }

          if (expandoStore.handle) {
            if (expandoStore.events.$destroy) {
              expandoStore.handle({}, '$destroy');
            }
            jqLiteOff(element);
          }
          delete jqCache[expandoId];
          element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
        }
      }

      function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339,
            expandoStore = expandoId && jqCache[expandoId];

        if (createIfNecessary && !expandoStore) {
          element.ng339 = expandoId = jqNextId();
          expandoStore = jqCache[expandoId] = { events: {}, data: {}, handle: undefined };
        }

        return expandoStore;
      }

      function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {

          var isSimpleSetter = isDefined(value);
          var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
          var massGetter = !key;
          var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
          var data = expandoStore && expandoStore.data;

          if (isSimpleSetter) {
            // data('key', value)
            data[key] = value;
          } else {
            if (massGetter) {
              // data()
              return data;
            } else {
              if (isSimpleGetter) {
                // data('key')
                // don't force creation of expandoStore if it doesn't exist yet
                return data && data[key];
              } else {
                // mass-setter: data({key1: val1, key2: val2})
                extend(data, key);
              }
            }
          }
        }
      }

      function jqLiteHasClass(element, selector) {
        if (!element.getAttribute) return false;
        return (" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ") > -1;
      }

      function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
          forEach(cssClasses.split(' '), function (cssClass) {
            element.setAttribute('class', trim((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").replace(" " + trim(cssClass) + " ", " ")));
          });
        }
      }

      function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
          var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, " ");

          forEach(cssClasses.split(' '), function (cssClass) {
            cssClass = trim(cssClass);
            if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
              existingClasses += cssClass + ' ';
            }
          });

          element.setAttribute('class', trim(existingClasses));
        }
      }

      function jqLiteAddNodes(root, elements) {
        // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

        if (elements) {

          // if a Node (the most common case)
          if (elements.nodeType) {
            root[root.length++] = elements;
          } else {
            var length = elements.length;

            // if an Array or NodeList and not a Window
            if (typeof length === 'number' && elements.window !== elements) {
              if (length) {
                for (var i = 0; i < length; i++) {
                  root[root.length++] = elements[i];
                }
              }
            } else {
              root[root.length++] = elements;
            }
          }
        }
      }

      function jqLiteController(element, name) {
        return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
      }

      function jqLiteInheritedData(element, name, value) {
        // if element is the document object work with the html element instead
        // this makes $(document).scope() possible
        if (element.nodeType == NODE_TYPE_DOCUMENT) {
          element = element.documentElement;
        }
        var names = isArray(name) ? name : [name];

        while (element) {
          for (var i = 0, ii = names.length; i < ii; i++) {
            if (isDefined(value = jqLite.data(element, names[i]))) return value;
          }

          // If dealing with a document fragment node with a host element, and no parent, use the host
          // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
          // to lookup parent controllers.
          element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
      }

      function jqLiteEmpty(element) {
        jqLiteDealoc(element, true);
        while (element.firstChild) {
          element.removeChild(element.firstChild);
        }
      }

      function jqLiteRemove(element, keepData) {
        if (!keepData) jqLiteDealoc(element);
        var parent = element.parentNode;
        if (parent) parent.removeChild(element);
      }

      function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        if (win.document.readyState === 'complete') {
          // Force the action to be run async for consistent behavior
          // from the action's point of view
          // i.e. it will definitely not be in a $apply
          win.setTimeout(action);
        } else {
          // No need to unbind this handler as load is only ever called once
          jqLite(win).on('load', action);
        }
      }

      //////////////////////////////////////////
      // Functions which are declared directly.
      //////////////////////////////////////////
      var JQLitePrototype = JQLite.prototype = {
        ready: function (fn) {
          var fired = false;

          function trigger() {
            if (fired) return;
            fired = true;
            fn();
          }

          // check if document is already loaded
          if (window.document.readyState === 'complete') {
            window.setTimeout(trigger);
          } else {
            this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
            // we can not use jqLite since we are not done loading and jQuery could be loaded later.
            // jshint -W064
            JQLite(window).on('load', trigger); // fallback to window.onload for others
            // jshint +W064
          }
        },
        toString: function () {
          var value = [];
          forEach(this, function (e) {
            value.push('' + e);
          });
          return '[' + value.join(', ') + ']';
        },

        eq: function (index) {
          return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
        },

        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
      };

      //////////////////////////////////////////
      // Functions iterating getter/setters.
      // these functions return self on setter and
      // value on get.
      //////////////////////////////////////////
      var BOOLEAN_ATTR = {};
      forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
      });
      var BOOLEAN_ELEMENTS = {};
      forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
        BOOLEAN_ELEMENTS[value] = true;
      });
      var ALIASED_ATTR = {
        'ngMinlength': 'minlength',
        'ngMaxlength': 'maxlength',
        'ngMin': 'min',
        'ngMax': 'max',
        'ngPattern': 'pattern'
      };

      function getBooleanAttrName(element, name) {
        // check dom last since we will most likely fail on name
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

        // booleanAttr is here twice to minimize DOM access
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
      }

      function getAliasedAttrName(name) {
        return ALIASED_ATTR[name];
      }

      forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: jqLiteHasData,
        cleanData: jqLiteCleanData
      }, function (fn, name) {
        JQLite[name] = fn;
      });

      forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,

        scope: function (element) {
          // Can't use jqLiteData here directly so we stay compatible with jQuery!
          return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
        },

        isolateScope: function (element) {
          // Can't use jqLiteData here directly so we stay compatible with jQuery!
          return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
        },

        controller: jqLiteController,

        injector: function (element) {
          return jqLiteInheritedData(element, '$injector');
        },

        removeAttr: function (element, name) {
          element.removeAttribute(name);
        },

        hasClass: jqLiteHasClass,

        css: function (element, name, value) {
          name = camelCase(name);

          if (isDefined(value)) {
            element.style[name] = value;
          } else {
            return element.style[name];
          }
        },

        attr: function (element, name, value) {
          var nodeType = element.nodeType;
          if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
            return;
          }
          var lowercasedName = lowercase(name);
          if (BOOLEAN_ATTR[lowercasedName]) {
            if (isDefined(value)) {
              if (!!value) {
                element[name] = true;
                element.setAttribute(name, lowercasedName);
              } else {
                element[name] = false;
                element.removeAttribute(lowercasedName);
              }
            } else {
              return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
            }
          } else if (isDefined(value)) {
            element.setAttribute(name, value);
          } else if (element.getAttribute) {
            // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
            // some elements (e.g. Document) don't have get attribute, so return undefined
            var ret = element.getAttribute(name, 2);
            // normalize non-existing attributes to undefined (as jQuery)
            return ret === null ? undefined : ret;
          }
        },

        prop: function (element, name, value) {
          if (isDefined(value)) {
            element[name] = value;
          } else {
            return element[name];
          }
        },

        text: function () {
          getText.$dv = '';
          return getText;

          function getText(element, value) {
            if (isUndefined(value)) {
              var nodeType = element.nodeType;
              return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : '';
            }
            element.textContent = value;
          }
        }(),

        val: function (element, value) {
          if (isUndefined(value)) {
            if (element.multiple && nodeName_(element) === 'select') {
              var result = [];
              forEach(element.options, function (option) {
                if (option.selected) {
                  result.push(option.value || option.text);
                }
              });
              return result.length === 0 ? null : result;
            }
            return element.value;
          }
          element.value = value;
        },

        html: function (element, value) {
          if (isUndefined(value)) {
            return element.innerHTML;
          }
          jqLiteDealoc(element, true);
          element.innerHTML = value;
        },

        empty: jqLiteEmpty
      }, function (fn, name) {
        /**
         * Properties: writes return selection, reads return first value
         */
        JQLite.prototype[name] = function (arg1, arg2) {
          var i, key;
          var nodeCount = this.length;

          // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
          // in a way that survives minification.
          // jqLiteEmpty takes no arguments but is a setter.
          if (fn !== jqLiteEmpty && isUndefined(fn.length == 2 && fn !== jqLiteHasClass && fn !== jqLiteController ? arg1 : arg2)) {
            if (isObject(arg1)) {

              // we are a write, but the object properties are the key/values
              for (i = 0; i < nodeCount; i++) {
                if (fn === jqLiteData) {
                  // data() takes the whole object in jQuery
                  fn(this[i], arg1);
                } else {
                  for (key in arg1) {
                    fn(this[i], key, arg1[key]);
                  }
                }
              }
              // return self for chaining
              return this;
            } else {
              // we are a read, so read the first child.
              // TODO: do we still need this?
              var value = fn.$dv;
              // Only if we have $dv do we iterate over all, otherwise it is just the first element.
              var jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount;
              for (var j = 0; j < jj; j++) {
                var nodeValue = fn(this[j], arg1, arg2);
                value = value ? value + nodeValue : nodeValue;
              }
              return value;
            }
          } else {
            // we are a write, so apply to all children
            for (i = 0; i < nodeCount; i++) {
              fn(this[i], arg1, arg2);
            }
            // return self for chaining
            return this;
          }
        };
      });

      function createEventHandler(element, events) {
        var eventHandler = function (event, type) {
          // jQuery specific api
          event.isDefaultPrevented = function () {
            return event.defaultPrevented;
          };

          var eventFns = events[type || event.type];
          var eventFnsLength = eventFns ? eventFns.length : 0;

          if (!eventFnsLength) return;

          if (isUndefined(event.immediatePropagationStopped)) {
            var originalStopImmediatePropagation = event.stopImmediatePropagation;
            event.stopImmediatePropagation = function () {
              event.immediatePropagationStopped = true;

              if (event.stopPropagation) {
                event.stopPropagation();
              }

              if (originalStopImmediatePropagation) {
                originalStopImmediatePropagation.call(event);
              }
            };
          }

          event.isImmediatePropagationStopped = function () {
            return event.immediatePropagationStopped === true;
          };

          // Some events have special handlers that wrap the real handler
          var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

          // Copy event handlers in case event handlers array is modified during execution.
          if (eventFnsLength > 1) {
            eventFns = shallowCopy(eventFns);
          }

          for (var i = 0; i < eventFnsLength; i++) {
            if (!event.isImmediatePropagationStopped()) {
              handlerWrapper(element, event, eventFns[i]);
            }
          }
        };

        // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
        //       events on `element`
        eventHandler.elem = element;
        return eventHandler;
      }

      function defaultHandlerWrapper(element, event, handler) {
        handler.call(element, event);
      }

      function specialMouseHandlerWrapper(target, event, handler) {
        // Refer to jQuery's implementation of mouseenter & mouseleave
        // Read about mouseenter and mouseleave:
        // http://www.quirksmode.org/js/events_mouse.html#link8
        var related = event.relatedTarget;
        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jqLiteContains.call(target, related)) {
          handler.call(target, event);
        }
      }

      //////////////////////////////////////////
      // Functions iterating traversal.
      // These functions chain results into a single
      // selector.
      //////////////////////////////////////////
      forEach({
        removeData: jqLiteRemoveData,

        on: function jqLiteOn(element, type, fn, unsupported) {
          if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

          // Do not add event handlers to non-elements because they will not be cleaned up.
          if (!jqLiteAcceptsData(element)) {
            return;
          }

          var expandoStore = jqLiteExpandoStore(element, true);
          var events = expandoStore.events;
          var handle = expandoStore.handle;

          if (!handle) {
            handle = expandoStore.handle = createEventHandler(element, events);
          }

          // http://jsperf.com/string-indexof-vs-split
          var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
          var i = types.length;

          var addHandler = function (type, specialHandlerWrapper, noEventListener) {
            var eventFns = events[type];

            if (!eventFns) {
              eventFns = events[type] = [];
              eventFns.specialHandlerWrapper = specialHandlerWrapper;
              if (type !== '$destroy' && !noEventListener) {
                addEventListenerFn(element, type, handle);
              }
            }

            eventFns.push(fn);
          };

          while (i--) {
            type = types[i];
            if (MOUSE_EVENT_MAP[type]) {
              addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
              addHandler(type, undefined, true);
            } else {
              addHandler(type);
            }
          }
        },

        off: jqLiteOff,

        one: function (element, type, fn) {
          element = jqLite(element);

          //add the listener twice so that when it is called
          //you can remove the original function and still be
          //able to call element.off(ev, fn) normally
          element.on(type, function onFn() {
            element.off(type, fn);
            element.off(type, onFn);
          });
          element.on(type, fn);
        },

        replaceWith: function (element, replaceNode) {
          var index,
              parent = element.parentNode;
          jqLiteDealoc(element);
          forEach(new JQLite(replaceNode), function (node) {
            if (index) {
              parent.insertBefore(node, index.nextSibling);
            } else {
              parent.replaceChild(node, element);
            }
            index = node;
          });
        },

        children: function (element) {
          var children = [];
          forEach(element.childNodes, function (element) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
              children.push(element);
            }
          });
          return children;
        },

        contents: function (element) {
          return element.contentDocument || element.childNodes || [];
        },

        append: function (element, node) {
          var nodeType = element.nodeType;
          if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

          node = new JQLite(node);

          for (var i = 0, ii = node.length; i < ii; i++) {
            var child = node[i];
            element.appendChild(child);
          }
        },

        prepend: function (element, node) {
          if (element.nodeType === NODE_TYPE_ELEMENT) {
            var index = element.firstChild;
            forEach(new JQLite(node), function (child) {
              element.insertBefore(child, index);
            });
          }
        },

        wrap: function (element, wrapNode) {
          jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
        },

        remove: jqLiteRemove,

        detach: function (element) {
          jqLiteRemove(element, true);
        },

        after: function (element, newElement) {
          var index = element,
              parent = element.parentNode;
          newElement = new JQLite(newElement);

          for (var i = 0, ii = newElement.length; i < ii; i++) {
            var node = newElement[i];
            parent.insertBefore(node, index.nextSibling);
            index = node;
          }
        },

        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,

        toggleClass: function (element, selector, condition) {
          if (selector) {
            forEach(selector.split(' '), function (className) {
              var classCondition = condition;
              if (isUndefined(classCondition)) {
                classCondition = !jqLiteHasClass(element, className);
              }
              (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
            });
          }
        },

        parent: function (element) {
          var parent = element.parentNode;
          return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },

        next: function (element) {
          return element.nextElementSibling;
        },

        find: function (element, selector) {
          if (element.getElementsByTagName) {
            return element.getElementsByTagName(selector);
          } else {
            return [];
          }
        },

        clone: jqLiteClone,

        triggerHandler: function (element, event, extraParameters) {

          var dummyEvent, eventFnsCopy, handlerArgs;
          var eventName = event.type || event;
          var expandoStore = jqLiteExpandoStore(element);
          var events = expandoStore && expandoStore.events;
          var eventFns = events && events[eventName];

          if (eventFns) {
            // Create a dummy event to pass to the handlers
            dummyEvent = {
              preventDefault: function () {
                this.defaultPrevented = true;
              },
              isDefaultPrevented: function () {
                return this.defaultPrevented === true;
              },
              stopImmediatePropagation: function () {
                this.immediatePropagationStopped = true;
              },
              isImmediatePropagationStopped: function () {
                return this.immediatePropagationStopped === true;
              },
              stopPropagation: noop,
              type: eventName,
              target: element
            };

            // If a custom event was provided then extend our dummy event with it
            if (event.type) {
              dummyEvent = extend(dummyEvent, event);
            }

            // Copy event handlers in case event handlers array is modified during execution.
            eventFnsCopy = shallowCopy(eventFns);
            handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

            forEach(eventFnsCopy, function (fn) {
              if (!dummyEvent.isImmediatePropagationStopped()) {
                fn.apply(element, handlerArgs);
              }
            });
          }
        }
      }, function (fn, name) {
        /**
         * chaining functions
         */
        JQLite.prototype[name] = function (arg1, arg2, arg3) {
          var value;

          for (var i = 0, ii = this.length; i < ii; i++) {
            if (isUndefined(value)) {
              value = fn(this[i], arg1, arg2, arg3);
              if (isDefined(value)) {
                // any function which returns a value needs to be wrapped
                value = jqLite(value);
              }
            } else {
              jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
            }
          }
          return isDefined(value) ? value : this;
        };

        // bind legacy bind/unbind to on/off
        JQLite.prototype.bind = JQLite.prototype.on;
        JQLite.prototype.unbind = JQLite.prototype.off;
      });

      // Provider for private $$jqLite service
      function $$jqLiteProvider() {
        this.$get = function $$jqLite() {
          return extend(JQLite, {
            hasClass: function (node, classes) {
              if (node.attr) node = node[0];
              return jqLiteHasClass(node, classes);
            },
            addClass: function (node, classes) {
              if (node.attr) node = node[0];
              return jqLiteAddClass(node, classes);
            },
            removeClass: function (node, classes) {
              if (node.attr) node = node[0];
              return jqLiteRemoveClass(node, classes);
            }
          });
        };
      }

      /**
       * Computes a hash of an 'obj'.
       * Hash of a:
       *  string is string
       *  number is number as string
       *  object is either result of calling $$hashKey function on the object or uniquely generated id,
       *         that is also assigned to the $$hashKey property of the object.
       *
       * @param obj
       * @returns {string} hash string such that the same input will have the same hash string.
       *         The resulting string key is in 'type:hashKey' format.
       */
      function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;

        if (key) {
          if (typeof key === 'function') {
            key = obj.$$hashKey();
          }
          return key;
        }

        var objType = typeof obj;
        if (objType == 'function' || objType == 'object' && obj !== null) {
          key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
        } else {
          key = objType + ':' + obj;
        }

        return key;
      }

      /**
       * HashMap which can use objects as keys
       */
      function HashMap(array, isolatedUid) {
        if (isolatedUid) {
          var uid = 0;
          this.nextUid = function () {
            return ++uid;
          };
        }
        forEach(array, this.put, this);
      }
      HashMap.prototype = {
        /**
         * Store key value pair
         * @param key key to store can be any type
         * @param value value to store can be any type
         */
        put: function (key, value) {
          this[hashKey(key, this.nextUid)] = value;
        },

        /**
         * @param key
         * @returns {Object} the value for the key
         */
        get: function (key) {
          return this[hashKey(key, this.nextUid)];
        },

        /**
         * Remove the key/value pair
         * @param key
         */
        remove: function (key) {
          var value = this[key = hashKey(key, this.nextUid)];
          delete this[key];
          return value;
        }
      };

      var $$HashMapProvider = [function () {
        this.$get = [function () {
          return HashMap;
        }];
      }];

      /**
       * @ngdoc function
       * @module ng
       * @name angular.injector
       * @kind function
       *
       * @description
       * Creates an injector object that can be used for retrieving services as well as for
       * dependency injection (see {@link guide/di dependency injection}).
       *
       * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
       *     {@link angular.module}. The `ng` module must be explicitly added.
       * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
       *     disallows argument name annotation inference.
       * @returns {injector} Injector object. See {@link auto.$injector $injector}.
       *
       * @example
       * Typical usage
       * ```js
       *   // create an injector
       *   var $injector = angular.injector(['ng']);
       *
       *   // use the injector to kick off your application
       *   // use the type inference to auto inject arguments, or use implicit injection
       *   $injector.invoke(function($rootScope, $compile, $document) {
       *     $compile($document)($rootScope);
       *     $rootScope.$digest();
       *   });
       * ```
       *
       * Sometimes you want to get access to the injector of a currently running Angular app
       * from outside Angular. Perhaps, you want to inject and compile some markup after the
       * application has been bootstrapped. You can do this using the extra `injector()` added
       * to JQuery/jqLite elements. See {@link angular.element}.
       *
       * *This is fairly rare but could be the case if a third party library is injecting the
       * markup.*
       *
       * In the following example a new block of HTML containing a `ng-controller`
       * directive is added to the end of the document body by JQuery. We then compile and link
       * it into the current AngularJS scope.
       *
       * ```js
       * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
       * $(document.body).append($div);
       *
       * angular.element(document).injector().invoke(function($compile) {
       *   var scope = angular.element($div).scope();
       *   $compile($div)(scope);
       * });
       * ```
       */

      /**
       * @ngdoc module
       * @name auto
       * @installation
       * @description
       *
       * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
       */

      var ARROW_ARG = /^([^\(]+?)=>/;
      var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
      var FN_ARG_SPLIT = /,/;
      var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      var $injectorMinErr = minErr('$injector');

      function stringifyFn(fn) {
        // Support: Chrome 50-51 only
        // Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
        // (See https://github.com/angular/angular.js/issues/14487.)
        // TODO (gkalpak): Remove workaround when Chrome v52 is released
        return Function.prototype.toString.call(fn) + ' ';
      }

      function extractArgs(fn) {
        var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
            args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
        return args;
      }

      function anonFn(fn) {
        // For anonymous functions, showing at the very least the function signature can help in
        // debugging.
        var args = extractArgs(fn);
        if (args) {
          return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
        }
        return 'fn';
      }

      function annotate(fn, strictDi, name) {
        var $inject, argDecl, last;

        if (typeof fn === 'function') {
          if (!($inject = fn.$inject)) {
            $inject = [];
            if (fn.length) {
              if (strictDi) {
                if (!isString(name) || !name) {
                  name = fn.name || anonFn(fn);
                }
                throw $injectorMinErr('strictdi', '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
              }
              argDecl = extractArgs(fn);
              forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
                arg.replace(FN_ARG, function (all, underscore, name) {
                  $inject.push(name);
                });
              });
            }
            fn.$inject = $inject;
          }
        } else if (isArray(fn)) {
          last = fn.length - 1;
          assertArgFn(fn[last], 'fn');
          $inject = fn.slice(0, last);
        } else {
          assertArgFn(fn, 'fn', true);
        }
        return $inject;
      }

      ///////////////////////////////////////

      /**
       * @ngdoc service
       * @name $injector
       *
       * @description
       *
       * `$injector` is used to retrieve object instances as defined by
       * {@link auto.$provide provider}, instantiate types, invoke methods,
       * and load modules.
       *
       * The following always holds true:
       *
       * ```js
       *   var $injector = angular.injector();
       *   expect($injector.get('$injector')).toBe($injector);
       *   expect($injector.invoke(function($injector) {
       *     return $injector;
       *   })).toBe($injector);
       * ```
       *
       * # Injection Function Annotation
       *
       * JavaScript does not have annotations, and annotations are needed for dependency injection. The
       * following are all valid ways of annotating function with injection arguments and are equivalent.
       *
       * ```js
       *   // inferred (only works if code not minified/obfuscated)
       *   $injector.invoke(function(serviceA){});
       *
       *   // annotated
       *   function explicit(serviceA) {};
       *   explicit.$inject = ['serviceA'];
       *   $injector.invoke(explicit);
       *
       *   // inline
       *   $injector.invoke(['serviceA', function(serviceA){}]);
       * ```
       *
       * ## Inference
       *
       * In JavaScript calling `toString()` on a function returns the function definition. The definition
       * can then be parsed and the function arguments can be extracted. This method of discovering
       * annotations is disallowed when the injector is in strict mode.
       * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
       * argument names.
       *
       * ## `$inject` Annotation
       * By adding an `$inject` property onto a function the injection parameters can be specified.
       *
       * ## Inline
       * As an array of injection names, where the last item in the array is the function to call.
       */

      /**
       * @ngdoc method
       * @name $injector#get
       *
       * @description
       * Return an instance of the service.
       *
       * @param {string} name The name of the instance to retrieve.
       * @param {string=} caller An optional string to provide the origin of the function call for error messages.
       * @return {*} The instance.
       */

      /**
       * @ngdoc method
       * @name $injector#invoke
       *
       * @description
       * Invoke the method and supply the method arguments from the `$injector`.
       *
       * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
       *   injected according to the {@link guide/di $inject Annotation} rules.
       * @param {Object=} self The `this` for the invoked method.
       * @param {Object=} locals Optional object. If preset then any argument names are read from this
       *                         object first, before the `$injector` is consulted.
       * @returns {*} the value returned by the invoked `fn` function.
       */

      /**
       * @ngdoc method
       * @name $injector#has
       *
       * @description
       * Allows the user to query if the particular service exists.
       *
       * @param {string} name Name of the service to query.
       * @returns {boolean} `true` if injector has given service.
       */

      /**
       * @ngdoc method
       * @name $injector#instantiate
       * @description
       * Create a new instance of JS type. The method takes a constructor function, invokes the new
       * operator, and supplies all of the arguments to the constructor function as specified by the
       * constructor annotation.
       *
       * @param {Function} Type Annotated constructor function.
       * @param {Object=} locals Optional object. If preset then any argument names are read from this
       * object first, before the `$injector` is consulted.
       * @returns {Object} new instance of `Type`.
       */

      /**
       * @ngdoc method
       * @name $injector#annotate
       *
       * @description
       * Returns an array of service names which the function is requesting for injection. This API is
       * used by the injector to determine which services need to be injected into the function when the
       * function is invoked. There are three ways in which the function can be annotated with the needed
       * dependencies.
       *
       * # Argument names
       *
       * The simplest form is to extract the dependencies from the arguments of the function. This is done
       * by converting the function into a string using `toString()` method and extracting the argument
       * names.
       * ```js
       *   // Given
       *   function MyController($scope, $route) {
       *     // ...
       *   }
       *
       *   // Then
       *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
       * ```
       *
       * You can disallow this method by using strict injection mode.
       *
       * This method does not work with code minification / obfuscation. For this reason the following
       * annotation strategies are supported.
       *
       * # The `$inject` property
       *
       * If a function has an `$inject` property and its value is an array of strings, then the strings
       * represent names of services to be injected into the function.
       * ```js
       *   // Given
       *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
       *     // ...
       *   }
       *   // Define function dependencies
       *   MyController['$inject'] = ['$scope', '$route'];
       *
       *   // Then
       *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
       * ```
       *
       * # The array notation
       *
       * It is often desirable to inline Injected functions and that's when setting the `$inject` property
       * is very inconvenient. In these situations using the array notation to specify the dependencies in
       * a way that survives minification is a better choice:
       *
       * ```js
       *   // We wish to write this (not minification / obfuscation safe)
       *   injector.invoke(function($compile, $rootScope) {
       *     // ...
       *   });
       *
       *   // We are forced to write break inlining
       *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
       *     // ...
       *   };
       *   tmpFn.$inject = ['$compile', '$rootScope'];
       *   injector.invoke(tmpFn);
       *
       *   // To better support inline function the inline annotation is supported
       *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
       *     // ...
       *   }]);
       *
       *   // Therefore
       *   expect(injector.annotate(
       *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
       *    ).toEqual(['$compile', '$rootScope']);
       * ```
       *
       * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
       * be retrieved as described above.
       *
       * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
       *
       * @returns {Array.<string>} The names of the services which the function requires.
       */

      /**
       * @ngdoc service
       * @name $provide
       *
       * @description
       *
       * The {@link auto.$provide $provide} service has a number of methods for registering components
       * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
       * {@link angular.Module}.
       *
       * An Angular **service** is a singleton object created by a **service factory**.  These **service
       * factories** are functions which, in turn, are created by a **service provider**.
       * The **service providers** are constructor functions. When instantiated they must contain a
       * property called `$get`, which holds the **service factory** function.
       *
       * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
       * correct **service provider**, instantiating it and then calling its `$get` **service factory**
       * function to get the instance of the **service**.
       *
       * Often services have no configuration options and there is no need to add methods to the service
       * provider.  The provider will be no more than a constructor function with a `$get` property. For
       * these cases the {@link auto.$provide $provide} service has additional helper methods to register
       * services without specifying a provider.
       *
       * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
       *     {@link auto.$injector $injector}
       * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
       *     providers and services.
       * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
       *     services, not providers.
       * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
       *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
       *     given factory function.
       * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
       *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
       *      a new object using the given constructor function.
       * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
       *      will be able to modify or replace the implementation of another service.
       *
       * See the individual methods for more information and examples.
       */

      /**
       * @ngdoc method
       * @name $provide#provider
       * @description
       *
       * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
       * are constructor functions, whose instances are responsible for "providing" a factory for a
       * service.
       *
       * Service provider names start with the name of the service they provide followed by `Provider`.
       * For example, the {@link ng.$log $log} service has a provider called
       * {@link ng.$logProvider $logProvider}.
       *
       * Service provider objects can have additional methods which allow configuration of the provider
       * and its service. Importantly, you can configure what kind of service is created by the `$get`
       * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
       * method {@link ng.$logProvider#debugEnabled debugEnabled}
       * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
       * console or not.
       *
       * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                              'Provider'` key.
       * @param {(Object|function())} provider If the provider is:
       *
       *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
       *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
       *   - `Constructor`: a new instance of the provider will be created using
       *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
       *
       * @returns {Object} registered provider instance
      
       * @example
       *
       * The following example shows how to create a simple event tracking service and register it using
       * {@link auto.$provide#provider $provide.provider()}.
       *
       * ```js
       *  // Define the eventTracker provider
       *  function EventTrackerProvider() {
       *    var trackingUrl = '/track';
       *
       *    // A provider method for configuring where the tracked events should been saved
       *    this.setTrackingUrl = function(url) {
       *      trackingUrl = url;
       *    };
       *
       *    // The service factory function
       *    this.$get = ['$http', function($http) {
       *      var trackedEvents = {};
       *      return {
       *        // Call this to track an event
       *        event: function(event) {
       *          var count = trackedEvents[event] || 0;
       *          count += 1;
       *          trackedEvents[event] = count;
       *          return count;
       *        },
       *        // Call this to save the tracked events to the trackingUrl
       *        save: function() {
       *          $http.post(trackingUrl, trackedEvents);
       *        }
       *      };
       *    }];
       *  }
       *
       *  describe('eventTracker', function() {
       *    var postSpy;
       *
       *    beforeEach(module(function($provide) {
       *      // Register the eventTracker provider
       *      $provide.provider('eventTracker', EventTrackerProvider);
       *    }));
       *
       *    beforeEach(module(function(eventTrackerProvider) {
       *      // Configure eventTracker provider
       *      eventTrackerProvider.setTrackingUrl('/custom-track');
       *    }));
       *
       *    it('tracks events', inject(function(eventTracker) {
       *      expect(eventTracker.event('login')).toEqual(1);
       *      expect(eventTracker.event('login')).toEqual(2);
       *    }));
       *
       *    it('saves to the tracking url', inject(function(eventTracker, $http) {
       *      postSpy = spyOn($http, 'post');
       *      eventTracker.event('login');
       *      eventTracker.save();
       *      expect(postSpy).toHaveBeenCalled();
       *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
       *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
       *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
       *    }));
       *  });
       * ```
       */

      /**
       * @ngdoc method
       * @name $provide#factory
       * @description
       *
       * Register a **service factory**, which will be called to return the service instance.
       * This is short for registering a service where its provider consists of only a `$get` property,
       * which is the given service factory function.
       * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
       * configure your service in a provider.
       *
       * @param {string} name The name of the instance.
       * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
       *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
       * @returns {Object} registered provider instance
       *
       * @example
       * Here is an example of registering a service
       * ```js
       *   $provide.factory('ping', ['$http', function($http) {
       *     return function ping() {
       *       return $http.send('/ping');
       *     };
       *   }]);
       * ```
       * You would then inject and use this service like this:
       * ```js
       *   someModule.controller('Ctrl', ['ping', function(ping) {
       *     ping();
       *   }]);
       * ```
       */

      /**
       * @ngdoc method
       * @name $provide#service
       * @description
       *
       * Register a **service constructor**, which will be invoked with `new` to create the service
       * instance.
       * This is short for registering a service where its provider's `$get` property is a factory
       * function that returns an instance instantiated by the injector from the service constructor
       * function.
       *
       * Internally it looks a bit like this:
       *
       * ```
       * {
       *   $get: function() {
       *     return $injector.instantiate(constructor);
       *   }
       * }
       * ```
       *
       *
       * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
       * as a type/class.
       *
       * @param {string} name The name of the instance.
       * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
       *     that will be instantiated.
       * @returns {Object} registered provider instance
       *
       * @example
       * Here is an example of registering a service using
       * {@link auto.$provide#service $provide.service(class)}.
       * ```js
       *   var Ping = function($http) {
       *     this.$http = $http;
       *   };
       *
       *   Ping.$inject = ['$http'];
       *
       *   Ping.prototype.send = function() {
       *     return this.$http.get('/ping');
       *   };
       *   $provide.service('ping', Ping);
       * ```
       * You would then inject and use this service like this:
       * ```js
       *   someModule.controller('Ctrl', ['ping', function(ping) {
       *     ping.send();
       *   }]);
       * ```
       */

      /**
       * @ngdoc method
       * @name $provide#value
       * @description
       *
       * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
       * number, an array, an object or a function. This is short for registering a service where its
       * provider's `$get` property is a factory function that takes no arguments and returns the **value
       * service**. That also means it is not possible to inject other services into a value service.
       *
       * Value services are similar to constant services, except that they cannot be injected into a
       * module configuration function (see {@link angular.Module#config}) but they can be overridden by
       * an Angular {@link auto.$provide#decorator decorator}.
       *
       * @param {string} name The name of the instance.
       * @param {*} value The value.
       * @returns {Object} registered provider instance
       *
       * @example
       * Here are some examples of creating value services.
       * ```js
       *   $provide.value('ADMIN_USER', 'admin');
       *
       *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
       *
       *   $provide.value('halfOf', function(value) {
       *     return value / 2;
       *   });
       * ```
       */

      /**
       * @ngdoc method
       * @name $provide#constant
       * @description
       *
       * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
       * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
       * possible to inject other services into a constant.
       *
       * But unlike {@link auto.$provide#value value}, a constant can be
       * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
       * be overridden by an Angular {@link auto.$provide#decorator decorator}.
       *
       * @param {string} name The name of the constant.
       * @param {*} value The constant value.
       * @returns {Object} registered instance
       *
       * @example
       * Here a some examples of creating constants:
       * ```js
       *   $provide.constant('SHARD_HEIGHT', 306);
       *
       *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
       *
       *   $provide.constant('double', function(value) {
       *     return value * 2;
       *   });
       * ```
       */

      /**
       * @ngdoc method
       * @name $provide#decorator
       * @description
       *
       * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
       * intercepts the creation of a service, allowing it to override or modify the behavior of the
       * service. The return value of the decorator function may be the original service, or a new service
       * that replaces (or wraps and delegates to) the original service.
       *
       * You can find out more about using decorators in the {@link guide/decorators} guide.
       *
       * @param {string} name The name of the service to decorate.
       * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
       *    provided and should return the decorated service instance. The function is called using
       *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
       *    Local injection arguments:
       *
       *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
       *      decorated or delegated to.
       *
       * @example
       * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
       * calls to {@link ng.$log#error $log.warn()}.
       * ```js
       *   $provide.decorator('$log', ['$delegate', function($delegate) {
       *     $delegate.warn = $delegate.error;
       *     return $delegate;
       *   }]);
       * ```
       */

      function createInjector(modulesToLoad, strictDi) {
        strictDi = strictDi === true;
        var INSTANTIATING = {},
            providerSuffix = 'Provider',
            path = [],
            loadedModules = new HashMap([], true),
            providerCache = {
          $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
        },
            providerInjector = providerCache.$injector = createInternalInjector(providerCache, function (serviceName, caller) {
          if (angular.isString(caller)) {
            path.push(caller);
          }
          throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
        }),
            instanceCache = {},
            protoInstanceInjector = createInternalInjector(instanceCache, function (serviceName, caller) {
          var provider = providerInjector.get(serviceName + providerSuffix, caller);
          return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
        }),
            instanceInjector = protoInstanceInjector;

        providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
        var runBlocks = loadModules(modulesToLoad);
        instanceInjector = protoInstanceInjector.get('$injector');
        instanceInjector.strictDi = strictDi;
        forEach(runBlocks, function (fn) {
          if (fn) instanceInjector.invoke(fn);
        });

        return instanceInjector;

        ////////////////////////////////////
        // $provider
        ////////////////////////////////////

        function supportObject(delegate) {
          return function (key, value) {
            if (isObject(key)) {
              forEach(key, reverseParams(delegate));
            } else {
              return delegate(key, value);
            }
          };
        }

        function provider(name, provider_) {
          assertNotHasOwnProperty(name, 'service');
          if (isFunction(provider_) || isArray(provider_)) {
            provider_ = providerInjector.instantiate(provider_);
          }
          if (!provider_.$get) {
            throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
          }
          return providerCache[name + providerSuffix] = provider_;
        }

        function enforceReturnValue(name, factory) {
          return function enforcedReturnValue() {
            var result = instanceInjector.invoke(factory, this);
            if (isUndefined(result)) {
              throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
            }
            return result;
          };
        }

        function factory(name, factoryFn, enforce) {
          return provider(name, {
            $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
          });
        }

        function service(name, constructor) {
          return factory(name, ['$injector', function ($injector) {
            return $injector.instantiate(constructor);
          }]);
        }

        function value(name, val) {
          return factory(name, valueFn(val), false);
        }

        function constant(name, value) {
          assertNotHasOwnProperty(name, 'constant');
          providerCache[name] = value;
          instanceCache[name] = value;
        }

        function decorator(serviceName, decorFn) {
          var origProvider = providerInjector.get(serviceName + providerSuffix),
              orig$get = origProvider.$get;

          origProvider.$get = function () {
            var origInstance = instanceInjector.invoke(orig$get, origProvider);
            return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
          };
        }

        ////////////////////////////////////
        // Module Loading
        ////////////////////////////////////
        function loadModules(modulesToLoad) {
          assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
          var runBlocks = [],
              moduleFn;
          forEach(modulesToLoad, function (module) {
            if (loadedModules.get(module)) return;
            loadedModules.put(module, true);

            function runInvokeQueue(queue) {
              var i, ii;
              for (i = 0, ii = queue.length; i < ii; i++) {
                var invokeArgs = queue[i],
                    provider = providerInjector.get(invokeArgs[0]);

                provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
              }
            }

            try {
              if (isString(module)) {
                moduleFn = angularModule(module);
                runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                runInvokeQueue(moduleFn._invokeQueue);
                runInvokeQueue(moduleFn._configBlocks);
              } else if (isFunction(module)) {
                runBlocks.push(providerInjector.invoke(module));
              } else if (isArray(module)) {
                runBlocks.push(providerInjector.invoke(module));
              } else {
                assertArgFn(module, 'module');
              }
            } catch (e) {
              if (isArray(module)) {
                module = module[module.length - 1];
              }
              if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
                // Safari & FF's stack traces don't contain error.message content
                // unlike those of Chrome and IE
                // So if stack doesn't contain message, we create a new string that contains both.
                // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
                /* jshint -W022 */
                e = e.message + '\n' + e.stack;
              }
              throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
            }
          });
          return runBlocks;
        }

        ////////////////////////////////////
        // internal Injector
        ////////////////////////////////////

        function createInternalInjector(cache, factory) {

          function getService(serviceName, caller) {
            if (cache.hasOwnProperty(serviceName)) {
              if (cache[serviceName] === INSTANTIATING) {
                throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
              }
              return cache[serviceName];
            } else {
              try {
                path.unshift(serviceName);
                cache[serviceName] = INSTANTIATING;
                return cache[serviceName] = factory(serviceName, caller);
              } catch (err) {
                if (cache[serviceName] === INSTANTIATING) {
                  delete cache[serviceName];
                }
                throw err;
              } finally {
                path.shift();
              }
            }
          }

          function injectionArgs(fn, locals, serviceName) {
            var args = [],
                $inject = createInjector.$$annotate(fn, strictDi, serviceName);

            for (var i = 0, length = $inject.length; i < length; i++) {
              var key = $inject[i];
              if (typeof key !== 'string') {
                throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
              }
              args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
            }
            return args;
          }

          function isClass(func) {
            // IE 9-11 do not support classes and IE9 leaks with the code below.
            if (msie <= 11) {
              return false;
            }
            // Support: Edge 12-13 only
            // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
            return typeof func === 'function' && /^(?:class\b|constructor\()/.test(stringifyFn(func));
          }

          function invoke(fn, self, locals, serviceName) {
            if (typeof locals === 'string') {
              serviceName = locals;
              locals = null;
            }

            var args = injectionArgs(fn, locals, serviceName);
            if (isArray(fn)) {
              fn = fn[fn.length - 1];
            }

            if (!isClass(fn)) {
              // http://jsperf.com/angularjs-invoke-apply-vs-switch
              // #5388
              return fn.apply(self, args);
            } else {
              args.unshift(null);
              return new (Function.prototype.bind.apply(fn, args))();
            }
          }

          function instantiate(Type, locals, serviceName) {
            // Check if Type is annotated and use just the given function at n-1 as parameter
            // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
            var ctor = isArray(Type) ? Type[Type.length - 1] : Type;
            var args = injectionArgs(Type, locals, serviceName);
            // Empty object at position 0 is ignored for invocation with `new`, but required.
            args.unshift(null);
            return new (Function.prototype.bind.apply(ctor, args))();
          }

          return {
            invoke: invoke,
            instantiate: instantiate,
            get: getService,
            annotate: createInjector.$$annotate,
            has: function (name) {
              return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
            }
          };
        }
      }

      createInjector.$$annotate = annotate;

      /**
       * @ngdoc provider
       * @name $anchorScrollProvider
       *
       * @description
       * Use `$anchorScrollProvider` to disable automatic scrolling whenever
       * {@link ng.$location#hash $location.hash()} changes.
       */
      function $AnchorScrollProvider() {

        var autoScrollingEnabled = true;

        /**
         * @ngdoc method
         * @name $anchorScrollProvider#disableAutoScrolling
         *
         * @description
         * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
         * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
         * Use this method to disable automatic scrolling.
         *
         * If automatic scrolling is disabled, one must explicitly call
         * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
         * current hash.
         */
        this.disableAutoScrolling = function () {
          autoScrollingEnabled = false;
        };

        /**
         * @ngdoc service
         * @name $anchorScroll
         * @kind function
         * @requires $window
         * @requires $location
         * @requires $rootScope
         *
         * @description
         * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
         * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
         * in the
         * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
         *
         * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
         * match any anchor whenever it changes. This can be disabled by calling
         * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
         *
         * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
         * vertical scroll-offset (either fixed or dynamic).
         *
         * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
         *                       {@link ng.$location#hash $location.hash()} will be used.
         *
         * @property {(number|function|jqLite)} yOffset
         * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
         * positioned elements at the top of the page, such as navbars, headers etc.
         *
         * `yOffset` can be specified in various ways:
         * - **number**: A fixed number of pixels to be used as offset.<br /><br />
         * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
         *   a number representing the offset (in pixels).<br /><br />
         * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
         *   the top of the page to the element's bottom will be used as offset.<br />
         *   **Note**: The element will be taken into account only as long as its `position` is set to
         *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
         *   their height and/or positioning according to the viewport's size.
         *
         * <br />
         * <div class="alert alert-warning">
         * In order for `yOffset` to work properly, scrolling should take place on the document's root and
         * not some child element.
         * </div>
         *
         * @example
           <example module="anchorScrollExample">
             <file name="index.html">
               <div id="scrollArea" ng-controller="ScrollController">
                 <a ng-click="gotoBottom()">Go to bottom</a>
                 <a id="bottom"></a> You're at the bottom!
               </div>
             </file>
             <file name="script.js">
               angular.module('anchorScrollExample', [])
                 .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
                   function ($scope, $location, $anchorScroll) {
                     $scope.gotoBottom = function() {
                       // set the location.hash to the id of
                       // the element you wish to scroll to.
                       $location.hash('bottom');
                        // call $anchorScroll()
                       $anchorScroll();
                     };
                   }]);
             </file>
             <file name="style.css">
               #scrollArea {
                 height: 280px;
                 overflow: auto;
               }
                #bottom {
                 display: block;
                 margin-top: 2000px;
               }
             </file>
           </example>
         *
         * <hr />
         * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
         * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
         *
         * @example
           <example module="anchorScrollOffsetExample">
             <file name="index.html">
               <div class="fixed-header" ng-controller="headerCtrl">
                 <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
                   Go to anchor {{x}}
                 </a>
               </div>
               <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
                 Anchor {{x}} of 5
               </div>
             </file>
             <file name="script.js">
               angular.module('anchorScrollOffsetExample', [])
                 .run(['$anchorScroll', function($anchorScroll) {
                   $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
                 }])
                 .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
                   function ($anchorScroll, $location, $scope) {
                     $scope.gotoAnchor = function(x) {
                       var newHash = 'anchor' + x;
                       if ($location.hash() !== newHash) {
                         // set the $location.hash to `newHash` and
                         // $anchorScroll will automatically scroll to it
                         $location.hash('anchor' + x);
                       } else {
                         // call $anchorScroll() explicitly,
                         // since $location.hash hasn't changed
                         $anchorScroll();
                       }
                     };
                   }
                 ]);
             </file>
             <file name="style.css">
               body {
                 padding-top: 50px;
               }
                .anchor {
                 border: 2px dashed DarkOrchid;
                 padding: 10px 10px 200px 10px;
               }
                .fixed-header {
                 background-color: rgba(0, 0, 0, 0.2);
                 height: 50px;
                 position: fixed;
                 top: 0; left: 0; right: 0;
               }
                .fixed-header > a {
                 display: inline-block;
                 margin: 5px 15px;
               }
             </file>
           </example>
         */
        this.$get = ['$window', '$location', '$rootScope', function ($window, $location, $rootScope) {
          var document = $window.document;

          // Helper function to get first anchor from a NodeList
          // (using `Array#some()` instead of `angular#forEach()` since it's more performant
          //  and working in all supported browsers.)
          function getFirstAnchor(list) {
            var result = null;
            Array.prototype.some.call(list, function (element) {
              if (nodeName_(element) === 'a') {
                result = element;
                return true;
              }
            });
            return result;
          }

          function getYOffset() {

            var offset = scroll.yOffset;

            if (isFunction(offset)) {
              offset = offset();
            } else if (isElement(offset)) {
              var elem = offset[0];
              var style = $window.getComputedStyle(elem);
              if (style.position !== 'fixed') {
                offset = 0;
              } else {
                offset = elem.getBoundingClientRect().bottom;
              }
            } else if (!isNumber(offset)) {
              offset = 0;
            }

            return offset;
          }

          function scrollTo(elem) {
            if (elem) {
              elem.scrollIntoView();

              var offset = getYOffset();

              if (offset) {
                // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
                // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
                // top of the viewport.
                //
                // IF the number of pixels from the top of `elem` to the end of the page's content is less
                // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
                // way down the page.
                //
                // This is often the case for elements near the bottom of the page.
                //
                // In such cases we do not need to scroll the whole `offset` up, just the difference between
                // the top of the element and the offset, which is enough to align the top of `elem` at the
                // desired position.
                var elemTop = elem.getBoundingClientRect().top;
                $window.scrollBy(0, elemTop - offset);
              }
            } else {
              $window.scrollTo(0, 0);
            }
          }

          function scroll(hash) {
            hash = isString(hash) ? hash : $location.hash();
            var elm;

            // empty hash, scroll to the top of the page
            if (!hash) scrollTo(null);

            // element with given id
            else if (elm = document.getElementById(hash)) scrollTo(elm);

              // first anchor with given name :-D
              else if (elm = getFirstAnchor(document.getElementsByName(hash))) scrollTo(elm);

                // no element and hash == 'top', scroll to the top of the page
                else if (hash === 'top') scrollTo(null);
          }

          // does not scroll when user clicks on anchor link that is currently on
          // (no url change, no $location.hash() change), browser native does scroll
          if (autoScrollingEnabled) {
            $rootScope.$watch(function autoScrollWatch() {
              return $location.hash();
            }, function autoScrollWatchAction(newVal, oldVal) {
              // skip the initial scroll if $location.hash is empty
              if (newVal === oldVal && newVal === '') return;

              jqLiteDocumentLoaded(function () {
                $rootScope.$evalAsync(scroll);
              });
            });
          }

          return scroll;
        }];
      }

      var $animateMinErr = minErr('$animate');
      var ELEMENT_NODE = 1;
      var NG_ANIMATE_CLASSNAME = 'ng-animate';

      function mergeClasses(a, b) {
        if (!a && !b) return '';
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(' ');
        if (isArray(b)) b = b.join(' ');
        return a + ' ' + b;
      }

      function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
          var elm = element[i];
          if (elm.nodeType === ELEMENT_NODE) {
            return elm;
          }
        }
      }

      function splitClasses(classes) {
        if (isString(classes)) {
          classes = classes.split(' ');
        }

        // Use createMap() to prevent class assumptions involving property names in
        // Object.prototype
        var obj = createMap();
        forEach(classes, function (klass) {
          // sometimes the split leaves empty string values
          // incase extra spaces were applied to the options
          if (klass.length) {
            obj[klass] = true;
          }
        });
        return obj;
      }

      // if any other type of options value besides an Object value is
      // passed into the $animate.method() animation then this helper code
      // will be run which will ignore it. While this patch is not the
      // greatest solution to this, a lot of existing plugins depend on
      // $animate to either call the callback (< 1.2) or return a promise
      // that can be changed. This helper function ensures that the options
      // are wiped clean incase a callback function is provided.
      function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
      }

      var $$CoreAnimateJsProvider = function () {
        this.$get = noop;
      };

      // this is prefixed with Core since it conflicts with
      // the animateQueueProvider defined in ngAnimate/animateQueue.js
      var $$CoreAnimateQueueProvider = function () {
        var postDigestQueue = new HashMap();
        var postDigestElements = [];

        this.$get = ['$$AnimateRunner', '$rootScope', function ($$AnimateRunner, $rootScope) {
          return {
            enabled: noop,
            on: noop,
            off: noop,
            pin: noop,

            push: function (element, event, options, domOperation) {
              domOperation && domOperation();

              options = options || {};
              options.from && element.css(options.from);
              options.to && element.css(options.to);

              if (options.addClass || options.removeClass) {
                addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
              }

              var runner = new $$AnimateRunner(); // jshint ignore:line

              // since there are no animations to run the runner needs to be
              // notified that the animation call is complete.
              runner.complete();
              return runner;
            }
          };

          function updateData(data, classes, value) {
            var changed = false;
            if (classes) {
              classes = isString(classes) ? classes.split(' ') : isArray(classes) ? classes : [];
              forEach(classes, function (className) {
                if (className) {
                  changed = true;
                  data[className] = value;
                }
              });
            }
            return changed;
          }

          function handleCSSClassChanges() {
            forEach(postDigestElements, function (element) {
              var data = postDigestQueue.get(element);
              if (data) {
                var existing = splitClasses(element.attr('class'));
                var toAdd = '';
                var toRemove = '';
                forEach(data, function (status, className) {
                  var hasClass = !!existing[className];
                  if (status !== hasClass) {
                    if (status) {
                      toAdd += (toAdd.length ? ' ' : '') + className;
                    } else {
                      toRemove += (toRemove.length ? ' ' : '') + className;
                    }
                  }
                });

                forEach(element, function (elm) {
                  toAdd && jqLiteAddClass(elm, toAdd);
                  toRemove && jqLiteRemoveClass(elm, toRemove);
                });
                postDigestQueue.remove(element);
              }
            });
            postDigestElements.length = 0;
          }

          function addRemoveClassesPostDigest(element, add, remove) {
            var data = postDigestQueue.get(element) || {};

            var classesAdded = updateData(data, add, true);
            var classesRemoved = updateData(data, remove, false);

            if (classesAdded || classesRemoved) {

              postDigestQueue.put(element, data);
              postDigestElements.push(element);

              if (postDigestElements.length === 1) {
                $rootScope.$$postDigest(handleCSSClassChanges);
              }
            }
          }
        }];
      };

      /**
       * @ngdoc provider
       * @name $animateProvider
       *
       * @description
       * Default implementation of $animate that doesn't perform any animations, instead just
       * synchronously performs DOM updates and resolves the returned runner promise.
       *
       * In order to enable animations the `ngAnimate` module has to be loaded.
       *
       * To see the functional implementation check out `src/ngAnimate/animate.js`.
       */
      var $AnimateProvider = ['$provide', function ($provide) {
        var provider = this;

        this.$$registeredAnimations = Object.create(null);

        /**
        * @ngdoc method
        * @name $animateProvider#register
        *
        * @description
        * Registers a new injectable animation factory function. The factory function produces the
        * animation object which contains callback functions for each event that is expected to be
        * animated.
        *
        *   * `eventFn`: `function(element, ... , doneFunction, options)`
        *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
        *   on the type of animation additional arguments will be injected into the animation function. The
        *   list below explains the function signatures for the different animation methods:
        *
        *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
        *   - addClass: function(element, addedClasses, doneFunction, options)
        *   - removeClass: function(element, removedClasses, doneFunction, options)
        *   - enter, leave, move: function(element, doneFunction, options)
        *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
        *
        *   Make sure to trigger the `doneFunction` once the animation is fully complete.
        *
        * ```js
        *   return {
        *     //enter, leave, move signature
        *     eventFn : function(element, done, options) {
        *       //code to run the animation
        *       //once complete, then run done()
        *       return function endFunction(wasCancelled) {
        *         //code to cancel the animation
        *       }
        *     }
        *   }
        * ```
        *
        * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
        * @param {Function} factory The factory function that will be executed to return the animation
        *                           object.
        */
        this.register = function (name, factory) {
          if (name && name.charAt(0) !== '.') {
            throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
          }

          var key = name + '-animation';
          provider.$$registeredAnimations[name.substr(1)] = key;
          $provide.factory(key, factory);
        };

        /**
         * @ngdoc method
         * @name $animateProvider#classNameFilter
         *
         * @description
         * Sets and/or returns the CSS class regular expression that is checked when performing
         * an animation. Upon bootstrap the classNameFilter value is not set at all and will
         * therefore enable $animate to attempt to perform an animation on any element that is triggered.
         * When setting the `classNameFilter` value, animations will only be performed on elements
         * that successfully match the filter expression. This in turn can boost performance
         * for low-powered devices as well as applications containing a lot of structural operations.
         * @param {RegExp=} expression The className expression which will be checked against all animations
         * @return {RegExp} The current CSS className expression value. If null then there is no expression value
         */
        this.classNameFilter = function (expression) {
          if (arguments.length === 1) {
            this.$$classNameFilter = expression instanceof RegExp ? expression : null;
            if (this.$$classNameFilter) {
              var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
              if (reservedRegex.test(this.$$classNameFilter.toString())) {
                throw $animateMinErr('nongcls', '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
              }
            }
          }
          return this.$$classNameFilter;
        };

        this.$get = ['$$animateQueue', function ($$animateQueue) {
          function domInsert(element, parentElement, afterElement) {
            // if for some reason the previous element was removed
            // from the dom sometime before this code runs then let's
            // just stick to using the parent element as the anchor
            if (afterElement) {
              var afterNode = extractElementNode(afterElement);
              if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
                afterElement = null;
              }
            }
            afterElement ? afterElement.after(element) : parentElement.prepend(element);
          }

          /**
           * @ngdoc service
           * @name $animate
           * @description The $animate service exposes a series of DOM utility methods that provide support
           * for animation hooks. The default behavior is the application of DOM operations, however,
           * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
           * to ensure that animation runs with the triggered DOM operation.
           *
           * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
           * included and only when it is active then the animation hooks that `$animate` triggers will be
           * functional. Once active then all structural `ng-` directives will trigger animations as they perform
           * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
           * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
           *
           * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
           *
           * To learn more about enabling animation support, click here to visit the
           * {@link ngAnimate ngAnimate module page}.
           */
          return {
            // we don't call it directly since non-existant arguments may
            // be interpreted as null within the sub enabled function

            /**
             *
             * @ngdoc method
             * @name $animate#on
             * @kind function
             * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
             *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
             *    is fired with the following params:
             *
             * ```js
             * $animate.on('enter', container,
             *    function callback(element, phase) {
             *      // cool we detected an enter animation within the container
             *    }
             * );
             * ```
             *
             * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
             * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
             *     as well as among its children
             * @param {Function} callback the callback function that will be fired when the listener is triggered
             *
             * The arguments present in the callback function are:
             * * `element` - The captured DOM element that the animation was fired on.
             * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
             */
            on: $$animateQueue.on,

            /**
             *
             * @ngdoc method
             * @name $animate#off
             * @kind function
             * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
             * can be used in three different ways depending on the arguments:
             *
             * ```js
             * // remove all the animation event listeners listening for `enter`
             * $animate.off('enter');
             *
             * // remove listeners for all animation events from the container element
             * $animate.off(container);
             *
             * // remove all the animation event listeners listening for `enter` on the given element and its children
             * $animate.off('enter', container);
             *
             * // remove the event listener function provided by `callback` that is set
             * // to listen for `enter` on the given `container` as well as its children
             * $animate.off('enter', container, callback);
             * ```
             *
             * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
             * addClass, removeClass, etc...), or the container element. If it is the element, all other
             * arguments are ignored.
             * @param {DOMElement=} container the container element the event listener was placed on
             * @param {Function=} callback the callback function that was registered as the listener
             */
            off: $$animateQueue.off,

            /**
             * @ngdoc method
             * @name $animate#pin
             * @kind function
             * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
             *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
             *    element despite being outside the realm of the application or within another application. Say for example if the application
             *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
             *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
             *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
             *
             *    Note that this feature is only active when the `ngAnimate` module is used.
             *
             * @param {DOMElement} element the external element that will be pinned
             * @param {DOMElement} parentElement the host parent element that will be associated with the external element
             */
            pin: $$animateQueue.pin,

            /**
             *
             * @ngdoc method
             * @name $animate#enabled
             * @kind function
             * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
             * function can be called in four ways:
             *
             * ```js
             * // returns true or false
             * $animate.enabled();
             *
             * // changes the enabled state for all animations
             * $animate.enabled(false);
             * $animate.enabled(true);
             *
             * // returns true or false if animations are enabled for an element
             * $animate.enabled(element);
             *
             * // changes the enabled state for an element and its children
             * $animate.enabled(element, true);
             * $animate.enabled(element, false);
             * ```
             *
             * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
             * @param {boolean=} enabled whether or not the animations will be enabled for the element
             *
             * @return {boolean} whether or not animations are enabled
             */
            enabled: $$animateQueue.enabled,

            /**
             * @ngdoc method
             * @name $animate#cancel
             * @kind function
             * @description Cancels the provided animation.
             *
             * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
             */
            cancel: function (runner) {
              runner.end && runner.end();
            },

            /**
             *
             * @ngdoc method
             * @name $animate#enter
             * @kind function
             * @description Inserts the element into the DOM either after the `after` element (if provided) or
             *   as the first child within the `parent` element and then triggers an animation.
             *   A promise is returned that will be resolved during the next digest once the animation
             *   has completed.
             *
             * @param {DOMElement} element the element which will be inserted into the DOM
             * @param {DOMElement} parent the parent element which will append the element as
             *   a child (so long as the after element is not present)
             * @param {DOMElement=} after the sibling element after which the element will be appended
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            enter: function (element, parent, after, options) {
              parent = parent && jqLite(parent);
              after = after && jqLite(after);
              parent = parent || after.parent();
              domInsert(element, parent, after);
              return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
            },

            /**
             *
             * @ngdoc method
             * @name $animate#move
             * @kind function
             * @description Inserts (moves) the element into its new position in the DOM either after
             *   the `after` element (if provided) or as the first child within the `parent` element
             *   and then triggers an animation. A promise is returned that will be resolved
             *   during the next digest once the animation has completed.
             *
             * @param {DOMElement} element the element which will be moved into the new DOM position
             * @param {DOMElement} parent the parent element which will append the element as
             *   a child (so long as the after element is not present)
             * @param {DOMElement=} after the sibling element after which the element will be appended
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            move: function (element, parent, after, options) {
              parent = parent && jqLite(parent);
              after = after && jqLite(after);
              parent = parent || after.parent();
              domInsert(element, parent, after);
              return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
            },

            /**
             * @ngdoc method
             * @name $animate#leave
             * @kind function
             * @description Triggers an animation and then removes the element from the DOM.
             * When the function is called a promise is returned that will be resolved during the next
             * digest once the animation has completed.
             *
             * @param {DOMElement} element the element which will be removed from the DOM
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            leave: function (element, options) {
              return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function () {
                element.remove();
              });
            },

            /**
             * @ngdoc method
             * @name $animate#addClass
             * @kind function
             *
             * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
             *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
             *   animation if element already contains the CSS class or if the class is removed at a later step.
             *   Note that class-based animations are treated differently compared to structural animations
             *   (like enter, move and leave) since the CSS classes may be added/removed at different points
             *   depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            addClass: function (element, className, options) {
              options = prepareAnimateOptions(options);
              options.addClass = mergeClasses(options.addclass, className);
              return $$animateQueue.push(element, 'addClass', options);
            },

            /**
             * @ngdoc method
             * @name $animate#removeClass
             * @kind function
             *
             * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
             *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
             *   animation if element does not contain the CSS class or if the class is added at a later step.
             *   Note that class-based animations are treated differently compared to structural animations
             *   (like enter, move and leave) since the CSS classes may be added/removed at different points
             *   depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            removeClass: function (element, className, options) {
              options = prepareAnimateOptions(options);
              options.removeClass = mergeClasses(options.removeClass, className);
              return $$animateQueue.push(element, 'removeClass', options);
            },

            /**
             * @ngdoc method
             * @name $animate#setClass
             * @kind function
             *
             * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
             *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
             *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
             *    passed. Note that class-based animations are treated differently compared to structural animations
             *    (like enter, move and leave) since the CSS classes may be added/removed at different points
             *    depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
             * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            setClass: function (element, add, remove, options) {
              options = prepareAnimateOptions(options);
              options.addClass = mergeClasses(options.addClass, add);
              options.removeClass = mergeClasses(options.removeClass, remove);
              return $$animateQueue.push(element, 'setClass', options);
            },

            /**
             * @ngdoc method
             * @name $animate#animate
             * @kind function
             *
             * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
             * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
             * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
             * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
             * style in `to`, the style in `from` is applied immediately, and no animation is run.
             * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
             * method (or as part of the `options` parameter):
             *
             * ```js
             * ngModule.animation('.my-inline-animation', function() {
             *   return {
             *     animate : function(element, from, to, done, options) {
             *       //animation
             *       done();
             *     }
             *   }
             * });
             * ```
             *
             * @param {DOMElement} element the element which the CSS styles will be applied to
             * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
             * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
             * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
             *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
             *    (Note that if no animation is detected then this value will not be applied to the element.)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Promise} the animation callback promise
             */
            animate: function (element, from, to, className, options) {
              options = prepareAnimateOptions(options);
              options.from = options.from ? extend(options.from, from) : from;
              options.to = options.to ? extend(options.to, to) : to;

              className = className || 'ng-inline-animate';
              options.tempClasses = mergeClasses(options.tempClasses, className);
              return $$animateQueue.push(element, 'animate', options);
            }
          };
        }];
      }];

      var $$AnimateAsyncRunFactoryProvider = function () {
        this.$get = ['$$rAF', function ($$rAF) {
          var waitQueue = [];

          function waitForTick(fn) {
            waitQueue.push(fn);
            if (waitQueue.length > 1) return;
            $$rAF(function () {
              for (var i = 0; i < waitQueue.length; i++) {
                waitQueue[i]();
              }
              waitQueue = [];
            });
          }

          return function () {
            var passed = false;
            waitForTick(function () {
              passed = true;
            });
            return function (callback) {
              passed ? callback() : waitForTick(callback);
            };
          };
        }];
      };

      var $$AnimateRunnerFactoryProvider = function () {
        this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout', function ($q, $sniffer, $$animateAsyncRun, $document, $timeout) {

          var INITIAL_STATE = 0;
          var DONE_PENDING_STATE = 1;
          var DONE_COMPLETE_STATE = 2;

          AnimateRunner.chain = function (chain, callback) {
            var index = 0;

            next();
            function next() {
              if (index === chain.length) {
                callback(true);
                return;
              }

              chain[index](function (response) {
                if (response === false) {
                  callback(false);
                  return;
                }
                index++;
                next();
              });
            }
          };

          AnimateRunner.all = function (runners, callback) {
            var count = 0;
            var status = true;
            forEach(runners, function (runner) {
              runner.done(onProgress);
            });

            function onProgress(response) {
              status = status && response;
              if (++count === runners.length) {
                callback(status);
              }
            }
          };

          function AnimateRunner(host) {
            this.setHost(host);

            var rafTick = $$animateAsyncRun();
            var timeoutTick = function (fn) {
              $timeout(fn, 0, false);
            };

            this._doneCallbacks = [];
            this._tick = function (fn) {
              var doc = $document[0];

              // the document may not be ready or attached
              // to the module for some internal tests
              if (doc && doc.hidden) {
                timeoutTick(fn);
              } else {
                rafTick(fn);
              }
            };
            this._state = 0;
          }

          AnimateRunner.prototype = {
            setHost: function (host) {
              this.host = host || {};
            },

            done: function (fn) {
              if (this._state === DONE_COMPLETE_STATE) {
                fn();
              } else {
                this._doneCallbacks.push(fn);
              }
            },

            progress: noop,

            getPromise: function () {
              if (!this.promise) {
                var self = this;
                this.promise = $q(function (resolve, reject) {
                  self.done(function (status) {
                    status === false ? reject() : resolve();
                  });
                });
              }
              return this.promise;
            },

            then: function (resolveHandler, rejectHandler) {
              return this.getPromise().then(resolveHandler, rejectHandler);
            },

            'catch': function (handler) {
              return this.getPromise()['catch'](handler);
            },

            'finally': function (handler) {
              return this.getPromise()['finally'](handler);
            },

            pause: function () {
              if (this.host.pause) {
                this.host.pause();
              }
            },

            resume: function () {
              if (this.host.resume) {
                this.host.resume();
              }
            },

            end: function () {
              if (this.host.end) {
                this.host.end();
              }
              this._resolve(true);
            },

            cancel: function () {
              if (this.host.cancel) {
                this.host.cancel();
              }
              this._resolve(false);
            },

            complete: function (response) {
              var self = this;
              if (self._state === INITIAL_STATE) {
                self._state = DONE_PENDING_STATE;
                self._tick(function () {
                  self._resolve(response);
                });
              }
            },

            _resolve: function (response) {
              if (this._state !== DONE_COMPLETE_STATE) {
                forEach(this._doneCallbacks, function (fn) {
                  fn(response);
                });
                this._doneCallbacks.length = 0;
                this._state = DONE_COMPLETE_STATE;
              }
            }
          };

          return AnimateRunner;
        }];
      };

      /**
       * @ngdoc service
       * @name $animateCss
       * @kind object
       *
       * @description
       * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
       * then the `$animateCss` service will actually perform animations.
       *
       * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
       */
      var $CoreAnimateCssProvider = function () {
        this.$get = ['$$rAF', '$q', '$$AnimateRunner', function ($$rAF, $q, $$AnimateRunner) {

          return function (element, initialOptions) {
            // all of the animation functions should create
            // a copy of the options data, however, if a
            // parent service has already created a copy then
            // we should stick to using that
            var options = initialOptions || {};
            if (!options.$$prepared) {
              options = copy(options);
            }

            // there is no point in applying the styles since
            // there is no animation that goes on at all in
            // this version of $animateCss.
            if (options.cleanupStyles) {
              options.from = options.to = null;
            }

            if (options.from) {
              element.css(options.from);
              options.from = null;
            }

            /* jshint newcap: false */
            var closed,
                runner = new $$AnimateRunner();
            return {
              start: run,
              end: run
            };

            function run() {
              $$rAF(function () {
                applyAnimationContents();
                if (!closed) {
                  runner.complete();
                }
                closed = true;
              });
              return runner;
            }

            function applyAnimationContents() {
              if (options.addClass) {
                element.addClass(options.addClass);
                options.addClass = null;
              }
              if (options.removeClass) {
                element.removeClass(options.removeClass);
                options.removeClass = null;
              }
              if (options.to) {
                element.css(options.to);
                options.to = null;
              }
            }
          };
        }];
      };

      /* global stripHash: true */

      /**
       * ! This is a private undocumented service !
       *
       * @name $browser
       * @requires $log
       * @description
       * This object has two goals:
       *
       * - hide all the global state in the browser caused by the window object
       * - abstract away all the browser specific features and inconsistencies
       *
       * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
       * service, which can be used for convenient testing of the application without the interaction with
       * the real browser apis.
       */
      /**
       * @param {object} window The global window object.
       * @param {object} document jQuery wrapped document.
       * @param {object} $log window.console or an object with the same interface.
       * @param {object} $sniffer $sniffer service
       */
      function Browser(window, document, $log, $sniffer) {
        var self = this,
            location = window.location,
            history = window.history,
            setTimeout = window.setTimeout,
            clearTimeout = window.clearTimeout,
            pendingDeferIds = {};

        self.isMock = false;

        var outstandingRequestCount = 0;
        var outstandingRequestCallbacks = [];

        // TODO(vojta): remove this temporary api
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function () {
          outstandingRequestCount++;
        };

        /**
         * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
         * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
         */
        function completeOutstandingRequest(fn) {
          try {
            fn.apply(null, sliceArgs(arguments, 1));
          } finally {
            outstandingRequestCount--;
            if (outstandingRequestCount === 0) {
              while (outstandingRequestCallbacks.length) {
                try {
                  outstandingRequestCallbacks.pop()();
                } catch (e) {
                  $log.error(e);
                }
              }
            }
          }
        }

        function getHash(url) {
          var index = url.indexOf('#');
          return index === -1 ? '' : url.substr(index);
        }

        /**
         * @private
         * Note: this method is used only by scenario runner
         * TODO(vojta): prefix this method with $$ ?
         * @param {function()} callback Function that will be called when no outstanding request
         */
        self.notifyWhenNoOutstandingRequests = function (callback) {
          if (outstandingRequestCount === 0) {
            callback();
          } else {
            outstandingRequestCallbacks.push(callback);
          }
        };

        //////////////////////////////////////////////////////////////
        // URL API
        //////////////////////////////////////////////////////////////

        var cachedState,
            lastHistoryState,
            lastBrowserUrl = location.href,
            baseElement = document.find('base'),
            pendingLocation = null,
            getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
          try {
            return history.state;
          } catch (e) {
            // MSIE can reportedly throw when there is no state (UNCONFIRMED).
          }
        };

        cacheState();
        lastHistoryState = cachedState;

        /**
         * @name $browser#url
         *
         * @description
         * GETTER:
         * Without any argument, this method just returns current value of location.href.
         *
         * SETTER:
         * With at least one argument, this method sets url to new value.
         * If html5 history api supported, pushState/replaceState is used, otherwise
         * location.href/location.replace is used.
         * Returns its own instance to allow chaining
         *
         * NOTE: this api is intended for use only by the $location service. Please use the
         * {@link ng.$location $location service} to change url.
         *
         * @param {string} url New url (when used as setter)
         * @param {boolean=} replace Should new url replace current history record?
         * @param {object=} state object to use with pushState/replaceState
         */
        self.url = function (url, replace, state) {
          // In modern browsers `history.state` is `null` by default; treating it separately
          // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
          // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
          if (isUndefined(state)) {
            state = null;
          }

          // Android Browser BFCache causes location, history reference to become stale.
          if (location !== window.location) location = window.location;
          if (history !== window.history) history = window.history;

          // setter
          if (url) {
            var sameState = lastHistoryState === state;

            // Don't change anything if previous and current URLs and states match. This also prevents
            // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
            // See https://github.com/angular/angular.js/commit/ffb2701
            if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
              return self;
            }
            var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
            lastBrowserUrl = url;
            lastHistoryState = state;
            // Don't use history API if only the hash changed
            // due to a bug in IE10/IE11 which leads
            // to not firing a `hashchange` nor `popstate` event
            // in some cases (see #9143).
            if ($sniffer.history && (!sameBase || !sameState)) {
              history[replace ? 'replaceState' : 'pushState'](state, '', url);
              cacheState();
              // Do the assignment again so that those two variables are referentially identical.
              lastHistoryState = cachedState;
            } else {
              if (!sameBase) {
                pendingLocation = url;
              }
              if (replace) {
                location.replace(url);
              } else if (!sameBase) {
                location.href = url;
              } else {
                location.hash = getHash(url);
              }
              if (location.href !== url) {
                pendingLocation = url;
              }
            }
            if (pendingLocation) {
              pendingLocation = url;
            }
            return self;
            // getter
          } else {
            // - pendingLocation is needed as browsers don't allow to read out
            //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
            //   https://openradar.appspot.com/22186109).
            // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
            return pendingLocation || location.href.replace(/%27/g, "'");
          }
        };

        /**
         * @name $browser#state
         *
         * @description
         * This method is a getter.
         *
         * Return history.state or null if history.state is undefined.
         *
         * @returns {object} state
         */
        self.state = function () {
          return cachedState;
        };

        var urlChangeListeners = [],
            urlChangeInit = false;

        function cacheStateAndFireUrlChange() {
          pendingLocation = null;
          cacheState();
          fireUrlChange();
        }

        // This variable should be used *only* inside the cacheState function.
        var lastCachedState = null;
        function cacheState() {
          // This should be the only place in $browser where `history.state` is read.
          cachedState = getCurrentState();
          cachedState = isUndefined(cachedState) ? null : cachedState;

          // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
          if (equals(cachedState, lastCachedState)) {
            cachedState = lastCachedState;
          }
          lastCachedState = cachedState;
        }

        function fireUrlChange() {
          if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
            return;
          }

          lastBrowserUrl = self.url();
          lastHistoryState = cachedState;
          forEach(urlChangeListeners, function (listener) {
            listener(self.url(), cachedState);
          });
        }

        /**
         * @name $browser#onUrlChange
         *
         * @description
         * Register callback function that will be called, when url changes.
         *
         * It's only called when the url is changed from outside of angular:
         * - user types different url into address bar
         * - user clicks on history (forward/back) button
         * - user clicks on a link
         *
         * It's not called when url is changed by $browser.url() method
         *
         * The listener gets called with new url as parameter.
         *
         * NOTE: this api is intended for use only by the $location service. Please use the
         * {@link ng.$location $location service} to monitor url changes in angular apps.
         *
         * @param {function(string)} listener Listener function to be called when url changes.
         * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
         */
        self.onUrlChange = function (callback) {
          // TODO(vojta): refactor to use node's syntax for events
          if (!urlChangeInit) {
            // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
            // don't fire popstate when user change the address bar and don't fire hashchange when url
            // changed by push/replaceState

            // html5 history api - popstate event
            if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
            // hashchange event
            jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

            urlChangeInit = true;
          }

          urlChangeListeners.push(callback);
          return callback;
        };

        /**
         * @private
         * Remove popstate and hashchange handler from window.
         *
         * NOTE: this api is intended for use only by $rootScope.
         */
        self.$$applicationDestroyed = function () {
          jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
        };

        /**
         * Checks whether the url has changed outside of Angular.
         * Needs to be exported to be able to check for changes that have been done in sync,
         * as hashchange/popstate events fire in async.
         */
        self.$$checkUrlChange = fireUrlChange;

        //////////////////////////////////////////////////////////////
        // Misc API
        //////////////////////////////////////////////////////////////

        /**
         * @name $browser#baseHref
         *
         * @description
         * Returns current <base href>
         * (always relative - without domain)
         *
         * @returns {string} The current base href
         */
        self.baseHref = function () {
          var href = baseElement.attr('href');
          return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
        };

        /**
         * @name $browser#defer
         * @param {function()} fn A function, who's execution should be deferred.
         * @param {number=} [delay=0] of milliseconds to defer the function execution.
         * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
         *
         * @description
         * Executes a fn asynchronously via `setTimeout(fn, delay)`.
         *
         * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
         * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
         * via `$browser.defer.flush()`.
         *
         */
        self.defer = function (fn, delay) {
          var timeoutId;
          outstandingRequestCount++;
          timeoutId = setTimeout(function () {
            delete pendingDeferIds[timeoutId];
            completeOutstandingRequest(fn);
          }, delay || 0);
          pendingDeferIds[timeoutId] = true;
          return timeoutId;
        };

        /**
         * @name $browser#defer.cancel
         *
         * @description
         * Cancels a deferred task identified with `deferId`.
         *
         * @param {*} deferId Token returned by the `$browser.defer` function.
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
         *                    canceled.
         */
        self.defer.cancel = function (deferId) {
          if (pendingDeferIds[deferId]) {
            delete pendingDeferIds[deferId];
            clearTimeout(deferId);
            completeOutstandingRequest(noop);
            return true;
          }
          return false;
        };
      }

      function $BrowserProvider() {
        this.$get = ['$window', '$log', '$sniffer', '$document', function ($window, $log, $sniffer, $document) {
          return new Browser($window, $document, $log, $sniffer);
        }];
      }

      /**
       * @ngdoc service
       * @name $cacheFactory
       *
       * @description
       * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
       * them.
       *
       * ```js
       *
       *  var cache = $cacheFactory('cacheId');
       *  expect($cacheFactory.get('cacheId')).toBe(cache);
       *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
       *
       *  cache.put("key", "value");
       *  cache.put("another key", "another value");
       *
       *  // We've specified no options on creation
       *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
       *
       * ```
       *
       *
       * @param {string} cacheId Name or id of the newly created cache.
       * @param {object=} options Options object that specifies the cache behavior. Properties:
       *
       *   - `{number=}` `capacity` — turns the cache into LRU cache.
       *
       * @returns {object} Newly created cache object with the following set of methods:
       *
       * - `{object}` `info()` — Returns id, size, and options of cache.
       * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
       *   it.
       * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
       * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
       * - `{void}` `removeAll()` — Removes all cached values.
       * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
       *
       * @example
         <example module="cacheExampleApp">
           <file name="index.html">
             <div ng-controller="CacheController">
               <input ng-model="newCacheKey" placeholder="Key">
               <input ng-model="newCacheValue" placeholder="Value">
               <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
      
               <p ng-if="keys.length">Cached Values</p>
               <div ng-repeat="key in keys">
                 <span ng-bind="key"></span>
                 <span>: </span>
                 <b ng-bind="cache.get(key)"></b>
               </div>
      
               <p>Cache Info</p>
               <div ng-repeat="(key, value) in cache.info()">
                 <span ng-bind="key"></span>
                 <span>: </span>
                 <b ng-bind="value"></b>
               </div>
             </div>
           </file>
           <file name="script.js">
             angular.module('cacheExampleApp', []).
               controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
                 $scope.keys = [];
                 $scope.cache = $cacheFactory('cacheId');
                 $scope.put = function(key, value) {
                   if (angular.isUndefined($scope.cache.get(key))) {
                     $scope.keys.push(key);
                   }
                   $scope.cache.put(key, angular.isUndefined(value) ? null : value);
                 };
               }]);
           </file>
           <file name="style.css">
             p {
               margin: 10px 0 3px;
             }
           </file>
         </example>
       */
      function $CacheFactoryProvider() {

        this.$get = function () {
          var caches = {};

          function cacheFactory(cacheId, options) {
            if (cacheId in caches) {
              throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
            }

            var size = 0,
                stats = extend({}, options, { id: cacheId }),
                data = createMap(),
                capacity = options && options.capacity || Number.MAX_VALUE,
                lruHash = createMap(),
                freshEnd = null,
                staleEnd = null;

            /**
             * @ngdoc type
             * @name $cacheFactory.Cache
             *
             * @description
             * A cache object used to store and retrieve data, primarily used by
             * {@link $http $http} and the {@link ng.directive:script script} directive to cache
             * templates and other data.
             *
             * ```js
             *  angular.module('superCache')
             *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
             *      return $cacheFactory('super-cache');
             *    }]);
             * ```
             *
             * Example test:
             *
             * ```js
             *  it('should behave like a cache', inject(function(superCache) {
             *    superCache.put('key', 'value');
             *    superCache.put('another key', 'another value');
             *
             *    expect(superCache.info()).toEqual({
             *      id: 'super-cache',
             *      size: 2
             *    });
             *
             *    superCache.remove('another key');
             *    expect(superCache.get('another key')).toBeUndefined();
             *
             *    superCache.removeAll();
             *    expect(superCache.info()).toEqual({
             *      id: 'super-cache',
             *      size: 0
             *    });
             *  }));
             * ```
             */
            return caches[cacheId] = {

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#put
               * @kind function
               *
               * @description
               * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
               * retrieved later, and incrementing the size of the cache if the key was not already
               * present in the cache. If behaving like an LRU cache, it will also remove stale
               * entries from the set.
               *
               * It will not insert undefined values into the cache.
               *
               * @param {string} key the key under which the cached data is stored.
               * @param {*} value the value to store alongside the key. If it is undefined, the key
               *    will not be stored.
               * @returns {*} the value stored.
               */
              put: function (key, value) {
                if (isUndefined(value)) return;
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key] || (lruHash[key] = { key: key });

                  refresh(lruEntry);
                }

                if (!(key in data)) size++;
                data[key] = value;

                if (size > capacity) {
                  this.remove(staleEnd.key);
                }

                return value;
              },

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#get
               * @kind function
               *
               * @description
               * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
               *
               * @param {string} key the key of the data to be retrieved
               * @returns {*} the value stored.
               */
              get: function (key) {
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key];

                  if (!lruEntry) return;

                  refresh(lruEntry);
                }

                return data[key];
              },

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#remove
               * @kind function
               *
               * @description
               * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
               *
               * @param {string} key the key of the entry to be removed
               */
              remove: function (key) {
                if (capacity < Number.MAX_VALUE) {
                  var lruEntry = lruHash[key];

                  if (!lruEntry) return;

                  if (lruEntry == freshEnd) freshEnd = lruEntry.p;
                  if (lruEntry == staleEnd) staleEnd = lruEntry.n;
                  link(lruEntry.n, lruEntry.p);

                  delete lruHash[key];
                }

                if (!(key in data)) return;

                delete data[key];
                size--;
              },

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#removeAll
               * @kind function
               *
               * @description
               * Clears the cache object of any entries.
               */
              removeAll: function () {
                data = createMap();
                size = 0;
                lruHash = createMap();
                freshEnd = staleEnd = null;
              },

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#destroy
               * @kind function
               *
               * @description
               * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
               * removing it from the {@link $cacheFactory $cacheFactory} set.
               */
              destroy: function () {
                data = null;
                stats = null;
                lruHash = null;
                delete caches[cacheId];
              },

              /**
               * @ngdoc method
               * @name $cacheFactory.Cache#info
               * @kind function
               *
               * @description
               * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
               *
               * @returns {object} an object with the following properties:
               *   <ul>
               *     <li>**id**: the id of the cache instance</li>
               *     <li>**size**: the number of entries kept in the cache instance</li>
               *     <li>**...**: any additional properties from the options object when creating the
               *       cache.</li>
               *   </ul>
               */
              info: function () {
                return extend({}, stats, { size: size });
              }
            };

            /**
             * makes the `entry` the freshEnd of the LRU linked list
             */
            function refresh(entry) {
              if (entry != freshEnd) {
                if (!staleEnd) {
                  staleEnd = entry;
                } else if (staleEnd == entry) {
                  staleEnd = entry.n;
                }

                link(entry.n, entry.p);
                link(entry, freshEnd);
                freshEnd = entry;
                freshEnd.n = null;
              }
            }

            /**
             * bidirectionally links two entries of the LRU linked list
             */
            function link(nextEntry, prevEntry) {
              if (nextEntry != prevEntry) {
                if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
                if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
              }
            }
          }

          /**
           * @ngdoc method
           * @name $cacheFactory#info
           *
           * @description
           * Get information about all the caches that have been created
           *
           * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
           */
          cacheFactory.info = function () {
            var info = {};
            forEach(caches, function (cache, cacheId) {
              info[cacheId] = cache.info();
            });
            return info;
          };

          /**
           * @ngdoc method
           * @name $cacheFactory#get
           *
           * @description
           * Get access to a cache object by the `cacheId` used when it was created.
           *
           * @param {string} cacheId Name or id of a cache to access.
           * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
           */
          cacheFactory.get = function (cacheId) {
            return caches[cacheId];
          };

          return cacheFactory;
        };
      }

      /**
       * @ngdoc service
       * @name $templateCache
       *
       * @description
       * The first time a template is used, it is loaded in the template cache for quick retrieval. You
       * can load templates directly into the cache in a `script` tag, or by consuming the
       * `$templateCache` service directly.
       *
       * Adding via the `script` tag:
       *
       * ```html
       *   <script type="text/ng-template" id="templateId.html">
       *     <p>This is the content of the template</p>
       *   </script>
       * ```
       *
       * **Note:** the `script` tag containing the template does not need to be included in the `head` of
       * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
       * element with ng-app attribute), otherwise the template will be ignored.
       *
       * Adding via the `$templateCache` service:
       *
       * ```js
       * var myApp = angular.module('myApp', []);
       * myApp.run(function($templateCache) {
       *   $templateCache.put('templateId.html', 'This is the content of the template');
       * });
       * ```
       *
       * To retrieve the template later, simply use it in your HTML:
       * ```html
       * <div ng-include=" 'templateId.html' "></div>
       * ```
       *
       * or get it via Javascript:
       * ```js
       * $templateCache.get('templateId.html')
       * ```
       *
       * See {@link ng.$cacheFactory $cacheFactory}.
       *
       */
      function $TemplateCacheProvider() {
        this.$get = ['$cacheFactory', function ($cacheFactory) {
          return $cacheFactory('templates');
        }];
      }

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *     Any commits to this file should be reviewed with security in mind.  *
       *   Changes to this file can potentially create security vulnerabilities. *
       *          An approval from 2 Core members with history of modifying      *
       *                         this file is required.                          *
       *                                                                         *
       *  Does the change somehow allow for arbitrary javascript to be executed? *
       *    Or allows for someone to change the prototype of built-in objects?   *
       *     Or gives undesired access to variables likes document or window?    *
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
       *
       * DOM-related variables:
       *
       * - "node" - DOM Node
       * - "element" - DOM Element or Node
       * - "$node" or "$element" - jqLite-wrapped node or element
       *
       *
       * Compiler related stuff:
       *
       * - "linkFn" - linking fn of a single directive
       * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
       * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
       * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
       */

      /**
       * @ngdoc service
       * @name $compile
       * @kind function
       *
       * @description
       * Compiles an HTML string or DOM into a template and produces a template function, which
       * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
       *
       * The compilation is a process of walking the DOM tree and matching DOM elements to
       * {@link ng.$compileProvider#directive directives}.
       *
       * <div class="alert alert-warning">
       * **Note:** This document is an in-depth reference of all directive options.
       * For a gentle introduction to directives with examples of common use cases,
       * see the {@link guide/directive directive guide}.
       * </div>
       *
       * ## Comprehensive Directive API
       *
       * There are many different options for a directive.
       *
       * The difference resides in the return value of the factory function.
       * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
       * that defines the directive properties, or just the `postLink` function (all other properties will have
       * the default values).
       *
       * <div class="alert alert-success">
       * **Best Practice:** It's recommended to use the "directive definition object" form.
       * </div>
       *
       * Here's an example directive declared with a Directive Definition Object:
       *
       * ```js
       *   var myModule = angular.module(...);
       *
       *   myModule.directive('directiveName', function factory(injectables) {
       *     var directiveDefinitionObject = {
       *       priority: 0,
       *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
       *       // or
       *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
       *       transclude: false,
       *       restrict: 'A',
       *       templateNamespace: 'html',
       *       scope: false,
       *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
       *       controllerAs: 'stringIdentifier',
       *       bindToController: false,
       *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
       *       compile: function compile(tElement, tAttrs, transclude) {
       *         return {
       *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
       *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
       *         }
       *         // or
       *         // return function postLink( ... ) { ... }
       *       },
       *       // or
       *       // link: {
       *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
       *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
       *       // }
       *       // or
       *       // link: function postLink( ... ) { ... }
       *     };
       *     return directiveDefinitionObject;
       *   });
       * ```
       *
       * <div class="alert alert-warning">
       * **Note:** Any unspecified options will use the default value. You can see the default values below.
       * </div>
       *
       * Therefore the above can be simplified as:
       *
       * ```js
       *   var myModule = angular.module(...);
       *
       *   myModule.directive('directiveName', function factory(injectables) {
       *     var directiveDefinitionObject = {
       *       link: function postLink(scope, iElement, iAttrs) { ... }
       *     };
       *     return directiveDefinitionObject;
       *     // or
       *     // return function postLink(scope, iElement, iAttrs) { ... }
       *   });
       * ```
       *
       * ### Life-cycle hooks
       * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
       * directive:
       * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
       *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
       *   this element). This is a good place to put initialization code for your controller.
       * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
       *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
       *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
       *   component such as cloning the bound value to prevent accidental mutation of the outer value.
       * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
       *   changes. Any actions that you wish to take in response to the changes that you detect must be
       *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
       *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
       *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
       *   if detecting changes, you must store the previous value(s) for comparison to the current values.
       * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
       *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
       *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
       *   components will have their `$onDestroy()` hook called before child components.
       * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
       *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
       *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
       *   they are waiting for their template to load asynchronously and their own compilation and linking has been
       *   suspended until that occurs.
       *
       * #### Comparison with Angular 2 life-cycle hooks
       * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
       * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
       *
       * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
       * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
       *   In Angular 2 you can only define hooks on the prototype of the Component class.
       * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
       *   `ngDoCheck` in Angular 2
       * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
       *   propagated throughout the application.
       *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
       *   error or do nothing depending upon the state of `enableProdMode()`.
       *
       * #### Life-cycle hook examples
       *
       * This example shows how you can check for mutations to a Date object even though the identity of the object
       * has not changed.
       *
       * <example name="doCheckDateExample" module="do-check-module">
       *   <file name="app.js">
       *     angular.module('do-check-module', [])
       *       .component('app', {
       *         template:
       *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
       *           'Date: {{ $ctrl.date }}' +
       *           '<test date="$ctrl.date"></test>',
       *         controller: function() {
       *           this.date = new Date();
       *           this.month = this.date.getMonth();
       *           this.updateDate = function() {
       *             this.date.setMonth(this.month);
       *           };
       *         }
       *       })
       *       .component('test', {
       *         bindings: { date: '<' },
       *         template:
       *           '<pre>{{ $ctrl.log | json }}</pre>',
       *         controller: function() {
       *           var previousValue;
       *           this.log = [];
       *           this.$doCheck = function() {
       *             var currentValue = this.date && this.date.valueOf();
       *             if (previousValue !== currentValue) {
       *               this.log.push('doCheck: date mutated: ' + this.date);
       *               previousValue = currentValue;
       *             }
       *           };
       *         }
       *       });
       *   </file>
       *   <file name="index.html">
       *     <app></app>
       *   </file>
       * </example>
       *
       * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
       * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
       * arrays or objects can have a negative impact on your application performance)
       *
       * <example name="doCheckArrayExample" module="do-check-module">
       *   <file name="index.html">
       *     <div ng-init="items = []">
       *       <button ng-click="items.push(items.length)">Add Item</button>
       *       <button ng-click="items = []">Reset Items</button>
       *       <pre>{{ items }}</pre>
       *       <test items="items"></test>
       *     </div>
       *   </file>
       *   <file name="app.js">
       *      angular.module('do-check-module', [])
       *        .component('test', {
       *          bindings: { items: '<' },
       *          template:
       *            '<pre>{{ $ctrl.log | json }}</pre>',
       *          controller: function() {
       *            this.log = [];
       *
       *            this.$doCheck = function() {
       *              if (this.items_ref !== this.items) {
       *                this.log.push('doCheck: items changed');
       *                this.items_ref = this.items;
       *              }
       *              if (!angular.equals(this.items_clone, this.items)) {
       *                this.log.push('doCheck: items mutated');
       *                this.items_clone = angular.copy(this.items);
       *              }
       *            };
       *          }
       *        });
       *   </file>
       * </example>
       *
       *
       * ### Directive Definition Object
       *
       * The directive definition object provides instructions to the {@link ng.$compile
       * compiler}. The attributes are:
       *
       * #### `multiElement`
       * When this property is set to true, the HTML compiler will collect DOM nodes between
       * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
       * together as the directive elements. It is recommended that this feature be used on directives
       * which are not strictly behavioral (such as {@link ngClick}), and which
       * do not manipulate or replace child nodes (such as {@link ngInclude}).
       *
       * #### `priority`
       * When there are multiple directives defined on a single DOM element, sometimes it
       * is necessary to specify the order in which the directives are applied. The `priority` is used
       * to sort the directives before their `compile` functions get called. Priority is defined as a
       * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
       * are also run in priority order, but post-link functions are run in reverse order. The order
       * of directives with the same priority is undefined. The default priority is `0`.
       *
       * #### `terminal`
       * If set to true then the current `priority` will be the last set of directives
       * which will execute (any directives at the current priority will still execute
       * as the order of execution on same `priority` is undefined). Note that expressions
       * and other directives used in the directive's template will also be excluded from execution.
       *
       * #### `scope`
       * The scope property can be `true`, an object or a falsy value:
       *
       * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
       *
       * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
       * the directive's element. If multiple directives on the same element request a new scope,
       * only one new scope is created. The new scope rule does not apply for the root of the template
       * since the root of the template always gets a new scope.
       *
       * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
       * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
       * scope. This is useful when creating reusable components, which should not accidentally read or modify
       * data in the parent scope.
       *
       * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
       * directive's element. These local properties are useful for aliasing values for templates. The keys in
       * the object hash map to the name of the property on the isolate scope; the values define how the property
       * is bound to the parent scope, via matching attributes on the directive's element:
       *
       * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
       *   always a string since DOM attributes are strings. If no `attr` name is specified then the
       *   attribute name is assumed to be the same as the local name. Given `<my-component
       *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
       *   the directive's scope property `localName` will reflect the interpolated value of `hello
       *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
       *   scope. The `name` is read from the parent scope (not the directive's scope).
       *
       * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
       *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
       *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
       *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
       *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
       *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
       *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
       *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
       *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
       *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
       *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
       *   method is used for tracking changes, and the equality check is based on object identity.
       *   However, if an object literal or an array literal is passed as the binding expression, the
       *   equality check is done by value (using the {@link angular.equals} function). It's also possible
       *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
       *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
       *
        * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
       *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
       *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
       *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
       *
       *   For example, given `<my-component my-attr="parentModel">` and directive definition of
       *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
       *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
       *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
       *   two caveats:
       *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
       *     sets the same value. That means if your bound value is an object, changes to its properties
       *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
       *     2. one-way binding watches changes to the **identity** of the parent value. That means the
       *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
       *     to the value has changed. In most cases, this should not be of concern, but can be important
       *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
       *     If you now change a property of the object in your parent scope, the change will not be
       *     propagated to the isolated scope, because the identity of the object on the parent scope
       *     has not changed. Instead you must assign a new object.
       *
       *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
       *   back to the parent. However, it does not make this completely impossible.
       *
       * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
       *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
       *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
       *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
       *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
       *   via an expression to the parent scope. This can be done by passing a map of local variable names
       *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
       *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
       *
       * In general it's possible to apply more than one directive to one element, but there might be limitations
       * depending on the type of scope required by the directives. The following points will help explain these limitations.
       * For simplicity only two directives are taken into account, but it is also applicable for several directives:
       *
       * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
       * * **child scope** + **no scope** =>  Both directives will share one single child scope
       * * **child scope** + **child scope** =>  Both directives will share one single child scope
       * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
       * its parent's scope
       * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
       * be applied to the same element.
       * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
       * cannot be applied to the same element.
       *
       *
       * #### `bindToController`
       * This property is used to bind scope properties directly to the controller. It can be either
       * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
       * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
       * definition: `controller: 'myCtrl as myAlias'`.
       *
       * When an isolate scope is used for a directive (see above), `bindToController: true` will
       * allow a component to have its properties bound to the controller, rather than to scope.
       *
       * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
       * properties. You can access these bindings once they have been initialized by providing a controller method called
       * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
       * initialized.
       *
       * <div class="alert alert-warning">
       * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
       * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
       * code that relies upon bindings inside a `$onInit` method on the controller, instead.
       * </div>
       *
       * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
       * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
       * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
       * scope (useful for component directives).
       *
       * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
       *
       *
       * #### `controller`
       * Controller constructor function. The controller is instantiated before the
       * pre-linking phase and can be accessed by other directives (see
       * `require` attribute). This allows the directives to communicate with each other and augment
       * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
       *
       * * `$scope` - Current scope associated with the element
       * * `$element` - Current element
       * * `$attrs` - Current attributes object for the element
       * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
       *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
       *    * `scope`: (optional) override the scope.
       *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
       *    * `futureParentElement` (optional):
       *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
       *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
       *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
       *          and when the `cloneLinkinFn` is passed,
       *          as those elements need to created and cloned in a special way when they are defined outside their
       *          usual containers (e.g. like `<svg>`).
       *        * See also the `directive.templateNamespace` property.
       *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
       *      then the default translusion is provided.
       *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
       *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
       *
       * #### `require`
       * Require another directive and inject its controller as the fourth argument to the linking function. The
       * `require` property can be a string, an array or an object:
       * * a **string** containing the name of the directive to pass to the linking function
       * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
       * linking function will be an array of controllers in the same order as the names in the `require` property
       * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
       * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
       * controllers.
       *
       * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
       * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
       * have been constructed but before `$onInit` is called.
       * If the name of the required controller is the same as the local name (the key), the name can be
       * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
       * See the {@link $compileProvider#component} helper for an example of how this can be used.
       * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
       * raised (unless no link function is specified and the required controllers are not being bound to the directive
       * controller, in which case error checking is skipped). The name can be prefixed with:
       *
       * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
       * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
       * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
       * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
       * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
       *   `null` to the `link` fn if not found.
       * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
       *   `null` to the `link` fn if not found.
       *
       *
       * #### `controllerAs`
       * Identifier name for a reference to the controller in the directive's scope.
       * This allows the controller to be referenced from the directive template. This is especially
       * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
       * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
       * `controllerAs` reference might overwrite a property that already exists on the parent scope.
       *
       *
       * #### `restrict`
       * String of subset of `EACM` which restricts the directive to a specific directive
       * declaration style. If omitted, the defaults (elements and attributes) are used.
       *
       * * `E` - Element name (default): `<my-directive></my-directive>`
       * * `A` - Attribute (default): `<div my-directive="exp"></div>`
       * * `C` - Class: `<div class="my-directive: exp;"></div>`
       * * `M` - Comment: `<!-- directive: my-directive exp -->`
       *
       *
       * #### `templateNamespace`
       * String representing the document type used by the markup in the template.
       * AngularJS needs this information as those elements need to be created and cloned
       * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
       *
       * * `html` - All root nodes in the template are HTML. Root nodes may also be
       *   top-level elements such as `<svg>` or `<math>`.
       * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
       * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
       *
       * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
       *
       * #### `template`
       * HTML markup that may:
       * * Replace the contents of the directive's element (default).
       * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
       * * Wrap the contents of the directive's element (if `transclude` is true).
       *
       * Value may be:
       *
       * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
       * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
       *   function api below) and returns a string value.
       *
       *
       * #### `templateUrl`
       * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
       *
       * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
       * for later when the template has been resolved.  In the meantime it will continue to compile and link
       * sibling and parent elements as though this element had not contained any directives.
       *
       * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
       * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
       * case when only one deeply nested directive has `templateUrl`.
       *
       * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
       *
       * You can specify `templateUrl` as a string representing the URL or as a function which takes two
       * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
       * a string value representing the url.  In either case, the template URL is passed through {@link
       * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
       *
       *
       * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
       * specify what the template should replace. Defaults to `false`.
       *
       * * `true` - the template will replace the directive's element.
       * * `false` - the template will replace the contents of the directive's element.
       *
       * The replacement process migrates all of the attributes / classes from the old element to the new
       * one. See the {@link guide/directive#template-expanding-directive
       * Directives Guide} for an example.
       *
       * There are very few scenarios where element replacement is required for the application function,
       * the main one being reusable custom components that are used within SVG contexts
       * (because SVG doesn't work with custom elements in the DOM tree).
       *
       * #### `transclude`
       * Extract the contents of the element where the directive appears and make it available to the directive.
       * The contents are compiled and provided to the directive as a **transclusion function**. See the
       * {@link $compile#transclusion Transclusion} section below.
       *
       *
       * #### `compile`
       *
       * ```js
       *   function compile(tElement, tAttrs, transclude) { ... }
       * ```
       *
       * The compile function deals with transforming the template DOM. Since most directives do not do
       * template transformation, it is not used often. The compile function takes the following arguments:
       *
       *   * `tElement` - template element - The element where the directive has been declared. It is
       *     safe to do template transformation on the element and child elements only.
       *
       *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
       *     between all directive compile functions.
       *
       *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
       *
       * <div class="alert alert-warning">
       * **Note:** The template instance and the link instance may be different objects if the template has
       * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
       * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
       * should be done in a linking function rather than in a compile function.
       * </div>
      
       * <div class="alert alert-warning">
       * **Note:** The compile function cannot handle directives that recursively use themselves in their
       * own templates or compile functions. Compiling these directives results in an infinite loop and
       * stack overflow errors.
       *
       * This can be avoided by manually using $compile in the postLink function to imperatively compile
       * a directive's template instead of relying on automatic template compilation via `template` or
       * `templateUrl` declaration or manual compilation inside the compile function.
       * </div>
       *
       * <div class="alert alert-danger">
       * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
       *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
       *   to the link function instead.
       * </div>
      
       * A compile function can have a return value which can be either a function or an object.
       *
       * * returning a (post-link) function - is equivalent to registering the linking function via the
       *   `link` property of the config object when the compile function is empty.
       *
       * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
       *   control when a linking function should be called during the linking phase. See info about
       *   pre-linking and post-linking functions below.
       *
       *
       * #### `link`
       * This property is used only if the `compile` property is not defined.
       *
       * ```js
       *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
       * ```
       *
       * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
       * executed after the template has been cloned. This is where most of the directive logic will be
       * put.
       *
       *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
       *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
       *
       *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
       *     manipulate the children of the element only in `postLink` function since the children have
       *     already been linked.
       *
       *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
       *     between all directive linking functions.
       *
       *   * `controller` - the directive's required controller instance(s) - Instances are shared
       *     among all directives, which allows the directives to use the controllers as a communication
       *     channel. The exact value depends on the directive's `require` property:
       *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
       *       * `string`: the controller instance
       *       * `array`: array of controller instances
       *
       *     If a required controller cannot be found, and it is optional, the instance is `null`,
       *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
       *
       *     Note that you can also require the directive's own controller - it will be made available like
       *     any other controller.
       *
       *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
       *     This is the same as the `$transclude` parameter of directive controllers,
       *     see {@link ng.$compile#-controller- the controller section for details}.
       *     `function([scope], cloneLinkingFn, futureParentElement)`.
       *
       * #### Pre-linking function
       *
       * Executed before the child elements are linked. Not safe to do DOM transformation since the
       * compiler linking function will fail to locate the correct elements for linking.
       *
       * #### Post-linking function
       *
       * Executed after the child elements are linked.
       *
       * Note that child elements that contain `templateUrl` directives will not have been compiled
       * and linked since they are waiting for their template to load asynchronously and their own
       * compilation and linking has been suspended until that occurs.
       *
       * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
       * for their async templates to be resolved.
       *
       *
       * ### Transclusion
       *
       * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
       * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
       * scope from where they were taken.
       *
       * Transclusion is used (often with {@link ngTransclude}) to insert the
       * original contents of a directive's element into a specified place in the template of the directive.
       * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
       * content has access to the properties on the scope from which it was taken, even if the directive
       * has isolated scope.
       * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
       *
       * This makes it possible for the widget to have private state for its template, while the transcluded
       * content has access to its originating scope.
       *
       * <div class="alert alert-warning">
       * **Note:** When testing an element transclude directive you must not place the directive at the root of the
       * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
       * Testing Transclusion Directives}.
       * </div>
       *
       * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
       * directive's element, the entire element or multiple parts of the element contents:
       *
       * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
       * * `'element'` - transclude the whole of the directive's element including any directives on this
       *   element that defined at a lower priority than this directive. When used, the `template`
       *   property is ignored.
       * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
       *
       * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
       *
       * This object is a map where the keys are the name of the slot to fill and the value is an element selector
       * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
       * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * If the element selector is prefixed with a `?` then that slot is optional.
       *
       * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
       * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
       *
       * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
       * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
       * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
       * injectable into the directive's controller.
       *
       *
       * #### Transclusion Functions
       *
       * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
       * function** to the directive's `link` function and `controller`. This transclusion function is a special
       * **linking function** that will return the compiled contents linked to a new transclusion scope.
       *
       * <div class="alert alert-info">
       * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
       * ngTransclude will deal with it for us.
       * </div>
       *
       * If you want to manually control the insertion and removal of the transcluded content in your directive
       * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
       * object that contains the compiled DOM, which is linked to the correct transclusion scope.
       *
       * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
       * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
       * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
       *
       * <div class="alert alert-info">
       * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
       * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
       * </div>
       *
       * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
       * attach function**:
       *
       * ```js
       * var transcludedContent, transclusionScope;
       *
       * $transclude(function(clone, scope) {
       *   element.append(clone);
       *   transcludedContent = clone;
       *   transclusionScope = scope;
       * });
       * ```
       *
       * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
       * associated transclusion scope:
       *
       * ```js
       * transcludedContent.remove();
       * transclusionScope.$destroy();
       * ```
       *
       * <div class="alert alert-info">
       * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
       * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
       * then you are also responsible for calling `$destroy` on the transclusion scope.
       * </div>
       *
       * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
       * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
       * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
       *
       *
       * #### Transclusion Scopes
       *
       * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
       * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
       * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
       * was taken.
       *
       * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
       * like this:
       *
       * ```html
       * <div ng-app>
       *   <div isolate>
       *     <div transclusion>
       *     </div>
       *   </div>
       * </div>
       * ```
       *
       * The `$parent` scope hierarchy will look like this:
       *
         ```
         - $rootScope
           - isolate
             - transclusion
         ```
       *
       * but the scopes will inherit prototypically from different scopes to their `$parent`.
       *
         ```
         - $rootScope
           - transclusion
         - isolate
         ```
       *
       *
       * ### Attributes
       *
       * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
       * `link()` or `compile()` functions. It has a variety of uses.
       *
       * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
       *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
       *   to the attributes.
       *
       * * *Directive inter-communication:* All directives share the same instance of the attributes
       *   object which allows the directives to use the attributes object as inter directive
       *   communication.
       *
       * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
       *   allowing other directives to read the interpolated value.
       *
       * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
       *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
       *   the only way to easily get the actual value because during the linking phase the interpolation
       *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
       *
       * ```js
       * function linkingFn(scope, elm, attrs, ctrl) {
       *   // get the attribute value
       *   console.log(attrs.ngModel);
       *
       *   // change the attribute
       *   attrs.$set('ngModel', 'new value');
       *
       *   // observe changes to interpolated attribute
       *   attrs.$observe('ngModel', function(value) {
       *     console.log('ngModel has changed value to ' + value);
       *   });
       * }
       * ```
       *
       * ## Example
       *
       * <div class="alert alert-warning">
       * **Note**: Typically directives are registered with `module.directive`. The example below is
       * to illustrate how `$compile` works.
       * </div>
       *
       <example module="compileExample">
         <file name="index.html">
          <script>
            angular.module('compileExample', [], function($compileProvider) {
              // configure new 'compile' directive by passing a directive
              // factory function. The factory function injects the '$compile'
              $compileProvider.directive('compile', function($compile) {
                // directive factory creates a link function
                return function(scope, element, attrs) {
                  scope.$watch(
                    function(scope) {
                       // watch the 'compile' expression for changes
                      return scope.$eval(attrs.compile);
                    },
                    function(value) {
                      // when the 'compile' expression changes
                      // assign it into the current DOM
                      element.html(value);
      
                      // compile the new DOM and link it to the current
                      // scope.
                      // NOTE: we only compile .childNodes so that
                      // we don't get into infinite loop compiling ourselves
                      $compile(element.contents())(scope);
                    }
                  );
                };
              });
            })
            .controller('GreeterController', ['$scope', function($scope) {
              $scope.name = 'Angular';
              $scope.html = 'Hello {{name}}';
            }]);
          </script>
          <div ng-controller="GreeterController">
            <input ng-model="name"> <br/>
            <textarea ng-model="html"></textarea> <br/>
            <div compile="html"></div>
          </div>
         </file>
         <file name="protractor.js" type="protractor">
           it('should auto compile', function() {
             var textarea = $('textarea');
             var output = $('div[compile]');
             // The initial state reads 'Hello Angular'.
             expect(output.getText()).toBe('Hello Angular');
             textarea.clear();
             textarea.sendKeys('{{name}}!');
             expect(output.getText()).toBe('Angular!');
           });
         </file>
       </example>
      
       *
       *
       * @param {string|DOMElement} element Element or HTML string to compile into a template function.
       * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
       *
       * <div class="alert alert-danger">
       * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
       *   e.g. will not use the right outer scope. Please pass the transclude function as a
       *   `parentBoundTranscludeFn` to the link function instead.
       * </div>
       *
       * @param {number} maxPriority only apply directives lower than given priority (Only effects the
       *                 root element(s), not their children)
       * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
       * (a DOM element/tree) to a scope. Where:
       *
       *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
       *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
       *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
       *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
       *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
       *
       *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
       *      * `scope` - is the current scope with which the linking function is working with.
       *
       *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
       *  keys may be used to control linking behavior:
       *
       *      * `parentBoundTranscludeFn` - the transclude function made available to
       *        directives; if given, it will be passed through to the link functions of
       *        directives found in `element` during compilation.
       *      * `transcludeControllers` - an object hash with keys that map controller names
       *        to a hash with the key `instance`, which maps to the controller instance;
       *        if given, it will make the controllers available to directives on the compileNode:
       *        ```
       *        {
       *          parent: {
       *            instance: parentControllerInstance
       *          }
       *        }
       *        ```
       *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
       *        the cloned elements; only needed for transcludes that are allowed to contain non html
       *        elements (e.g. SVG elements). See also the directive.controller property.
       *
       * Calling the linking function returns the element of the template. It is either the original
       * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
       *
       * After linking the view is not updated until after a call to $digest which typically is done by
       * Angular automatically.
       *
       * If you need access to the bound view, there are two ways to do it:
       *
       * - If you are not asking the linking function to clone the template, create the DOM element(s)
       *   before you send them to the compiler and keep this reference around.
       *   ```js
       *     var element = $compile('<p>{{total}}</p>')(scope);
       *   ```
       *
       * - if on the other hand, you need the element to be cloned, the view reference from the original
       *   example would not point to the clone, but rather to the original template that was cloned. In
       *   this case, you can access the clone via the cloneAttachFn:
       *   ```js
       *     var templateElement = angular.element('<p>{{total}}</p>'),
       *         scope = ....;
       *
       *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
       *       //attach the clone to DOM document at the right place
       *     });
       *
       *     //now we have reference to the cloned DOM via `clonedElement`
       *   ```
       *
       *
       * For information on how the compiler works, see the
       * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
       */

      var $compileMinErr = minErr('$compile');

      function UNINITIALIZED_VALUE() {}
      var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();

      /**
       * @ngdoc provider
       * @name $compileProvider
       *
       * @description
       */
      $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
      function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {},
            Suffix = 'Directive',
            COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
            CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
            ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
            REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

        // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
        // The assumption is that future DOM event attribute names will begin with
        // 'on' and be composed of only English letters.
        var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        var bindingCache = createMap();

        function parseIsolateBindings(scope, directiveName, isController) {
          var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;

          var bindings = createMap();

          forEach(scope, function (definition, scopeName) {
            if (definition in bindingCache) {
              bindings[scopeName] = bindingCache[definition];
              return;
            }
            var match = definition.match(LOCAL_REGEXP);

            if (!match) {
              throw $compileMinErr('iscp', "Invalid {3} for directive '{0}'." + " Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition, isController ? "controller bindings definition" : "isolate scope definition");
            }

            bindings[scopeName] = {
              mode: match[1][0],
              collection: match[2] === '*',
              optional: match[3] === '?',
              attrName: match[4] || scopeName
            };
            if (match[4]) {
              bindingCache[definition] = bindings[scopeName];
            }
          });

          return bindings;
        }

        function parseDirectiveBindings(directive, directiveName) {
          var bindings = {
            isolateScope: null,
            bindToController: null
          };
          if (isObject(directive.scope)) {
            if (directive.bindToController === true) {
              bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, true);
              bindings.isolateScope = {};
            } else {
              bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, false);
            }
          }
          if (isObject(directive.bindToController)) {
            bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, true);
          }
          if (isObject(bindings.bindToController)) {
            var controller = directive.controller;
            var controllerAs = directive.controllerAs;
            if (!controller) {
              // There is no controller, there may or may not be a controllerAs property
              throw $compileMinErr('noctrl', "Cannot bind to controller without directive '{0}'s controller.", directiveName);
            } else if (!identifierForController(controller, controllerAs)) {
              // There is a controller, but no identifier or controllerAs property
              throw $compileMinErr('noident', "Cannot bind to controller without identifier for directive '{0}'.", directiveName);
            }
          }
          return bindings;
        }

        function assertValidDirectiveName(name) {
          var letter = name.charAt(0);
          if (!letter || letter !== lowercase(letter)) {
            throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
          }
          if (name !== name.trim()) {
            throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces", name);
          }
        }

        function getDirectiveRequire(directive) {
          var require = directive.require || directive.controller && directive.name;

          if (!isArray(require) && isObject(require)) {
            forEach(require, function (value, key) {
              var match = value.match(REQUIRE_PREFIX_REGEXP);
              var name = value.substring(match[0].length);
              if (!name) require[key] = match[0] + key;
            });
          }

          return require;
        }

        /**
         * @ngdoc method
         * @name $compileProvider#directive
         * @kind function
         *
         * @description
         * Register a new directive with the compiler.
         *
         * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
         *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
         *    names and the values are the factories.
         * @param {Function|Array} directiveFactory An injectable directive factory function. See the
         *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
         * @returns {ng.$compileProvider} Self for chaining.
         */
        this.directive = function registerDirective(name, directiveFactory) {
          assertNotHasOwnProperty(name, 'directive');
          if (isString(name)) {
            assertValidDirectiveName(name);
            assertArg(directiveFactory, 'directiveFactory');
            if (!hasDirectives.hasOwnProperty(name)) {
              hasDirectives[name] = [];
              $provide.factory(name + Suffix, ['$injector', '$exceptionHandler', function ($injector, $exceptionHandler) {
                var directives = [];
                forEach(hasDirectives[name], function (directiveFactory, index) {
                  try {
                    var directive = $injector.invoke(directiveFactory);
                    if (isFunction(directive)) {
                      directive = { compile: valueFn(directive) };
                    } else if (!directive.compile && directive.link) {
                      directive.compile = valueFn(directive.link);
                    }
                    directive.priority = directive.priority || 0;
                    directive.index = index;
                    directive.name = directive.name || name;
                    directive.require = getDirectiveRequire(directive);
                    directive.restrict = directive.restrict || 'EA';
                    directive.$$moduleName = directiveFactory.$$moduleName;
                    directives.push(directive);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                });
                return directives;
              }]);
            }
            hasDirectives[name].push(directiveFactory);
          } else {
            forEach(name, reverseParams(registerDirective));
          }
          return this;
        };

        /**
         * @ngdoc method
         * @name $compileProvider#component
         * @module ng
         * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
         * @param {Object} options Component definition object (a simplified
         *    {@link ng.$compile#directive-definition-object directive definition object}),
         *    with the following properties (all optional):
         *
         *    - `controller` – `{(string|function()=}` – controller constructor function that should be
         *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
         *      registered controller} if passed as a string. An empty `noop` function by default.
         *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
         *      If present, the controller will be published to scope under the `controllerAs` name.
         *      If not present, this will default to be `$ctrl`.
         *    - `template` – `{string=|function()=}` – html template as a string or a function that
         *      returns an html template as a string which should be used as the contents of this component.
         *      Empty string by default.
         *
         *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
         *      the following locals:
         *
         *      - `$element` - Current element
         *      - `$attrs` - Current attributes object for the element
         *
         *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
         *      template that should be used  as the contents of this component.
         *
         *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
         *      the following locals:
         *
         *      - `$element` - Current element
         *      - `$attrs` - Current attributes object for the element
         *
         *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
         *      Component properties are always bound to the component controller and not to the scope.
         *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
         *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
         *      Disabled by default.
         *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
         *      this component's controller. The object keys specify the property names under which the required
         *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
         *    - `$...` – additional properties to attach to the directive factory function and the controller
         *      constructor function. (This is used by the component router to annotate)
         *
         * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
         * @description
         * Register a **component definition** with the compiler. This is a shorthand for registering a special
         * type of directive, which represents a self-contained UI component in your application. Such components
         * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
         *
         * Component definitions are very simple and do not require as much configuration as defining general
         * directives. Component definitions usually consist only of a template and a controller backing it.
         *
         * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
         * `bindToController`. They always have **isolate scope** and are restricted to elements.
         *
         * Here are a few examples of how you would usually define components:
         *
         * ```js
         *   var myMod = angular.module(...);
         *   myMod.component('myComp', {
         *     template: '<div>My name is {{$ctrl.name}}</div>',
         *     controller: function() {
         *       this.name = 'shahar';
         *     }
         *   });
         *
         *   myMod.component('myComp', {
         *     template: '<div>My name is {{$ctrl.name}}</div>',
         *     bindings: {name: '@'}
         *   });
         *
         *   myMod.component('myComp', {
         *     templateUrl: 'views/my-comp.html',
         *     controller: 'MyCtrl',
         *     controllerAs: 'ctrl',
         *     bindings: {name: '@'}
         *   });
         *
         * ```
         * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
         *
         * <br />
         * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
         */
        this.component = function registerComponent(name, options) {
          var controller = options.controller || function () {};

          function factory($injector) {
            function makeInjectable(fn) {
              if (isFunction(fn) || isArray(fn)) {
                return function (tElement, tAttrs) {
                  return $injector.invoke(fn, this, { $element: tElement, $attrs: tAttrs });
                };
              } else {
                return fn;
              }
            }

            var template = !options.template && !options.templateUrl ? '' : options.template;
            var ddo = {
              controller: controller,
              controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
              template: makeInjectable(template),
              templateUrl: makeInjectable(options.templateUrl),
              transclude: options.transclude,
              scope: {},
              bindToController: options.bindings || {},
              restrict: 'E',
              require: options.require
            };

            // Copy annotations (starting with $) over to the DDO
            forEach(options, function (val, key) {
              if (key.charAt(0) === '$') ddo[key] = val;
            });

            return ddo;
          }

          // TODO(pete) remove the following `forEach` before we release 1.6.0
          // The component-router@0.2.0 looks for the annotations on the controller constructor
          // Nothing in Angular looks for annotations on the factory function but we can't remove
          // it from 1.5.x yet.

          // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
          // These could be used by libraries such as the new component router
          forEach(options, function (val, key) {
            if (key.charAt(0) === '$') {
              factory[key] = val;
              // Don't try to copy over annotations to named controller
              if (isFunction(controller)) controller[key] = val;
            }
          });

          factory.$inject = ['$injector'];

          return this.directive(name, factory);
        };

        /**
         * @ngdoc method
         * @name $compileProvider#aHrefSanitizationWhitelist
         * @kind function
         *
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during a[href] sanitization.
         *
         * The sanitization is a security measure aimed at preventing XSS attacks via html links.
         *
         * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.aHrefSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
            return this;
          } else {
            return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
          }
        };

        /**
         * @ngdoc method
         * @name $compileProvider#imgSrcSanitizationWhitelist
         * @kind function
         *
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during img[src] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.imgSrcSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
            return this;
          } else {
            return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
          }
        };

        /**
         * @ngdoc method
         * @name  $compileProvider#debugInfoEnabled
         *
         * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
         * current debugInfoEnabled state
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         *
         * @kind function
         *
         * @description
         * Call this method to enable/disable various debug runtime information in the compiler such as adding
         * binding information and a reference to the current scope on to DOM elements.
         * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
         * * `ng-binding` CSS class
         * * `$binding` data property containing an array of the binding expressions
         *
         * You may want to disable this in production for a significant performance boost. See
         * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
         *
         * The default value is true.
         */
        var debugInfoEnabled = true;
        this.debugInfoEnabled = function (enabled) {
          if (isDefined(enabled)) {
            debugInfoEnabled = enabled;
            return this;
          }
          return debugInfoEnabled;
        };

        var TTL = 10;
        /**
         * @ngdoc method
         * @name $compileProvider#onChangesTtl
         * @description
         *
         * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
         * assuming that the model is unstable.
         *
         * The current default is 10 iterations.
         *
         * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
         * in several iterations of calls to these hooks. However if an application needs more than the default 10
         * iterations to stabilize then you should investigate what is causing the model to continuously change during
         * the `$onChanges` hook execution.
         *
         * Increasing the TTL could have performance implications, so you should not change it without proper justification.
         *
         * @param {number} limit The number of `$onChanges` hook iterations.
         * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
         */
        this.onChangesTtl = function (value) {
          if (arguments.length) {
            TTL = value;
            return this;
          }
          return TTL;
        };

        this.$get = ['$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse', '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri', function ($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $sce, $animate, $$sanitizeUri) {

          var SIMPLE_ATTR_NAME = /^\w/;
          var specialAttrHolder = window.document.createElement('div');

          var onChangesTtl = TTL;
          // The onChanges hooks should all be run together in a single digest
          // When changes occur, the call to trigger their hooks will be added to this queue
          var onChangesQueue;

          // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
          function flushOnChangesQueue() {
            try {
              if (! --onChangesTtl) {
                // We have hit the TTL limit so reset everything
                onChangesQueue = undefined;
                throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
              }
              // We must run this hook in an apply since the $$postDigest runs outside apply
              $rootScope.$apply(function () {
                var errors = [];
                for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
                  try {
                    onChangesQueue[i]();
                  } catch (e) {
                    errors.push(e);
                  }
                }
                // Reset the queue to trigger a new schedule next time there is a change
                onChangesQueue = undefined;
                if (errors.length) {
                  throw errors;
                }
              });
            } finally {
              onChangesTtl++;
            }
          }

          function Attributes(element, attributesToCopy) {
            if (attributesToCopy) {
              var keys = Object.keys(attributesToCopy);
              var i, l, key;

              for (i = 0, l = keys.length; i < l; i++) {
                key = keys[i];
                this[key] = attributesToCopy[key];
              }
            } else {
              this.$attr = {};
            }

            this.$$element = element;
          }

          Attributes.prototype = {
            /**
             * @ngdoc method
             * @name $compile.directive.Attributes#$normalize
             * @kind function
             *
             * @description
             * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
             * `data-`) to its normalized, camelCase form.
             *
             * Also there is special case for Moz prefix starting with upper case letter.
             *
             * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
             *
             * @param {string} name Name to normalize
             */
            $normalize: directiveNormalize,

            /**
             * @ngdoc method
             * @name $compile.directive.Attributes#$addClass
             * @kind function
             *
             * @description
             * Adds the CSS class value specified by the classVal parameter to the element. If animations
             * are enabled then an animation will be triggered for the class addition.
             *
             * @param {string} classVal The className value that will be added to the element
             */
            $addClass: function (classVal) {
              if (classVal && classVal.length > 0) {
                $animate.addClass(this.$$element, classVal);
              }
            },

            /**
             * @ngdoc method
             * @name $compile.directive.Attributes#$removeClass
             * @kind function
             *
             * @description
             * Removes the CSS class value specified by the classVal parameter from the element. If
             * animations are enabled then an animation will be triggered for the class removal.
             *
             * @param {string} classVal The className value that will be removed from the element
             */
            $removeClass: function (classVal) {
              if (classVal && classVal.length > 0) {
                $animate.removeClass(this.$$element, classVal);
              }
            },

            /**
             * @ngdoc method
             * @name $compile.directive.Attributes#$updateClass
             * @kind function
             *
             * @description
             * Adds and removes the appropriate CSS class values to the element based on the difference
             * between the new and old CSS class values (specified as newClasses and oldClasses).
             *
             * @param {string} newClasses The current CSS className value
             * @param {string} oldClasses The former CSS className value
             */
            $updateClass: function (newClasses, oldClasses) {
              var toAdd = tokenDifference(newClasses, oldClasses);
              if (toAdd && toAdd.length) {
                $animate.addClass(this.$$element, toAdd);
              }

              var toRemove = tokenDifference(oldClasses, newClasses);
              if (toRemove && toRemove.length) {
                $animate.removeClass(this.$$element, toRemove);
              }
            },

            /**
             * Set a normalized attribute on the element in a way such that all directives
             * can share the attribute. This function properly handles boolean attributes.
             * @param {string} key Normalized key. (ie ngAttribute)
             * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
             * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
             *     Defaults to true.
             * @param {string=} attrName Optional none normalized name. Defaults to key.
             */
            $set: function (key, value, writeAttr, attrName) {
              // TODO: decide whether or not to throw an error if "class"
              //is set through this function since it may cause $updateClass to
              //become unstable.

              var node = this.$$element[0],
                  booleanKey = getBooleanAttrName(node, key),
                  aliasedKey = getAliasedAttrName(key),
                  observer = key,
                  nodeName;

              if (booleanKey) {
                this.$$element.prop(key, value);
                attrName = booleanKey;
              } else if (aliasedKey) {
                this[aliasedKey] = value;
                observer = aliasedKey;
              }

              this[key] = value;

              // translate normalized key to actual key
              if (attrName) {
                this.$attr[key] = attrName;
              } else {
                attrName = this.$attr[key];
                if (!attrName) {
                  this.$attr[key] = attrName = snake_case(key, '-');
                }
              }

              nodeName = nodeName_(this.$$element);

              if (nodeName === 'a' && (key === 'href' || key === 'xlinkHref') || nodeName === 'img' && key === 'src') {
                // sanitize a[href] and img[src] values
                this[key] = value = $$sanitizeUri(value, key === 'src');
              } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
                // sanitize img[srcset] values
                var result = "";

                // first check if there are spaces because it's not the same pattern
                var trimmedSrcset = trim(value);
                //                (   999x   ,|   999w   ,|   ,|,   )
                var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
                var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

                // split srcset into tuple of uri and descriptor except for the last item
                var rawUris = trimmedSrcset.split(pattern);

                // for each tuples
                var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
                for (var i = 0; i < nbrUrisWith2parts; i++) {
                  var innerIdx = i * 2;
                  // sanitize the uri
                  result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
                  // add the descriptor
                  result += " " + trim(rawUris[innerIdx + 1]);
                }

                // split the last item into uri and descriptor
                var lastTuple = trim(rawUris[i * 2]).split(/\s/);

                // sanitize the last uri
                result += $$sanitizeUri(trim(lastTuple[0]), true);

                // and add the last descriptor if any
                if (lastTuple.length === 2) {
                  result += " " + trim(lastTuple[1]);
                }
                this[key] = value = result;
              }

              if (writeAttr !== false) {
                if (value === null || isUndefined(value)) {
                  this.$$element.removeAttr(attrName);
                } else {
                  if (SIMPLE_ATTR_NAME.test(attrName)) {
                    this.$$element.attr(attrName, value);
                  } else {
                    setSpecialAttr(this.$$element[0], attrName, value);
                  }
                }
              }

              // fire observers
              var $$observers = this.$$observers;
              $$observers && forEach($$observers[observer], function (fn) {
                try {
                  fn(value);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
            },

            /**
             * @ngdoc method
             * @name $compile.directive.Attributes#$observe
             * @kind function
             *
             * @description
             * Observes an interpolated attribute.
             *
             * The observer function will be invoked once during the next `$digest` following
             * compilation. The observer is then invoked whenever the interpolated value
             * changes.
             *
             * @param {string} key Normalized key. (ie ngAttribute) .
             * @param {function(interpolatedValue)} fn Function that will be called whenever
                      the interpolated value of the attribute changes.
             *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
             *        guide} for more info.
             * @returns {function()} Returns a deregistration function for this observer.
             */
            $observe: function (key, fn) {
              var attrs = this,
                  $$observers = attrs.$$observers || (attrs.$$observers = createMap()),
                  listeners = $$observers[key] || ($$observers[key] = []);

              listeners.push(fn);
              $rootScope.$evalAsync(function () {
                if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
                  // no one registered attribute interpolation function, so lets call it manually
                  fn(attrs[key]);
                }
              });

              return function () {
                arrayRemove(listeners, fn);
              };
            }
          };

          function setSpecialAttr(element, attrName, value) {
            // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
            // so we have to jump through some hoops to get such an attribute
            // https://github.com/angular/angular.js/pull/13318
            specialAttrHolder.innerHTML = "<span " + attrName + ">";
            var attributes = specialAttrHolder.firstChild.attributes;
            var attribute = attributes[0];
            // We have to remove the attribute from its container element before we can add it to the destination element
            attributes.removeNamedItem(attribute.name);
            attribute.value = value;
            element.attributes.setNamedItem(attribute);
          }

          function safeAddClass($element, className) {
            try {
              $element.addClass(className);
            } catch (e) {
              // ignore, since it means that we are trying to set class on
              // SVG element, where class name is read-only.
            }
          }

          var startSymbol = $interpolate.startSymbol(),
              endSymbol = $interpolate.endSymbol(),
              denormalizeTemplate = startSymbol == '{{' && endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          },
              NG_ATTR_BINDING = /^ngAttr[A-Z]/;
          var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

          compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
            var bindings = $element.data('$binding') || [];

            if (isArray(binding)) {
              bindings = bindings.concat(binding);
            } else {
              bindings.push(binding);
            }

            $element.data('$binding', bindings);
          } : noop;

          compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
            safeAddClass($element, 'ng-binding');
          } : noop;

          compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
            var dataName = isolated ? noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope' : '$scope';
            $element.data(dataName, scope);
          } : noop;

          compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
            safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
          } : noop;

          compile.$$createComment = function (directiveName, comment) {
            var content = '';
            if (debugInfoEnabled) {
              content = ' ' + (directiveName || '') + ': ';
              if (comment) content += comment + ' ';
            }
            return window.document.createComment(content);
          };

          return compile;

          //================================

          function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
            if (!($compileNodes instanceof jqLite)) {
              // jquery always rewraps, whereas we need to preserve the original selector so that we can
              // modify it.
              $compileNodes = jqLite($compileNodes);
            }

            var NOT_EMPTY = /\S+/;

            // We can not compile top level text elements since text nodes can be merged and we will
            // not be able to attach scope data to them, so we will wrap them in <span>
            for (var i = 0, len = $compileNodes.length; i < len; i++) {
              var domNode = $compileNodes[i];

              if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
                  jqLiteWrapNode(domNode, $compileNodes[i] = window.document.createElement('span'));
                }
            }

            var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
            compile.$$addScopeClass($compileNodes);
            var namespace = null;
            return function publicLinkFn(scope, cloneConnectFn, options) {
              assertArg(scope, 'scope');

              if (previousCompileContext && previousCompileContext.needsNewScope) {
                // A parent directive did a replace and a directive on this element asked
                // for transclusion, which caused us to lose a layer of element on which
                // we could hold the new transclusion scope, so we will create it manually
                // here.
                scope = scope.$parent.$new();
              }

              options = options || {};
              var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
                  transcludeControllers = options.transcludeControllers,
                  futureParentElement = options.futureParentElement;

              // When `parentBoundTranscludeFn` is passed, it is a
              // `controllersBoundTransclude` function (it was previously passed
              // as `transclude` to directive.link) so we must unwrap it to get
              // its `boundTranscludeFn`
              if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
                parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
              }

              if (!namespace) {
                namespace = detectNamespaceForChildElements(futureParentElement);
              }
              var $linkNode;
              if (namespace !== 'html') {
                // When using a directive with replace:true and templateUrl the $compileNodes
                // (or a child element inside of them)
                // might change, so we need to recreate the namespace adapted compileNodes
                // for call to the link function.
                // Note: This will already clone the nodes...
                $linkNode = jqLite(wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html()));
              } else if (cloneConnectFn) {
                // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
                // and sometimes changes the structure of the DOM.
                $linkNode = JQLitePrototype.clone.call($compileNodes);
              } else {
                $linkNode = $compileNodes;
              }

              if (transcludeControllers) {
                for (var controllerName in transcludeControllers) {
                  $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
                }
              }

              compile.$$addScopeInfo($linkNode, scope);

              if (cloneConnectFn) cloneConnectFn($linkNode, scope);
              if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
              return $linkNode;
            };
          }

          function detectNamespaceForChildElements(parentElement) {
            // TODO: Make this detect MathML as well...
            var node = parentElement && parentElement[0];
            if (!node) {
              return 'html';
            } else {
              return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
            }
          }

          /**
           * Compile function matches each node in nodeList against the directives. Once all directives
           * for a particular node are collected their compile functions are executed. The compile
           * functions return values - the linking functions - are combined into a composite linking
           * function, which is the a linking function for the node.
           *
           * @param {NodeList} nodeList an array of nodes or NodeList to compile
           * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
           *        scope argument is auto-generated to the new child of the transcluded parent scope.
           * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
           *        the rootElement must be set the jqLite collection of the compile root. This is
           *        needed so that the jqLite collection items can be replaced with widgets.
           * @param {number=} maxPriority Max directive priority.
           * @returns {Function} A composite linking function of all of the matched directives or null.
           */
          function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
            var linkFns = [],
                attrs,
                directives,
                nodeLinkFn,
                childNodes,
                childLinkFn,
                linkFnFound,
                nodeLinkFnFound;

            for (var i = 0; i < nodeList.length; i++) {
              attrs = new Attributes();

              // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
              directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);

              nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;

              if (nodeLinkFn && nodeLinkFn.scope) {
                compile.$$addScopeClass(attrs.$$element);
              }

              childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);

              if (nodeLinkFn || childLinkFn) {
                linkFns.push(i, nodeLinkFn, childLinkFn);
                linkFnFound = true;
                nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
              }

              //use the previous context only for the first element in the virtual group
              previousCompileContext = null;
            }

            // return a linking function if we have found anything, null otherwise
            return linkFnFound ? compositeLinkFn : null;

            function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
              var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
              var stableNodeList;

              if (nodeLinkFnFound) {
                // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
                // offsets don't get screwed up
                var nodeListLength = nodeList.length;
                stableNodeList = new Array(nodeListLength);

                // create a sparse array by only copying the elements which have a linkFn
                for (i = 0; i < linkFns.length; i += 3) {
                  idx = linkFns[i];
                  stableNodeList[idx] = nodeList[idx];
                }
              } else {
                stableNodeList = nodeList;
              }

              for (i = 0, ii = linkFns.length; i < ii;) {
                node = stableNodeList[linkFns[i++]];
                nodeLinkFn = linkFns[i++];
                childLinkFn = linkFns[i++];

                if (nodeLinkFn) {
                  if (nodeLinkFn.scope) {
                    childScope = scope.$new();
                    compile.$$addScopeInfo(jqLite(node), childScope);
                  } else {
                    childScope = scope;
                  }

                  if (nodeLinkFn.transcludeOnThisElement) {
                    childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                  } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                    childBoundTranscludeFn = parentBoundTranscludeFn;
                  } else if (!parentBoundTranscludeFn && transcludeFn) {
                    childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                  } else {
                    childBoundTranscludeFn = null;
                  }

                  nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                } else if (childLinkFn) {
                  childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                }
              }
            }
          }

          function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
            function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

              if (!transcludedScope) {
                transcludedScope = scope.$new(false, containingScope);
                transcludedScope.$$transcluded = true;
              }

              return transcludeFn(transcludedScope, cloneFn, {
                parentBoundTranscludeFn: previousBoundTranscludeFn,
                transcludeControllers: controllers,
                futureParentElement: futureParentElement
              });
            }

            // We need  to attach the transclusion slots onto the `boundTranscludeFn`
            // so that they are available inside the `controllersBoundTransclude` function
            var boundSlots = boundTranscludeFn.$$slots = createMap();
            for (var slotName in transcludeFn.$$slots) {
              if (transcludeFn.$$slots[slotName]) {
                boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
              } else {
                boundSlots[slotName] = null;
              }
            }

            return boundTranscludeFn;
          }

          /**
           * Looks for directives on the given node and adds them to the directive collection which is
           * sorted.
           *
           * @param node Node to search.
           * @param directives An array to which the directives are added to. This array is sorted before
           *        the function returns.
           * @param attrs The shared attrs object which is used to populate the normalized attributes.
           * @param {number=} maxPriority Max directive priority.
           */
          function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
            var nodeType = node.nodeType,
                attrsMap = attrs.$attr,
                match,
                className;

            switch (nodeType) {
              case NODE_TYPE_ELEMENT:
                /* Element */
                // use the node name: <directive>
                addDirective(directives, directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

                // iterate over the attributes
                for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                  var attrStartName = false;
                  var attrEndName = false;

                  attr = nAttrs[j];
                  name = attr.name;
                  value = trim(attr.value);

                  // support ngAttr attribute binding
                  ngAttrName = directiveNormalize(name);
                  if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                    name = name.replace(PREFIX_REGEXP, '').substr(8).replace(/_(.)/g, function (match, letter) {
                      return letter.toUpperCase();
                    });
                  }

                  var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
                  if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
                    attrStartName = name;
                    attrEndName = name.substr(0, name.length - 5) + 'end';
                    name = name.substr(0, name.length - 6);
                  }

                  nName = directiveNormalize(name.toLowerCase());
                  attrsMap[nName] = name;
                  if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                    attrs[nName] = value;
                    if (getBooleanAttrName(node, nName)) {
                      attrs[nName] = true; // presence means true
                    }
                  }
                  addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                  addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
                }

                // use class as directive
                className = node.className;
                if (isObject(className)) {
                  // Maybe SVGAnimatedString
                  className = className.animVal;
                }
                if (isString(className) && className !== '') {
                  while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                    nName = directiveNormalize(match[2]);
                    if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                      attrs[nName] = trim(match[3]);
                    }
                    className = className.substr(match.index + match[0].length);
                  }
                }
                break;
              case NODE_TYPE_TEXT:
                /* Text Node */
                if (msie === 11) {
                  // Workaround for #11781
                  while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
                    node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
                    node.parentNode.removeChild(node.nextSibling);
                  }
                }
                addTextInterpolateDirective(directives, node.nodeValue);
                break;
              case NODE_TYPE_COMMENT:
                /* Comment */
                collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
                break;
            }

            directives.sort(byPriority);
            return directives;
          }

          function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
            // function created because of performance, try/catch disables
            // the optimization of the whole function #14848
            try {
              var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
              if (match) {
                var nName = directiveNormalize(match[1]);
                if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[2]);
                }
              }
            } catch (e) {
              // turns out that under some circumstances IE9 throws errors when one attempts to read
              // comment's node value.
              // Just ignore it and continue. (Can't seem to reproduce in test case.)
            }
          }

          /**
           * Given a node with an directive-start it collects all of the siblings until it finds
           * directive-end.
           * @param node
           * @param attrStart
           * @param attrEnd
           * @returns {*}
           */
          function groupScan(node, attrStart, attrEnd) {
            var nodes = [];
            var depth = 0;
            if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
              do {
                if (!node) {
                  throw $compileMinErr('uterdir', "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                }
                if (node.nodeType == NODE_TYPE_ELEMENT) {
                  if (node.hasAttribute(attrStart)) depth++;
                  if (node.hasAttribute(attrEnd)) depth--;
                }
                nodes.push(node);
                node = node.nextSibling;
              } while (depth > 0);
            } else {
              nodes.push(node);
            }

            return jqLite(nodes);
          }

          /**
           * Wrapper for linking function which converts normal linking function into a grouped
           * linking function.
           * @param linkFn
           * @param attrStart
           * @param attrEnd
           * @returns {Function}
           */
          function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
            return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
              element = groupScan(element[0], attrStart, attrEnd);
              return linkFn(scope, element, attrs, controllers, transcludeFn);
            };
          }

          /**
           * A function generator that is used to support both eager and lazy compilation
           * linking function.
           * @param eager
           * @param $compileNodes
           * @param transcludeFn
           * @param maxPriority
           * @param ignoreDirective
           * @param previousCompileContext
           * @returns {Function}
           */
          function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
            var compiled;

            if (eager) {
              return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
            }
            return function lazyCompilation() {
              if (!compiled) {
                compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

                // Null out all of these references in order to make them eligible for garbage collection
                // since this is a potentially long lived closure
                $compileNodes = transcludeFn = previousCompileContext = null;
              }
              return compiled.apply(this, arguments);
            };
          }

          /**
           * Once the directives have been collected, their compile functions are executed. This method
           * is responsible for inlining directive templates as well as terminating the application
           * of the directives if the terminal directive has been reached.
           *
           * @param {Array} directives Array of collected directives to execute their compile function.
           *        this needs to be pre-sorted by priority order.
           * @param {Node} compileNode The raw DOM node to apply the compile functions to
           * @param {Object} templateAttrs The shared attribute function
           * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
           *                                                  scope argument is auto-generated to the new
           *                                                  child of the transcluded parent scope.
           * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
           *                              argument has the root jqLite array so that we can replace nodes
           *                              on it.
           * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
           *                                           compiling the transclusion.
           * @param {Array.<Function>} preLinkFns
           * @param {Array.<Function>} postLinkFns
           * @param {Object} previousCompileContext Context used for previous compilation of the current
           *                                        node
           * @returns {Function} linkFn
           */
          function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
            previousCompileContext = previousCompileContext || {};

            var terminalPriority = -Number.MAX_VALUE,
                newScopeDirective = previousCompileContext.newScopeDirective,
                controllerDirectives = previousCompileContext.controllerDirectives,
                newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
                templateDirective = previousCompileContext.templateDirective,
                nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
                hasTranscludeDirective = false,
                hasTemplate = false,
                hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
                $compileNode = templateAttrs.$$element = jqLite(compileNode),
                directive,
                directiveName,
                $template,
                replaceDirective = originalReplaceDirective,
                childTranscludeFn = transcludeFn,
                linkFn,
                didScanForMultipleTransclusion = false,
                mightHaveMultipleTransclusionError = false,
                directiveValue;

            // executes all directives on the current element
            for (var i = 0, ii = directives.length; i < ii; i++) {
              directive = directives[i];
              var attrStart = directive.$$start;
              var attrEnd = directive.$$end;

              // collect multiblock sections
              if (attrStart) {
                $compileNode = groupScan(compileNode, attrStart, attrEnd);
              }
              $template = undefined;

              if (terminalPriority > directive.priority) {
                break; // prevent further processing of directives
              }

              if (directiveValue = directive.scope) {

                // skip the check for directives with async templates, we'll check the derived sync
                // directive when the template arrives
                if (!directive.templateUrl) {
                  if (isObject(directiveValue)) {
                    // This directive is trying to add an isolated scope.
                    // Check that there is no scope of any kind already
                    assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                    newIsolateScopeDirective = directive;
                  } else {
                    // This directive is trying to add a child scope.
                    // Check that there is no isolated scope already
                    assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                  }
                }

                newScopeDirective = newScopeDirective || directive;
              }

              directiveName = directive.name;

              // If we encounter a condition that can result in transclusion on the directive,
              // then scan ahead in the remaining directives for others that may cause a multiple
              // transclusion error to be thrown during the compilation process.  If a matching directive
              // is found, then we know that when we encounter a transcluded directive, we need to eagerly
              // compile the `transclude` function rather than doing it lazily in order to throw
              // exceptions at the correct time
              if (!didScanForMultipleTransclusion && (directive.replace && (directive.templateUrl || directive.template) || directive.transclude && !directive.$$tlb)) {
                var candidateDirective;

                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
                  if (candidateDirective.transclude && !candidateDirective.$$tlb || candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template)) {
                    mightHaveMultipleTransclusionError = true;
                    break;
                  }
                }

                didScanForMultipleTransclusion = true;
              }

              if (!directive.templateUrl && directive.controller) {
                directiveValue = directive.controller;
                controllerDirectives = controllerDirectives || createMap();
                assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                controllerDirectives[directiveName] = directive;
              }

              if (directiveValue = directive.transclude) {
                hasTranscludeDirective = true;

                // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
                // This option should only be used by directives that know how to safely handle element transclusion,
                // where the transcluded nodes are added or replaced after linking.
                if (!directive.$$tlb) {
                  assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                  nonTlbTranscludeDirective = directive;
                }

                if (directiveValue == 'element') {
                  hasElementTranscludeDirective = true;
                  terminalPriority = directive.priority;
                  $template = $compileNode;
                  $compileNode = templateAttrs.$$element = jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
                  compileNode = $compileNode[0];
                  replaceWith(jqCollection, sliceArgs($template), compileNode);

                  // Support: Chrome < 50
                  // https://github.com/angular/angular.js/issues/14041

                  // In the versions of V8 prior to Chrome 50, the document fragment that is created
                  // in the `replaceWith` function is improperly garbage collected despite still
                  // being referenced by the `parentNode` property of all of the child nodes.  By adding
                  // a reference to the fragment via a different property, we can avoid that incorrect
                  // behavior.
                  // TODO: remove this line after Chrome 50 has been released
                  $template[0].$$parentNode = $template[0].parentNode;

                  childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                    // Don't pass in:
                    // - controllerDirectives - otherwise we'll create duplicates controllers
                    // - newIsolateScopeDirective or templateDirective - combining templates with
                    //   element transclusion doesn't make sense.
                    //
                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                    // on the same element more than once.
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective
                  });
                } else {

                  var slots = createMap();

                  $template = jqLite(jqLiteClone(compileNode)).contents();

                  if (isObject(directiveValue)) {

                    // We have transclusion slots,
                    // collect them up, compile them and store their transclusion functions
                    $template = [];

                    var slotMap = createMap();
                    var filledSlots = createMap();

                    // Parse the element selectors
                    forEach(directiveValue, function (elementSelector, slotName) {
                      // If an element selector starts with a ? then it is optional
                      var optional = elementSelector.charAt(0) === '?';
                      elementSelector = optional ? elementSelector.substring(1) : elementSelector;

                      slotMap[elementSelector] = slotName;

                      // We explicitly assign `null` since this implies that a slot was defined but not filled.
                      // Later when calling boundTransclusion functions with a slot name we only error if the
                      // slot is `undefined`
                      slots[slotName] = null;

                      // filledSlots contains `true` for all slots that are either optional or have been
                      // filled. This is used to check that we have not missed any required slots
                      filledSlots[slotName] = optional;
                    });

                    // Add the matching elements into their slot
                    forEach($compileNode.contents(), function (node) {
                      var slotName = slotMap[directiveNormalize(nodeName_(node))];
                      if (slotName) {
                        filledSlots[slotName] = true;
                        slots[slotName] = slots[slotName] || [];
                        slots[slotName].push(node);
                      } else {
                        $template.push(node);
                      }
                    });

                    // Check for required slots that were not filled
                    forEach(filledSlots, function (filled, slotName) {
                      if (!filled) {
                        throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
                      }
                    });

                    for (var slotName in slots) {
                      if (slots[slotName]) {
                        // Only define a transclusion function if the slot was filled
                        slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
                      }
                    }
                  }

                  $compileNode.empty(); // clear contents
                  childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined, undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope });
                  childTranscludeFn.$$slots = slots;
                }
              }

              if (directive.template) {
                hasTemplate = true;
                assertNoDuplicate('template', templateDirective, directive, $compileNode);
                templateDirective = directive;

                directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;

                directiveValue = denormalizeTemplate(directiveValue);

                if (directive.replace) {
                  replaceDirective = directive;
                  if (jqLiteIsTextNode(directiveValue)) {
                    $template = [];
                  } else {
                    $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                  }
                  compileNode = $template[0];

                  if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                    throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}", directiveName, '');
                  }

                  replaceWith(jqCollection, $compileNode, compileNode);

                  var newTemplateAttrs = { $attr: {} };

                  // combine directives from the original node and from the template:
                  // - take the array of directives for this element
                  // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                  // - collect directives from the template and sort them by priority
                  // - combine directives as: processed + template + unprocessed
                  var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                  var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

                  if (newIsolateScopeDirective || newScopeDirective) {
                    // The original directive caused the current element to be replaced but this element
                    // also needs to have a new scope, so we need to tell the template directives
                    // that they would need to get their scope from further up, if they require transclusion
                    markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
                  }
                  directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                  mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

                  ii = directives.length;
                } else {
                  $compileNode.html(directiveValue);
                }
              }

              if (directive.templateUrl) {
                hasTemplate = true;
                assertNoDuplicate('template', templateDirective, directive, $compileNode);
                templateDirective = directive;

                if (directive.replace) {
                  replaceDirective = directive;
                }

                /* jshint -W021 */
                nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
                /* jshint +W021 */
                templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                  controllerDirectives: controllerDirectives,
                  newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                  newIsolateScopeDirective: newIsolateScopeDirective,
                  templateDirective: templateDirective,
                  nonTlbTranscludeDirective: nonTlbTranscludeDirective
                });
                ii = directives.length;
              } else if (directive.compile) {
                try {
                  linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                  var context = directive.$$originalDirective || directive;
                  if (isFunction(linkFn)) {
                    addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
                  } else if (linkFn) {
                    addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
                  }
                } catch (e) {
                  $exceptionHandler(e, startingTag($compileNode));
                }
              }

              if (directive.terminal) {
                nodeLinkFn.terminal = true;
                terminalPriority = Math.max(terminalPriority, directive.priority);
              }
            }

            nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
            nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
            nodeLinkFn.templateOnThisElement = hasTemplate;
            nodeLinkFn.transclude = childTranscludeFn;

            previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

            // might be normal or delayed nodeLinkFn depending on if templateUrl is present
            return nodeLinkFn;

            ////////////////////

            function addLinkFns(pre, post, attrStart, attrEnd) {
              if (pre) {
                if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
                pre.require = directive.require;
                pre.directiveName = directiveName;
                if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                  pre = cloneAndAnnotateFn(pre, { isolateScope: true });
                }
                preLinkFns.push(pre);
              }
              if (post) {
                if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
                post.require = directive.require;
                post.directiveName = directiveName;
                if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                  post = cloneAndAnnotateFn(post, { isolateScope: true });
                }
                postLinkFns.push(post);
              }
            }

            function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
              var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element, attrs, scopeBindingInfo;

              if (compileNode === linkNode) {
                attrs = templateAttrs;
                $element = templateAttrs.$$element;
              } else {
                $element = jqLite(linkNode);
                attrs = new Attributes($element, templateAttrs);
              }

              controllerScope = scope;
              if (newIsolateScopeDirective) {
                isolateScope = scope.$new(true);
              } else if (newScopeDirective) {
                controllerScope = scope.$parent;
              }

              if (boundTranscludeFn) {
                // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
                // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
                transcludeFn = controllersBoundTransclude;
                transcludeFn.$$boundTransclude = boundTranscludeFn;
                // expose the slots on the `$transclude` function
                transcludeFn.isSlotFilled = function (slotName) {
                  return !!boundTranscludeFn.$$slots[slotName];
                };
              }

              if (controllerDirectives) {
                elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
              }

              if (newIsolateScopeDirective) {
                // Initialize isolate scope bindings for new isolate scope directive.
                compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                compile.$$addScopeClass($element, true);
                isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective);
                if (scopeBindingInfo.removeWatches) {
                  isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
                }
              }

              // Initialize bindToController bindings
              for (var name in elementControllers) {
                var controllerDirective = controllerDirectives[name];
                var controller = elementControllers[name];
                var bindings = controllerDirective.$$bindings.bindToController;

                if (controller.identifier && bindings) {
                  controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                } else {
                  controller.bindingInfo = {};
                }

                var controllerResult = controller();
                if (controllerResult !== controller.instance) {
                  // If the controller constructor has a return value, overwrite the instance
                  // from setupControllers
                  controller.instance = controllerResult;
                  $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
                  controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
                  controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                }
              }

              // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
              forEach(controllerDirectives, function (controllerDirective, name) {
                var require = controllerDirective.require;
                if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
                  extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
                }
              });

              // Handle the init and destroy lifecycle hooks on all controllers that have them
              forEach(elementControllers, function (controller) {
                var controllerInstance = controller.instance;
                if (isFunction(controllerInstance.$onChanges)) {
                  try {
                    controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }
                if (isFunction(controllerInstance.$onInit)) {
                  try {
                    controllerInstance.$onInit();
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }
                if (isFunction(controllerInstance.$doCheck)) {
                  controllerScope.$watch(function () {
                    controllerInstance.$doCheck();
                  });
                  controllerInstance.$doCheck();
                }
                if (isFunction(controllerInstance.$onDestroy)) {
                  controllerScope.$on('$destroy', function callOnDestroyHook() {
                    controllerInstance.$onDestroy();
                  });
                }
              });

              // PRELINKING
              for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                linkFn = preLinkFns[i];
                invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              }

              // RECURSION
              // We only pass the isolate scope, if the isolate directive has a template,
              // otherwise the child elements do not belong to the isolate directive.
              var scopeToChild = scope;
              if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
                scopeToChild = isolateScope;
              }
              childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

              // POSTLINKING
              for (i = postLinkFns.length - 1; i >= 0; i--) {
                linkFn = postLinkFns[i];
                invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              }

              // Trigger $postLink lifecycle hooks
              forEach(elementControllers, function (controller) {
                var controllerInstance = controller.instance;
                if (isFunction(controllerInstance.$postLink)) {
                  controllerInstance.$postLink();
                }
              });

              // This is the function that is injected as `$transclude`.
              // Note: all arguments are optional!
              function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
                var transcludeControllers;
                // No scope passed in:
                if (!isScope(scope)) {
                  slotName = futureParentElement;
                  futureParentElement = cloneAttachFn;
                  cloneAttachFn = scope;
                  scope = undefined;
                }

                if (hasElementTranscludeDirective) {
                  transcludeControllers = elementControllers;
                }
                if (!futureParentElement) {
                  futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
                }
                if (slotName) {
                  // slotTranscludeFn can be one of three things:
                  //  * a transclude function - a filled slot
                  //  * `null` - an optional slot that was not filled
                  //  * `undefined` - a slot that was not declared (i.e. invalid)
                  var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
                  if (slotTranscludeFn) {
                    return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                  } else if (isUndefined(slotTranscludeFn)) {
                    throw $compileMinErr('noslot', 'No parent directive that requires a transclusion with slot name "{0}". ' + 'Element: {1}', slotName, startingTag($element));
                  }
                } else {
                  return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                }
              }
            }
          }

          function getControllers(directiveName, require, $element, elementControllers) {
            var value;

            if (isString(require)) {
              var match = require.match(REQUIRE_PREFIX_REGEXP);
              var name = require.substring(match[0].length);
              var inheritType = match[1] || match[3];
              var optional = match[2] === '?';

              //If only parents then start at the parent element
              if (inheritType === '^^') {
                $element = $element.parent();
                //Otherwise attempt getting the controller from elementControllers in case
                //the element is transcluded (and has no data) and to avoid .data if possible
              } else {
                value = elementControllers && elementControllers[name];
                value = value && value.instance;
              }

              if (!value) {
                var dataName = '$' + name + 'Controller';
                value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
              }

              if (!value && !optional) {
                throw $compileMinErr('ctreq', "Controller '{0}', required by directive '{1}', can't be found!", name, directiveName);
              }
            } else if (isArray(require)) {
              value = [];
              for (var i = 0, ii = require.length; i < ii; i++) {
                value[i] = getControllers(directiveName, require[i], $element, elementControllers);
              }
            } else if (isObject(require)) {
              value = {};
              forEach(require, function (controller, property) {
                value[property] = getControllers(directiveName, controller, $element, elementControllers);
              });
            }

            return value || null;
          }

          function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
            var elementControllers = createMap();
            for (var controllerKey in controllerDirectives) {
              var directive = controllerDirectives[controllerKey];
              var locals = {
                $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                $element: $element,
                $attrs: attrs,
                $transclude: transcludeFn
              };

              var controller = directive.controller;
              if (controller == '@') {
                controller = attrs[directive.name];
              }

              var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

              // For directives with element transclusion the element is a comment.
              // In this case .data will not attach any data.
              // Instead, we save the controllers for the element in a local hash and attach to .data
              // later, once we have the actual element.
              elementControllers[directive.name] = controllerInstance;
              $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
            }
            return elementControllers;
          }

          // Depending upon the context in which a directive finds itself it might need to have a new isolated
          // or child scope created. For instance:
          // * if the directive has been pulled into a template because another directive with a higher priority
          // asked for element transclusion
          // * if the directive itself asks for transclusion but it is at the root of a template and the original
          // element was replaced. See https://github.com/angular/angular.js/issues/12936
          function markDirectiveScope(directives, isolateScope, newScope) {
            for (var j = 0, jj = directives.length; j < jj; j++) {
              directives[j] = inherit(directives[j], { $$isolateScope: isolateScope, $$newScope: newScope });
            }
          }

          /**
           * looks up the directive and decorates it with exception handling and proper parameters. We
           * call this the boundDirective.
           *
           * @param {string} name name of the directive to look up.
           * @param {string} location The directive must be found in specific format.
           *   String containing any of theses characters:
           *
           *   * `E`: element name
           *   * `A': attribute
           *   * `C`: class
           *   * `M`: comment
           * @returns {boolean} true if directive was added.
           */
          function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
            if (name === ignoreDirective) return null;
            var match = null;
            if (hasDirectives.hasOwnProperty(name)) {
              for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                try {
                  directive = directives[i];
                  if ((isUndefined(maxPriority) || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                    if (startAttrName) {
                      directive = inherit(directive, { $$start: startAttrName, $$end: endAttrName });
                    }
                    if (!directive.$$bindings) {
                      var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                      if (isObject(bindings.isolateScope)) {
                        directive.$$isolateBindings = bindings.isolateScope;
                      }
                    }
                    tDirectives.push(directive);
                    match = directive;
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }
            return match;
          }

          /**
           * looks up the directive and returns true if it is a multi-element directive,
           * and therefore requires DOM nodes between -start and -end markers to be grouped
           * together.
           *
           * @param {string} name name of the directive to look up.
           * @returns true if directive was registered as multi-element.
           */
          function directiveIsMultiElement(name) {
            if (hasDirectives.hasOwnProperty(name)) {
              for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                directive = directives[i];
                if (directive.multiElement) {
                  return true;
                }
              }
            }
            return false;
          }

          /**
           * When the element is replaced with HTML template then the new attributes
           * on the template need to be merged with the existing attributes in the DOM.
           * The desired effect is to have both of the attributes present.
           *
           * @param {object} dst destination attributes (original DOM)
           * @param {object} src source attributes (from the directive template)
           */
          function mergeTemplateAttributes(dst, src) {
            var srcAttr = src.$attr,
                dstAttr = dst.$attr,
                $element = dst.$$element;

            // reapply the old attributes to the new element
            forEach(dst, function (value, key) {
              if (key.charAt(0) != '$') {
                if (src[key] && src[key] !== value) {
                  value += (key === 'style' ? ';' : ' ') + src[key];
                }
                dst.$set(key, value, true, srcAttr[key]);
              }
            });

            // copy the new attributes on the old attrs object
            forEach(src, function (value, key) {
              // Check if we already set this attribute in the loop above.
              // `dst` will never contain hasOwnProperty as DOM parser won't let it.
              // You will get an "InvalidCharacterError: DOM Exception 5" error if you
              // have an attribute like "has-own-property" or "data-has-own-property", etc.
              if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
                dst[key] = value;

                if (key !== 'class' && key !== 'style') {
                  dstAttr[key] = srcAttr[key];
                }
              }
            });
          }

          function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
            var linkQueue = [],
                afterTemplateNodeLinkFn,
                afterTemplateChildLinkFn,
                beforeTemplateCompileNode = $compileNode[0],
                origAsyncDirective = directives.shift(),
                derivedSyncDirective = inherit(origAsyncDirective, {
              templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
            }),
                templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl,
                templateNamespace = origAsyncDirective.templateNamespace;

            $compileNode.empty();

            $templateRequest(templateUrl).then(function (content) {
              var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

              content = denormalizeTemplate(content);

              if (origAsyncDirective.replace) {
                if (jqLiteIsTextNode(content)) {
                  $template = [];
                } else {
                  $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
                }
                compileNode = $template[0];

                if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                  throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                }

                tempTemplateAttrs = { $attr: {} };
                replaceWith($rootElement, $compileNode, compileNode);
                var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

                if (isObject(origAsyncDirective.scope)) {
                  // the original directive that caused the template to be loaded async required
                  // an isolate scope
                  markDirectiveScope(templateDirectives, true);
                }
                directives = templateDirectives.concat(directives);
                mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
              } else {
                compileNode = beforeTemplateCompileNode;
                $compileNode.html(content);
              }

              directives.unshift(derivedSyncDirective);

              afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
              forEach($rootElement, function (node, i) {
                if (node == compileNode) {
                  $rootElement[i] = $compileNode[0];
                }
              });
              afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

              while (linkQueue.length) {
                var scope = linkQueue.shift(),
                    beforeTemplateLinkNode = linkQueue.shift(),
                    linkRootElement = linkQueue.shift(),
                    boundTranscludeFn = linkQueue.shift(),
                    linkNode = $compileNode[0];

                if (scope.$$destroyed) continue;

                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                  var oldClasses = beforeTemplateLinkNode.className;

                  if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                    // it was cloned therefore we have to clone as well.
                    linkNode = jqLiteClone(compileNode);
                  }
                  replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

                  // Copy in CSS classes from original node
                  safeAddClass(jqLite(linkNode), oldClasses);
                }
                if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                } else {
                  childBoundTranscludeFn = boundTranscludeFn;
                }
                afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
              }
              linkQueue = null;
            });

            return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
              var childBoundTranscludeFn = boundTranscludeFn;
              if (scope.$$destroyed) return;
              if (linkQueue) {
                linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
              } else {
                if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                }
                afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
              }
            };
          }

          /**
           * Sorting function for bound directives.
           */
          function byPriority(a, b) {
            var diff = b.priority - a.priority;
            if (diff !== 0) return diff;
            if (a.name !== b.name) return a.name < b.name ? -1 : 1;
            return a.index - b.index;
          }

          function assertNoDuplicate(what, previousDirective, directive, element) {

            function wrapModuleNameIfDefined(moduleName) {
              return moduleName ? ' (module: ' + moduleName + ')' : '';
            }

            if (previousDirective) {
              throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}', previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
            }
          }

          function addTextInterpolateDirective(directives, text) {
            var interpolateFn = $interpolate(text, true);
            if (interpolateFn) {
              directives.push({
                priority: 0,
                compile: function textInterpolateCompileFn(templateNode) {
                  var templateNodeParent = templateNode.parent(),
                      hasCompileParent = !!templateNodeParent.length;

                  // When transcluding a template that has bindings in the root
                  // we don't have a parent and thus need to add the class during linking fn.
                  if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

                  return function textInterpolateLinkFn(scope, node) {
                    var parent = node.parent();
                    if (!hasCompileParent) compile.$$addBindingClass(parent);
                    compile.$$addBindingInfo(parent, interpolateFn.expressions);
                    scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                      node[0].nodeValue = value;
                    });
                  };
                }
              });
            }
          }

          function wrapTemplate(type, template) {
            type = lowercase(type || 'html');
            switch (type) {
              case 'svg':
              case 'math':
                var wrapper = window.document.createElement('div');
                wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
                return wrapper.childNodes[0].childNodes;
              default:
                return template;
            }
          }

          function getTrustedContext(node, attrNormalizedName) {
            if (attrNormalizedName == "srcdoc") {
              return $sce.HTML;
            }
            var tag = nodeName_(node);
            // maction[xlink:href] can source SVG.  It's not limited to <maction>.
            if (attrNormalizedName == "xlinkHref" || tag == "form" && attrNormalizedName == "action" || tag != "img" && (attrNormalizedName == "src" || attrNormalizedName == "ngSrc")) {
              return $sce.RESOURCE_URL;
            }
          }

          function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
            var trustedContext = getTrustedContext(node, name);
            allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

            var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

            // no interpolation found -> ignore
            if (!interpolateFn) return;

            if (name === "multiple" && nodeName_(node) === "select") {
              throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
            }

            directives.push({
              priority: 100,
              compile: function () {
                return {
                  pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                    var $$observers = attr.$$observers || (attr.$$observers = createMap());

                    if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                      throw $compileMinErr('nodomevents', "Interpolations for HTML DOM event attributes are disallowed.  Please use the " + "ng- versions (such as ng-click instead of onclick) instead.");
                    }

                    // If the attribute has changed since last $interpolate()ed
                    var newValue = attr[name];
                    if (newValue !== value) {
                      // we need to interpolate again since the attribute value has been updated
                      // (e.g. by another directive's compile function)
                      // ensure unset/empty values make interpolateFn falsy
                      interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                      value = newValue;
                    }

                    // if attribute was updated so that there is no interpolation going on we don't want to
                    // register any observers
                    if (!interpolateFn) return;

                    // initialize attr object so that it's ready in case we need the value for isolate
                    // scope initialization, otherwise the value would not be available from isolate
                    // directive's linking fn during linking phase
                    attr[name] = interpolateFn(scope);

                    ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                    (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                      //special case for class attribute addition + removal
                      //so that class changes can tap into the animation
                      //hooks provided by the $animate service. Be sure to
                      //skip animations when the first digest occurs (when
                      //both the new and the old values are the same) since
                      //the CSS classes are the non-interpolated values
                      if (name === 'class' && newValue != oldValue) {
                        attr.$updateClass(newValue, oldValue);
                      } else {
                        attr.$set(name, newValue);
                      }
                    });
                  }
                };
              }
            });
          }

          /**
           * This is a special jqLite.replaceWith, which can replace items which
           * have no parents, provided that the containing jqLite collection is provided.
           *
           * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
           *                               in the root of the tree.
           * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
           *                                  the shell, but replace its DOM node reference.
           * @param {Node} newNode The new DOM node.
           */
          function replaceWith($rootElement, elementsToRemove, newNode) {
            var firstElementToRemove = elementsToRemove[0],
                removeCount = elementsToRemove.length,
                parent = firstElementToRemove.parentNode,
                i,
                ii;

            if ($rootElement) {
              for (i = 0, ii = $rootElement.length; i < ii; i++) {
                if ($rootElement[i] == firstElementToRemove) {
                  $rootElement[i++] = newNode;
                  for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                    if (j2 < jj) {
                      $rootElement[j] = $rootElement[j2];
                    } else {
                      delete $rootElement[j];
                    }
                  }
                  $rootElement.length -= removeCount - 1;

                  // If the replaced element is also the jQuery .context then replace it
                  // .context is a deprecated jQuery api, so we should set it only when jQuery set it
                  // http://api.jquery.com/context/
                  if ($rootElement.context === firstElementToRemove) {
                    $rootElement.context = newNode;
                  }
                  break;
                }
              }
            }

            if (parent) {
              parent.replaceChild(newNode, firstElementToRemove);
            }

            // Append all the `elementsToRemove` to a fragment. This will...
            // - remove them from the DOM
            // - allow them to still be traversed with .nextSibling
            // - allow a single fragment.qSA to fetch all elements being removed
            var fragment = window.document.createDocumentFragment();
            for (i = 0; i < removeCount; i++) {
              fragment.appendChild(elementsToRemove[i]);
            }

            if (jqLite.hasData(firstElementToRemove)) {
              // Copy over user data (that includes Angular's $scope etc.). Don't copy private
              // data here because there's no public interface in jQuery to do that and copying over
              // event listeners (which is the main use of private data) wouldn't work anyway.
              jqLite.data(newNode, jqLite.data(firstElementToRemove));

              // Remove $destroy event listeners from `firstElementToRemove`
              jqLite(firstElementToRemove).off('$destroy');
            }

            // Cleanup any data/listeners on the elements and children.
            // This includes invoking the $destroy event on any elements with listeners.
            jqLite.cleanData(fragment.querySelectorAll('*'));

            // Update the jqLite collection to only contain the `newNode`
            for (i = 1; i < removeCount; i++) {
              delete elementsToRemove[i];
            }
            elementsToRemove[0] = newNode;
            elementsToRemove.length = 1;
          }

          function cloneAndAnnotateFn(fn, annotation) {
            return extend(function () {
              return fn.apply(null, arguments);
            }, fn, annotation);
          }

          function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
            try {
              linkFn(scope, $element, attrs, controllers, transcludeFn);
            } catch (e) {
              $exceptionHandler(e, startingTag($element));
            }
          }

          // Set up $watches for isolate scope and controller bindings. This process
          // only occurs for isolate scopes and new scopes with controllerAs.
          function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
            var removeWatchCollection = [];
            var initialChanges = {};
            var changes;
            forEach(bindings, function initializeBinding(definition, scopeName) {
              var attrName = definition.attrName,
                  optional = definition.optional,
                  mode = definition.mode,
                  // @, =, <, or &
              lastValue,
                  parentGet,
                  parentSet,
                  compare,
                  removeWatch;

              switch (mode) {

                case '@':
                  if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                    destination[scopeName] = attrs[attrName] = void 0;
                  }
                  attrs.$observe(attrName, function (value) {
                    if (isString(value) || isBoolean(value)) {
                      var oldValue = destination[scopeName];
                      recordChanges(scopeName, value, oldValue);
                      destination[scopeName] = value;
                    }
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  lastValue = attrs[attrName];
                  if (isString(lastValue)) {
                    // If the attribute has been provided then we trigger an interpolation to ensure
                    // the value is there for use in the link fn
                    destination[scopeName] = $interpolate(lastValue)(scope);
                  } else if (isBoolean(lastValue)) {
                    // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
                    // the value to boolean rather than a string, so we special case this situation
                    destination[scopeName] = lastValue;
                  }
                  initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                  break;

                case '=':
                  if (!hasOwnProperty.call(attrs, attrName)) {
                    if (optional) break;
                    attrs[attrName] = void 0;
                  }
                  if (optional && !attrs[attrName]) break;

                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function simpleCompare(a, b) {
                      return a === b || a !== a && b !== b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = destination[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!", attrs[attrName], attrName, directive.name);
                  };
                  lastValue = destination[scopeName] = parentGet(scope);
                  var parentValueWatch = function parentValueWatch(parentValue) {
                    if (!compare(parentValue, destination[scopeName])) {
                      // we are out of sync and need to copy
                      if (!compare(parentValue, lastValue)) {
                        // parent changed and it has precedence
                        destination[scopeName] = parentValue;
                      } else {
                        // if the parent can be assigned then do so
                        parentSet(scope, parentValue = destination[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  };
                  parentValueWatch.$stateful = true;
                  if (definition.collection) {
                    removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                  } else {
                    removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                  }
                  removeWatchCollection.push(removeWatch);
                  break;

                case '<':
                  if (!hasOwnProperty.call(attrs, attrName)) {
                    if (optional) break;
                    attrs[attrName] = void 0;
                  }
                  if (optional && !attrs[attrName]) break;

                  parentGet = $parse(attrs[attrName]);

                  var initialValue = destination[scopeName] = parentGet(scope);
                  initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);

                  removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
                    if (oldValue === newValue) {
                      if (oldValue === initialValue) return;
                      oldValue = initialValue;
                    }
                    recordChanges(scopeName, newValue, oldValue);
                    destination[scopeName] = newValue;
                  }, parentGet.literal);

                  removeWatchCollection.push(removeWatch);
                  break;

                case '&':
                  // Don't assign Object.prototype method to scope
                  parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

                  // Don't assign noop to destination if expression is not valid
                  if (parentGet === noop && optional) break;

                  destination[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
              }
            });

            function recordChanges(key, currentValue, previousValue) {
              if (isFunction(destination.$onChanges) && currentValue !== previousValue) {
                // If we have not already scheduled the top level onChangesQueue handler then do so now
                if (!onChangesQueue) {
                  scope.$$postDigest(flushOnChangesQueue);
                  onChangesQueue = [];
                }
                // If we have not already queued a trigger of onChanges for this controller then do so now
                if (!changes) {
                  changes = {};
                  onChangesQueue.push(triggerOnChangesHook);
                }
                // If the has been a change on this property already then we need to reuse the previous value
                if (changes[key]) {
                  previousValue = changes[key].previousValue;
                }
                // Store this change
                changes[key] = new SimpleChange(previousValue, currentValue);
              }
            }

            function triggerOnChangesHook() {
              destination.$onChanges(changes);
              // Now clear the changes so that we schedule onChanges when more changes arrive
              changes = undefined;
            }

            return {
              initialChanges: initialChanges,
              removeWatches: removeWatchCollection.length && function removeWatches() {
                for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
                  removeWatchCollection[i]();
                }
              }
            };
          }
        }];
      }

      function SimpleChange(previous, current) {
        this.previousValue = previous;
        this.currentValue = current;
      }
      SimpleChange.prototype.isFirstChange = function () {
        return this.previousValue === _UNINITIALIZED_VALUE;
      };

      var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
      /**
       * Converts all accepted directives format into proper directive name.
       * @param name Name to normalize
       */
      function directiveNormalize(name) {
        return camelCase(name.replace(PREFIX_REGEXP, ''));
      }

      /**
       * @ngdoc type
       * @name $compile.directive.Attributes
       *
       * @description
       * A shared object between directive compile / linking functions which contains normalized DOM
       * element attributes. The values reflect current binding state `{{ }}`. The normalization is
       * needed since all of these are treated as equivalent in Angular:
       *
       * ```
       *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
       * ```
       */

      /**
       * @ngdoc property
       * @name $compile.directive.Attributes#$attr
       *
       * @description
       * A map of DOM element attribute names to the normalized name. This is
       * needed to do reverse lookup from normalized name back to actual name.
       */

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$set
       * @kind function
       *
       * @description
       * Set DOM element attribute value.
       *
       *
       * @param {string} name Normalized element attribute name of the property to modify. The name is
       *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
       *          property to the original name.
       * @param {string} value Value to set the attribute to. The value can be an interpolated string.
       */

      /**
       * Closure compiler type information
       */

      function nodesetLinkingFn(
      /* angular.Scope */scope,
      /* NodeList */nodeList,
      /* Element */rootElement,
      /* function(Function) */boundTranscludeFn) {}

      function directiveLinkingFn(
      /* nodesetLinkingFn */nodesetLinkingFn,
      /* angular.Scope */scope,
      /* Node */node,
      /* Element */rootElement,
      /* function(Function) */boundTranscludeFn) {}

      function tokenDifference(str1, str2) {
        var values = '',
            tokens1 = str1.split(/\s+/),
            tokens2 = str2.split(/\s+/);

        outer: for (var i = 0; i < tokens1.length; i++) {
          var token = tokens1[i];
          for (var j = 0; j < tokens2.length; j++) {
            if (token == tokens2[j]) continue outer;
          }
          values += (values.length > 0 ? ' ' : '') + token;
        }
        return values;
      }

      function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;

        if (i <= 1) {
          return jqNodes;
        }

        while (i--) {
          var node = jqNodes[i];
          if (node.nodeType === NODE_TYPE_COMMENT) {
            splice.call(jqNodes, i, 1);
          }
        }
        return jqNodes;
      }

      var $controllerMinErr = minErr('$controller');

      var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
      function identifierForController(controller, ident) {
        if (ident && isString(ident)) return ident;
        if (isString(controller)) {
          var match = CNTRL_REG.exec(controller);
          if (match) return match[3];
        }
      }

      /**
       * @ngdoc provider
       * @name $controllerProvider
       * @description
       * The {@link ng.$controller $controller service} is used by Angular to create new
       * controllers.
       *
       * This provider allows controller registration via the
       * {@link ng.$controllerProvider#register register} method.
       */
      function $ControllerProvider() {
        var controllers = {},
            globals = false;

        /**
         * @ngdoc method
         * @name $controllerProvider#has
         * @param {string} name Controller name to check.
         */
        this.has = function (name) {
          return controllers.hasOwnProperty(name);
        };

        /**
         * @ngdoc method
         * @name $controllerProvider#register
         * @param {string|Object} name Controller name, or an object map of controllers where the keys are
         *    the names and the values are the constructors.
         * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
         *    annotations in the array notation).
         */
        this.register = function (name, constructor) {
          assertNotHasOwnProperty(name, 'controller');
          if (isObject(name)) {
            extend(controllers, name);
          } else {
            controllers[name] = constructor;
          }
        };

        /**
         * @ngdoc method
         * @name $controllerProvider#allowGlobals
         * @description If called, allows `$controller` to find controller constructors on `window`
         */
        this.allowGlobals = function () {
          globals = true;
        };

        this.$get = ['$injector', '$window', function ($injector, $window) {

          /**
           * @ngdoc service
           * @name $controller
           * @requires $injector
           *
           * @param {Function|string} constructor If called with a function then it's considered to be the
           *    controller constructor function. Otherwise it's considered to be a string which is used
           *    to retrieve the controller constructor using the following steps:
           *
           *    * check if a controller with given name is registered via `$controllerProvider`
           *    * check if evaluating the string on the current scope returns a constructor
           *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
           *      `window` object (not recommended)
           *
           *    The string can use the `controller as property` syntax, where the controller instance is published
           *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
           *    to work correctly.
           *
           * @param {Object} locals Injection locals for Controller.
           * @return {Object} Instance of given controller.
           *
           * @description
           * `$controller` service is responsible for instantiating controllers.
           *
           * It's just a simple call to {@link auto.$injector $injector}, but extracted into
           * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
           */
          return function $controller(expression, locals, later, ident) {
            // PRIVATE API:
            //   param `later` --- indicates that the controller's constructor is invoked at a later time.
            //                     If true, $controller will allocate the object with the correct
            //                     prototype chain, but will not invoke the controller until a returned
            //                     callback is invoked.
            //   param `ident` --- An optional label which overrides the label parsed from the controller
            //                     expression, if any.
            var instance, match, constructor, identifier;
            later = later === true;
            if (ident && isString(ident)) {
              identifier = ident;
            }

            if (isString(expression)) {
              match = expression.match(CNTRL_REG);
              if (!match) {
                throw $controllerMinErr('ctrlfmt', "Badly formed controller string '{0}'. " + "Must match `__name__ as __id__` or `__name__`.", expression);
              }
              constructor = match[1], identifier = identifier || match[3];
              expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || (globals ? getter($window, constructor, true) : undefined);

              assertArgFn(expression, constructor, true);
            }

            if (later) {
              // Instantiate controller later:
              // This machinery is used to create an instance of the object before calling the
              // controller's constructor itself.
              //
              // This allows properties to be added to the controller before the constructor is
              // invoked. Primarily, this is used for isolate scope bindings in $compile.
              //
              // This feature is not intended for use by applications, and is thus not documented
              // publicly.
              // Object creation: http://jsperf.com/create-constructor/2
              var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
              instance = Object.create(controllerPrototype || null);

              if (identifier) {
                addIdentifier(locals, identifier, instance, constructor || expression.name);
              }

              var instantiate;
              return instantiate = extend(function $controllerInit() {
                var result = $injector.invoke(expression, instance, locals, constructor);
                if (result !== instance && (isObject(result) || isFunction(result))) {
                  instance = result;
                  if (identifier) {
                    // If result changed, re-assign controllerAs value to scope.
                    addIdentifier(locals, identifier, instance, constructor || expression.name);
                  }
                }
                return instance;
              }, {
                instance: instance,
                identifier: identifier
              });
            }

            instance = $injector.instantiate(expression, locals, constructor);

            if (identifier) {
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }

            return instance;
          };

          function addIdentifier(locals, identifier, instance, name) {
            if (!(locals && isObject(locals.$scope))) {
              throw minErr('$controller')('noscp', "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
            }

            locals.$scope[identifier] = instance;
          }
        }];
      }

      /**
       * @ngdoc service
       * @name $document
       * @requires $window
       *
       * @description
       * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
       *
       * @example
         <example module="documentExample">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <p>$document title: <b ng-bind="title"></b></p>
               <p>window.document title: <b ng-bind="windowTitle"></b></p>
             </div>
           </file>
           <file name="script.js">
             angular.module('documentExample', [])
               .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
                 $scope.title = $document[0].title;
                 $scope.windowTitle = angular.element(window.document)[0].title;
               }]);
           </file>
         </example>
       */
      function $DocumentProvider() {
        this.$get = ['$window', function (window) {
          return jqLite(window.document);
        }];
      }

      /**
       * @ngdoc service
       * @name $exceptionHandler
       * @requires ng.$log
       *
       * @description
       * Any uncaught exception in angular expressions is delegated to this service.
       * The default implementation simply delegates to `$log.error` which logs it into
       * the browser console.
       *
       * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
       * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
       *
       * ## Example:
       *
       * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
       * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
       * of `$log.error()`.
       *
       * ```js
       *   angular.
       *     module('exceptionOverwrite', []).
       *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
       *       return function myExceptionHandler(exception, cause) {
       *         logErrorsToBackend(exception, cause);
       *         $log.warn(exception, cause);
       *       };
       *     }]);
       * ```
       *
       * <hr />
       * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
       * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
       * (unless executed during a digest).
       *
       * If you wish, you can manually delegate exceptions, e.g.
       * `try { ... } catch(e) { $exceptionHandler(e); }`
       *
       * @param {Error} exception Exception associated with the error.
       * @param {string=} cause Optional information about the context in which
       *       the error was thrown.
       *
       */
      function $ExceptionHandlerProvider() {
        this.$get = ['$log', function ($log) {
          return function (exception, cause) {
            $log.error.apply($log, arguments);
          };
        }];
      }

      var $$ForceReflowProvider = function () {
        this.$get = ['$document', function ($document) {
          return function (domNode) {
            //the line below will force the browser to perform a repaint so
            //that all the animated elements within the animation frame will
            //be properly updated and drawn on screen. This is required to
            //ensure that the preparation animation is properly flushed so that
            //the active state picks up from there. DO NOT REMOVE THIS LINE.
            //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
            //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
            //WILL TAKE YEARS AWAY FROM YOUR LIFE.
            if (domNode) {
              if (!domNode.nodeType && domNode instanceof jqLite) {
                domNode = domNode[0];
              }
            } else {
              domNode = $document[0].body;
            }
            return domNode.offsetWidth + 1;
          };
        }];
      };

      var APPLICATION_JSON = 'application/json';
      var CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': APPLICATION_JSON + ';charset=utf-8' };
      var JSON_START = /^\[|^\{(?!\{)/;
      var JSON_ENDS = {
        '[': /]$/,
        '{': /}$/
      };
      var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
      var $httpMinErr = minErr('$http');
      var $httpMinErrLegacyFn = function (method) {
        return function () {
          throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
        };
      };

      function serializeValue(v) {
        if (isObject(v)) {
          return isDate(v) ? v.toISOString() : toJson(v);
        }
        return v;
      }

      function $HttpParamSerializerProvider() {
        /**
         * @ngdoc service
         * @name $httpParamSerializer
         * @description
         *
         * Default {@link $http `$http`} params serializer that converts objects to strings
         * according to the following rules:
         *
         * * `{'foo': 'bar'}` results in `foo=bar`
         * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
         * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
         * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
         *
         * Note that serializer will sort the request parameters alphabetically.
         * */

        this.$get = function () {
          return function ngParamSerializer(params) {
            if (!params) return '';
            var parts = [];
            forEachSorted(params, function (value, key) {
              if (value === null || isUndefined(value)) return;
              if (isArray(value)) {
                forEach(value, function (v) {
                  parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(v)));
                });
              } else {
                parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
              }
            });

            return parts.join('&');
          };
        };
      }

      function $HttpParamSerializerJQLikeProvider() {
        /**
         * @ngdoc service
         * @name $httpParamSerializerJQLike
         * @description
         *
         * Alternative {@link $http `$http`} params serializer that follows
         * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
         * The serializer will also sort the params alphabetically.
         *
         * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
         *
         * ```js
         * $http({
         *   url: myUrl,
         *   method: 'GET',
         *   params: myParams,
         *   paramSerializer: '$httpParamSerializerJQLike'
         * });
         * ```
         *
         * It is also possible to set it as the default `paramSerializer` in the
         * {@link $httpProvider#defaults `$httpProvider`}.
         *
         * Additionally, you can inject the serializer and use it explicitly, for example to serialize
         * form data for submission:
         *
         * ```js
         * .controller(function($http, $httpParamSerializerJQLike) {
         *   //...
         *
         *   $http({
         *     url: myUrl,
         *     method: 'POST',
         *     data: $httpParamSerializerJQLike(myData),
         *     headers: {
         *       'Content-Type': 'application/x-www-form-urlencoded'
         *     }
         *   });
         *
         * });
         * ```
         *
         * */
        this.$get = function () {
          return function jQueryLikeParamSerializer(params) {
            if (!params) return '';
            var parts = [];
            serialize(params, '', true);
            return parts.join('&');

            function serialize(toSerialize, prefix, topLevel) {
              if (toSerialize === null || isUndefined(toSerialize)) return;
              if (isArray(toSerialize)) {
                forEach(toSerialize, function (value, index) {
                  serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
                });
              } else if (isObject(toSerialize) && !isDate(toSerialize)) {
                forEachSorted(toSerialize, function (value, key) {
                  serialize(value, prefix + (topLevel ? '' : '[') + key + (topLevel ? '' : ']'));
                });
              } else {
                parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
              }
            }
          };
        };
      }

      function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
          // Strip json vulnerability protection prefix and trim whitespace
          var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

          if (tempData) {
            var contentType = headers('Content-Type');
            if (contentType && contentType.indexOf(APPLICATION_JSON) === 0 || isJsonLike(tempData)) {
              data = fromJson(tempData);
            }
          }
        }

        return data;
      }

      function isJsonLike(str) {
        var jsonStart = str.match(JSON_START);
        return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
      }

      /**
       * Parse headers into key value object
       *
       * @param {string} headers Raw headers as a string
       * @returns {Object} Parsed headers as key value object
       */
      function parseHeaders(headers) {
        var parsed = createMap(),
            i;

        function fillInParsed(key, val) {
          if (key) {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }

        if (isString(headers)) {
          forEach(headers.split('\n'), function (line) {
            i = line.indexOf(':');
            fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
          });
        } else if (isObject(headers)) {
          forEach(headers, function (headerVal, headerKey) {
            fillInParsed(lowercase(headerKey), trim(headerVal));
          });
        }

        return parsed;
      }

      /**
       * Returns a function that provides access to parsed headers.
       *
       * Headers are lazy parsed when first requested.
       * @see parseHeaders
       *
       * @param {(string|Object)} headers Headers to provide access to.
       * @returns {function(string=)} Returns a getter function which if called with:
       *
       *   - if called with single an argument returns a single header value or null
       *   - if called with no arguments returns an object containing all headers.
       */
      function headersGetter(headers) {
        var headersObj;

        return function (name) {
          if (!headersObj) headersObj = parseHeaders(headers);

          if (name) {
            var value = headersObj[lowercase(name)];
            if (value === void 0) {
              value = null;
            }
            return value;
          }

          return headersObj;
        };
      }

      /**
       * Chain all given functions
       *
       * This function is used for both request and response transforming
       *
       * @param {*} data Data to transform.
       * @param {function(string=)} headers HTTP headers getter fn.
       * @param {number} status HTTP status code of the response.
       * @param {(Function|Array.<Function>)} fns Function or an array of functions.
       * @returns {*} Transformed data.
       */
      function transformData(data, headers, status, fns) {
        if (isFunction(fns)) {
          return fns(data, headers, status);
        }

        forEach(fns, function (fn) {
          data = fn(data, headers, status);
        });

        return data;
      }

      function isSuccess(status) {
        return 200 <= status && status < 300;
      }

      /**
       * @ngdoc provider
       * @name $httpProvider
       * @description
       * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
       * */
      function $HttpProvider() {
        /**
         * @ngdoc property
         * @name $httpProvider#defaults
         * @description
         *
         * Object containing default values for all {@link ng.$http $http} requests.
         *
         * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
         * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
         * by default. See {@link $http#caching $http Caching} for more information.
         *
         * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
         * Defaults value is `'XSRF-TOKEN'`.
         *
         * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
         * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
         *
         * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
         * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
         * setting default headers.
         *     - **`defaults.headers.common`**
         *     - **`defaults.headers.post`**
         *     - **`defaults.headers.put`**
         *     - **`defaults.headers.patch`**
         *
         *
         * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
         *  used to the prepare string representation of request parameters (specified as an object).
         *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
         *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
         *
         **/
        var defaults = this.defaults = {
          // transform incoming response data
          transformResponse: [defaultHttpResponseTransform],

          // transform outgoing request data
          transformRequest: [function (d) {
            return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
          }],

          // default headers
          headers: {
            common: {
              'Accept': 'application/json, text/plain, */*'
            },
            post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
            put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
            patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
          },

          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',

          paramSerializer: '$httpParamSerializer'
        };

        var useApplyAsync = false;
        /**
         * @ngdoc method
         * @name $httpProvider#useApplyAsync
         * @description
         *
         * Configure $http service to combine processing of multiple http responses received at around
         * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
         * significant performance improvement for bigger applications that make many HTTP requests
         * concurrently (common during application bootstrap).
         *
         * Defaults to false. If no value is specified, returns the current configured value.
         *
         * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
         *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
         *    to load and share the same digest cycle.
         *
         * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
         *    otherwise, returns the current configured value.
         **/
        this.useApplyAsync = function (value) {
          if (isDefined(value)) {
            useApplyAsync = !!value;
            return this;
          }
          return useApplyAsync;
        };

        var useLegacyPromise = true;
        /**
         * @ngdoc method
         * @name $httpProvider#useLegacyPromiseExtensions
         * @description
         *
         * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
         * This should be used to make sure that applications work without these methods.
         *
         * Defaults to true. If no value is specified, returns the current configured value.
         *
         * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
         *
         * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
         *    otherwise, returns the current configured value.
         **/
        this.useLegacyPromiseExtensions = function (value) {
          if (isDefined(value)) {
            useLegacyPromise = !!value;
            return this;
          }
          return useLegacyPromise;
        };

        /**
         * @ngdoc property
         * @name $httpProvider#interceptors
         * @description
         *
         * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
         * pre-processing of request or postprocessing of responses.
         *
         * These service factories are ordered by request, i.e. they are applied in the same order as the
         * array, on request, but reverse order, on response.
         *
         * {@link ng.$http#interceptors Interceptors detailed info}
         **/
        var interceptorFactories = this.interceptors = [];

        this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector', function ($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

          var defaultCache = $cacheFactory('$http');

          /**
           * Make sure that default param serializer is exposed as a function
           */
          defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

          /**
           * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
           * The reversal is needed so that we can build up the interception chain around the
           * server request.
           */
          var reversedInterceptors = [];

          forEach(interceptorFactories, function (interceptorFactory) {
            reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
          });

          /**
           * @ngdoc service
           * @kind function
           * @name $http
           * @requires ng.$httpBackend
           * @requires $cacheFactory
           * @requires $rootScope
           * @requires $q
           * @requires $injector
           *
           * @description
           * The `$http` service is a core Angular service that facilitates communication with the remote
           * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
           * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
           *
           * For unit testing applications that use `$http` service, see
           * {@link ngMock.$httpBackend $httpBackend mock}.
           *
           * For a higher level of abstraction, please check out the {@link ngResource.$resource
           * $resource} service.
           *
           * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
           * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
           * it is important to familiarize yourself with these APIs and the guarantees they provide.
           *
           *
           * ## General usage
           * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
           * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
           *
           * ```js
           *   // Simple GET request example:
           *   $http({
           *     method: 'GET',
           *     url: '/someUrl'
           *   }).then(function successCallback(response) {
           *       // this callback will be called asynchronously
           *       // when the response is available
           *     }, function errorCallback(response) {
           *       // called asynchronously if an error occurs
           *       // or server returns response with an error status.
           *     });
           * ```
           *
           * The response object has these properties:
           *
           *   - **data** – `{string|Object}` – The response body transformed with the transform
           *     functions.
           *   - **status** – `{number}` – HTTP status code of the response.
           *   - **headers** – `{function([headerName])}` – Header getter function.
           *   - **config** – `{Object}` – The configuration object that was used to generate the request.
           *   - **statusText** – `{string}` – HTTP status text of the response.
           *
           * A response status code between 200 and 299 is considered a success status and will result in
           * the success callback being called. Any response status code outside of that range is
           * considered an error status and will result in the error callback being called.
           * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
           * aborted, e.g. using a `config.timeout`.
           * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
           * that the outcome (success or error) will be determined by the final response status code.
           *
           *
           * ## Shortcut methods
           *
           * Shortcut methods are also available. All shortcut methods require passing in the URL, and
           * request data must be passed in for POST/PUT requests. An optional config can be passed as the
           * last argument.
           *
           * ```js
           *   $http.get('/someUrl', config).then(successCallback, errorCallback);
           *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
           * ```
           *
           * Complete list of shortcut methods:
           *
           * - {@link ng.$http#get $http.get}
           * - {@link ng.$http#head $http.head}
           * - {@link ng.$http#post $http.post}
           * - {@link ng.$http#put $http.put}
           * - {@link ng.$http#delete $http.delete}
           * - {@link ng.$http#jsonp $http.jsonp}
           * - {@link ng.$http#patch $http.patch}
           *
           *
           * ## Writing Unit Tests that use $http
           * When unit testing (using {@link ngMock ngMock}), it is necessary to call
           * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
           * request using trained responses.
           *
           * ```
           * $httpBackend.expectGET(...);
           * $http.get(...);
           * $httpBackend.flush();
           * ```
           *
           * ## Deprecation Notice
           * <div class="alert alert-danger">
           *   The `$http` legacy promise methods `success` and `error` have been deprecated.
           *   Use the standard `then` method instead.
           *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
           *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
           * </div>
           *
           * ## Setting HTTP Headers
           *
           * The $http service will automatically add certain HTTP headers to all requests. These defaults
           * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
           * object, which currently contains this default configuration:
           *
           * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
           *   - `Accept: application/json, text/plain, * / *`
           * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
           *   - `Content-Type: application/json`
           * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
           *   - `Content-Type: application/json`
           *
           * To add or overwrite these defaults, simply add or remove a property from these configuration
           * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
           * with the lowercased HTTP method name as the key, e.g.
           * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
           *
           * The defaults can also be set at runtime via the `$http.defaults` object in the same
           * fashion. For example:
           *
           * ```
           * module.run(function($http) {
           *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
           * });
           * ```
           *
           * In addition, you can supply a `headers` property in the config object passed when
           * calling `$http(config)`, which overrides the defaults without changing them globally.
           *
           * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
           * Use the `headers` property, setting the desired header to `undefined`. For example:
           *
           * ```js
           * var req = {
           *  method: 'POST',
           *  url: 'http://example.com',
           *  headers: {
           *    'Content-Type': undefined
           *  },
           *  data: { test: 'test' }
           * }
           *
           * $http(req).then(function(){...}, function(){...});
           * ```
           *
           * ## Transforming Requests and Responses
           *
           * Both requests and responses can be transformed using transformation functions: `transformRequest`
           * and `transformResponse`. These properties can be a single function that returns
           * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
           * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
           *
           * <div class="alert alert-warning">
           * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
           * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
           * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
           * function will be reflected on the scope and in any templates where the object is data-bound.
           * To prevent this, transform functions should have no side-effects.
           * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
           * </div>
           *
           * ### Default Transformations
           *
           * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
           * `defaults.transformResponse` properties. If a request does not provide its own transformations
           * then these will be applied.
           *
           * You can augment or replace the default transformations by modifying these properties by adding to or
           * replacing the array.
           *
           * Angular provides the following default transformations:
           *
           * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
           *
           * - If the `data` property of the request configuration object contains an object, serialize it
           *   into JSON format.
           *
           * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
           *
           *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
           *  - If JSON response is detected, deserialize it using a JSON parser.
           *
           *
           * ### Overriding the Default Transformations Per Request
           *
           * If you wish to override the request/response transformations only for a single request then provide
           * `transformRequest` and/or `transformResponse` properties on the configuration object passed
           * into `$http`.
           *
           * Note that if you provide these properties on the config object the default transformations will be
           * overwritten. If you wish to augment the default transformations then you must include them in your
           * local transformation array.
           *
           * The following code demonstrates adding a new response transformation to be run after the default response
           * transformations have been run.
           *
           * ```js
           * function appendTransform(defaults, transform) {
           *
           *   // We can't guarantee that the default transformation is an array
           *   defaults = angular.isArray(defaults) ? defaults : [defaults];
           *
           *   // Append the new transformation to the defaults
           *   return defaults.concat(transform);
           * }
           *
           * $http({
           *   url: '...',
           *   method: 'GET',
           *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
           *     return doTransform(value);
           *   })
           * });
           * ```
           *
           *
           * ## Caching
           *
           * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
           * set the config.cache value or the default cache value to TRUE or to a cache object (created
           * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
           * precedence over the default cache value.
           *
           * In order to:
           *   * cache all responses - set the default cache value to TRUE or to a cache object
           *   * cache a specific response - set config.cache value to TRUE or to a cache object
           *
           * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
           * then the default `$cacheFactory("$http")` object is used.
           *
           * The default cache value can be set by updating the
           * {@link ng.$http#defaults `$http.defaults.cache`} property or the
           * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
           *
           * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
           * the relevant cache object. The next time the same request is made, the response is returned
           * from the cache without sending a request to the server.
           *
           * Take note that:
           *
           *   * Only GET and JSONP requests are cached.
           *   * The cache key is the request URL including search parameters; headers are not considered.
           *   * Cached responses are returned asynchronously, in the same way as responses from the server.
           *   * If multiple identical requests are made using the same cache, which is not yet populated,
           *     one request will be made to the server and remaining requests will return the same response.
           *   * A cache-control header on the response does not affect if or how responses are cached.
           *
           *
           * ## Interceptors
           *
           * Before you start creating interceptors, be sure to understand the
           * {@link ng.$q $q and deferred/promise APIs}.
           *
           * For purposes of global error handling, authentication, or any kind of synchronous or
           * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
           * able to intercept requests before they are handed to the server and
           * responses before they are handed over to the application code that
           * initiated these requests. The interceptors leverage the {@link ng.$q
           * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
           *
           * The interceptors are service factories that are registered with the `$httpProvider` by
           * adding them to the `$httpProvider.interceptors` array. The factory is called and
           * injected with dependencies (if specified) and returns the interceptor.
           *
           * There are two kinds of interceptors (and two kinds of rejection interceptors):
           *
           *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
           *     modify the `config` object or create a new one. The function needs to return the `config`
           *     object directly, or a promise containing the `config` or a new `config` object.
           *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
           *     resolved with a rejection.
           *   * `response`: interceptors get called with http `response` object. The function is free to
           *     modify the `response` object or create a new one. The function needs to return the `response`
           *     object directly, or as a promise containing the `response` or a new `response` object.
           *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
           *     resolved with a rejection.
           *
           *
           * ```js
           *   // register the interceptor as a service
           *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
           *     return {
           *       // optional method
           *       'request': function(config) {
           *         // do something on success
           *         return config;
           *       },
           *
           *       // optional method
           *      'requestError': function(rejection) {
           *         // do something on error
           *         if (canRecover(rejection)) {
           *           return responseOrNewPromise
           *         }
           *         return $q.reject(rejection);
           *       },
           *
           *
           *
           *       // optional method
           *       'response': function(response) {
           *         // do something on success
           *         return response;
           *       },
           *
           *       // optional method
           *      'responseError': function(rejection) {
           *         // do something on error
           *         if (canRecover(rejection)) {
           *           return responseOrNewPromise
           *         }
           *         return $q.reject(rejection);
           *       }
           *     };
           *   });
           *
           *   $httpProvider.interceptors.push('myHttpInterceptor');
           *
           *
           *   // alternatively, register the interceptor via an anonymous factory
           *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
           *     return {
           *      'request': function(config) {
           *          // same as above
           *       },
           *
           *       'response': function(response) {
           *          // same as above
           *       }
           *     };
           *   });
           * ```
           *
           * ## Security Considerations
           *
           * When designing web applications, consider security threats from:
           *
           * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
           * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
           *
           * Both server and the client must cooperate in order to eliminate these threats. Angular comes
           * pre-configured with strategies that address these issues, but for this to work backend server
           * cooperation is required.
           *
           * ### JSON Vulnerability Protection
           *
           * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
           * allows third party website to turn your JSON resource URL into
           * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
           * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
           * Angular will automatically strip the prefix before processing it as JSON.
           *
           * For example if your server needs to return:
           * ```js
           * ['one','two']
           * ```
           *
           * which is vulnerable to attack, your server can return:
           * ```js
           * )]}',
           * ['one','two']
           * ```
           *
           * Angular will strip the prefix, before processing the JSON.
           *
           *
           * ### Cross Site Request Forgery (XSRF) Protection
           *
           * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
           * which the attacker can trick an authenticated user into unknowingly executing actions on your
           * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
           * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
           * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
           * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
           * The header will not be set for cross-domain requests.
           *
           * To take advantage of this, your server needs to set a token in a JavaScript readable session
           * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
           * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
           * that only JavaScript running on your domain could have sent the request. The token must be
           * unique for each user and must be verifiable by the server (to prevent the JavaScript from
           * making up its own tokens). We recommend that the token is a digest of your site's
           * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
           * for added security.
           *
           * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
           * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
           * or the per-request config object.
           *
           * In order to prevent collisions in environments where multiple Angular apps share the
           * same domain or subdomain, we recommend that each application uses unique cookie name.
           *
           * @param {object} config Object describing the request to be made and how it should be
           *    processed. The object has following properties:
           *
           *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
           *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
           *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
           *      with the `paramSerializer` and appended as GET parameters.
           *    - **data** – `{string|Object}` – Data to be sent as the request message data.
           *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
           *      HTTP headers to send to the server. If the return value of a function is null, the
           *      header will not be sent. Functions accept a config object as an argument.
           *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
           *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
           *      The handler will be called in the context of a `$apply` block.
           *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
           *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
           *      The handler will be called in the context of a `$apply` block.
           *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
           *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
           *    - **transformRequest** –
           *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
           *      transform function or an array of such functions. The transform function takes the http
           *      request body and headers and returns its transformed (typically serialized) version.
           *      See {@link ng.$http#overriding-the-default-transformations-per-request
           *      Overriding the Default Transformations}
           *    - **transformResponse** –
           *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
           *      transform function or an array of such functions. The transform function takes the http
           *      response body, headers and status and returns its transformed (typically deserialized) version.
           *      See {@link ng.$http#overriding-the-default-transformations-per-request
           *      Overriding the Default Transformations}
           *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
           *      prepare the string representation of request parameters (specified as an object).
           *      If specified as string, it is interpreted as function registered with the
           *      {@link $injector $injector}, which means you can create your own serializer
           *      by registering it as a {@link auto.$provide#service service}.
           *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
           *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
           *    - **cache** – `{boolean|Object}` – A boolean value or object created with
           *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
           *      See {@link $http#caching $http Caching} for more information.
           *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
           *      that should abort the request when resolved.
           *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
           *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
           *      for more information.
           *    - **responseType** - `{string}` - see
           *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
           *
           * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
           *                        when the request succeeds or fails.
           *
           *
           * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
           *   requests. This is primarily meant to be used for debugging purposes.
           *
           *
           * @example
          <example module="httpExample">
          <file name="index.html">
          <div ng-controller="FetchController">
          <select ng-model="method" aria-label="Request method">
            <option>GET</option>
            <option>JSONP</option>
          </select>
          <input type="text" ng-model="url" size="80" aria-label="URL" />
          <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
          <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
          <button id="samplejsonpbtn"
            ng-click="updateModel('JSONP',
                          'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
            Sample JSONP
          </button>
          <button id="invalidjsonpbtn"
            ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
              Invalid JSONP
            </button>
          <pre>http status code: {{status}}</pre>
          <pre>http response data: {{data}}</pre>
          </div>
          </file>
          <file name="script.js">
          angular.module('httpExample', [])
          .controller('FetchController', ['$scope', '$http', '$templateCache',
            function($scope, $http, $templateCache) {
              $scope.method = 'GET';
              $scope.url = 'http-hello.html';
               $scope.fetch = function() {
                $scope.code = null;
                $scope.response = null;
                 $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
                  then(function(response) {
                    $scope.status = response.status;
                    $scope.data = response.data;
                  }, function(response) {
                    $scope.data = response.data || "Request failed";
                    $scope.status = response.status;
                });
              };
               $scope.updateModel = function(method, url) {
                $scope.method = method;
                $scope.url = url;
              };
            }]);
          </file>
          <file name="http-hello.html">
          Hello, $http!
          </file>
          <file name="protractor.js" type="protractor">
          var status = element(by.binding('status'));
          var data = element(by.binding('data'));
          var fetchBtn = element(by.id('fetchbtn'));
          var sampleGetBtn = element(by.id('samplegetbtn'));
          var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
          var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
          it('should make an xhr GET request', function() {
          sampleGetBtn.click();
          fetchBtn.click();
          expect(status.getText()).toMatch('200');
          expect(data.getText()).toMatch(/Hello, \$http!/);
          });
          // Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
          // it('should make a JSONP request to angularjs.org', function() {
          //   sampleJsonpBtn.click();
          //   fetchBtn.click();
          //   expect(status.getText()).toMatch('200');
          //   expect(data.getText()).toMatch(/Super Hero!/);
          // });
          it('should make JSONP request to invalid URL and invoke the error handler',
            function() {
          invalidJsonpBtn.click();
          fetchBtn.click();
          expect(status.getText()).toMatch('0');
          expect(data.getText()).toMatch('Request failed');
          });
          </file>
          </example>
           */
          function $http(requestConfig) {

            if (!isObject(requestConfig)) {
              throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
            }

            if (!isString(requestConfig.url)) {
              throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
            }

            var config = extend({
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse,
              paramSerializer: defaults.paramSerializer
            }, requestConfig);

            config.headers = mergeHeaders(requestConfig);
            config.method = uppercase(config.method);
            config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;

            var requestInterceptors = [];
            var responseInterceptors = [];
            var promise = $q.when(config);

            // apply interceptors
            forEach(reversedInterceptors, function (interceptor) {
              if (interceptor.request || interceptor.requestError) {
                requestInterceptors.unshift(interceptor.request, interceptor.requestError);
              }
              if (interceptor.response || interceptor.responseError) {
                responseInterceptors.push(interceptor.response, interceptor.responseError);
              }
            });

            promise = chainInterceptors(promise, requestInterceptors);
            promise = promise.then(serverRequest);
            promise = chainInterceptors(promise, responseInterceptors);

            if (useLegacyPromise) {
              promise.success = function (fn) {
                assertArgFn(fn, 'fn');

                promise.then(function (response) {
                  fn(response.data, response.status, response.headers, config);
                });
                return promise;
              };

              promise.error = function (fn) {
                assertArgFn(fn, 'fn');

                promise.then(null, function (response) {
                  fn(response.data, response.status, response.headers, config);
                });
                return promise;
              };
            } else {
              promise.success = $httpMinErrLegacyFn('success');
              promise.error = $httpMinErrLegacyFn('error');
            }

            return promise;

            function chainInterceptors(promise, interceptors) {
              for (var i = 0, ii = interceptors.length; i < ii;) {
                var thenFn = interceptors[i++];
                var rejectFn = interceptors[i++];

                promise = promise.then(thenFn, rejectFn);
              }

              interceptors.length = 0;

              return promise;
            }

            function executeHeaderFns(headers, config) {
              var headerContent,
                  processedHeaders = {};

              forEach(headers, function (headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn(config);
                  if (headerContent != null) {
                    processedHeaders[header] = headerContent;
                  }
                } else {
                  processedHeaders[header] = headerFn;
                }
              });

              return processedHeaders;
            }

            function mergeHeaders(config) {
              var defHeaders = defaults.headers,
                  reqHeaders = extend({}, config.headers),
                  defHeaderName,
                  lowercaseDefHeaderName,
                  reqHeaderName;

              defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

              // using for-in instead of forEach to avoid unnecessary iteration after header has been found
              defaultHeadersIteration: for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);

                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }

                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }

              // execute if header value is a function for merged headers
              return executeHeaderFns(reqHeaders, shallowCopy(config));
            }

            function serverRequest(config) {
              var headers = config.headers;
              var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

              // strip content-type if data is undefined
              if (isUndefined(reqData)) {
                forEach(headers, function (value, header) {
                  if (lowercase(header) === 'content-type') {
                    delete headers[header];
                  }
                });
              }

              if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
                config.withCredentials = defaults.withCredentials;
              }

              // send request
              return sendReq(config, reqData).then(transformResponse, transformResponse);
            }

            function transformResponse(response) {
              // make a copy since the response must be cacheable
              var resp = extend({}, response);
              resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
              return isSuccess(response.status) ? resp : $q.reject(resp);
            }
          }

          $http.pendingRequests = [];

          /**
           * @ngdoc method
           * @name $http#get
           *
           * @description
           * Shortcut method to perform `GET` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */

          /**
           * @ngdoc method
           * @name $http#delete
           *
           * @description
           * Shortcut method to perform `DELETE` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */

          /**
           * @ngdoc method
           * @name $http#head
           *
           * @description
           * Shortcut method to perform `HEAD` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */

          /**
           * @ngdoc method
           * @name $http#jsonp
           *
           * @description
           * Shortcut method to perform `JSONP` request.
           * If you would like to customise where and how the callbacks are stored then try overriding
           * or decorating the {@link $jsonpCallbacks} service.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request.
           *                     The name of the callback should be the string `JSON_CALLBACK`.
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */
          createShortMethods('get', 'delete', 'head', 'jsonp');

          /**
           * @ngdoc method
           * @name $http#post
           *
           * @description
           * Shortcut method to perform `POST` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {*} data Request content
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */

          /**
           * @ngdoc method
           * @name $http#put
           *
           * @description
           * Shortcut method to perform `PUT` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {*} data Request content
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */

          /**
           * @ngdoc method
           * @name $http#patch
           *
           * @description
           * Shortcut method to perform `PATCH` request.
           *
           * @param {string} url Relative or absolute URL specifying the destination of the request
           * @param {*} data Request content
           * @param {Object=} config Optional configuration object
           * @returns {HttpPromise} Future object
           */
          createShortMethodsWithData('post', 'put', 'patch');

          /**
           * @ngdoc property
           * @name $http#defaults
           *
           * @description
           * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
           * default headers, withCredentials as well as request and response transformations.
           *
           * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
           */
          $http.defaults = defaults;

          return $http;

          function createShortMethods(names) {
            forEach(arguments, function (name) {
              $http[name] = function (url, config) {
                return $http(extend({}, config || {}, {
                  method: name,
                  url: url
                }));
              };
            });
          }

          function createShortMethodsWithData(name) {
            forEach(arguments, function (name) {
              $http[name] = function (url, data, config) {
                return $http(extend({}, config || {}, {
                  method: name,
                  url: url,
                  data: data
                }));
              };
            });
          }

          /**
           * Makes the request.
           *
           * !!! ACCESSES CLOSURE VARS:
           * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
           */
          function sendReq(config, reqData) {
            var deferred = $q.defer(),
                promise = deferred.promise,
                cache,
                cachedResp,
                reqHeaders = config.headers,
                url = buildUrl(config.url, config.paramSerializer(config.params));

            $http.pendingRequests.push(config);
            promise.then(removePendingReq, removePendingReq);

            if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
              cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
            }

            if (cache) {
              cachedResp = cache.get(url);
              if (isDefined(cachedResp)) {
                if (isPromiseLike(cachedResp)) {
                  // cached request has already been sent, but there is no response yet
                  cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
                } else {
                  // serving from cache
                  if (isArray(cachedResp)) {
                    resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                  } else {
                    resolvePromise(cachedResp, 200, {}, 'OK');
                  }
                }
              } else {
                // put the promise for the non-transformed response into cache as a placeholder
                cache.put(url, promise);
              }
            }

            // if we won't have the response in cache, set the xsrf headers and
            // send the request to the backend
            if (isUndefined(cachedResp)) {
              var xsrfValue = urlIsSameOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
              if (xsrfValue) {
                reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
              }

              $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType, createApplyHandlers(config.eventHandlers), createApplyHandlers(config.uploadEventHandlers));
            }

            return promise;

            function createApplyHandlers(eventHandlers) {
              if (eventHandlers) {
                var applyHandlers = {};
                forEach(eventHandlers, function (eventHandler, key) {
                  applyHandlers[key] = function (event) {
                    if (useApplyAsync) {
                      $rootScope.$applyAsync(callEventHandler);
                    } else if ($rootScope.$$phase) {
                      callEventHandler();
                    } else {
                      $rootScope.$apply(callEventHandler);
                    }

                    function callEventHandler() {
                      eventHandler(event);
                    }
                  };
                });
                return applyHandlers;
              }
            }

            /**
             * Callback registered to $httpBackend():
             *  - caches the response if desired
             *  - resolves the raw $http promise
             *  - calls $apply
             */
            function done(status, response, headersString, statusText) {
              if (cache) {
                if (isSuccess(status)) {
                  cache.put(url, [status, response, parseHeaders(headersString), statusText]);
                } else {
                  // remove promise from the cache
                  cache.remove(url);
                }
              }

              function resolveHttpPromise() {
                resolvePromise(response, status, headersString, statusText);
              }

              if (useApplyAsync) {
                $rootScope.$applyAsync(resolveHttpPromise);
              } else {
                resolveHttpPromise();
                if (!$rootScope.$$phase) $rootScope.$apply();
              }
            }

            /**
             * Resolves the raw $http promise.
             */
            function resolvePromise(response, status, headers, statusText) {
              //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
              status = status >= -1 ? status : 0;

              (isSuccess(status) ? deferred.resolve : deferred.reject)({
                data: response,
                status: status,
                headers: headersGetter(headers),
                config: config,
                statusText: statusText
              });
            }

            function resolvePromiseWithResult(result) {
              resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
            }

            function removePendingReq() {
              var idx = $http.pendingRequests.indexOf(config);
              if (idx !== -1) $http.pendingRequests.splice(idx, 1);
            }
          }

          function buildUrl(url, serializedParams) {
            if (serializedParams.length > 0) {
              url += (url.indexOf('?') == -1 ? '?' : '&') + serializedParams;
            }
            return url;
          }
        }];
      }

      /**
       * @ngdoc service
       * @name $xhrFactory
       *
       * @description
       * Factory function used to create XMLHttpRequest objects.
       *
       * Replace or decorate this service to create your own custom XMLHttpRequest objects.
       *
       * ```
       * angular.module('myApp', [])
       * .factory('$xhrFactory', function() {
       *   return function createXhr(method, url) {
       *     return new window.XMLHttpRequest({mozSystem: true});
       *   };
       * });
       * ```
       *
       * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
       * @param {string} url URL of the request.
       */
      function $xhrFactoryProvider() {
        this.$get = function () {
          return function createXhr() {
            return new window.XMLHttpRequest();
          };
        };
      }

      /**
       * @ngdoc service
       * @name $httpBackend
       * @requires $jsonpCallbacks
       * @requires $document
       * @requires $xhrFactory
       *
       * @description
       * HTTP backend used by the {@link ng.$http service} that delegates to
       * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
       *
       * You should never need to use this service directly, instead use the higher-level abstractions:
       * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
       *
       * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
       * $httpBackend} which can be trained with responses.
       */
      function $HttpBackendProvider() {
        this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function ($browser, $jsonpCallbacks, $document, $xhrFactory) {
          return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
        }];
      }

      function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        // TODO(vojta): fix the signature
        return function (method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
          $browser.$$incOutstandingRequestCount();
          url = url || $browser.url();

          if (lowercase(method) === 'jsonp') {
            var callbackPath = callbacks.createCallback(url);
            var jsonpDone = jsonpReq(url, callbackPath, function (status, text) {
              // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
              var response = status === 200 && callbacks.getResponse(callbackPath);
              completeRequest(callback, status, response, "", text);
              callbacks.removeCallback(callbackPath);
            });
          } else {

            var xhr = createXhr(method, url);

            xhr.open(method, url, true);
            forEach(headers, function (value, key) {
              if (isDefined(value)) {
                xhr.setRequestHeader(key, value);
              }
            });

            xhr.onload = function requestLoaded() {
              var statusText = xhr.statusText || '';

              // responseText is the old-school way of retrieving response (supported by IE9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              var response = 'response' in xhr ? xhr.response : xhr.responseText;

              // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
              var status = xhr.status === 1223 ? 204 : xhr.status;

              // fix status code when it is 0 (0 status is undocumented).
              // Occurs when accessing file resources or on Android 4.1 stock browser
              // while retrieving files from application cache.
              if (status === 0) {
                status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
              }

              completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
            };

            var requestError = function () {
              // The response is always empty
              // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
              completeRequest(callback, -1, null, null, '');
            };

            xhr.onerror = requestError;
            xhr.onabort = requestError;

            forEach(eventHandlers, function (value, key) {
              xhr.addEventListener(key, value);
            });

            forEach(uploadEventHandlers, function (value, key) {
              xhr.upload.addEventListener(key, value);
            });

            if (withCredentials) {
              xhr.withCredentials = true;
            }

            if (responseType) {
              try {
                xhr.responseType = responseType;
              } catch (e) {
                // WebKit added support for the json responseType value on 09/03/2013
                // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
                // known to throw when setting the value "json" as the response type. Other older
                // browsers implementing the responseType
                //
                // The json response type can be ignored if not supported, because JSON payloads are
                // parsed on the client-side regardless.
                if (responseType !== 'json') {
                  throw e;
                }
              }
            }

            xhr.send(isUndefined(post) ? null : post);
          }

          if (timeout > 0) {
            var timeoutId = $browserDefer(timeoutRequest, timeout);
          } else if (isPromiseLike(timeout)) {
            timeout.then(timeoutRequest);
          }

          function timeoutRequest() {
            jsonpDone && jsonpDone();
            xhr && xhr.abort();
          }

          function completeRequest(callback, status, response, headersString, statusText) {
            // cancel timeout and subsequent timeout promise resolution
            if (isDefined(timeoutId)) {
              $browserDefer.cancel(timeoutId);
            }
            jsonpDone = xhr = null;

            callback(status, response, headersString, statusText);
            $browser.$$completeOutstandingRequest(noop);
          }
        };

        function jsonpReq(url, callbackPath, done) {
          url = url.replace('JSON_CALLBACK', callbackPath);
          // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
          // - fetches local scripts via XHR and evals them
          // - adds and immediately removes script elements from the document
          var script = rawDocument.createElement('script'),
              callback = null;
          script.type = "text/javascript";
          script.src = url;
          script.async = true;

          callback = function (event) {
            removeEventListenerFn(script, "load", callback);
            removeEventListenerFn(script, "error", callback);
            rawDocument.body.removeChild(script);
            script = null;
            var status = -1;
            var text = "unknown";

            if (event) {
              if (event.type === "load" && !callbacks.wasCalled(callbackPath)) {
                event = { type: "error" };
              }
              text = event.type;
              status = event.type === "error" ? 404 : 200;
            }

            if (done) {
              done(status, text);
            }
          };

          addEventListenerFn(script, "load", callback);
          addEventListenerFn(script, "error", callback);
          rawDocument.body.appendChild(script);
          return callback;
        }
      }

      var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
      $interpolateMinErr.throwNoconcat = function (text) {
        throw $interpolateMinErr('noconcat', "Error while interpolating: {0}\nStrict Contextual Escaping disallows " + "interpolations that concatenate multiple expressions when a trusted value is " + "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      };

      $interpolateMinErr.interr = function (text, err) {
        return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
      };

      /**
       * @ngdoc provider
       * @name $interpolateProvider
       *
       * @description
       *
       * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
       *
       * <div class="alert alert-danger">
       * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
       * template within a Python Jinja template (or any other template language). Mixing templating
       * languages is **very dangerous**. The embedding template language will not safely escape Angular
       * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
       * security bugs!
       * </div>
       *
       * @example
      <example name="custom-interpolation-markup" module="customInterpolationApp">
      <file name="index.html">
      <script>
        var customInterpolationApp = angular.module('customInterpolationApp', []);
      
        customInterpolationApp.config(function($interpolateProvider) {
          $interpolateProvider.startSymbol('//');
          $interpolateProvider.endSymbol('//');
        });
      
      
        customInterpolationApp.controller('DemoController', function() {
            this.label = "This binding is brought you by // interpolation symbols.";
        });
      </script>
      <div ng-controller="DemoController as demo">
          //demo.label//
      </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should interpolate binding with custom symbols', function() {
          expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
        });
      </file>
      </example>
       */
      function $InterpolateProvider() {
        var startSymbol = '{{';
        var endSymbol = '}}';

        /**
         * @ngdoc method
         * @name $interpolateProvider#startSymbol
         * @description
         * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
         *
         * @param {string=} value new value to set the starting symbol to.
         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
         */
        this.startSymbol = function (value) {
          if (value) {
            startSymbol = value;
            return this;
          } else {
            return startSymbol;
          }
        };

        /**
         * @ngdoc method
         * @name $interpolateProvider#endSymbol
         * @description
         * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
         *
         * @param {string=} value new value to set the ending symbol to.
         * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
         */
        this.endSymbol = function (value) {
          if (value) {
            endSymbol = value;
            return this;
          } else {
            return endSymbol;
          }
        };

        this.$get = ['$parse', '$exceptionHandler', '$sce', function ($parse, $exceptionHandler, $sce) {
          var startSymbolLength = startSymbol.length,
              endSymbolLength = endSymbol.length,
              escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
              escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

          function escape(ch) {
            return '\\\\\\' + ch;
          }

          function unescapeText(text) {
            return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
          }

          function stringify(value) {
            if (value == null) {
              // null || undefined
              return '';
            }
            switch (typeof value) {
              case 'string':
                break;
              case 'number':
                value = '' + value;
                break;
              default:
                value = toJson(value);
            }

            return value;
          }

          //TODO: this is the same as the constantWatchDelegate in parse.js
          function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
            var unwatch;
            return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
              unwatch();
              return constantInterp(scope);
            }, listener, objectEquality);
          }

          /**
           * @ngdoc service
           * @name $interpolate
           * @kind function
           *
           * @requires $parse
           * @requires $sce
           *
           * @description
           *
           * Compiles a string with markup into an interpolation function. This service is used by the
           * HTML {@link ng.$compile $compile} service for data binding. See
           * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
           * interpolation markup.
           *
           *
           * ```js
           *   var $interpolate = ...; // injected
           *   var exp = $interpolate('Hello {{name | uppercase}}!');
           *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
           * ```
           *
           * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
           * `true`, the interpolation function will return `undefined` unless all embedded expressions
           * evaluate to a value other than `undefined`.
           *
           * ```js
           *   var $interpolate = ...; // injected
           *   var context = {greeting: 'Hello', name: undefined };
           *
           *   // default "forgiving" mode
           *   var exp = $interpolate('{{greeting}} {{name}}!');
           *   expect(exp(context)).toEqual('Hello !');
           *
           *   // "allOrNothing" mode
           *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
           *   expect(exp(context)).toBeUndefined();
           *   context.name = 'Angular';
           *   expect(exp(context)).toEqual('Hello Angular!');
           * ```
           *
           * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
           *
           * #### Escaped Interpolation
           * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
           * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
           * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
           * or binding.
           *
           * This enables web-servers to prevent script injection attacks and defacing attacks, to some
           * degree, while also enabling code examples to work without relying on the
           * {@link ng.directive:ngNonBindable ngNonBindable} directive.
           *
           * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
           * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
           * interpolation start/end markers with their escaped counterparts.**
           *
           * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
           * output when the $interpolate service processes the text. So, for HTML elements interpolated
           * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
           * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
           * this is typically useful only when user-data is used in rendering a template from the server, or
           * when otherwise untrusted data is used by a directive.
           *
           * <example>
           *  <file name="index.html">
           *    <div ng-init="username='A user'">
           *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
           *        </p>
           *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
           *        application, but fails to accomplish their task, because the server has correctly
           *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
           *        characters.</p>
           *      <p>Instead, the result of the attempted script injection is visible, and can be removed
           *        from the database by an administrator.</p>
           *    </div>
           *  </file>
           * </example>
           *
           * @knownIssue
           * It is currently not possible for an interpolated expression to contain the interpolation end
           * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
           * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
           *
           * @knownIssue
           * All directives and components must use the standard `{{` `}}` interpolation symbols
           * in their templates. If you change the application interpolation symbols the {@link $compile}
           * service will attempt to denormalize the standard symbols to the custom symbols.
           * The denormalization process is not clever enough to know not to replace instances of the standard
           * symbols where they would not normally be treated as interpolation symbols. For example in the following
           * code snippet the closing braces of the literal object will get incorrectly denormalized:
           *
           * ```
           * <div data-context='{"context":{"id":3,"type":"page"}}">
           * ```
           *
           * The workaround is to ensure that such instances are separated by whitespace:
           * ```
           * <div data-context='{"context":{"id":3,"type":"page"} }">
           * ```
           *
           * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
           *
           * @param {string} text The text with markup to interpolate.
           * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
           *    embedded expression in order to return an interpolation function. Strings with no
           *    embedded expression will return null for the interpolation function.
           * @param {string=} trustedContext when provided, the returned function passes the interpolated
           *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
           *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
           *    provides Strict Contextual Escaping for details.
           * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
           *    unless all embedded expressions evaluate to a value other than `undefined`.
           * @returns {function(context)} an interpolation function which is used to compute the
           *    interpolated string. The function has these parameters:
           *
           * - `context`: evaluation context for all expressions embedded in the interpolated text
           */
          function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
            // Provide a quick exit and simplified result function for text with no interpolation
            if (!text.length || text.indexOf(startSymbol) === -1) {
              var constantInterp;
              if (!mustHaveExpression) {
                var unescapedText = unescapeText(text);
                constantInterp = valueFn(unescapedText);
                constantInterp.exp = text;
                constantInterp.expressions = [];
                constantInterp.$$watchDelegate = constantWatchDelegate;
              }
              return constantInterp;
            }

            allOrNothing = !!allOrNothing;
            var startIndex,
                endIndex,
                index = 0,
                expressions = [],
                parseFns = [],
                textLength = text.length,
                exp,
                concat = [],
                expressionPositions = [];

            while (index < textLength) {
              if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
                if (index !== startIndex) {
                  concat.push(unescapeText(text.substring(index, startIndex)));
                }
                exp = text.substring(startIndex + startSymbolLength, endIndex);
                expressions.push(exp);
                parseFns.push($parse(exp, parseStringifyInterceptor));
                index = endIndex + endSymbolLength;
                expressionPositions.push(concat.length);
                concat.push('');
              } else {
                // we did not find an interpolation, so we have to add the remainder to the separators array
                if (index !== textLength) {
                  concat.push(unescapeText(text.substring(index)));
                }
                break;
              }
            }

            // Concatenating expressions makes it hard to reason about whether some combination of
            // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
            // single expression be used for iframe[src], object[src], etc., we ensure that the value
            // that's used is assigned or constructed by some JS code somewhere that is more testable or
            // make it obvious that you bound the value to some user controlled value.  This helps reduce
            // the load when auditing for XSS issues.
            if (trustedContext && concat.length > 1) {
              $interpolateMinErr.throwNoconcat(text);
            }

            if (!mustHaveExpression || expressions.length) {
              var compute = function (values) {
                for (var i = 0, ii = expressions.length; i < ii; i++) {
                  if (allOrNothing && isUndefined(values[i])) return;
                  concat[expressionPositions[i]] = values[i];
                }
                return concat.join('');
              };

              var getValue = function (value) {
                return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
              };

              return extend(function interpolationFn(context) {
                var i = 0;
                var ii = expressions.length;
                var values = new Array(ii);

                try {
                  for (; i < ii; i++) {
                    values[i] = parseFns[i](context);
                  }

                  return compute(values);
                } catch (err) {
                  $exceptionHandler($interpolateMinErr.interr(text, err));
                }
              }, {
                // all of these properties are undocumented for now
                exp: text, //just for compatibility with regular watchers created via $watch
                expressions: expressions,
                $$watchDelegate: function (scope, listener) {
                  var lastValue;
                  return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                    var currValue = compute(values);
                    if (isFunction(listener)) {
                      listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                    }
                    lastValue = currValue;
                  });
                }
              });
            }

            function parseStringifyInterceptor(value) {
              try {
                value = getValue(value);
                return allOrNothing && !isDefined(value) ? value : stringify(value);
              } catch (err) {
                $exceptionHandler($interpolateMinErr.interr(text, err));
              }
            }
          }

          /**
           * @ngdoc method
           * @name $interpolate#startSymbol
           * @description
           * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
           *
           * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
           * the symbol.
           *
           * @returns {string} start symbol.
           */
          $interpolate.startSymbol = function () {
            return startSymbol;
          };

          /**
           * @ngdoc method
           * @name $interpolate#endSymbol
           * @description
           * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
           *
           * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
           * the symbol.
           *
           * @returns {string} end symbol.
           */
          $interpolate.endSymbol = function () {
            return endSymbol;
          };

          return $interpolate;
        }];
      }

      function $IntervalProvider() {
        this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser', function ($rootScope, $window, $q, $$q, $browser) {
          var intervals = {};

          /**
           * @ngdoc service
           * @name $interval
           *
           * @description
           * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
           * milliseconds.
           *
           * The return value of registering an interval function is a promise. This promise will be
           * notified upon each tick of the interval, and will be resolved after `count` iterations, or
           * run indefinitely if `count` is not defined. The value of the notification will be the
           * number of iterations that have run.
           * To cancel an interval, call `$interval.cancel(promise)`.
           *
           * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
           * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
           * time.
           *
           * <div class="alert alert-warning">
           * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
           * with them.  In particular they are not automatically destroyed when a controller's scope or a
           * directive's element are destroyed.
           * You should take this into consideration and make sure to always cancel the interval at the
           * appropriate moment.  See the example below for more details on how and when to do this.
           * </div>
           *
           * @param {function()} fn A function that should be called repeatedly.
           * @param {number} delay Number of milliseconds between each function call.
           * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
           *   indefinitely.
           * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
           *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
           * @param {...*=} Pass additional parameters to the executed function.
           * @returns {promise} A promise which will be notified on each iteration.
           *
           * @example
           * <example module="intervalExample">
           * <file name="index.html">
           *   <script>
           *     angular.module('intervalExample', [])
           *       .controller('ExampleController', ['$scope', '$interval',
           *         function($scope, $interval) {
           *           $scope.format = 'M/d/yy h:mm:ss a';
           *           $scope.blood_1 = 100;
           *           $scope.blood_2 = 120;
           *
           *           var stop;
           *           $scope.fight = function() {
           *             // Don't start a new fight if we are already fighting
           *             if ( angular.isDefined(stop) ) return;
           *
           *             stop = $interval(function() {
           *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
           *                 $scope.blood_1 = $scope.blood_1 - 3;
           *                 $scope.blood_2 = $scope.blood_2 - 4;
           *               } else {
           *                 $scope.stopFight();
           *               }
           *             }, 100);
           *           };
           *
           *           $scope.stopFight = function() {
           *             if (angular.isDefined(stop)) {
           *               $interval.cancel(stop);
           *               stop = undefined;
           *             }
           *           };
           *
           *           $scope.resetFight = function() {
           *             $scope.blood_1 = 100;
           *             $scope.blood_2 = 120;
           *           };
           *
           *           $scope.$on('$destroy', function() {
           *             // Make sure that the interval is destroyed too
           *             $scope.stopFight();
           *           });
           *         }])
           *       // Register the 'myCurrentTime' directive factory method.
           *       // We inject $interval and dateFilter service since the factory method is DI.
           *       .directive('myCurrentTime', ['$interval', 'dateFilter',
           *         function($interval, dateFilter) {
           *           // return the directive link function. (compile function not needed)
           *           return function(scope, element, attrs) {
           *             var format,  // date format
           *                 stopTime; // so that we can cancel the time updates
           *
           *             // used to update the UI
           *             function updateTime() {
           *               element.text(dateFilter(new Date(), format));
           *             }
           *
           *             // watch the expression, and update the UI on change.
           *             scope.$watch(attrs.myCurrentTime, function(value) {
           *               format = value;
           *               updateTime();
           *             });
           *
           *             stopTime = $interval(updateTime, 1000);
           *
           *             // listen on DOM destroy (removal) event, and cancel the next UI update
           *             // to prevent updating time after the DOM element was removed.
           *             element.on('$destroy', function() {
           *               $interval.cancel(stopTime);
           *             });
           *           }
           *         }]);
           *   </script>
           *
           *   <div>
           *     <div ng-controller="ExampleController">
           *       <label>Date format: <input ng-model="format"></label> <hr/>
           *       Current time is: <span my-current-time="format"></span>
           *       <hr/>
           *       Blood 1 : <font color='red'>{{blood_1}}</font>
           *       Blood 2 : <font color='red'>{{blood_2}}</font>
           *       <button type="button" data-ng-click="fight()">Fight</button>
           *       <button type="button" data-ng-click="stopFight()">StopFight</button>
           *       <button type="button" data-ng-click="resetFight()">resetFight</button>
           *     </div>
           *   </div>
           *
           * </file>
           * </example>
           */
          function interval(fn, delay, count, invokeApply) {
            var hasParams = arguments.length > 4,
                args = hasParams ? sliceArgs(arguments, 4) : [],
                setInterval = $window.setInterval,
                clearInterval = $window.clearInterval,
                iteration = 0,
                skipApply = isDefined(invokeApply) && !invokeApply,
                deferred = (skipApply ? $$q : $q).defer(),
                promise = deferred.promise;

            count = isDefined(count) ? count : 0;

            promise.$$intervalId = setInterval(function tick() {
              if (skipApply) {
                $browser.defer(callback);
              } else {
                $rootScope.$evalAsync(callback);
              }
              deferred.notify(iteration++);

              if (count > 0 && iteration >= count) {
                deferred.resolve(iteration);
                clearInterval(promise.$$intervalId);
                delete intervals[promise.$$intervalId];
              }

              if (!skipApply) $rootScope.$apply();
            }, delay);

            intervals[promise.$$intervalId] = deferred;

            return promise;

            function callback() {
              if (!hasParams) {
                fn(iteration);
              } else {
                fn.apply(null, args);
              }
            }
          }

          /**
           * @ngdoc method
           * @name $interval#cancel
           *
           * @description
           * Cancels a task associated with the `promise`.
           *
           * @param {Promise=} promise returned by the `$interval` function.
           * @returns {boolean} Returns `true` if the task was successfully canceled.
           */
          interval.cancel = function (promise) {
            if (promise && promise.$$intervalId in intervals) {
              intervals[promise.$$intervalId].reject('canceled');
              $window.clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
              return true;
            }
            return false;
          };

          return interval;
        }];
      }

      /**
       * @ngdoc service
       * @name $jsonpCallbacks
       * @requires $window
       * @description
       * This service handles the lifecycle of callbacks to handle JSONP requests.
       * Override this service if you wish to customise where the callbacks are stored and
       * how they vary compared to the requested url.
       */
      var $jsonpCallbacksProvider = function () {
        this.$get = ['$window', function ($window) {
          var callbacks = $window.angular.callbacks;
          var callbackMap = {};

          function createCallback(callbackId) {
            var callback = function (data) {
              callback.data = data;
              callback.called = true;
            };
            callback.id = callbackId;
            return callback;
          }

          return {
            /**
             * @ngdoc method
             * @name $jsonpCallbacks#createCallback
             * @param {string} url the url of the JSONP request
             * @returns {string} the callback path to send to the server as part of the JSONP request
             * @description
             * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
             * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
             */
            createCallback: function (url) {
              var callbackId = '_' + (callbacks.$$counter++).toString(36);
              var callbackPath = 'angular.callbacks.' + callbackId;
              var callback = createCallback(callbackId);
              callbackMap[callbackPath] = callbacks[callbackId] = callback;
              return callbackPath;
            },
            /**
             * @ngdoc method
             * @name $jsonpCallbacks#wasCalled
             * @param {string} callbackPath the path to the callback that was sent in the JSONP request
             * @returns {boolean} whether the callback has been called, as a result of the JSONP response
             * @description
             * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
             * callback that was passed in the request.
             */
            wasCalled: function (callbackPath) {
              return callbackMap[callbackPath].called;
            },
            /**
             * @ngdoc method
             * @name $jsonpCallbacks#getResponse
             * @param {string} callbackPath the path to the callback that was sent in the JSONP request
             * @returns {*} the data received from the response via the registered callback
             * @description
             * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
             * in the JSONP response.
             */
            getResponse: function (callbackPath) {
              return callbackMap[callbackPath].data;
            },
            /**
             * @ngdoc method
             * @name $jsonpCallbacks#removeCallback
             * @param {string} callbackPath the path to the callback that was sent in the JSONP request
             * @description
             * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
             * completed or timed-out.
             */
            removeCallback: function (callbackPath) {
              var callback = callbackMap[callbackPath];
              delete callbacks[callback.id];
              delete callbackMap[callbackPath];
            }
          };
        }];
      };

      /**
       * @ngdoc service
       * @name $locale
       *
       * @description
       * $locale service provides localization rules for various Angular components. As of right now the
       * only public api is:
       *
       * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
       */

      var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
          DEFAULT_PORTS = { 'http': 80, 'https': 443, 'ftp': 21 };
      var $locationMinErr = minErr('$location');

      /**
       * Encode path using encodeUriSegment, ignoring forward slashes
       *
       * @param {string} path Path to encode
       * @returns {string}
       */
      function encodePath(path) {
        var segments = path.split('/'),
            i = segments.length;

        while (i--) {
          segments[i] = encodeUriSegment(segments[i]);
        }

        return segments.join('/');
      }

      function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);

        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
      }

      function parseAppUrl(relativeUrl, locationObj) {
        var prefixed = relativeUrl.charAt(0) !== '/';
        if (prefixed) {
          relativeUrl = '/' + relativeUrl;
        }
        var match = urlResolve(relativeUrl);
        locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);

        // make sure path starts with '/';
        if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
          locationObj.$$path = '/' + locationObj.$$path;
        }
      }

      function startsWith(haystack, needle) {
        return haystack.lastIndexOf(needle, 0) === 0;
      }

      /**
       *
       * @param {string} base
       * @param {string} url
       * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
       *                   the expected string.
       */
      function stripBaseUrl(base, url) {
        if (startsWith(url, base)) {
          return url.substr(base.length);
        }
      }

      function stripHash(url) {
        var index = url.indexOf('#');
        return index == -1 ? url : url.substr(0, index);
      }

      function trimEmptyHash(url) {
        return url.replace(/(#.+)|#$/, '$1');
      }

      function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
      }

      /* return the server only (scheme://host:port) */
      function serverBase(url) {
        return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
      }

      /**
       * LocationHtml5Url represents an url
       * This object is exposed as $location service when HTML5 mode is enabled and supported
       *
       * @constructor
       * @param {string} appBase application base URL
       * @param {string} appBaseNoFile application base URL stripped of any filename
       * @param {string} basePrefix url path prefix
       */
      function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = true;
        basePrefix = basePrefix || '';
        parseAbsoluteUrl(appBase, this);

        /**
         * Parse given html5 (regular) url string into properties
         * @param {string} url HTML5 url
         * @private
         */
        this.$$parse = function (url) {
          var pathUrl = stripBaseUrl(appBaseNoFile, url);
          if (!isString(pathUrl)) {
            throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
          }

          parseAppUrl(pathUrl, this);

          if (!this.$$path) {
            this.$$path = '/';
          }

          this.$$compose();
        };

        /**
         * Compose url and update `absUrl` property
         * @private
         */
        this.$$compose = function () {
          var search = toKeyValue(this.$$search),
              hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
        };

        this.$$parseLinkUrl = function (url, relHref) {
          if (relHref && relHref[0] === '#') {
            // special case for links to hash fragments:
            // keep the old url and only replace the hash fragment
            this.hash(relHref.slice(1));
            return true;
          }
          var appUrl, prevAppUrl;
          var rewrittenUrl;

          if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
            prevAppUrl = appUrl;
            if (isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
              rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
            } else {
              rewrittenUrl = appBase + prevAppUrl;
            }
          } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
            rewrittenUrl = appBaseNoFile + appUrl;
          } else if (appBaseNoFile == url + '/') {
            rewrittenUrl = appBaseNoFile;
          }
          if (rewrittenUrl) {
            this.$$parse(rewrittenUrl);
          }
          return !!rewrittenUrl;
        };
      }

      /**
       * LocationHashbangUrl represents url
       * This object is exposed as $location service when developer doesn't opt into html5 mode.
       * It also serves as the base class for html5 mode fallback on legacy browsers.
       *
       * @constructor
       * @param {string} appBase application base URL
       * @param {string} appBaseNoFile application base URL stripped of any filename
       * @param {string} hashPrefix hashbang prefix
       */
      function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

        parseAbsoluteUrl(appBase, this);

        /**
         * Parse given hashbang url into properties
         * @param {string} url Hashbang url
         * @private
         */
        this.$$parse = function (url) {
          var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
          var withoutHashUrl;

          if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

            // The rest of the url starts with a hash so we have
            // got either a hashbang path or a plain hash fragment
            withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
            if (isUndefined(withoutHashUrl)) {
              // There was no hashbang prefix so we just have a hash fragment
              withoutHashUrl = withoutBaseUrl;
            }
          } else {
            // There was no hashbang path nor hash fragment:
            // If we are in HTML5 mode we use what is left as the path;
            // Otherwise we ignore what is left
            if (this.$$html5) {
              withoutHashUrl = withoutBaseUrl;
            } else {
              withoutHashUrl = '';
              if (isUndefined(withoutBaseUrl)) {
                appBase = url;
                this.replace();
              }
            }
          }

          parseAppUrl(withoutHashUrl, this);

          this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

          this.$$compose();

          /*
           * In Windows, on an anchor node on documents loaded from
           * the filesystem, the browser will return a pathname
           * prefixed with the drive name ('/C:/path') when a
           * pathname without a drive is set:
           *  * a.setAttribute('href', '/foo')
           *   * a.pathname === '/C:/foo' //true
           *
           * Inside of Angular, we're always using pathnames that
           * do not include drive names for routing.
           */
          function removeWindowsDriveName(path, url, base) {
            /*
            Matches paths for file protocol on windows,
            such as /C:/foo/bar, and captures only /foo/bar.
            */
            var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

            var firstPathSegmentMatch;

            //Get the relative path from the input URL.
            if (startsWith(url, base)) {
              url = url.replace(base, '');
            }

            // The input URL intentionally contains a first path segment that ends with a colon.
            if (windowsFilePathExp.exec(url)) {
              return path;
            }

            firstPathSegmentMatch = windowsFilePathExp.exec(path);
            return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
          }
        };

        /**
         * Compose hashbang url and update `absUrl` property
         * @private
         */
        this.$$compose = function () {
          var search = toKeyValue(this.$$search),
              hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
        };

        this.$$parseLinkUrl = function (url, relHref) {
          if (stripHash(appBase) == stripHash(url)) {
            this.$$parse(url);
            return true;
          }
          return false;
        };
      }

      /**
       * LocationHashbangUrl represents url
       * This object is exposed as $location service when html5 history api is enabled but the browser
       * does not support it.
       *
       * @constructor
       * @param {string} appBase application base URL
       * @param {string} appBaseNoFile application base URL stripped of any filename
       * @param {string} hashPrefix hashbang prefix
       */
      function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = true;
        LocationHashbangUrl.apply(this, arguments);

        this.$$parseLinkUrl = function (url, relHref) {
          if (relHref && relHref[0] === '#') {
            // special case for links to hash fragments:
            // keep the old url and only replace the hash fragment
            this.hash(relHref.slice(1));
            return true;
          }

          var rewrittenUrl;
          var appUrl;

          if (appBase == stripHash(url)) {
            rewrittenUrl = url;
          } else if (appUrl = stripBaseUrl(appBaseNoFile, url)) {
            rewrittenUrl = appBase + hashPrefix + appUrl;
          } else if (appBaseNoFile === url + '/') {
            rewrittenUrl = appBaseNoFile;
          }
          if (rewrittenUrl) {
            this.$$parse(rewrittenUrl);
          }
          return !!rewrittenUrl;
        };

        this.$$compose = function () {
          var search = toKeyValue(this.$$search),
              hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

          this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
          // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
          this.$$absUrl = appBase + hashPrefix + this.$$url;
        };
      }

      var locationPrototype = {

        /**
         * Ensure absolute url is initialized.
         * @private
         */
        $$absUrl: '',

        /**
         * Are we in html5 mode?
         * @private
         */
        $$html5: false,

        /**
         * Has any change been replacing?
         * @private
         */
        $$replace: false,

        /**
         * @ngdoc method
         * @name $location#absUrl
         *
         * @description
         * This method is getter only.
         *
         * Return full url representation with all segments encoded according to rules specified in
         * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var absUrl = $location.absUrl();
         * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
         * ```
         *
         * @return {string} full url
         */
        absUrl: locationGetter('$$absUrl'),

        /**
         * @ngdoc method
         * @name $location#url
         *
         * @description
         * This method is getter / setter.
         *
         * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
         *
         * Change path, search and hash, when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var url = $location.url();
         * // => "/some/path?foo=bar&baz=xoxo"
         * ```
         *
         * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
         * @return {string} url
         */
        url: function (url) {
          if (isUndefined(url)) {
            return this.$$url;
          }

          var match = PATH_MATCH.exec(url);
          if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
          if (match[2] || match[1] || url === '') this.search(match[3] || '');
          this.hash(match[5] || '');

          return this;
        },

        /**
         * @ngdoc method
         * @name $location#protocol
         *
         * @description
         * This method is getter only.
         *
         * Return protocol of current url.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var protocol = $location.protocol();
         * // => "http"
         * ```
         *
         * @return {string} protocol of current url
         */
        protocol: locationGetter('$$protocol'),

        /**
         * @ngdoc method
         * @name $location#host
         *
         * @description
         * This method is getter only.
         *
         * Return host of current url.
         *
         * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var host = $location.host();
         * // => "example.com"
         *
         * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
         * host = $location.host();
         * // => "example.com"
         * host = location.host;
         * // => "example.com:8080"
         * ```
         *
         * @return {string} host of current url.
         */
        host: locationGetter('$$host'),

        /**
         * @ngdoc method
         * @name $location#port
         *
         * @description
         * This method is getter only.
         *
         * Return port of current url.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var port = $location.port();
         * // => 80
         * ```
         *
         * @return {Number} port
         */
        port: locationGetter('$$port'),

        /**
         * @ngdoc method
         * @name $location#path
         *
         * @description
         * This method is getter / setter.
         *
         * Return path of current url when called without any parameter.
         *
         * Change path when called with parameter and return `$location`.
         *
         * Note: Path should always begin with forward slash (/), this method will add the forward slash
         * if it is missing.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var path = $location.path();
         * // => "/some/path"
         * ```
         *
         * @param {(string|number)=} path New path
         * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
         */
        path: locationGetterSetter('$$path', function (path) {
          path = path !== null ? path.toString() : '';
          return path.charAt(0) == '/' ? path : '/' + path;
        }),

        /**
         * @ngdoc method
         * @name $location#search
         *
         * @description
         * This method is getter / setter.
         *
         * Return search part (as object) of current url when called without any parameter.
         *
         * Change search part when called with parameter and return `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
         * var searchObject = $location.search();
         * // => {foo: 'bar', baz: 'xoxo'}
         *
         * // set foo to 'yipee'
         * $location.search('foo', 'yipee');
         * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
         * ```
         *
         * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
         * hash object.
         *
         * When called with a single argument the method acts as a setter, setting the `search` component
         * of `$location` to the specified value.
         *
         * If the argument is a hash object containing an array of values, these values will be encoded
         * as duplicate search parameters in the url.
         *
         * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
         * will override only a single search property.
         *
         * If `paramValue` is an array, it will override the property of the `search` component of
         * `$location` specified via the first argument.
         *
         * If `paramValue` is `null`, the property specified via the first argument will be deleted.
         *
         * If `paramValue` is `true`, the property specified via the first argument will be added with no
         * value nor trailing equal sign.
         *
         * @return {Object} If called with no arguments returns the parsed `search` object. If called with
         * one or more arguments returns `$location` object itself.
         */
        search: function (search, paramValue) {
          switch (arguments.length) {
            case 0:
              return this.$$search;
            case 1:
              if (isString(search) || isNumber(search)) {
                search = search.toString();
                this.$$search = parseKeyValue(search);
              } else if (isObject(search)) {
                search = copy(search, {});
                // remove object undefined or null properties
                forEach(search, function (value, key) {
                  if (value == null) delete search[key];
                });

                this.$$search = search;
              } else {
                throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
              }
              break;
            default:
              if (isUndefined(paramValue) || paramValue === null) {
                delete this.$$search[search];
              } else {
                this.$$search[search] = paramValue;
              }
          }

          this.$$compose();
          return this;
        },

        /**
         * @ngdoc method
         * @name $location#hash
         *
         * @description
         * This method is getter / setter.
         *
         * Returns the hash fragment when called without any parameters.
         *
         * Changes the hash fragment when called with a parameter and returns `$location`.
         *
         *
         * ```js
         * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
         * var hash = $location.hash();
         * // => "hashValue"
         * ```
         *
         * @param {(string|number)=} hash New hash fragment
         * @return {string} hash
         */
        hash: locationGetterSetter('$$hash', function (hash) {
          return hash !== null ? hash.toString() : '';
        }),

        /**
         * @ngdoc method
         * @name $location#replace
         *
         * @description
         * If called, all changes to $location during the current `$digest` will replace the current history
         * record, instead of adding a new one.
         */
        replace: function () {
          this.$$replace = true;
          return this;
        }
      };

      forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function (Location) {
        Location.prototype = Object.create(locationPrototype);

        /**
         * @ngdoc method
         * @name $location#state
         *
         * @description
         * This method is getter / setter.
         *
         * Return the history state object when called without any parameter.
         *
         * Change the history state object when called with one parameter and return `$location`.
         * The state object is later passed to `pushState` or `replaceState`.
         *
         * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
         * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
         * older browsers (like IE9 or Android < 4.0), don't use this method.
         *
         * @param {object=} state State object for pushState or replaceState
         * @return {object} state
         */
        Location.prototype.state = function (state) {
          if (!arguments.length) {
            return this.$$state;
          }

          if (Location !== LocationHtml5Url || !this.$$html5) {
            throw $locationMinErr('nostate', 'History API state support is available only ' + 'in HTML5 mode and only in browsers supporting HTML5 History API');
          }
          // The user might modify `stateObject` after invoking `$location.state(stateObject)`
          // but we're changing the $$state reference to $browser.state() during the $digest
          // so the modification window is narrow.
          this.$$state = isUndefined(state) ? null : state;

          return this;
        };
      });

      function locationGetter(property) {
        return function () {
          return this[property];
        };
      }

      function locationGetterSetter(property, preprocess) {
        return function (value) {
          if (isUndefined(value)) {
            return this[property];
          }

          this[property] = preprocess(value);
          this.$$compose();

          return this;
        };
      }

      /**
       * @ngdoc service
       * @name $location
       *
       * @requires $rootElement
       *
       * @description
       * The $location service parses the URL in the browser address bar (based on the
       * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
       * available to your application. Changes to the URL in the address bar are reflected into
       * $location service and changes to $location are reflected into the browser address bar.
       *
       * **The $location service:**
       *
       * - Exposes the current URL in the browser address bar, so you can
       *   - Watch and observe the URL.
       *   - Change the URL.
       * - Synchronizes the URL with the browser when the user
       *   - Changes the address bar.
       *   - Clicks the back or forward button (or clicks a History link).
       *   - Clicks on a link.
       * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
       *
       * For more information see {@link guide/$location Developer Guide: Using $location}
       */

      /**
       * @ngdoc provider
       * @name $locationProvider
       * @description
       * Use the `$locationProvider` to configure how the application deep linking paths are stored.
       */
      function $LocationProvider() {
        var hashPrefix = '',
            html5Mode = {
          enabled: false,
          requireBase: true,
          rewriteLinks: true
        };

        /**
         * @ngdoc method
         * @name $locationProvider#hashPrefix
         * @description
         * @param {string=} prefix Prefix for hash part (containing path and search)
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         */
        this.hashPrefix = function (prefix) {
          if (isDefined(prefix)) {
            hashPrefix = prefix;
            return this;
          } else {
            return hashPrefix;
          }
        };

        /**
         * @ngdoc method
         * @name $locationProvider#html5Mode
         * @description
         * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
         *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
         *   properties:
         *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
         *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
         *     support `pushState`.
         *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
         *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
         *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
         *     See the {@link guide/$location $location guide for more information}
         *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
         *     enables/disables url rewriting for relative links.
         *
         * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
         */
        this.html5Mode = function (mode) {
          if (isBoolean(mode)) {
            html5Mode.enabled = mode;
            return this;
          } else if (isObject(mode)) {

            if (isBoolean(mode.enabled)) {
              html5Mode.enabled = mode.enabled;
            }

            if (isBoolean(mode.requireBase)) {
              html5Mode.requireBase = mode.requireBase;
            }

            if (isBoolean(mode.rewriteLinks)) {
              html5Mode.rewriteLinks = mode.rewriteLinks;
            }

            return this;
          } else {
            return html5Mode;
          }
        };

        /**
         * @ngdoc event
         * @name $location#$locationChangeStart
         * @eventType broadcast on root scope
         * @description
         * Broadcasted before a URL will change.
         *
         * This change can be prevented by calling
         * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
         * details about event object. Upon successful change
         * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
         *
         * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
         * the browser supports the HTML5 History API.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {string} newUrl New URL
         * @param {string=} oldUrl URL that was before it was changed.
         * @param {string=} newState New history state object
         * @param {string=} oldState History state object that was before it was changed.
         */

        /**
         * @ngdoc event
         * @name $location#$locationChangeSuccess
         * @eventType broadcast on root scope
         * @description
         * Broadcasted after a URL was changed.
         *
         * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
         * the browser supports the HTML5 History API.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {string} newUrl New URL
         * @param {string=} oldUrl URL that was before it was changed.
         * @param {string=} newState New history state object
         * @param {string=} oldState History state object that was before it was changed.
         */

        this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window', function ($rootScope, $browser, $sniffer, $rootElement, $window) {
          var $location,
              LocationMode,
              baseHref = $browser.baseHref(),
              // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(),
              appBase;

          if (html5Mode.enabled) {
            if (!baseHref && html5Mode.requireBase) {
              throw $locationMinErr('nobase', "$location in HTML5 mode requires a <base> tag to be present!");
            }
            appBase = serverBase(initialUrl) + (baseHref || '/');
            LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
          } else {
            appBase = stripHash(initialUrl);
            LocationMode = LocationHashbangUrl;
          }
          var appBaseNoFile = stripFile(appBase);

          $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
          $location.$$parseLinkUrl(initialUrl, initialUrl);

          $location.$$state = $browser.state();

          var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

          function setBrowserUrlWithFallback(url, replace, state) {
            var oldUrl = $location.url();
            var oldState = $location.$$state;
            try {
              $browser.url(url, replace, state);

              // Make sure $location.state() returns referentially identical (not just deeply equal)
              // state object; this makes possible quick checking if the state changed in the digest
              // loop. Checking deep equality would be too expensive.
              $location.$$state = $browser.state();
            } catch (e) {
              // Restore old values if pushState fails
              $location.url(oldUrl);
              $location.$$state = oldState;

              throw e;
            }
          }

          $rootElement.on('click', function (event) {
            // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
            // currently we open nice url link and redirect then

            if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

            var elm = jqLite(event.target);

            // traverse the DOM up to find first A tag
            while (nodeName_(elm[0]) !== 'a') {
              // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
              if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
            }

            var absHref = elm.prop('href');
            // get the actual href attribute - see
            // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
            var relHref = elm.attr('href') || elm.attr('xlink:href');

            if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
              // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
              // an animation.
              absHref = urlResolve(absHref.animVal).href;
            }

            // Ignore when url is started with javascript: or mailto:
            if (IGNORE_URI_REGEXP.test(absHref)) return;

            if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
              if ($location.$$parseLinkUrl(absHref, relHref)) {
                // We do a preventDefault for all urls that are part of the angular application,
                // in html5mode and also without, so that we are able to abort navigation without
                // getting double entries in the location history.
                event.preventDefault();
                // update location manually
                if ($location.absUrl() != $browser.url()) {
                  $rootScope.$apply();
                  // hack to work around FF6 bug 684208 when scenario runner clicks on links
                  $window.angular['ff-684208-preventDefault'] = true;
                }
              }
            }
          });

          // rewrite hashbang url <> html5 url
          if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
            $browser.url($location.absUrl(), true);
          }

          var initializing = true;

          // update $location when $browser url changes
          $browser.onUrlChange(function (newUrl, newState) {

            if (isUndefined(stripBaseUrl(appBaseNoFile, newUrl))) {
              // If we are navigating outside of the app then force a reload
              $window.location.href = newUrl;
              return;
            }

            $rootScope.$evalAsync(function () {
              var oldUrl = $location.absUrl();
              var oldState = $location.$$state;
              var defaultPrevented;
              newUrl = trimEmptyHash(newUrl);
              $location.$$parse(newUrl);
              $location.$$state = newState;

              defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, newState, oldState).defaultPrevented;

              // if the location was changed by a `$locationChangeStart` handler then stop
              // processing this location change
              if ($location.absUrl() !== newUrl) return;

              if (defaultPrevented) {
                $location.$$parse(oldUrl);
                $location.$$state = oldState;
                setBrowserUrlWithFallback(oldUrl, false, oldState);
              } else {
                initializing = false;
                afterLocationChange(oldUrl, oldState);
              }
            });
            if (!$rootScope.$$phase) $rootScope.$digest();
          });

          // update browser
          $rootScope.$watch(function $locationWatch() {
            var oldUrl = trimEmptyHash($browser.url());
            var newUrl = trimEmptyHash($location.absUrl());
            var oldState = $browser.state();
            var currentReplace = $location.$$replace;
            var urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;

            if (initializing || urlOrStateChanged) {
              initializing = false;

              $rootScope.$evalAsync(function () {
                var newUrl = $location.absUrl();
                var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;

                // if the location was changed by a `$locationChangeStart` handler then stop
                // processing this location change
                if ($location.absUrl() !== newUrl) return;

                if (defaultPrevented) {
                  $location.$$parse(oldUrl);
                  $location.$$state = oldState;
                } else {
                  if (urlOrStateChanged) {
                    setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                  }
                  afterLocationChange(oldUrl, oldState);
                }
              });
            }

            $location.$$replace = false;

            // we don't need to return anything because $evalAsync will make the digest loop dirty when
            // there is a change
          });

          return $location;

          function afterLocationChange(oldUrl, oldState) {
            $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl, $location.$$state, oldState);
          }
        }];
      }

      /**
       * @ngdoc service
       * @name $log
       * @requires $window
       *
       * @description
       * Simple service for logging. Default implementation safely writes the message
       * into the browser's console (if present).
       *
       * The main purpose of this service is to simplify debugging and troubleshooting.
       *
       * The default is to log `debug` messages. You can use
       * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
       *
       * @example
         <example module="logExample">
           <file name="script.js">
             angular.module('logExample', [])
               .controller('LogController', ['$scope', '$log', function($scope, $log) {
                 $scope.$log = $log;
                 $scope.message = 'Hello World!';
               }]);
           </file>
           <file name="index.html">
             <div ng-controller="LogController">
               <p>Reload this page with open console, enter text and hit the log button...</p>
               <label>Message:
               <input type="text" ng-model="message" /></label>
               <button ng-click="$log.log(message)">log</button>
               <button ng-click="$log.warn(message)">warn</button>
               <button ng-click="$log.info(message)">info</button>
               <button ng-click="$log.error(message)">error</button>
               <button ng-click="$log.debug(message)">debug</button>
             </div>
           </file>
         </example>
       */

      /**
       * @ngdoc provider
       * @name $logProvider
       * @description
       * Use the `$logProvider` to configure how the application logs messages
       */
      function $LogProvider() {
        var debug = true,
            self = this;

        /**
         * @ngdoc method
         * @name $logProvider#debugEnabled
         * @description
         * @param {boolean=} flag enable or disable debug level messages
         * @returns {*} current value if used as getter or itself (chaining) if used as setter
         */
        this.debugEnabled = function (flag) {
          if (isDefined(flag)) {
            debug = flag;
            return this;
          } else {
            return debug;
          }
        };

        this.$get = ['$window', function ($window) {
          return {
            /**
             * @ngdoc method
             * @name $log#log
             *
             * @description
             * Write a log message
             */
            log: consoleLog('log'),

            /**
             * @ngdoc method
             * @name $log#info
             *
             * @description
             * Write an information message
             */
            info: consoleLog('info'),

            /**
             * @ngdoc method
             * @name $log#warn
             *
             * @description
             * Write a warning message
             */
            warn: consoleLog('warn'),

            /**
             * @ngdoc method
             * @name $log#error
             *
             * @description
             * Write an error message
             */
            error: consoleLog('error'),

            /**
             * @ngdoc method
             * @name $log#debug
             *
             * @description
             * Write a debug message
             */
            debug: function () {
              var fn = consoleLog('debug');

              return function () {
                if (debug) {
                  fn.apply(self, arguments);
                }
              };
            }()
          };

          function formatError(arg) {
            if (arg instanceof Error) {
              if (arg.stack) {
                arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
              } else if (arg.sourceURL) {
                arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
              }
            }
            return arg;
          }

          function consoleLog(type) {
            var console = $window.console || {},
                logFn = console[type] || console.log || noop,
                hasApply = false;

            // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
            // The reason behind this is that console.log has type "object" in IE8...
            try {
              hasApply = !!logFn.apply;
            } catch (e) {}

            if (hasApply) {
              return function () {
                var args = [];
                forEach(arguments, function (arg) {
                  args.push(formatError(arg));
                });
                return logFn.apply(console, args);
              };
            }

            // we are IE which either doesn't have window.console => this is noop and we do nothing,
            // or we are IE where console.log doesn't have apply so we log at least first 2 args
            return function (arg1, arg2) {
              logFn(arg1, arg2 == null ? '' : arg2);
            };
          }
        }];
      }

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *     Any commits to this file should be reviewed with security in mind.  *
       *   Changes to this file can potentially create security vulnerabilities. *
       *          An approval from 2 Core members with history of modifying      *
       *                         this file is required.                          *
       *                                                                         *
       *  Does the change somehow allow for arbitrary javascript to be executed? *
       *    Or allows for someone to change the prototype of built-in objects?   *
       *     Or gives undesired access to variables likes document or window?    *
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      var $parseMinErr = minErr('$parse');

      // Sandboxing Angular Expressions
      // ------------------------------
      // Angular expressions are generally considered safe because these expressions only have direct
      // access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
      // obtaining a reference to native JS functions such as the Function constructor.
      //
      // As an example, consider the following Angular expression:
      //
      //   {}.toString.constructor('alert("evil JS code")')
      //
      // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
      // against the expression language, but not to prevent exploits that were enabled by exposing
      // sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
      // practice and therefore we are not even trying to protect against interaction with an object
      // explicitly exposed in this way.
      //
      // In general, it is not possible to access a Window object from an angular expression unless a
      // window or some DOM object that has a reference to window is published onto a Scope.
      // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
      // native objects.
      //
      // See https://docs.angularjs.org/guide/security


      function ensureSafeMemberName(name, fullExpression) {
        if (name === "__defineGetter__" || name === "__defineSetter__" || name === "__lookupGetter__" || name === "__lookupSetter__" || name === "__proto__") {
          throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! ' + 'Expression: {0}', fullExpression);
        }
        return name;
      }

      function getStringValue(name) {
        // Property names must be strings. This means that non-string objects cannot be used
        // as keys in an object. Any non-string object, including a number, is typecasted
        // into a string via the toString method.
        // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
        //
        // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
        // to a string. It's not always possible. If `name` is an object and its `toString` method is
        // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
        //
        // TypeError: Cannot convert object to primitive value
        //
        // For performance reasons, we don't catch this error here and allow it to propagate up the call
        // stack. Note that you'll get the same error in JavaScript if you try to access a property using
        // such a 'broken' object as a key.
        return name + '';
      }

      function ensureSafeObject(obj, fullExpression) {
        // nifty check if obj is Function that is fast and works across iframes and other contexts
        if (obj) {
          if (obj.constructor === obj) {
            throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if ( // isWindow(obj)
          obj.window === obj) {
            throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if ( // isElement(obj)
          obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
            throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if ( // block Object so that we can't get hold of dangerous Object.* methods
          obj === Object) {
            throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
          }
        }
        return obj;
      }

      var CALL = Function.prototype.call;
      var APPLY = Function.prototype.apply;
      var BIND = Function.prototype.bind;

      function ensureSafeFunction(obj, fullExpression) {
        if (obj) {
          if (obj.constructor === obj) {
            throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
          } else if (obj === CALL || obj === APPLY || obj === BIND) {
            throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
          }
        }
      }

      function ensureSafeAssignContext(obj, fullExpression) {
        if (obj) {
          if (obj === 0 .constructor || obj === false.constructor || obj === ''.constructor || obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
            throw $parseMinErr('isecaf', 'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
          }
        }
      }

      var OPERATORS = createMap();
      forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function (operator) {
        OPERATORS[operator] = true;
      });
      var ESCAPE = { "n": "\n", "f": "\f", "r": "\r", "t": "\t", "v": "\v", "'": "'", '"': '"' };

      /////////////////////////////////////////


      /**
       * @constructor
       */
      var Lexer = function (options) {
        this.options = options;
      };

      Lexer.prototype = {
        constructor: Lexer,

        lex: function (text) {
          this.text = text;
          this.index = 0;
          this.tokens = [];

          while (this.index < this.text.length) {
            var ch = this.text.charAt(this.index);
            if (ch === '"' || ch === "'") {
              this.readString(ch);
            } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
              this.readNumber();
            } else if (this.isIdentifierStart(this.peekMultichar())) {
              this.readIdent();
            } else if (this.is(ch, '(){}[].,;:?')) {
              this.tokens.push({ index: this.index, text: ch });
              this.index++;
            } else if (this.isWhitespace(ch)) {
              this.index++;
            } else {
              var ch2 = ch + this.peek();
              var ch3 = ch2 + this.peek(2);
              var op1 = OPERATORS[ch];
              var op2 = OPERATORS[ch2];
              var op3 = OPERATORS[ch3];
              if (op1 || op2 || op3) {
                var token = op3 ? ch3 : op2 ? ch2 : ch;
                this.tokens.push({ index: this.index, text: token, operator: true });
                this.index += token.length;
              } else {
                this.throwError('Unexpected next character ', this.index, this.index + 1);
              }
            }
          }
          return this.tokens;
        },

        is: function (ch, chars) {
          return chars.indexOf(ch) !== -1;
        },

        peek: function (i) {
          var num = i || 1;
          return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
        },

        isNumber: function (ch) {
          return '0' <= ch && ch <= '9' && typeof ch === "string";
        },

        isWhitespace: function (ch) {
          // IE treats non-breaking space as \u00A0
          return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\v' || ch === '\u00A0';
        },

        isIdentifierStart: function (ch) {
          return this.options.isIdentifierStart ? this.options.isIdentifierStart(ch, this.codePointAt(ch)) : this.isValidIdentifierStart(ch);
        },

        isValidIdentifierStart: function (ch) {
          return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
        },

        isIdentifierContinue: function (ch) {
          return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(ch, this.codePointAt(ch)) : this.isValidIdentifierContinue(ch);
        },

        isValidIdentifierContinue: function (ch, cp) {
          return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
        },

        codePointAt: function (ch) {
          if (ch.length === 1) return ch.charCodeAt(0);
          /*jshint bitwise: false*/
          return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
          /*jshint bitwise: true*/
        },

        peekMultichar: function () {
          var ch = this.text.charAt(this.index);
          var peek = this.peek();
          if (!peek) {
            return ch;
          }
          var cp1 = ch.charCodeAt(0);
          var cp2 = peek.charCodeAt(0);
          if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
            return ch + peek;
          }
          return ch;
        },

        isExpOperator: function (ch) {
          return ch === '-' || ch === '+' || this.isNumber(ch);
        },

        throwError: function (error, start, end) {
          end = end || this.index;
          var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
          throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
        },

        readNumber: function () {
          var number = '';
          var start = this.index;
          while (this.index < this.text.length) {
            var ch = lowercase(this.text.charAt(this.index));
            if (ch == '.' || this.isNumber(ch)) {
              number += ch;
            } else {
              var peekCh = this.peek();
              if (ch == 'e' && this.isExpOperator(peekCh)) {
                number += ch;
              } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
                number += ch;
              } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
                this.throwError('Invalid exponent');
              } else {
                break;
              }
            }
            this.index++;
          }
          this.tokens.push({
            index: start,
            text: number,
            constant: true,
            value: Number(number)
          });
        },

        readIdent: function () {
          var start = this.index;
          this.index += this.peekMultichar().length;
          while (this.index < this.text.length) {
            var ch = this.peekMultichar();
            if (!this.isIdentifierContinue(ch)) {
              break;
            }
            this.index += ch.length;
          }
          this.tokens.push({
            index: start,
            text: this.text.slice(start, this.index),
            identifier: true
          });
        },

        readString: function (quote) {
          var start = this.index;
          this.index++;
          var string = '';
          var rawString = quote;
          var escape = false;
          while (this.index < this.text.length) {
            var ch = this.text.charAt(this.index);
            rawString += ch;
            if (escape) {
              if (ch === 'u') {
                var hex = this.text.substring(this.index + 1, this.index + 5);
                if (!hex.match(/[\da-f]{4}/i)) {
                  this.throwError('Invalid unicode escape [\\u' + hex + ']');
                }
                this.index += 4;
                string += String.fromCharCode(parseInt(hex, 16));
              } else {
                var rep = ESCAPE[ch];
                string = string + (rep || ch);
              }
              escape = false;
            } else if (ch === '\\') {
              escape = true;
            } else if (ch === quote) {
              this.index++;
              this.tokens.push({
                index: start,
                text: rawString,
                constant: true,
                value: string
              });
              return;
            } else {
              string += ch;
            }
            this.index++;
          }
          this.throwError('Unterminated quote', start);
        }
      };

      var AST = function (lexer, options) {
        this.lexer = lexer;
        this.options = options;
      };

      AST.Program = 'Program';
      AST.ExpressionStatement = 'ExpressionStatement';
      AST.AssignmentExpression = 'AssignmentExpression';
      AST.ConditionalExpression = 'ConditionalExpression';
      AST.LogicalExpression = 'LogicalExpression';
      AST.BinaryExpression = 'BinaryExpression';
      AST.UnaryExpression = 'UnaryExpression';
      AST.CallExpression = 'CallExpression';
      AST.MemberExpression = 'MemberExpression';
      AST.Identifier = 'Identifier';
      AST.Literal = 'Literal';
      AST.ArrayExpression = 'ArrayExpression';
      AST.Property = 'Property';
      AST.ObjectExpression = 'ObjectExpression';
      AST.ThisExpression = 'ThisExpression';
      AST.LocalsExpression = 'LocalsExpression';

      // Internal use only
      AST.NGValueParameter = 'NGValueParameter';

      AST.prototype = {
        ast: function (text) {
          this.text = text;
          this.tokens = this.lexer.lex(text);

          var value = this.program();

          if (this.tokens.length !== 0) {
            this.throwError('is an unexpected token', this.tokens[0]);
          }

          return value;
        },

        program: function () {
          var body = [];
          while (true) {
            if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']')) body.push(this.expressionStatement());
            if (!this.expect(';')) {
              return { type: AST.Program, body: body };
            }
          }
        },

        expressionStatement: function () {
          return { type: AST.ExpressionStatement, expression: this.filterChain() };
        },

        filterChain: function () {
          var left = this.expression();
          var token;
          while (token = this.expect('|')) {
            left = this.filter(left);
          }
          return left;
        },

        expression: function () {
          return this.assignment();
        },

        assignment: function () {
          var result = this.ternary();
          if (this.expect('=')) {
            result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '=' };
          }
          return result;
        },

        ternary: function () {
          var test = this.logicalOR();
          var alternate;
          var consequent;
          if (this.expect('?')) {
            alternate = this.expression();
            if (this.consume(':')) {
              consequent = this.expression();
              return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent };
            }
          }
          return test;
        },

        logicalOR: function () {
          var left = this.logicalAND();
          while (this.expect('||')) {
            left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
          }
          return left;
        },

        logicalAND: function () {
          var left = this.equality();
          while (this.expect('&&')) {
            left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality() };
          }
          return left;
        },

        equality: function () {
          var left = this.relational();
          var token;
          while (token = this.expect('==', '!=', '===', '!==')) {
            left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
          }
          return left;
        },

        relational: function () {
          var left = this.additive();
          var token;
          while (token = this.expect('<', '>', '<=', '>=')) {
            left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
          }
          return left;
        },

        additive: function () {
          var left = this.multiplicative();
          var token;
          while (token = this.expect('+', '-')) {
            left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
          }
          return left;
        },

        multiplicative: function () {
          var left = this.unary();
          var token;
          while (token = this.expect('*', '/', '%')) {
            left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
          }
          return left;
        },

        unary: function () {
          var token;
          if (token = this.expect('+', '-', '!')) {
            return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
          } else {
            return this.primary();
          }
        },

        primary: function () {
          var primary;
          if (this.expect('(')) {
            primary = this.filterChain();
            this.consume(')');
          } else if (this.expect('[')) {
            primary = this.arrayDeclaration();
          } else if (this.expect('{')) {
            primary = this.object();
          } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
            primary = copy(this.selfReferential[this.consume().text]);
          } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
            primary = { type: AST.Literal, value: this.options.literals[this.consume().text] };
          } else if (this.peek().identifier) {
            primary = this.identifier();
          } else if (this.peek().constant) {
            primary = this.constant();
          } else {
            this.throwError('not a primary expression', this.peek());
          }

          var next;
          while (next = this.expect('(', '[', '.')) {
            if (next.text === '(') {
              primary = { type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
              this.consume(')');
            } else if (next.text === '[') {
              primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
              this.consume(']');
            } else if (next.text === '.') {
              primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
            } else {
              this.throwError('IMPOSSIBLE');
            }
          }
          return primary;
        },

        filter: function (baseExpression) {
          var args = [baseExpression];
          var result = { type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true };

          while (this.expect(':')) {
            args.push(this.expression());
          }

          return result;
        },

        parseArguments: function () {
          var args = [];
          if (this.peekToken().text !== ')') {
            do {
              args.push(this.filterChain());
            } while (this.expect(','));
          }
          return args;
        },

        identifier: function () {
          var token = this.consume();
          if (!token.identifier) {
            this.throwError('is not a valid identifier', token);
          }
          return { type: AST.Identifier, name: token.text };
        },

        constant: function () {
          // TODO check that it is a constant
          return { type: AST.Literal, value: this.consume().value };
        },

        arrayDeclaration: function () {
          var elements = [];
          if (this.peekToken().text !== ']') {
            do {
              if (this.peek(']')) {
                // Support trailing commas per ES5.1.
                break;
              }
              elements.push(this.expression());
            } while (this.expect(','));
          }
          this.consume(']');

          return { type: AST.ArrayExpression, elements: elements };
        },

        object: function () {
          var properties = [],
              property;
          if (this.peekToken().text !== '}') {
            do {
              if (this.peek('}')) {
                // Support trailing commas per ES5.1.
                break;
              }
              property = { type: AST.Property, kind: 'init' };
              if (this.peek().constant) {
                property.key = this.constant();
                property.computed = false;
                this.consume(':');
                property.value = this.expression();
              } else if (this.peek().identifier) {
                property.key = this.identifier();
                property.computed = false;
                if (this.peek(':')) {
                  this.consume(':');
                  property.value = this.expression();
                } else {
                  property.value = property.key;
                }
              } else if (this.peek('[')) {
                this.consume('[');
                property.key = this.expression();
                this.consume(']');
                property.computed = true;
                this.consume(':');
                property.value = this.expression();
              } else {
                this.throwError("invalid key", this.peek());
              }
              properties.push(property);
            } while (this.expect(','));
          }
          this.consume('}');

          return { type: AST.ObjectExpression, properties: properties };
        },

        throwError: function (msg, token) {
          throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },

        consume: function (e1) {
          if (this.tokens.length === 0) {
            throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
          }

          var token = this.expect(e1);
          if (!token) {
            this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
          }
          return token;
        },

        peekToken: function () {
          if (this.tokens.length === 0) {
            throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
          }
          return this.tokens[0];
        },

        peek: function (e1, e2, e3, e4) {
          return this.peekAhead(0, e1, e2, e3, e4);
        },

        peekAhead: function (i, e1, e2, e3, e4) {
          if (this.tokens.length > i) {
            var token = this.tokens[i];
            var t = token.text;
            if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
              return token;
            }
          }
          return false;
        },

        expect: function (e1, e2, e3, e4) {
          var token = this.peek(e1, e2, e3, e4);
          if (token) {
            this.tokens.shift();
            return token;
          }
          return false;
        },

        selfReferential: {
          'this': { type: AST.ThisExpression },
          '$locals': { type: AST.LocalsExpression }
        }
      };

      function ifDefined(v, d) {
        return typeof v !== 'undefined' ? v : d;
      }

      function plusFn(l, r) {
        if (typeof l === 'undefined') return r;
        if (typeof r === 'undefined') return l;
        return l + r;
      }

      function isStateless($filter, filterName) {
        var fn = $filter(filterName);
        return !fn.$stateful;
      }

      function findConstantAndWatchExpressions(ast, $filter) {
        var allConstants;
        var argsToWatch;
        switch (ast.type) {
          case AST.Program:
            allConstants = true;
            forEach(ast.body, function (expr) {
              findConstantAndWatchExpressions(expr.expression, $filter);
              allConstants = allConstants && expr.expression.constant;
            });
            ast.constant = allConstants;
            break;
          case AST.Literal:
            ast.constant = true;
            ast.toWatch = [];
            break;
          case AST.UnaryExpression:
            findConstantAndWatchExpressions(ast.argument, $filter);
            ast.constant = ast.argument.constant;
            ast.toWatch = ast.argument.toWatch;
            break;
          case AST.BinaryExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
            break;
          case AST.LogicalExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.constant ? [] : [ast];
            break;
          case AST.ConditionalExpression:
            findConstantAndWatchExpressions(ast.test, $filter);
            findConstantAndWatchExpressions(ast.alternate, $filter);
            findConstantAndWatchExpressions(ast.consequent, $filter);
            ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
            ast.toWatch = ast.constant ? [] : [ast];
            break;
          case AST.Identifier:
            ast.constant = false;
            ast.toWatch = [ast];
            break;
          case AST.MemberExpression:
            findConstantAndWatchExpressions(ast.object, $filter);
            if (ast.computed) {
              findConstantAndWatchExpressions(ast.property, $filter);
            }
            ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
            ast.toWatch = [ast];
            break;
          case AST.CallExpression:
            allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
            argsToWatch = [];
            forEach(ast.arguments, function (expr) {
              findConstantAndWatchExpressions(expr, $filter);
              allConstants = allConstants && expr.constant;
              if (!expr.constant) {
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
              }
            });
            ast.constant = allConstants;
            ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
            break;
          case AST.AssignmentExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = [ast];
            break;
          case AST.ArrayExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.elements, function (expr) {
              findConstantAndWatchExpressions(expr, $filter);
              allConstants = allConstants && expr.constant;
              if (!expr.constant) {
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
              }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;
          case AST.ObjectExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.properties, function (property) {
              findConstantAndWatchExpressions(property.value, $filter);
              allConstants = allConstants && property.value.constant && !property.computed;
              if (!property.value.constant) {
                argsToWatch.push.apply(argsToWatch, property.value.toWatch);
              }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;
          case AST.ThisExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;
          case AST.LocalsExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;
        }
      }

      function getInputs(body) {
        if (body.length != 1) return;
        var lastExpression = body[0].expression;
        var candidate = lastExpression.toWatch;
        if (candidate.length !== 1) return candidate;
        return candidate[0] !== lastExpression ? candidate : undefined;
      }

      function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
      }

      function assignableAST(ast) {
        if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
          return { type: AST.AssignmentExpression, left: ast.body[0].expression, right: { type: AST.NGValueParameter }, operator: '=' };
        }
      }

      function isLiteral(ast) {
        return ast.body.length === 0 || ast.body.length === 1 && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
      }

      function isConstant(ast) {
        return ast.constant;
      }

      function ASTCompiler(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
      }

      ASTCompiler.prototype = {
        compile: function (expression, expensiveChecks) {
          var self = this;
          var ast = this.astBuilder.ast(expression);
          this.state = {
            nextId: 0,
            filters: {},
            expensiveChecks: expensiveChecks,
            fn: { vars: [], body: [], own: {} },
            assign: { vars: [], body: [], own: {} },
            inputs: []
          };
          findConstantAndWatchExpressions(ast, self.$filter);
          var extra = '';
          var assignable;
          this.stage = 'assign';
          if (assignable = assignableAST(ast)) {
            this.state.computing = 'assign';
            var result = this.nextId();
            this.recurse(assignable, result);
            this.return_(result);
            extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
          }
          var toWatch = getInputs(ast.body);
          self.stage = 'inputs';
          forEach(toWatch, function (watch, key) {
            var fnKey = 'fn' + key;
            self.state[fnKey] = { vars: [], body: [], own: {} };
            self.state.computing = fnKey;
            var intoId = self.nextId();
            self.recurse(watch, intoId);
            self.return_(intoId);
            self.state.inputs.push(fnKey);
            watch.watchId = key;
          });
          this.state.computing = 'fn';
          this.stage = 'main';
          this.recurse(ast);
          var fnString =
          // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
          // This is a workaround for this until we do a better job at only removing the prefix only when we should.
          '"' + this.USE + ' ' + this.STRICT + '";\n' + this.filterPrefix() + 'var fn=' + this.generateFunction('fn', 's,l,a,i') + extra + this.watchFns() + 'return fn;';

          /* jshint -W054 */
          var fn = new Function('$filter', 'ensureSafeMemberName', 'ensureSafeObject', 'ensureSafeFunction', 'getStringValue', 'ensureSafeAssignContext', 'ifDefined', 'plus', 'text', fnString)(this.$filter, ensureSafeMemberName, ensureSafeObject, ensureSafeFunction, getStringValue, ensureSafeAssignContext, ifDefined, plusFn, expression);
          /* jshint +W054 */
          this.state = this.stage = undefined;
          fn.literal = isLiteral(ast);
          fn.constant = isConstant(ast);
          return fn;
        },

        USE: 'use',

        STRICT: 'strict',

        watchFns: function () {
          var result = [];
          var fns = this.state.inputs;
          var self = this;
          forEach(fns, function (name) {
            result.push('var ' + name + '=' + self.generateFunction(name, 's'));
          });
          if (fns.length) {
            result.push('fn.inputs=[' + fns.join(',') + '];');
          }
          return result.join('');
        },

        generateFunction: function (name, params) {
          return 'function(' + params + '){' + this.varsPrefix(name) + this.body(name) + '};';
        },

        filterPrefix: function () {
          var parts = [];
          var self = this;
          forEach(this.state.filters, function (id, filter) {
            parts.push(id + '=$filter(' + self.escape(filter) + ')');
          });
          if (parts.length) return 'var ' + parts.join(',') + ';';
          return '';
        },

        varsPrefix: function (section) {
          return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
        },

        body: function (section) {
          return this.state[section].body.join('');
        },

        recurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
          var left,
              right,
              self = this,
              args,
              expression,
              computed;
          recursionFn = recursionFn || noop;
          if (!skipWatchIdCheck && isDefined(ast.watchId)) {
            intoId = intoId || this.nextId();
            this.if_('i', this.lazyAssign(intoId, this.computedMember('i', ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true));
            return;
          }
          switch (ast.type) {
            case AST.Program:
              forEach(ast.body, function (expression, pos) {
                self.recurse(expression.expression, undefined, undefined, function (expr) {
                  right = expr;
                });
                if (pos !== ast.body.length - 1) {
                  self.current().body.push(right, ';');
                } else {
                  self.return_(right);
                }
              });
              break;
            case AST.Literal:
              expression = this.escape(ast.value);
              this.assign(intoId, expression);
              recursionFn(expression);
              break;
            case AST.UnaryExpression:
              this.recurse(ast.argument, undefined, undefined, function (expr) {
                right = expr;
              });
              expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
              this.assign(intoId, expression);
              recursionFn(expression);
              break;
            case AST.BinaryExpression:
              this.recurse(ast.left, undefined, undefined, function (expr) {
                left = expr;
              });
              this.recurse(ast.right, undefined, undefined, function (expr) {
                right = expr;
              });
              if (ast.operator === '+') {
                expression = this.plus(left, right);
              } else if (ast.operator === '-') {
                expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
              } else {
                expression = '(' + left + ')' + ast.operator + '(' + right + ')';
              }
              this.assign(intoId, expression);
              recursionFn(expression);
              break;
            case AST.LogicalExpression:
              intoId = intoId || this.nextId();
              self.recurse(ast.left, intoId);
              self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
              recursionFn(intoId);
              break;
            case AST.ConditionalExpression:
              intoId = intoId || this.nextId();
              self.recurse(ast.test, intoId);
              self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
              recursionFn(intoId);
              break;
            case AST.Identifier:
              intoId = intoId || this.nextId();
              if (nameId) {
                nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
                nameId.computed = false;
                nameId.name = ast.name;
              }
              ensureSafeMemberName(ast.name);
              self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)), function () {
                self.if_(self.stage === 'inputs' || 's', function () {
                  if (create && create !== 1) {
                    self.if_(self.not(self.nonComputedMember('s', ast.name)), self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
                  }
                  self.assign(intoId, self.nonComputedMember('s', ast.name));
                });
              }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name)));
              if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
                self.addEnsureSafeObject(intoId);
              }
              recursionFn(intoId);
              break;
            case AST.MemberExpression:
              left = nameId && (nameId.context = this.nextId()) || this.nextId();
              intoId = intoId || this.nextId();
              self.recurse(ast.object, left, undefined, function () {
                self.if_(self.notNull(left), function () {
                  if (create && create !== 1) {
                    self.addEnsureSafeAssignContext(left);
                  }
                  if (ast.computed) {
                    right = self.nextId();
                    self.recurse(ast.property, right);
                    self.getStringValue(right);
                    self.addEnsureSafeMemberName(right);
                    if (create && create !== 1) {
                      self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
                    }
                    expression = self.ensureSafeObject(self.computedMember(left, right));
                    self.assign(intoId, expression);
                    if (nameId) {
                      nameId.computed = true;
                      nameId.name = right;
                    }
                  } else {
                    ensureSafeMemberName(ast.property.name);
                    if (create && create !== 1) {
                      self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
                    }
                    expression = self.nonComputedMember(left, ast.property.name);
                    if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
                      expression = self.ensureSafeObject(expression);
                    }
                    self.assign(intoId, expression);
                    if (nameId) {
                      nameId.computed = false;
                      nameId.name = ast.property.name;
                    }
                  }
                }, function () {
                  self.assign(intoId, 'undefined');
                });
                recursionFn(intoId);
              }, !!create);
              break;
            case AST.CallExpression:
              intoId = intoId || this.nextId();
              if (ast.filter) {
                right = self.filter(ast.callee.name);
                args = [];
                forEach(ast.arguments, function (expr) {
                  var argument = self.nextId();
                  self.recurse(expr, argument);
                  args.push(argument);
                });
                expression = right + '(' + args.join(',') + ')';
                self.assign(intoId, expression);
                recursionFn(intoId);
              } else {
                right = self.nextId();
                left = {};
                args = [];
                self.recurse(ast.callee, right, left, function () {
                  self.if_(self.notNull(right), function () {
                    self.addEnsureSafeFunction(right);
                    forEach(ast.arguments, function (expr) {
                      self.recurse(expr, self.nextId(), undefined, function (argument) {
                        args.push(self.ensureSafeObject(argument));
                      });
                    });
                    if (left.name) {
                      if (!self.state.expensiveChecks) {
                        self.addEnsureSafeObject(left.context);
                      }
                      expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
                    } else {
                      expression = right + '(' + args.join(',') + ')';
                    }
                    expression = self.ensureSafeObject(expression);
                    self.assign(intoId, expression);
                  }, function () {
                    self.assign(intoId, 'undefined');
                  });
                  recursionFn(intoId);
                });
              }
              break;
            case AST.AssignmentExpression:
              right = this.nextId();
              left = {};
              if (!isAssignable(ast.left)) {
                throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
              }
              this.recurse(ast.left, undefined, left, function () {
                self.if_(self.notNull(left.context), function () {
                  self.recurse(ast.right, right);
                  self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
                  self.addEnsureSafeAssignContext(left.context);
                  expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                  self.assign(intoId, expression);
                  recursionFn(intoId || expression);
                });
              }, 1);
              break;
            case AST.ArrayExpression:
              args = [];
              forEach(ast.elements, function (expr) {
                self.recurse(expr, self.nextId(), undefined, function (argument) {
                  args.push(argument);
                });
              });
              expression = '[' + args.join(',') + ']';
              this.assign(intoId, expression);
              recursionFn(expression);
              break;
            case AST.ObjectExpression:
              args = [];
              computed = false;
              forEach(ast.properties, function (property) {
                if (property.computed) {
                  computed = true;
                }
              });
              if (computed) {
                intoId = intoId || this.nextId();
                this.assign(intoId, '{}');
                forEach(ast.properties, function (property) {
                  if (property.computed) {
                    left = self.nextId();
                    self.recurse(property.key, left);
                  } else {
                    left = property.key.type === AST.Identifier ? property.key.name : '' + property.key.value;
                  }
                  right = self.nextId();
                  self.recurse(property.value, right);
                  self.assign(self.member(intoId, left, property.computed), right);
                });
              } else {
                forEach(ast.properties, function (property) {
                  self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function (expr) {
                    args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : '' + property.key.value) + ':' + expr);
                  });
                });
                expression = '{' + args.join(',') + '}';
                this.assign(intoId, expression);
              }
              recursionFn(intoId || expression);
              break;
            case AST.ThisExpression:
              this.assign(intoId, 's');
              recursionFn('s');
              break;
            case AST.LocalsExpression:
              this.assign(intoId, 'l');
              recursionFn('l');
              break;
            case AST.NGValueParameter:
              this.assign(intoId, 'v');
              recursionFn('v');
              break;
          }
        },

        getHasOwnProperty: function (element, property) {
          var key = element + '.' + property;
          var own = this.current().own;
          if (!own.hasOwnProperty(key)) {
            own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
          }
          return own[key];
        },

        assign: function (id, value) {
          if (!id) return;
          this.current().body.push(id, '=', value, ';');
          return id;
        },

        filter: function (filterName) {
          if (!this.state.filters.hasOwnProperty(filterName)) {
            this.state.filters[filterName] = this.nextId(true);
          }
          return this.state.filters[filterName];
        },

        ifDefined: function (id, defaultValue) {
          return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
        },

        plus: function (left, right) {
          return 'plus(' + left + ',' + right + ')';
        },

        return_: function (id) {
          this.current().body.push('return ', id, ';');
        },

        if_: function (test, alternate, consequent) {
          if (test === true) {
            alternate();
          } else {
            var body = this.current().body;
            body.push('if(', test, '){');
            alternate();
            body.push('}');
            if (consequent) {
              body.push('else{');
              consequent();
              body.push('}');
            }
          }
        },

        not: function (expression) {
          return '!(' + expression + ')';
        },

        notNull: function (expression) {
          return expression + '!=null';
        },

        nonComputedMember: function (left, right) {
          var SAFE_IDENTIFIER = /[$_a-zA-Z][$_a-zA-Z0-9]*/;
          var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
          if (SAFE_IDENTIFIER.test(right)) {
            return left + '.' + right;
          } else {
            return left + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
          }
        },

        computedMember: function (left, right) {
          return left + '[' + right + ']';
        },

        member: function (left, right, computed) {
          if (computed) return this.computedMember(left, right);
          return this.nonComputedMember(left, right);
        },

        addEnsureSafeObject: function (item) {
          this.current().body.push(this.ensureSafeObject(item), ';');
        },

        addEnsureSafeMemberName: function (item) {
          this.current().body.push(this.ensureSafeMemberName(item), ';');
        },

        addEnsureSafeFunction: function (item) {
          this.current().body.push(this.ensureSafeFunction(item), ';');
        },

        addEnsureSafeAssignContext: function (item) {
          this.current().body.push(this.ensureSafeAssignContext(item), ';');
        },

        ensureSafeObject: function (item) {
          return 'ensureSafeObject(' + item + ',text)';
        },

        ensureSafeMemberName: function (item) {
          return 'ensureSafeMemberName(' + item + ',text)';
        },

        ensureSafeFunction: function (item) {
          return 'ensureSafeFunction(' + item + ',text)';
        },

        getStringValue: function (item) {
          this.assign(item, 'getStringValue(' + item + ')');
        },

        ensureSafeAssignContext: function (item) {
          return 'ensureSafeAssignContext(' + item + ',text)';
        },

        lazyRecurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
          var self = this;
          return function () {
            self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
          };
        },

        lazyAssign: function (id, value) {
          var self = this;
          return function () {
            self.assign(id, value);
          };
        },

        stringEscapeRegex: /[^ a-zA-Z0-9]/g,

        stringEscapeFn: function (c) {
          return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
        },

        escape: function (value) {
          if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
          if (isNumber(value)) return value.toString();
          if (value === true) return 'true';
          if (value === false) return 'false';
          if (value === null) return 'null';
          if (typeof value === 'undefined') return 'undefined';

          throw $parseMinErr('esc', 'IMPOSSIBLE');
        },

        nextId: function (skip, init) {
          var id = 'v' + this.state.nextId++;
          if (!skip) {
            this.current().vars.push(id + (init ? '=' + init : ''));
          }
          return id;
        },

        current: function () {
          return this.state[this.state.computing];
        }
      };

      function ASTInterpreter(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
      }

      ASTInterpreter.prototype = {
        compile: function (expression, expensiveChecks) {
          var self = this;
          var ast = this.astBuilder.ast(expression);
          this.expression = expression;
          this.expensiveChecks = expensiveChecks;
          findConstantAndWatchExpressions(ast, self.$filter);
          var assignable;
          var assign;
          if (assignable = assignableAST(ast)) {
            assign = this.recurse(assignable);
          }
          var toWatch = getInputs(ast.body);
          var inputs;
          if (toWatch) {
            inputs = [];
            forEach(toWatch, function (watch, key) {
              var input = self.recurse(watch);
              watch.input = input;
              inputs.push(input);
              watch.watchId = key;
            });
          }
          var expressions = [];
          forEach(ast.body, function (expression) {
            expressions.push(self.recurse(expression.expression));
          });
          var fn = ast.body.length === 0 ? noop : ast.body.length === 1 ? expressions[0] : function (scope, locals) {
            var lastValue;
            forEach(expressions, function (exp) {
              lastValue = exp(scope, locals);
            });
            return lastValue;
          };
          if (assign) {
            fn.assign = function (scope, value, locals) {
              return assign(scope, locals, value);
            };
          }
          if (inputs) {
            fn.inputs = inputs;
          }
          fn.literal = isLiteral(ast);
          fn.constant = isConstant(ast);
          return fn;
        },

        recurse: function (ast, context, create) {
          var left,
              right,
              self = this,
              args,
              expression;
          if (ast.input) {
            return this.inputs(ast.input, ast.watchId);
          }
          switch (ast.type) {
            case AST.Literal:
              return this.value(ast.value, context);
            case AST.UnaryExpression:
              right = this.recurse(ast.argument);
              return this['unary' + ast.operator](right, context);
            case AST.BinaryExpression:
              left = this.recurse(ast.left);
              right = this.recurse(ast.right);
              return this['binary' + ast.operator](left, right, context);
            case AST.LogicalExpression:
              left = this.recurse(ast.left);
              right = this.recurse(ast.right);
              return this['binary' + ast.operator](left, right, context);
            case AST.ConditionalExpression:
              return this['ternary?:'](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);
            case AST.Identifier:
              ensureSafeMemberName(ast.name, self.expression);
              return self.identifier(ast.name, self.expensiveChecks || isPossiblyDangerousMemberName(ast.name), context, create, self.expression);
            case AST.MemberExpression:
              left = this.recurse(ast.object, false, !!create);
              if (!ast.computed) {
                ensureSafeMemberName(ast.property.name, self.expression);
                right = ast.property.name;
              }
              if (ast.computed) right = this.recurse(ast.property);
              return ast.computed ? this.computedMember(left, right, context, create, self.expression) : this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
            case AST.CallExpression:
              args = [];
              forEach(ast.arguments, function (expr) {
                args.push(self.recurse(expr));
              });
              if (ast.filter) right = this.$filter(ast.callee.name);
              if (!ast.filter) right = this.recurse(ast.callee, true);
              return ast.filter ? function (scope, locals, assign, inputs) {
                var values = [];
                for (var i = 0; i < args.length; ++i) {
                  values.push(args[i](scope, locals, assign, inputs));
                }
                var value = right.apply(undefined, values, inputs);
                return context ? { context: undefined, name: undefined, value: value } : value;
              } : function (scope, locals, assign, inputs) {
                var rhs = right(scope, locals, assign, inputs);
                var value;
                if (rhs.value != null) {
                  ensureSafeObject(rhs.context, self.expression);
                  ensureSafeFunction(rhs.value, self.expression);
                  var values = [];
                  for (var i = 0; i < args.length; ++i) {
                    values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
                  }
                  value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
                }
                return context ? { value: value } : value;
              };
            case AST.AssignmentExpression:
              left = this.recurse(ast.left, true, 1);
              right = this.recurse(ast.right);
              return function (scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs = right(scope, locals, assign, inputs);
                ensureSafeObject(lhs.value, self.expression);
                ensureSafeAssignContext(lhs.context);
                lhs.context[lhs.name] = rhs;
                return context ? { value: rhs } : rhs;
              };
            case AST.ArrayExpression:
              args = [];
              forEach(ast.elements, function (expr) {
                args.push(self.recurse(expr));
              });
              return function (scope, locals, assign, inputs) {
                var value = [];
                for (var i = 0; i < args.length; ++i) {
                  value.push(args[i](scope, locals, assign, inputs));
                }
                return context ? { value: value } : value;
              };
            case AST.ObjectExpression:
              args = [];
              forEach(ast.properties, function (property) {
                if (property.computed) {
                  args.push({ key: self.recurse(property.key),
                    computed: true,
                    value: self.recurse(property.value)
                  });
                } else {
                  args.push({ key: property.key.type === AST.Identifier ? property.key.name : '' + property.key.value,
                    computed: false,
                    value: self.recurse(property.value)
                  });
                }
              });
              return function (scope, locals, assign, inputs) {
                var value = {};
                for (var i = 0; i < args.length; ++i) {
                  if (args[i].computed) {
                    value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
                  } else {
                    value[args[i].key] = args[i].value(scope, locals, assign, inputs);
                  }
                }
                return context ? { value: value } : value;
              };
            case AST.ThisExpression:
              return function (scope) {
                return context ? { value: scope } : scope;
              };
            case AST.LocalsExpression:
              return function (scope, locals) {
                return context ? { value: locals } : locals;
              };
            case AST.NGValueParameter:
              return function (scope, locals, assign) {
                return context ? { value: assign } : assign;
              };
          }
        },

        'unary+': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = argument(scope, locals, assign, inputs);
            if (isDefined(arg)) {
              arg = +arg;
            } else {
              arg = 0;
            }
            return context ? { value: arg } : arg;
          };
        },
        'unary-': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = argument(scope, locals, assign, inputs);
            if (isDefined(arg)) {
              arg = -arg;
            } else {
              arg = 0;
            }
            return context ? { value: arg } : arg;
          };
        },
        'unary!': function (argument, context) {
          return function (scope, locals, assign, inputs) {
            var arg = !argument(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary+': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs = right(scope, locals, assign, inputs);
            var arg = plusFn(lhs, rhs);
            return context ? { value: arg } : arg;
          };
        },
        'binary-': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs = right(scope, locals, assign, inputs);
            var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
            return context ? { value: arg } : arg;
          };
        },
        'binary*': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary/': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary%': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary===': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary!==': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary==': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary!=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary<': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary>': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary<=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary>=': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary&&': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'binary||': function (left, right, context) {
          return function (scope, locals, assign, inputs) {
            var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        'ternary?:': function (test, alternate, consequent, context) {
          return function (scope, locals, assign, inputs) {
            var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
            return context ? { value: arg } : arg;
          };
        },
        value: function (value, context) {
          return function () {
            return context ? { context: undefined, name: undefined, value: value } : value;
          };
        },
        identifier: function (name, expensiveChecks, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var base = locals && name in locals ? locals : scope;
            if (create && create !== 1 && base && !base[name]) {
              base[name] = {};
            }
            var value = base ? base[name] : undefined;
            if (expensiveChecks) {
              ensureSafeObject(value, expression);
            }
            if (context) {
              return { context: base, name: name, value: value };
            } else {
              return value;
            }
          };
        },
        computedMember: function (left, right, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            var rhs;
            var value;
            if (lhs != null) {
              rhs = right(scope, locals, assign, inputs);
              rhs = getStringValue(rhs);
              ensureSafeMemberName(rhs, expression);
              if (create && create !== 1) {
                ensureSafeAssignContext(lhs);
                if (lhs && !lhs[rhs]) {
                  lhs[rhs] = {};
                }
              }
              value = lhs[rhs];
              ensureSafeObject(value, expression);
            }
            if (context) {
              return { context: lhs, name: rhs, value: value };
            } else {
              return value;
            }
          };
        },
        nonComputedMember: function (left, right, expensiveChecks, context, create, expression) {
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs);
            if (create && create !== 1) {
              ensureSafeAssignContext(lhs);
              if (lhs && !lhs[right]) {
                lhs[right] = {};
              }
            }
            var value = lhs != null ? lhs[right] : undefined;
            if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
              ensureSafeObject(value, expression);
            }
            if (context) {
              return { context: lhs, name: right, value: value };
            } else {
              return value;
            }
          };
        },
        inputs: function (input, watchId) {
          return function (scope, value, locals, inputs) {
            if (inputs) return inputs[watchId];
            return input(scope, value, locals);
          };
        }
      };

      /**
       * @constructor
       */
      var Parser = function (lexer, $filter, options) {
        this.lexer = lexer;
        this.$filter = $filter;
        this.options = options;
        this.ast = new AST(lexer, options);
        this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) : new ASTCompiler(this.ast, $filter);
      };

      Parser.prototype = {
        constructor: Parser,

        parse: function (text) {
          return this.astCompiler.compile(text, this.options.expensiveChecks);
        }
      };

      function isPossiblyDangerousMemberName(name) {
        return name == 'constructor';
      }

      var objectValueOf = Object.prototype.valueOf;

      function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
      }

      ///////////////////////////////////

      /**
       * @ngdoc service
       * @name $parse
       * @kind function
       *
       * @description
       *
       * Converts Angular {@link guide/expression expression} into a function.
       *
       * ```js
       *   var getter = $parse('user.name');
       *   var setter = getter.assign;
       *   var context = {user:{name:'angular'}};
       *   var locals = {user:{name:'local'}};
       *
       *   expect(getter(context)).toEqual('angular');
       *   setter(context, 'newValue');
       *   expect(context.user.name).toEqual('newValue');
       *   expect(getter(context, locals)).toEqual('local');
       * ```
       *
       *
       * @param {string} expression String expression to compile.
       * @returns {function(context, locals)} a function which represents the compiled expression:
       *
       *    * `context` – `{object}` – an object against which any expressions embedded in the strings
       *      are evaluated against (typically a scope object).
       *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
       *      `context`.
       *
       *    The returned function also has the following properties:
       *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
       *        literal.
       *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
       *        constant literals.
       *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
       *        set to a function to change its value on the given context.
       *
       */

      /**
       * @ngdoc provider
       * @name $parseProvider
       *
       * @description
       * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
       *  service.
       */
      function $ParseProvider() {
        var cacheDefault = createMap();
        var cacheExpensive = createMap();
        var literals = {
          'true': true,
          'false': false,
          'null': null,
          'undefined': undefined
        };
        var identStart, identContinue;

        /**
         * @ngdoc method
         * @name $parseProvider#addLiteral
         * @description
         *
         * Configure $parse service to add literal values that will be present as literal at expressions.
         *
         * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
         * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
         *
         **/
        this.addLiteral = function (literalName, literalValue) {
          literals[literalName] = literalValue;
        };

        /**
         * @ngdoc method
         * @name $parseProvider#setIdentifierFns
         * @description
         *
         * Allows defining the set of characters that are allowed in Angular expressions. The function
         * `identifierStart` will get called to know if a given character is a valid character to be the
         * first character for an identifier. The function `identifierContinue` will get called to know if
         * a given character is a valid character to be a follow-up identifier character. The functions
         * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
         * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
         * mind that the `string` parameter can be two characters long depending on the character
         * representation. It is expected for the function to return `true` or `false`, whether that
         * character is allowed or not.
         *
         * Since this function will be called extensivelly, keep the implementation of these functions fast,
         * as the performance of these functions have a direct impact on the expressions parsing speed.
         *
         * @param {function=} identifierStart The function that will decide whether the given character is
         *   a valid identifier start character.
         * @param {function=} identifierContinue The function that will decide whether the given character is
         *   a valid identifier continue character.
         */
        this.setIdentifierFns = function (identifierStart, identifierContinue) {
          identStart = identifierStart;
          identContinue = identifierContinue;
          return this;
        };

        this.$get = ['$filter', function ($filter) {
          var noUnsafeEval = csp().noUnsafeEval;
          var $parseOptions = {
            csp: noUnsafeEval,
            expensiveChecks: false,
            literals: copy(literals),
            isIdentifierStart: isFunction(identStart) && identStart,
            isIdentifierContinue: isFunction(identContinue) && identContinue
          },
              $parseOptionsExpensive = {
            csp: noUnsafeEval,
            expensiveChecks: true,
            literals: copy(literals),
            isIdentifierStart: isFunction(identStart) && identStart,
            isIdentifierContinue: isFunction(identContinue) && identContinue
          };
          var runningChecksEnabled = false;

          $parse.$$runningExpensiveChecks = function () {
            return runningChecksEnabled;
          };

          return $parse;

          function $parse(exp, interceptorFn, expensiveChecks) {
            var parsedExpression, oneTime, cacheKey;

            expensiveChecks = expensiveChecks || runningChecksEnabled;

            switch (typeof exp) {
              case 'string':
                exp = exp.trim();
                cacheKey = exp;

                var cache = expensiveChecks ? cacheExpensive : cacheDefault;
                parsedExpression = cache[cacheKey];

                if (!parsedExpression) {
                  if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
                    oneTime = true;
                    exp = exp.substring(2);
                  }
                  var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
                  var lexer = new Lexer(parseOptions);
                  var parser = new Parser(lexer, $filter, parseOptions);
                  parsedExpression = parser.parse(exp);
                  if (parsedExpression.constant) {
                    parsedExpression.$$watchDelegate = constantWatchDelegate;
                  } else if (oneTime) {
                    parsedExpression.$$watchDelegate = parsedExpression.literal ? oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
                  } else if (parsedExpression.inputs) {
                    parsedExpression.$$watchDelegate = inputsWatchDelegate;
                  }
                  if (expensiveChecks) {
                    parsedExpression = expensiveChecksInterceptor(parsedExpression);
                  }
                  cache[cacheKey] = parsedExpression;
                }
                return addInterceptor(parsedExpression, interceptorFn);

              case 'function':
                return addInterceptor(exp, interceptorFn);

              default:
                return addInterceptor(noop, interceptorFn);
            }
          }

          function expensiveChecksInterceptor(fn) {
            if (!fn) return fn;
            expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
            expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
            expensiveCheckFn.constant = fn.constant;
            expensiveCheckFn.literal = fn.literal;
            for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
              fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
            }
            expensiveCheckFn.inputs = fn.inputs;

            return expensiveCheckFn;

            function expensiveCheckFn(scope, locals, assign, inputs) {
              var expensiveCheckOldValue = runningChecksEnabled;
              runningChecksEnabled = true;
              try {
                return fn(scope, locals, assign, inputs);
              } finally {
                runningChecksEnabled = expensiveCheckOldValue;
              }
            }
          }

          function expressionInputDirtyCheck(newValue, oldValueOfValue) {

            if (newValue == null || oldValueOfValue == null) {
              // null/undefined
              return newValue === oldValueOfValue;
            }

            if (typeof newValue === 'object') {

              // attempt to convert the value to a primitive type
              // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
              //             be cheaply dirty-checked
              newValue = getValueOf(newValue);

              if (typeof newValue === 'object') {
                // objects/arrays are not supported - deep-watching them would be too expensive
                return false;
              }

              // fall-through to the primitive equality check
            }

            //Primitive or NaN
            return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
          }

          function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
            var inputExpressions = parsedExpression.inputs;
            var lastResult;

            if (inputExpressions.length === 1) {
              var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
              inputExpressions = inputExpressions[0];
              return scope.$watch(function expressionInputWatch(scope) {
                var newInputValue = inputExpressions(scope);
                if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
                  lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
                  oldInputValueOf = newInputValue && getValueOf(newInputValue);
                }
                return lastResult;
              }, listener, objectEquality, prettyPrintExpression);
            }

            var oldInputValueOfValues = [];
            var oldInputValues = [];
            for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
              oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
              oldInputValues[i] = null;
            }

            return scope.$watch(function expressionInputsWatch(scope) {
              var changed = false;

              for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                var newInputValue = inputExpressions[i](scope);
                if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
                  oldInputValues[i] = newInputValue;
                  oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                }
              }

              if (changed) {
                lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
              }

              return lastResult;
            }, listener, objectEquality, prettyPrintExpression);
          }

          function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
            var unwatch, lastValue;
            return unwatch = scope.$watch(function oneTimeWatch(scope) {
              return parsedExpression(scope);
            }, function oneTimeListener(value, old, scope) {
              lastValue = value;
              if (isFunction(listener)) {
                listener.apply(this, arguments);
              }
              if (isDefined(value)) {
                scope.$$postDigest(function () {
                  if (isDefined(lastValue)) {
                    unwatch();
                  }
                });
              }
            }, objectEquality);
          }

          function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
            var unwatch, lastValue;
            return unwatch = scope.$watch(function oneTimeWatch(scope) {
              return parsedExpression(scope);
            }, function oneTimeListener(value, old, scope) {
              lastValue = value;
              if (isFunction(listener)) {
                listener.call(this, value, old, scope);
              }
              if (isAllDefined(value)) {
                scope.$$postDigest(function () {
                  if (isAllDefined(lastValue)) unwatch();
                });
              }
            }, objectEquality);

            function isAllDefined(value) {
              var allDefined = true;
              forEach(value, function (val) {
                if (!isDefined(val)) allDefined = false;
              });
              return allDefined;
            }
          }

          function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
            var unwatch;
            return unwatch = scope.$watch(function constantWatch(scope) {
              unwatch();
              return parsedExpression(scope);
            }, listener, objectEquality);
          }

          function addInterceptor(parsedExpression, interceptorFn) {
            if (!interceptorFn) return parsedExpression;
            var watchDelegate = parsedExpression.$$watchDelegate;
            var useInputs = false;

            var regularWatch = watchDelegate !== oneTimeLiteralWatchDelegate && watchDelegate !== oneTimeWatchDelegate;

            var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
              var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
              return interceptorFn(value, scope, locals);
            } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
              var value = parsedExpression(scope, locals, assign, inputs);
              var result = interceptorFn(value, scope, locals);
              // we only return the interceptor's result if the
              // initial value is defined (for bind-once)
              return isDefined(value) ? result : value;
            };

            // Propagate $$watchDelegates other then inputsWatchDelegate
            if (parsedExpression.$$watchDelegate && parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
              fn.$$watchDelegate = parsedExpression.$$watchDelegate;
            } else if (!interceptorFn.$stateful) {
              // If there is an interceptor, but no watchDelegate then treat the interceptor like
              // we treat filters - it is assumed to be a pure function unless flagged with $stateful
              fn.$$watchDelegate = inputsWatchDelegate;
              useInputs = !parsedExpression.inputs;
              fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
            }

            return fn;
          }
        }];
      }

      /**
       * @ngdoc service
       * @name $q
       * @requires $rootScope
       *
       * @description
       * A service that helps you run functions asynchronously, and use their return values (or exceptions)
       * when they are done processing.
       *
       * This is an implementation of promises/deferred objects inspired by
       * [Kris Kowal's Q](https://github.com/kriskowal/q).
       *
       * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
       * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
       *
       * # $q constructor
       *
       * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
       * function as the first argument. This is similar to the native Promise implementation from ES6,
       * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
       *
       * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
       * available yet.
       *
       * It can be used like so:
       *
       * ```js
       *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
       *   // are available in the current lexical scope (they could have been injected or passed in).
       *
       *   function asyncGreet(name) {
       *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
       *     return $q(function(resolve, reject) {
       *       setTimeout(function() {
       *         if (okToGreet(name)) {
       *           resolve('Hello, ' + name + '!');
       *         } else {
       *           reject('Greeting ' + name + ' is not allowed.');
       *         }
       *       }, 1000);
       *     });
       *   }
       *
       *   var promise = asyncGreet('Robin Hood');
       *   promise.then(function(greeting) {
       *     alert('Success: ' + greeting);
       *   }, function(reason) {
       *     alert('Failed: ' + reason);
       *   });
       * ```
       *
       * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
       *
       * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
       *
       * However, the more traditional CommonJS-style usage is still available, and documented below.
       *
       * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
       * interface for interacting with an object that represents the result of an action that is
       * performed asynchronously, and may or may not be finished at any given point in time.
       *
       * From the perspective of dealing with error handling, deferred and promise APIs are to
       * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
       *
       * ```js
       *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
       *   // are available in the current lexical scope (they could have been injected or passed in).
       *
       *   function asyncGreet(name) {
       *     var deferred = $q.defer();
       *
       *     setTimeout(function() {
       *       deferred.notify('About to greet ' + name + '.');
       *
       *       if (okToGreet(name)) {
       *         deferred.resolve('Hello, ' + name + '!');
       *       } else {
       *         deferred.reject('Greeting ' + name + ' is not allowed.');
       *       }
       *     }, 1000);
       *
       *     return deferred.promise;
       *   }
       *
       *   var promise = asyncGreet('Robin Hood');
       *   promise.then(function(greeting) {
       *     alert('Success: ' + greeting);
       *   }, function(reason) {
       *     alert('Failed: ' + reason);
       *   }, function(update) {
       *     alert('Got notification: ' + update);
       *   });
       * ```
       *
       * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
       * comes in the way of guarantees that promise and deferred APIs make, see
       * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
       *
       * Additionally the promise api allows for composition that is very hard to do with the
       * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
       * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
       * section on serial or parallel joining of promises.
       *
       * # The Deferred API
       *
       * A new instance of deferred is constructed by calling `$q.defer()`.
       *
       * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
       * that can be used for signaling the successful or unsuccessful completion, as well as the status
       * of the task.
       *
       * **Methods**
       *
       * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
       *   constructed via `$q.reject`, the promise will be rejected instead.
       * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
       *   resolving it with a rejection constructed via `$q.reject`.
       * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
       *   multiple times before the promise is either resolved or rejected.
       *
       * **Properties**
       *
       * - promise – `{Promise}` – promise object associated with this deferred.
       *
       *
       * # The Promise API
       *
       * A new promise instance is created when a deferred instance is created and can be retrieved by
       * calling `deferred.promise`.
       *
       * The purpose of the promise object is to allow for interested parties to get access to the result
       * of the deferred task when it completes.
       *
       * **Methods**
       *
       * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
       *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
       *   as soon as the result is available. The callbacks are called with a single argument: the result
       *   or rejection reason. Additionally, the notify callback may be called zero or more times to
       *   provide a progress indication, before the promise is resolved or rejected.
       *
       *   This method *returns a new promise* which is resolved or rejected via the return value of the
       *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
       *   with the value which is resolved in that promise using
       *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
       *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
       *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
       *   arguments are optional.
       *
       * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
       *
       * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
       *   but to do so without modifying the final value. This is useful to release resources or do some
       *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
       *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
       *   more information.
       *
       * # Chaining promises
       *
       * Because calling the `then` method of a promise returns a new derived promise, it is easily
       * possible to create a chain of promises:
       *
       * ```js
       *   promiseB = promiseA.then(function(result) {
       *     return result + 1;
       *   });
       *
       *   // promiseB will be resolved immediately after promiseA is resolved and its value
       *   // will be the result of promiseA incremented by 1
       * ```
       *
       * It is possible to create chains of any length and since a promise can be resolved with another
       * promise (which will defer its resolution further), it is possible to pause/defer resolution of
       * the promises at any point in the chain. This makes it possible to implement powerful APIs like
       * $http's response interceptors.
       *
       *
       * # Differences between Kris Kowal's Q and $q
       *
       *  There are two main differences:
       *
       * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
       *   mechanism in angular, which means faster propagation of resolution or rejection into your
       *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
       * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
       *   all the important functionality needed for common async tasks.
       *
       * # Testing
       *
       *  ```js
       *    it('should simulate promise', inject(function($q, $rootScope) {
       *      var deferred = $q.defer();
       *      var promise = deferred.promise;
       *      var resolvedValue;
       *
       *      promise.then(function(value) { resolvedValue = value; });
       *      expect(resolvedValue).toBeUndefined();
       *
       *      // Simulate resolving of promise
       *      deferred.resolve(123);
       *      // Note that the 'then' function does not get called synchronously.
       *      // This is because we want the promise API to always be async, whether or not
       *      // it got called synchronously or asynchronously.
       *      expect(resolvedValue).toBeUndefined();
       *
       *      // Propagate promise resolution to 'then' functions using $apply().
       *      $rootScope.$apply();
       *      expect(resolvedValue).toEqual(123);
       *    }));
       *  ```
       *
       * @param {function(function, function)} resolver Function which is responsible for resolving or
       *   rejecting the newly created promise. The first parameter is a function which resolves the
       *   promise, the second parameter is a function which rejects the promise.
       *
       * @returns {Promise} The newly created promise.
       */
      function $QProvider() {

        this.$get = ['$rootScope', '$exceptionHandler', function ($rootScope, $exceptionHandler) {
          return qFactory(function (callback) {
            $rootScope.$evalAsync(callback);
          }, $exceptionHandler);
        }];
      }

      function $$QProvider() {
        this.$get = ['$browser', '$exceptionHandler', function ($browser, $exceptionHandler) {
          return qFactory(function (callback) {
            $browser.defer(callback);
          }, $exceptionHandler);
        }];
      }

      /**
       * Constructs a promise manager.
       *
       * @param {function(function)} nextTick Function for executing functions in the next turn.
       * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
       *     debugging purposes.
       * @returns {object} Promise manager.
       */
      function qFactory(nextTick, exceptionHandler) {
        var $qMinErr = minErr('$q', TypeError);

        /**
         * @ngdoc method
         * @name ng.$q#defer
         * @kind function
         *
         * @description
         * Creates a `Deferred` object which represents a task which will finish in the future.
         *
         * @returns {Deferred} Returns a new instance of deferred.
         */
        var defer = function () {
          var d = new Deferred();
          //Necessary to support unbound execution :/
          d.resolve = simpleBind(d, d.resolve);
          d.reject = simpleBind(d, d.reject);
          d.notify = simpleBind(d, d.notify);
          return d;
        };

        function Promise() {
          this.$$state = { status: 0 };
        }

        extend(Promise.prototype, {
          then: function (onFulfilled, onRejected, progressBack) {
            if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
              return this;
            }
            var result = new Deferred();

            this.$$state.pending = this.$$state.pending || [];
            this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
            if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

            return result.promise;
          },

          "catch": function (callback) {
            return this.then(null, callback);
          },

          "finally": function (callback, progressBack) {
            return this.then(function (value) {
              return handleCallback(value, true, callback);
            }, function (error) {
              return handleCallback(error, false, callback);
            }, progressBack);
          }
        });

        //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
        function simpleBind(context, fn) {
          return function (value) {
            fn.call(context, value);
          };
        }

        function processQueue(state) {
          var fn, deferred, pending;

          pending = state.pending;
          state.processScheduled = false;
          state.pending = undefined;
          for (var i = 0, ii = pending.length; i < ii; ++i) {
            deferred = pending[i][0];
            fn = pending[i][state.status];
            try {
              if (isFunction(fn)) {
                deferred.resolve(fn(state.value));
              } else if (state.status === 1) {
                deferred.resolve(state.value);
              } else {
                deferred.reject(state.value);
              }
            } catch (e) {
              deferred.reject(e);
              exceptionHandler(e);
            }
          }
        }

        function scheduleProcessQueue(state) {
          if (state.processScheduled || !state.pending) return;
          state.processScheduled = true;
          nextTick(function () {
            processQueue(state);
          });
        }

        function Deferred() {
          this.promise = new Promise();
        }

        extend(Deferred.prototype, {
          resolve: function (val) {
            if (this.promise.$$state.status) return;
            if (val === this.promise) {
              this.$$reject($qMinErr('qcycle', "Expected promise to be resolved with value other than itself '{0}'", val));
            } else {
              this.$$resolve(val);
            }
          },

          $$resolve: function (val) {
            var then;
            var that = this;
            var done = false;
            try {
              if (isObject(val) || isFunction(val)) then = val && val.then;
              if (isFunction(then)) {
                this.promise.$$state.status = -1;
                then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
              } else {
                this.promise.$$state.value = val;
                this.promise.$$state.status = 1;
                scheduleProcessQueue(this.promise.$$state);
              }
            } catch (e) {
              rejectPromise(e);
              exceptionHandler(e);
            }

            function resolvePromise(val) {
              if (done) return;
              done = true;
              that.$$resolve(val);
            }
            function rejectPromise(val) {
              if (done) return;
              done = true;
              that.$$reject(val);
            }
          },

          reject: function (reason) {
            if (this.promise.$$state.status) return;
            this.$$reject(reason);
          },

          $$reject: function (reason) {
            this.promise.$$state.value = reason;
            this.promise.$$state.status = 2;
            scheduleProcessQueue(this.promise.$$state);
          },

          notify: function (progress) {
            var callbacks = this.promise.$$state.pending;

            if (this.promise.$$state.status <= 0 && callbacks && callbacks.length) {
              nextTick(function () {
                var callback, result;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  result = callbacks[i][0];
                  callback = callbacks[i][3];
                  try {
                    result.notify(isFunction(callback) ? callback(progress) : progress);
                  } catch (e) {
                    exceptionHandler(e);
                  }
                }
              });
            }
          }
        });

        /**
         * @ngdoc method
         * @name $q#reject
         * @kind function
         *
         * @description
         * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
         * used to forward rejection in a chain of promises. If you are dealing with the last promise in
         * a promise chain, you don't need to worry about it.
         *
         * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
         * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
         * a promise error callback and you want to forward the error to the promise derived from the
         * current promise, you have to "rethrow" the error by returning a rejection constructed via
         * `reject`.
         *
         * ```js
         *   promiseB = promiseA.then(function(result) {
         *     // success: do something and resolve promiseB
         *     //          with the old or a new result
         *     return result;
         *   }, function(reason) {
         *     // error: handle the error if possible and
         *     //        resolve promiseB with newPromiseOrValue,
         *     //        otherwise forward the rejection to promiseB
         *     if (canHandle(reason)) {
         *      // handle the error and recover
         *      return newPromiseOrValue;
         *     }
         *     return $q.reject(reason);
         *   });
         * ```
         *
         * @param {*} reason Constant, message, exception or an object representing the rejection reason.
         * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
         */
        var reject = function (reason) {
          var result = new Deferred();
          result.reject(reason);
          return result.promise;
        };

        var makePromise = function makePromise(value, resolved) {
          var result = new Deferred();
          if (resolved) {
            result.resolve(value);
          } else {
            result.reject(value);
          }
          return result.promise;
        };

        var handleCallback = function handleCallback(value, isResolved, callback) {
          var callbackOutput = null;
          try {
            if (isFunction(callback)) callbackOutput = callback();
          } catch (e) {
            return makePromise(e, false);
          }
          if (isPromiseLike(callbackOutput)) {
            return callbackOutput.then(function () {
              return makePromise(value, isResolved);
            }, function (error) {
              return makePromise(error, false);
            });
          } else {
            return makePromise(value, isResolved);
          }
        };

        /**
         * @ngdoc method
         * @name $q#when
         * @kind function
         *
         * @description
         * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
         * This is useful when you are dealing with an object that might or might not be a promise, or if
         * the promise comes from a source that can't be trusted.
         *
         * @param {*} value Value or a promise
         * @param {Function=} successCallback
         * @param {Function=} errorCallback
         * @param {Function=} progressCallback
         * @returns {Promise} Returns a promise of the passed value or promise
         */

        var when = function (value, callback, errback, progressBack) {
          var result = new Deferred();
          result.resolve(value);
          return result.promise.then(callback, errback, progressBack);
        };

        /**
         * @ngdoc method
         * @name $q#resolve
         * @kind function
         *
         * @description
         * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
         *
         * @param {*} value Value or a promise
         * @param {Function=} successCallback
         * @param {Function=} errorCallback
         * @param {Function=} progressCallback
         * @returns {Promise} Returns a promise of the passed value or promise
         */
        var resolve = when;

        /**
         * @ngdoc method
         * @name $q#all
         * @kind function
         *
         * @description
         * Combines multiple promises into a single promise that is resolved when all of the input
         * promises are resolved.
         *
         * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
         * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
         *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
         *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
         *   with the same rejection value.
         */

        function all(promises) {
          var deferred = new Deferred(),
              counter = 0,
              results = isArray(promises) ? [] : {};

          forEach(promises, function (promise, key) {
            counter++;
            when(promise).then(function (value) {
              if (results.hasOwnProperty(key)) return;
              results[key] = value;
              if (! --counter) deferred.resolve(results);
            }, function (reason) {
              if (results.hasOwnProperty(key)) return;
              deferred.reject(reason);
            });
          });

          if (counter === 0) {
            deferred.resolve(results);
          }

          return deferred.promise;
        }

        /**
         * @ngdoc method
         * @name $q#race
         * @kind function
         *
         * @description
         * Returns a promise that resolves or rejects as soon as one of those promises
         * resolves or rejects, with the value or reason from that promise.
         *
         * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
         * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
         * resolves or rejects, with the value or reason from that promise.
         */

        function race(promises) {
          var deferred = defer();

          forEach(promises, function (promise) {
            when(promise).then(deferred.resolve, deferred.reject);
          });

          return deferred.promise;
        }

        var $Q = function Q(resolver) {
          if (!isFunction(resolver)) {
            throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
          }

          var deferred = new Deferred();

          function resolveFn(value) {
            deferred.resolve(value);
          }

          function rejectFn(reason) {
            deferred.reject(reason);
          }

          resolver(resolveFn, rejectFn);

          return deferred.promise;
        };

        // Let's make the instanceof operator work for promises, so that
        // `new $q(fn) instanceof $q` would evaluate to true.
        $Q.prototype = Promise.prototype;

        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = all;
        $Q.race = race;

        return $Q;
      }

      function $$RAFProvider() {
        //rAF
        this.$get = ['$window', '$timeout', function ($window, $timeout) {
          var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame;

          var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;

          var rafSupported = !!requestAnimationFrame;
          var raf = rafSupported ? function (fn) {
            var id = requestAnimationFrame(fn);
            return function () {
              cancelAnimationFrame(id);
            };
          } : function (fn) {
            var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
            return function () {
              $timeout.cancel(timer);
            };
          };

          raf.supported = rafSupported;

          return raf;
        }];
      }

      /**
       * DESIGN NOTES
       *
       * The design decisions behind the scope are heavily favored for speed and memory consumption.
       *
       * The typical use of scope is to watch the expressions, which most of the time return the same
       * value as last time so we optimize the operation.
       *
       * Closures construction is expensive in terms of speed as well as memory:
       *   - No closures, instead use prototypical inheritance for API
       *   - Internal state needs to be stored on scope directly, which means that private state is
       *     exposed as $$____ properties
       *
       * Loop operations are optimized by using while(count--) { ... }
       *   - This means that in order to keep the same order of execution as addition we have to add
       *     items to the array at the beginning (unshift) instead of at the end (push)
       *
       * Child scopes are created and removed often
       *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
       *
       * There are fewer watches than observers. This is why you don't want the observer to be implemented
       * in the same way as watch. Watch requires return of the initialization function which is expensive
       * to construct.
       */

      /**
       * @ngdoc provider
       * @name $rootScopeProvider
       * @description
       *
       * Provider for the $rootScope service.
       */

      /**
       * @ngdoc method
       * @name $rootScopeProvider#digestTtl
       * @description
       *
       * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
       * assuming that the model is unstable.
       *
       * The current default is 10 iterations.
       *
       * In complex applications it's possible that the dependencies between `$watch`s will result in
       * several digest iterations. However if an application needs more than the default 10 digest
       * iterations for its model to stabilize then you should investigate what is causing the model to
       * continuously change during the digest.
       *
       * Increasing the TTL could have performance implications, so you should not change it without
       * proper justification.
       *
       * @param {number} limit The number of digest iterations.
       */

      /**
       * @ngdoc service
       * @name $rootScope
       * @description
       *
       * Every application has a single root {@link ng.$rootScope.Scope scope}.
       * All other scopes are descendant scopes of the root scope. Scopes provide separation
       * between the model and the view, via a mechanism for watching the model for changes.
       * They also provide event emission/broadcast and subscription facility. See the
       * {@link guide/scope developer guide on scopes}.
       */
      function $RootScopeProvider() {
        var TTL = 10;
        var $rootScopeMinErr = minErr('$rootScope');
        var lastDirtyWatch = null;
        var applyAsyncId = null;

        this.digestTtl = function (value) {
          if (arguments.length) {
            TTL = value;
          }
          return TTL;
        };

        function createChildScopeClass(parent) {
          function ChildScope() {
            this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
            this.$$listeners = {};
            this.$$listenerCount = {};
            this.$$watchersCount = 0;
            this.$id = nextUid();
            this.$$ChildScope = null;
          }
          ChildScope.prototype = parent;
          return ChildScope;
        }

        this.$get = ['$exceptionHandler', '$parse', '$browser', function ($exceptionHandler, $parse, $browser) {

          function destroyChildScope($event) {
            $event.currentScope.$$destroyed = true;
          }

          function cleanUpScope($scope) {

            if (msie === 9) {
              // There is a memory leak in IE9 if all child scopes are not disconnected
              // completely when a scope is destroyed. So this code will recurse up through
              // all this scopes children
              //
              // See issue https://github.com/angular/angular.js/issues/10706
              $scope.$$childHead && cleanUpScope($scope.$$childHead);
              $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
            }

            // The code below works around IE9 and V8's memory leaks
            //
            // See:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

            $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead = $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
          }

          /**
           * @ngdoc type
           * @name $rootScope.Scope
           *
           * @description
           * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
           * {@link auto.$injector $injector}. Child scopes are created using the
           * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
           * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
           * an in-depth introduction and usage examples.
           *
           *
           * # Inheritance
           * A scope can inherit from a parent scope, as in this example:
           * ```js
               var parent = $rootScope;
               var child = parent.$new();
                parent.salutation = "Hello";
               expect(child.salutation).toEqual('Hello');
                child.salutation = "Welcome";
               expect(child.salutation).toEqual('Welcome');
               expect(parent.salutation).toEqual('Hello');
           * ```
           *
           * When interacting with `Scope` in tests, additional helper methods are available on the
           * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
           * details.
           *
           *
           * @param {Object.<string, function()>=} providers Map of service factory which need to be
           *                                       provided for the current scope. Defaults to {@link ng}.
           * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
           *                              append/override services provided by `providers`. This is handy
           *                              when unit-testing and having the need to override a default
           *                              service.
           * @returns {Object} Newly created scope.
           *
           */
          function Scope() {
            this.$id = nextUid();
            this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
            this.$root = this;
            this.$$destroyed = false;
            this.$$listeners = {};
            this.$$listenerCount = {};
            this.$$watchersCount = 0;
            this.$$isolateBindings = null;
          }

          /**
           * @ngdoc property
           * @name $rootScope.Scope#$id
           *
           * @description
           * Unique scope ID (monotonically increasing) useful for debugging.
           */

          /**
           * @ngdoc property
           * @name $rootScope.Scope#$parent
           *
           * @description
           * Reference to the parent scope.
           */

          /**
           * @ngdoc property
           * @name $rootScope.Scope#$root
           *
           * @description
           * Reference to the root scope.
           */

          Scope.prototype = {
            constructor: Scope,
            /**
             * @ngdoc method
             * @name $rootScope.Scope#$new
             * @kind function
             *
             * @description
             * Creates a new child {@link ng.$rootScope.Scope scope}.
             *
             * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
             * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
             *
             * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
             * desired for the scope and its child scopes to be permanently detached from the parent and
             * thus stop participating in model change detection and listener notification by invoking.
             *
             * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
             *         parent scope. The scope is isolated, as it can not see parent scope properties.
             *         When creating widgets, it is useful for the widget to not accidentally read parent
             *         state.
             *
             * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
             *                              of the newly created scope. Defaults to `this` scope if not provided.
             *                              This is used when creating a transclude scope to correctly place it
             *                              in the scope hierarchy while maintaining the correct prototypical
             *                              inheritance.
             *
             * @returns {Object} The newly created child scope.
             *
             */
            $new: function (isolate, parent) {
              var child;

              parent = parent || this;

              if (isolate) {
                child = new Scope();
                child.$root = this.$root;
              } else {
                // Only create a child scope class if somebody asks for one,
                // but cache it to allow the VM to optimize lookups.
                if (!this.$$ChildScope) {
                  this.$$ChildScope = createChildScopeClass(this);
                }
                child = new this.$$ChildScope();
              }
              child.$parent = parent;
              child.$$prevSibling = parent.$$childTail;
              if (parent.$$childHead) {
                parent.$$childTail.$$nextSibling = child;
                parent.$$childTail = child;
              } else {
                parent.$$childHead = parent.$$childTail = child;
              }

              // When the new scope is not isolated or we inherit from `this`, and
              // the parent scope is destroyed, the property `$$destroyed` is inherited
              // prototypically. In all other cases, this property needs to be set
              // when the parent scope is destroyed.
              // The listener needs to be added after the parent is set
              if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

              return child;
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$watch
             * @kind function
             *
             * @description
             * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
             *
             * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
             *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
             *   its value when executed multiple times with the same input because it may be executed multiple
             *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
             *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
             * - The `listener` is called only when the value from the current `watchExpression` and the
             *   previous call to `watchExpression` are not equal (with the exception of the initial run,
             *   see below). Inequality is determined according to reference inequality,
             *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
             *    via the `!==` Javascript operator, unless `objectEquality == true`
             *   (see next point)
             * - When `objectEquality == true`, inequality of the `watchExpression` is determined
             *   according to the {@link angular.equals} function. To save the value of the object for
             *   later comparison, the {@link angular.copy} function is used. This therefore means that
             *   watching complex objects will have adverse memory and performance implications.
             * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
             *   This is achieved by rerunning the watchers until no changes are detected. The rerun
             *   iteration limit is 10 to prevent an infinite loop deadlock.
             *
             *
             * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
             * you can register a `watchExpression` function with no `listener`. (Be prepared for
             * multiple calls to your `watchExpression` because it will execute multiple times in a
             * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
             *
             * After a watcher is registered with the scope, the `listener` fn is called asynchronously
             * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
             * watcher. In rare cases, this is undesirable because the listener is called when the result
             * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
             * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
             * listener was called due to initialization.
             *
             *
             *
             * # Example
             * ```js
                 // let's assume that scope was dependency injected as the $rootScope
                 var scope = $rootScope;
                 scope.name = 'misko';
                 scope.counter = 0;
                  expect(scope.counter).toEqual(0);
                 scope.$watch('name', function(newValue, oldValue) {
                   scope.counter = scope.counter + 1;
                 });
                 expect(scope.counter).toEqual(0);
                  scope.$digest();
                 // the listener is always called during the first $digest loop after it was registered
                 expect(scope.counter).toEqual(1);
                  scope.$digest();
                 // but now it will not be called unless the value changes
                 expect(scope.counter).toEqual(1);
                  scope.name = 'adam';
                 scope.$digest();
                 expect(scope.counter).toEqual(2);
                    // Using a function as a watchExpression
                 var food;
                 scope.foodCounter = 0;
                 expect(scope.foodCounter).toEqual(0);
                 scope.$watch(
                   // This function returns the value being watched. It is called for each turn of the $digest loop
                   function() { return food; },
                   // This is the change listener, called when the value returned from the above function changes
                   function(newValue, oldValue) {
                     if ( newValue !== oldValue ) {
                       // Only increment the counter if the value changed
                       scope.foodCounter = scope.foodCounter + 1;
                     }
                   }
                 );
                 // No digest has been run so the counter will be zero
                 expect(scope.foodCounter).toEqual(0);
                  // Run the digest but since food has not changed count will still be zero
                 scope.$digest();
                 expect(scope.foodCounter).toEqual(0);
                  // Update food and run digest.  Now the counter will increment
                 food = 'cheeseburger';
                 scope.$digest();
                 expect(scope.foodCounter).toEqual(1);
              * ```
             *
             *
             *
             * @param {(function()|string)} watchExpression Expression that is evaluated on each
             *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
             *    a call to the `listener`.
             *
             *    - `string`: Evaluated as {@link guide/expression expression}
             *    - `function(scope)`: called with current `scope` as a parameter.
             * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
             *    of `watchExpression` changes.
             *
             *    - `newVal` contains the current value of the `watchExpression`
             *    - `oldVal` contains the previous value of the `watchExpression`
             *    - `scope` refers to the current scope
             * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
             *     comparing for reference equality.
             * @returns {function()} Returns a deregistration function for this listener.
             */
            $watch: function (watchExp, listener, objectEquality, prettyPrintExpression) {
              var get = $parse(watchExp);

              if (get.$$watchDelegate) {
                return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
              }
              var scope = this,
                  array = scope.$$watchers,
                  watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: prettyPrintExpression || watchExp,
                eq: !!objectEquality
              };

              lastDirtyWatch = null;

              if (!isFunction(listener)) {
                watcher.fn = noop;
              }

              if (!array) {
                array = scope.$$watchers = [];
              }
              // we use unshift since we use a while loop in $digest for speed.
              // the while loop reads in reverse order.
              array.unshift(watcher);
              incrementWatchersCount(this, 1);

              return function deregisterWatch() {
                if (arrayRemove(array, watcher) >= 0) {
                  incrementWatchersCount(scope, -1);
                }
                lastDirtyWatch = null;
              };
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$watchGroup
             * @kind function
             *
             * @description
             * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
             * If any one expression in the collection changes the `listener` is executed.
             *
             * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
             *   call to $digest() to see if any items changes.
             * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
             *
             * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
             * watched using {@link ng.$rootScope.Scope#$watch $watch()}
             *
             * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
             *    expression in `watchExpressions` changes
             *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
             *    those of `watchExpression`
             *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
             *    those of `watchExpression`
             *    The `scope` refers to the current scope.
             * @returns {function()} Returns a de-registration function for all listeners.
             */
            $watchGroup: function (watchExpressions, listener) {
              var oldValues = new Array(watchExpressions.length);
              var newValues = new Array(watchExpressions.length);
              var deregisterFns = [];
              var self = this;
              var changeReactionScheduled = false;
              var firstRun = true;

              if (!watchExpressions.length) {
                // No expressions means we call the listener ASAP
                var shouldCall = true;
                self.$evalAsync(function () {
                  if (shouldCall) listener(newValues, newValues, self);
                });
                return function deregisterWatchGroup() {
                  shouldCall = false;
                };
              }

              if (watchExpressions.length === 1) {
                // Special case size of one
                return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                  newValues[0] = value;
                  oldValues[0] = oldValue;
                  listener(newValues, value === oldValue ? newValues : oldValues, scope);
                });
              }

              forEach(watchExpressions, function (expr, i) {
                var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
                  newValues[i] = value;
                  oldValues[i] = oldValue;
                  if (!changeReactionScheduled) {
                    changeReactionScheduled = true;
                    self.$evalAsync(watchGroupAction);
                  }
                });
                deregisterFns.push(unwatchFn);
              });

              function watchGroupAction() {
                changeReactionScheduled = false;

                if (firstRun) {
                  firstRun = false;
                  listener(newValues, newValues, self);
                } else {
                  listener(newValues, oldValues, self);
                }
              }

              return function deregisterWatchGroup() {
                while (deregisterFns.length) {
                  deregisterFns.shift()();
                }
              };
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$watchCollection
             * @kind function
             *
             * @description
             * Shallow watches the properties of an object and fires whenever any of the properties change
             * (for arrays, this implies watching the array items; for object maps, this implies watching
             * the properties). If a change is detected, the `listener` callback is fired.
             *
             * - The `obj` collection is observed via standard $watch operation and is examined on every
             *   call to $digest() to see if any items have been added, removed, or moved.
             * - The `listener` is called whenever anything within the `obj` has changed. Examples include
             *   adding, removing, and moving items belonging to an object or array.
             *
             *
             * # Example
             * ```js
                $scope.names = ['igor', 'matias', 'misko', 'james'];
                $scope.dataCount = 4;
                 $scope.$watchCollection('names', function(newNames, oldNames) {
                  $scope.dataCount = newNames.length;
                });
                 expect($scope.dataCount).toEqual(4);
                $scope.$digest();
                 //still at 4 ... no changes
                expect($scope.dataCount).toEqual(4);
                 $scope.names.pop();
                $scope.$digest();
                 //now there's been a change
                expect($scope.dataCount).toEqual(3);
             * ```
             *
             *
             * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
             *    expression value should evaluate to an object or an array which is observed on each
             *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
             *    collection will trigger a call to the `listener`.
             *
             * @param {function(newCollection, oldCollection, scope)} listener a callback function called
             *    when a change is detected.
             *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
             *    - The `oldCollection` object is a copy of the former collection data.
             *      Due to performance considerations, the`oldCollection` value is computed only if the
             *      `listener` function declares two or more arguments.
             *    - The `scope` argument refers to the current scope.
             *
             * @returns {function()} Returns a de-registration function for this listener. When the
             *    de-registration function is executed, the internal watch operation is terminated.
             */
            $watchCollection: function (obj, listener) {
              $watchCollectionInterceptor.$stateful = true;

              var self = this;
              // the current value, updated on each dirty-check run
              var newValue;
              // a shallow copy of the newValue from the last dirty-check run,
              // updated to match newValue during dirty-check run
              var oldValue;
              // a shallow copy of the newValue from when the last change happened
              var veryOldValue;
              // only track veryOldValue if the listener is asking for it
              var trackVeryOldValue = listener.length > 1;
              var changeDetected = 0;
              var changeDetector = $parse(obj, $watchCollectionInterceptor);
              var internalArray = [];
              var internalObject = {};
              var initRun = true;
              var oldLength = 0;

              function $watchCollectionInterceptor(_value) {
                newValue = _value;
                var newLength, key, bothNaN, newItem, oldItem;

                // If the new value is undefined, then return undefined as the watch may be a one-time watch
                if (isUndefined(newValue)) return;

                if (!isObject(newValue)) {
                  // if primitive
                  if (oldValue !== newValue) {
                    oldValue = newValue;
                    changeDetected++;
                  }
                } else if (isArrayLike(newValue)) {
                  if (oldValue !== internalArray) {
                    // we are transitioning from something which was not an array into array.
                    oldValue = internalArray;
                    oldLength = oldValue.length = 0;
                    changeDetected++;
                  }

                  newLength = newValue.length;

                  if (oldLength !== newLength) {
                    // if lengths do not match we need to trigger change notification
                    changeDetected++;
                    oldValue.length = oldLength = newLength;
                  }
                  // copy the items to oldValue and look for changes.
                  for (var i = 0; i < newLength; i++) {
                    oldItem = oldValue[i];
                    newItem = newValue[i];

                    bothNaN = oldItem !== oldItem && newItem !== newItem;
                    if (!bothNaN && oldItem !== newItem) {
                      changeDetected++;
                      oldValue[i] = newItem;
                    }
                  }
                } else {
                  if (oldValue !== internalObject) {
                    // we are transitioning from something which was not an object into object.
                    oldValue = internalObject = {};
                    oldLength = 0;
                    changeDetected++;
                  }
                  // copy the items to oldValue and look for changes.
                  newLength = 0;
                  for (key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      newLength++;
                      newItem = newValue[key];
                      oldItem = oldValue[key];

                      if (key in oldValue) {
                        bothNaN = oldItem !== oldItem && newItem !== newItem;
                        if (!bothNaN && oldItem !== newItem) {
                          changeDetected++;
                          oldValue[key] = newItem;
                        }
                      } else {
                        oldLength++;
                        oldValue[key] = newItem;
                        changeDetected++;
                      }
                    }
                  }
                  if (oldLength > newLength) {
                    // we used to have more keys, need to find them and destroy them.
                    changeDetected++;
                    for (key in oldValue) {
                      if (!hasOwnProperty.call(newValue, key)) {
                        oldLength--;
                        delete oldValue[key];
                      }
                    }
                  }
                }
                return changeDetected;
              }

              function $watchCollectionAction() {
                if (initRun) {
                  initRun = false;
                  listener(newValue, newValue, self);
                } else {
                  listener(newValue, veryOldValue, self);
                }

                // make a copy for the next time a collection is changed
                if (trackVeryOldValue) {
                  if (!isObject(newValue)) {
                    //primitive
                    veryOldValue = newValue;
                  } else if (isArrayLike(newValue)) {
                    veryOldValue = new Array(newValue.length);
                    for (var i = 0; i < newValue.length; i++) {
                      veryOldValue[i] = newValue[i];
                    }
                  } else {
                    // if object
                    veryOldValue = {};
                    for (var key in newValue) {
                      if (hasOwnProperty.call(newValue, key)) {
                        veryOldValue[key] = newValue[key];
                      }
                    }
                  }
                }
              }

              return this.$watch(changeDetector, $watchCollectionAction);
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$digest
             * @kind function
             *
             * @description
             * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
             * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
             * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
             * until no more listeners are firing. This means that it is possible to get into an infinite
             * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
             * iterations exceeds 10.
             *
             * Usually, you don't call `$digest()` directly in
             * {@link ng.directive:ngController controllers} or in
             * {@link ng.$compileProvider#directive directives}.
             * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
             * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
             *
             * If you want to be notified whenever `$digest()` is called,
             * you can register a `watchExpression` function with
             * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
             *
             * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
             *
             * # Example
             * ```js
                 var scope = ...;
                 scope.name = 'misko';
                 scope.counter = 0;
                  expect(scope.counter).toEqual(0);
                 scope.$watch('name', function(newValue, oldValue) {
                   scope.counter = scope.counter + 1;
                 });
                 expect(scope.counter).toEqual(0);
                  scope.$digest();
                 // the listener is always called during the first $digest loop after it was registered
                 expect(scope.counter).toEqual(1);
                  scope.$digest();
                 // but now it will not be called unless the value changes
                 expect(scope.counter).toEqual(1);
                  scope.name = 'adam';
                 scope.$digest();
                 expect(scope.counter).toEqual(2);
             * ```
             *
             */
            $digest: function () {
              var watch,
                  value,
                  last,
                  fn,
                  get,
                  watchers,
                  length,
                  dirty,
                  ttl = TTL,
                  next,
                  current,
                  target = this,
                  watchLog = [],
                  logIdx,
                  asyncTask;

              beginPhase('$digest');
              // Check for changes to browser url that happened in sync before the call to $digest
              $browser.$$checkUrlChange();

              if (this === $rootScope && applyAsyncId !== null) {
                // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
                // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
                $browser.defer.cancel(applyAsyncId);
                flushApplyAsync();
              }

              lastDirtyWatch = null;

              do {
                // "while dirty" loop
                dirty = false;
                current = target;

                // It's safe for asyncQueuePosition to be a local variable here because this loop can't
                // be reentered recursively. Calling $digest from a function passed to $applyAsync would
                // lead to a '$digest already in progress' error.
                for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
                  try {
                    asyncTask = asyncQueue[asyncQueuePosition];
                    asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                  lastDirtyWatch = null;
                }
                asyncQueue.length = 0;

                traverseScopesLoop: do {
                  // "traverse the scopes" loop
                  if (watchers = current.$$watchers) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          get = watch.get;
                          if ((value = get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value === 'number' && typeof last === 'number' && isNaN(value) && isNaN(last))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            fn = watch.fn;
                            fn(value, last === initWatchVal ? value : last, current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx]) watchLog[logIdx] = [];
                              watchLog[logIdx].push({
                                msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                newVal: value,
                                oldVal: last
                              });
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        $exceptionHandler(e);
                      }
                    }
                  }

                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = current.$$watchersCount && current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while (current = next);

                // `break traverseScopesLoop;` takes us to here

                if ((dirty || asyncQueue.length) && !ttl--) {
                  clearPhase();
                  throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, watchLog);
                }
              } while (dirty || asyncQueue.length);

              clearPhase();

              // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
              while (postDigestQueuePosition < postDigestQueue.length) {
                try {
                  postDigestQueue[postDigestQueuePosition++]();
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              postDigestQueue.length = postDigestQueuePosition = 0;
            },

            /**
             * @ngdoc event
             * @name $rootScope.Scope#$destroy
             * @eventType broadcast on scope being destroyed
             *
             * @description
             * Broadcasted when a scope and its children are being destroyed.
             *
             * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
             * clean up DOM bindings before an element is removed from the DOM.
             */

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$destroy
             * @kind function
             *
             * @description
             * Removes the current scope (and all of its children) from the parent scope. Removal implies
             * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
             * propagate to the current scope and its children. Removal also implies that the current
             * scope is eligible for garbage collection.
             *
             * The `$destroy()` is usually used by directives such as
             * {@link ng.directive:ngRepeat ngRepeat} for managing the
             * unrolling of the loop.
             *
             * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
             * Application code can register a `$destroy` event handler that will give it a chance to
             * perform any necessary cleanup.
             *
             * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
             * clean up DOM bindings before an element is removed from the DOM.
             */
            $destroy: function () {
              // We can't destroy a scope that has been already destroyed.
              if (this.$$destroyed) return;
              var parent = this.$parent;

              this.$broadcast('$destroy');
              this.$$destroyed = true;

              if (this === $rootScope) {
                //Remove handlers attached to window when $rootScope is removed
                $browser.$$applicationDestroyed();
              }

              incrementWatchersCount(this, -this.$$watchersCount);
              for (var eventName in this.$$listenerCount) {
                decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
              }

              // sever all the references to parent scopes (after this cleanup, the current scope should
              // not be retained by any of our references and should be eligible for garbage collection)
              if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
              if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
              if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
              if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

              // Disable listeners, watchers and apply/digest methods
              this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
              this.$on = this.$watch = this.$watchGroup = function () {
                return noop;
              };
              this.$$listeners = {};

              // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
              this.$$nextSibling = null;
              cleanUpScope(this);
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$eval
             * @kind function
             *
             * @description
             * Executes the `expression` on the current scope and returns the result. Any exceptions in
             * the expression are propagated (uncaught). This is useful when evaluating Angular
             * expressions.
             *
             * # Example
             * ```js
                 var scope = ng.$rootScope.Scope();
                 scope.a = 1;
                 scope.b = 2;
                  expect(scope.$eval('a+b')).toEqual(3);
                 expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
             * ```
             *
             * @param {(string|function())=} expression An angular expression to be executed.
             *
             *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
             *    - `function(scope)`: execute the function with the current `scope` parameter.
             *
             * @param {(object)=} locals Local variables object, useful for overriding values in scope.
             * @returns {*} The result of evaluating the expression.
             */
            $eval: function (expr, locals) {
              return $parse(expr)(this, locals);
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$evalAsync
             * @kind function
             *
             * @description
             * Executes the expression on the current scope at a later point in time.
             *
             * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
             * that:
             *
             *   - it will execute after the function that scheduled the evaluation (preferably before DOM
             *     rendering).
             *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
             *     `expression` execution.
             *
             * Any exceptions from the execution of the expression are forwarded to the
             * {@link ng.$exceptionHandler $exceptionHandler} service.
             *
             * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
             * will be scheduled. However, it is encouraged to always call code that changes the model
             * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
             *
             * @param {(string|function())=} expression An angular expression to be executed.
             *
             *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
             *    - `function(scope)`: execute the function with the current `scope` parameter.
             *
             * @param {(object)=} locals Local variables object, useful for overriding values in scope.
             */
            $evalAsync: function (expr, locals) {
              // if we are outside of an $digest loop and this is the first time we are scheduling async
              // task also schedule async auto-flush
              if (!$rootScope.$$phase && !asyncQueue.length) {
                $browser.defer(function () {
                  if (asyncQueue.length) {
                    $rootScope.$digest();
                  }
                });
              }

              asyncQueue.push({ scope: this, expression: $parse(expr), locals: locals });
            },

            $$postDigest: function (fn) {
              postDigestQueue.push(fn);
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$apply
             * @kind function
             *
             * @description
             * `$apply()` is used to execute an expression in angular from outside of the angular
             * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
             * Because we are calling into the angular framework we need to perform proper scope life
             * cycle of {@link ng.$exceptionHandler exception handling},
             * {@link ng.$rootScope.Scope#$digest executing watches}.
             *
             * ## Life cycle
             *
             * # Pseudo-Code of `$apply()`
             * ```js
                 function $apply(expr) {
                   try {
                     return $eval(expr);
                   } catch (e) {
                     $exceptionHandler(e);
                   } finally {
                     $root.$digest();
                   }
                 }
             * ```
             *
             *
             * Scope's `$apply()` method transitions through the following stages:
             *
             * 1. The {@link guide/expression expression} is executed using the
             *    {@link ng.$rootScope.Scope#$eval $eval()} method.
             * 2. Any exceptions from the execution of the expression are forwarded to the
             *    {@link ng.$exceptionHandler $exceptionHandler} service.
             * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
             *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
             *
             *
             * @param {(string|function())=} exp An angular expression to be executed.
             *
             *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
             *    - `function(scope)`: execute the function with current `scope` parameter.
             *
             * @returns {*} The result of evaluating the expression.
             */
            $apply: function (expr) {
              try {
                beginPhase('$apply');
                try {
                  return this.$eval(expr);
                } finally {
                  clearPhase();
                }
              } catch (e) {
                $exceptionHandler(e);
              } finally {
                try {
                  $rootScope.$digest();
                } catch (e) {
                  $exceptionHandler(e);
                  throw e;
                }
              }
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$applyAsync
             * @kind function
             *
             * @description
             * Schedule the invocation of $apply to occur at a later time. The actual time difference
             * varies across browsers, but is typically around ~10 milliseconds.
             *
             * This can be used to queue up multiple expressions which need to be evaluated in the same
             * digest.
             *
             * @param {(string|function())=} exp An angular expression to be executed.
             *
             *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
             *    - `function(scope)`: execute the function with current `scope` parameter.
             */
            $applyAsync: function (expr) {
              var scope = this;
              expr && applyAsyncQueue.push($applyAsyncExpression);
              expr = $parse(expr);
              scheduleApplyAsync();

              function $applyAsyncExpression() {
                scope.$eval(expr);
              }
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$on
             * @kind function
             *
             * @description
             * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
             * discussion of event life cycle.
             *
             * The event listener function format is: `function(event, args...)`. The `event` object
             * passed into the listener has the following attributes:
             *
             *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
             *     `$broadcast`-ed.
             *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
             *     event propagates through the scope hierarchy, this property is set to null.
             *   - `name` - `{string}`: name of the event.
             *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
             *     further event propagation (available only for events that were `$emit`-ed).
             *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
             *     to true.
             *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
             *
             * @param {string} name Event name to listen on.
             * @param {function(event, ...args)} listener Function to call when the event is emitted.
             * @returns {function()} Returns a deregistration function for this listener.
             */
            $on: function (name, listener) {
              var namedListeners = this.$$listeners[name];
              if (!namedListeners) {
                this.$$listeners[name] = namedListeners = [];
              }
              namedListeners.push(listener);

              var current = this;
              do {
                if (!current.$$listenerCount[name]) {
                  current.$$listenerCount[name] = 0;
                }
                current.$$listenerCount[name]++;
              } while (current = current.$parent);

              var self = this;
              return function () {
                var indexOfListener = namedListeners.indexOf(listener);
                if (indexOfListener !== -1) {
                  namedListeners[indexOfListener] = null;
                  decrementListenerCount(self, 1, name);
                }
              };
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$emit
             * @kind function
             *
             * @description
             * Dispatches an event `name` upwards through the scope hierarchy notifying the
             * registered {@link ng.$rootScope.Scope#$on} listeners.
             *
             * The event life cycle starts at the scope on which `$emit` was called. All
             * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
             * notified. Afterwards, the event traverses upwards toward the root scope and calls all
             * registered listeners along the way. The event will stop propagating if one of the listeners
             * cancels it.
             *
             * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
             * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
             *
             * @param {string} name Event name to emit.
             * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
             * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
             */
            $emit: function (name, args) {
              var empty = [],
                  namedListeners,
                  scope = this,
                  stopPropagation = false,
                  event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true;
                },
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              },
                  listenerArgs = concat([event], arguments, 1),
                  i,
                  length;

              do {
                namedListeners = scope.$$listeners[name] || empty;
                event.currentScope = scope;
                for (i = 0, length = namedListeners.length; i < length; i++) {

                  // if listeners were deregistered, defragment the array
                  if (!namedListeners[i]) {
                    namedListeners.splice(i, 1);
                    i--;
                    length--;
                    continue;
                  }
                  try {
                    //allow all listeners attached to the current scope to run
                    namedListeners[i].apply(null, listenerArgs);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }
                //if any listener on the current scope stops propagation, prevent bubbling
                if (stopPropagation) {
                  event.currentScope = null;
                  return event;
                }
                //traverse upwards
                scope = scope.$parent;
              } while (scope);

              event.currentScope = null;

              return event;
            },

            /**
             * @ngdoc method
             * @name $rootScope.Scope#$broadcast
             * @kind function
             *
             * @description
             * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
             * registered {@link ng.$rootScope.Scope#$on} listeners.
             *
             * The event life cycle starts at the scope on which `$broadcast` was called. All
             * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
             * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
             * scope and calls all registered listeners along the way. The event cannot be canceled.
             *
             * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
             * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
             *
             * @param {string} name Event name to broadcast.
             * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
             * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
             */
            $broadcast: function (name, args) {
              var target = this,
                  current = target,
                  next = target,
                  event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              };

              if (!target.$$listenerCount[name]) return event;

              var listenerArgs = concat([event], arguments, 1),
                  listeners,
                  i,
                  length;

              //down while you can, then up and next sibling or up and next sibling until back at root
              while (current = next) {
                event.currentScope = current;
                listeners = current.$$listeners[name] || [];
                for (i = 0, length = listeners.length; i < length; i++) {
                  // if listeners were deregistered, defragment the array
                  if (!listeners[i]) {
                    listeners.splice(i, 1);
                    i--;
                    length--;
                    continue;
                  }

                  try {
                    listeners[i].apply(null, listenerArgs);
                  } catch (e) {
                    $exceptionHandler(e);
                  }
                }

                // Insanity Warning: scope depth-first traversal
                // yes, this code is a bit crazy, but it works and we have tests to prove it!
                // this piece should be kept in sync with the traversal in $digest
                // (though it differs due to having the extra check for $$listenerCount)
                if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                  while (current !== target && !(next = current.$$nextSibling)) {
                    current = current.$parent;
                  }
                }
              }

              event.currentScope = null;
              return event;
            }
          };

          var $rootScope = new Scope();

          //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
          var asyncQueue = $rootScope.$$asyncQueue = [];
          var postDigestQueue = $rootScope.$$postDigestQueue = [];
          var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

          var postDigestQueuePosition = 0;

          return $rootScope;

          function beginPhase(phase) {
            if ($rootScope.$$phase) {
              throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
            }

            $rootScope.$$phase = phase;
          }

          function clearPhase() {
            $rootScope.$$phase = null;
          }

          function incrementWatchersCount(current, count) {
            do {
              current.$$watchersCount += count;
            } while (current = current.$parent);
          }

          function decrementListenerCount(current, count, name) {
            do {
              current.$$listenerCount[name] -= count;

              if (current.$$listenerCount[name] === 0) {
                delete current.$$listenerCount[name];
              }
            } while (current = current.$parent);
          }

          /**
           * function used as an initial value for watchers.
           * because it's unique we can easily tell it apart from other values
           */
          function initWatchVal() {}

          function flushApplyAsync() {
            while (applyAsyncQueue.length) {
              try {
                applyAsyncQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
            applyAsyncId = null;
          }

          function scheduleApplyAsync() {
            if (applyAsyncId === null) {
              applyAsyncId = $browser.defer(function () {
                $rootScope.$apply(flushApplyAsync);
              });
            }
          }
        }];
      }

      /**
       * @ngdoc service
       * @name $rootElement
       *
       * @description
       * The root element of Angular application. This is either the element where {@link
       * ng.directive:ngApp ngApp} was declared or the element passed into
       * {@link angular.bootstrap}. The element represents the root element of application. It is also the
       * location where the application's {@link auto.$injector $injector} service gets
       * published, and can be retrieved using `$rootElement.injector()`.
       */

      // the implementation is in angular.bootstrap

      /**
       * @description
       * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
       */
      function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
            imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

        /**
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during a[href] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.aHrefSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            aHrefSanitizationWhitelist = regexp;
            return this;
          }
          return aHrefSanitizationWhitelist;
        };

        /**
         * @description
         * Retrieves or overrides the default regular expression that is used for whitelisting of safe
         * urls during img[src] sanitization.
         *
         * The sanitization is a security measure aimed at prevent XSS attacks via html links.
         *
         * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
         * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
         * regular expression. If a match is found, the original url is written into the dom. Otherwise,
         * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
         *
         * @param {RegExp=} regexp New regexp to whitelist urls with.
         * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
         *    chaining otherwise.
         */
        this.imgSrcSanitizationWhitelist = function (regexp) {
          if (isDefined(regexp)) {
            imgSrcSanitizationWhitelist = regexp;
            return this;
          }
          return imgSrcSanitizationWhitelist;
        };

        this.$get = function () {
          return function sanitizeUri(uri, isImage) {
            var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
            var normalizedVal;
            normalizedVal = urlResolve(uri).href;
            if (normalizedVal !== '' && !normalizedVal.match(regex)) {
              return 'unsafe:' + normalizedVal;
            }
            return uri;
          };
        };
      }

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
       *     Any commits to this file should be reviewed with security in mind.  *
       *   Changes to this file can potentially create security vulnerabilities. *
       *          An approval from 2 Core members with history of modifying      *
       *                         this file is required.                          *
       *                                                                         *
       *  Does the change somehow allow for arbitrary javascript to be executed? *
       *    Or allows for someone to change the prototype of built-in objects?   *
       *     Or gives undesired access to variables likes document or window?    *
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

      var $sceMinErr = minErr('$sce');

      var SCE_CONTEXTS = {
        HTML: 'html',
        CSS: 'css',
        URL: 'url',
        // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
        // url.  (e.g. ng-include, script src, templateUrl)
        RESOURCE_URL: 'resourceUrl',
        JS: 'js'
      };

      // Helper functions follow.

      function adjustMatcher(matcher) {
        if (matcher === 'self') {
          return matcher;
        } else if (isString(matcher)) {
          // Strings match exactly except for 2 wildcards - '*' and '**'.
          // '*' matches any character except those from the set ':/.?&'.
          // '**' matches any character (like .* in a RegExp).
          // More than 2 *'s raises an error as it's ill defined.
          if (matcher.indexOf('***') > -1) {
            throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
          }
          matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
          return new RegExp('^' + matcher + '$');
        } else if (isRegExp(matcher)) {
          // The only other type of matcher allowed is a Regexp.
          // Match entire URL / disallow partial matches.
          // Flags are reset (i.e. no global, ignoreCase or multiline)
          return new RegExp('^' + matcher.source + '$');
        } else {
          throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
        }
      }

      function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        if (isDefined(matchers)) {
          forEach(matchers, function (matcher) {
            adjustedMatchers.push(adjustMatcher(matcher));
          });
        }
        return adjustedMatchers;
      }

      /**
       * @ngdoc service
       * @name $sceDelegate
       * @kind function
       *
       * @description
       *
       * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
       * Contextual Escaping (SCE)} services to AngularJS.
       *
       * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
       * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
       * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
       * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
       * work because `$sce` delegates to `$sceDelegate` for these operations.
       *
       * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
       *
       * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
       * can override it completely to change the behavior of `$sce`, the common case would
       * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
       * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
       * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
       * $sceDelegateProvider.resourceUrlWhitelist} and {@link
       * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
       */

      /**
       * @ngdoc provider
       * @name $sceDelegateProvider
       * @description
       *
       * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
       * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
       * that the URLs used for sourcing Angular templates are safe.  Refer {@link
       * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
       * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
       *
       * For the general details about this service in Angular, read the main page for {@link ng.$sce
       * Strict Contextual Escaping (SCE)}.
       *
       * **Example**:  Consider the following case. <a name="example"></a>
       *
       * - your app is hosted at url `http://myapp.example.com/`
       * - but some of your templates are hosted on other domains you control such as
       *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
       * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
       *
       * Here is what a secure configuration for this scenario might look like:
       *
       * ```
       *  angular.module('myApp', []).config(function($sceDelegateProvider) {
       *    $sceDelegateProvider.resourceUrlWhitelist([
       *      // Allow same origin resource loads.
       *      'self',
       *      // Allow loading from our assets domain.  Notice the difference between * and **.
       *      'http://srv*.assets.example.com/**'
       *    ]);
       *
       *    // The blacklist overrides the whitelist so the open redirect here is blocked.
       *    $sceDelegateProvider.resourceUrlBlacklist([
       *      'http://myapp.example.com/clickThru**'
       *    ]);
       *  });
       * ```
       */

      function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;

        // Resource URLs can also be trusted by policy.
        var resourceUrlWhitelist = ['self'],
            resourceUrlBlacklist = [];

        /**
         * @ngdoc method
         * @name $sceDelegateProvider#resourceUrlWhitelist
         * @kind function
         *
         * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
         *    provided.  This must be an array or null.  A snapshot of this array is used so further
         *    changes to the array are ignored.
         *
         *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
         *    allowed in this array.
         *
         *    <div class="alert alert-warning">
         *    **Note:** an empty whitelist array will block all URLs!
         *    </div>
         *
         * @return {Array} the currently set whitelist array.
         *
         * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
         * same origin resource requests.
         *
         * @description
         * Sets/Gets the whitelist of trusted resource URLs.
         */
        this.resourceUrlWhitelist = function (value) {
          if (arguments.length) {
            resourceUrlWhitelist = adjustMatchers(value);
          }
          return resourceUrlWhitelist;
        };

        /**
         * @ngdoc method
         * @name $sceDelegateProvider#resourceUrlBlacklist
         * @kind function
         *
         * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
         *    provided.  This must be an array or null.  A snapshot of this array is used so further
         *    changes to the array are ignored.
         *
         *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
         *    allowed in this array.
         *
         *    The typical usage for the blacklist is to **block
         *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
         *    these would otherwise be trusted but actually return content from the redirected domain.
         *
         *    Finally, **the blacklist overrides the whitelist** and has the final say.
         *
         * @return {Array} the currently set blacklist array.
         *
         * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
         * is no blacklist.)
         *
         * @description
         * Sets/Gets the blacklist of trusted resource URLs.
         */

        this.resourceUrlBlacklist = function (value) {
          if (arguments.length) {
            resourceUrlBlacklist = adjustMatchers(value);
          }
          return resourceUrlBlacklist;
        };

        this.$get = ['$injector', function ($injector) {

          var htmlSanitizer = function htmlSanitizer(html) {
            throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
          };

          if ($injector.has('$sanitize')) {
            htmlSanitizer = $injector.get('$sanitize');
          }

          function matchUrl(matcher, parsedUrl) {
            if (matcher === 'self') {
              return urlIsSameOrigin(parsedUrl);
            } else {
              // definitely a regex.  See adjustMatchers()
              return !!matcher.exec(parsedUrl.href);
            }
          }

          function isResourceUrlAllowedByPolicy(url) {
            var parsedUrl = urlResolve(url.toString());
            var i,
                n,
                allowed = false;
            // Ensure that at least one item from the whitelist allows this url.
            for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
              if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                allowed = true;
                break;
              }
            }
            if (allowed) {
              // Ensure that no item from the blacklist blocked this url.
              for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
                if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                  allowed = false;
                  break;
                }
              }
            }
            return allowed;
          }

          function generateHolderType(Base) {
            var holderType = function TrustedValueHolderType(trustedValue) {
              this.$$unwrapTrustedValue = function () {
                return trustedValue;
              };
            };
            if (Base) {
              holderType.prototype = new Base();
            }
            holderType.prototype.valueOf = function sceValueOf() {
              return this.$$unwrapTrustedValue();
            };
            holderType.prototype.toString = function sceToString() {
              return this.$$unwrapTrustedValue().toString();
            };
            return holderType;
          }

          var trustedValueHolderBase = generateHolderType(),
              byType = {};

          byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
          byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
          byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
          byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
          byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

          /**
           * @ngdoc method
           * @name $sceDelegate#trustAs
           *
           * @description
           * Returns an object that is trusted by angular for use in specified strict
           * contextual escaping contexts (such as ng-bind-html, ng-include, any src
           * attribute interpolation, any dom event binding attribute interpolation
           * such as for onclick,  etc.) that uses the provided value.
           * See {@link ng.$sce $sce} for enabling strict contextual escaping.
           *
           * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
           *   resourceUrl, html, js and css.
           * @param {*} value The value that that should be considered trusted/safe.
           * @returns {*} A value that can be used to stand in for the provided `value` in places
           * where Angular expects a $sce.trustAs() return value.
           */
          function trustAs(type, trustedValue) {
            var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
            if (!Constructor) {
              throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
            }
            if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
              return trustedValue;
            }
            // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
            // mutable objects, we ensure here that the value passed in is actually a string.
            if (typeof trustedValue !== 'string') {
              throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
            }
            return new Constructor(trustedValue);
          }

          /**
           * @ngdoc method
           * @name $sceDelegate#valueOf
           *
           * @description
           * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
           * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
           * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
           *
           * If the passed parameter is not a value that had been returned by {@link
           * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
           *
           * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
           *      call or anything else.
           * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
           *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
           *     `value` unchanged.
           */
          function valueOf(maybeTrusted) {
            if (maybeTrusted instanceof trustedValueHolderBase) {
              return maybeTrusted.$$unwrapTrustedValue();
            } else {
              return maybeTrusted;
            }
          }

          /**
           * @ngdoc method
           * @name $sceDelegate#getTrusted
           *
           * @description
           * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
           * returns the originally supplied value if the queried context type is a supertype of the
           * created type.  If this condition isn't satisfied, throws an exception.
           *
           * <div class="alert alert-danger">
           * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
           * (XSS) vulnerability in your application.
           * </div>
           *
           * @param {string} type The kind of context in which this value is to be used.
           * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
           *     `$sceDelegate.trustAs`} call.
           * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
           *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
           */
          function getTrusted(type, maybeTrusted) {
            if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
              return maybeTrusted;
            }
            var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
            if (constructor && maybeTrusted instanceof constructor) {
              return maybeTrusted.$$unwrapTrustedValue();
            }
            // If we get here, then we may only take one of two actions.
            // 1. sanitize the value for the requested type, or
            // 2. throw an exception.
            if (type === SCE_CONTEXTS.RESOURCE_URL) {
              if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
                return maybeTrusted;
              } else {
                throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
              }
            } else if (type === SCE_CONTEXTS.HTML) {
              return htmlSanitizer(maybeTrusted);
            }
            throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
          }

          return { trustAs: trustAs,
            getTrusted: getTrusted,
            valueOf: valueOf };
        }];
      }

      /**
       * @ngdoc provider
       * @name $sceProvider
       * @description
       *
       * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
       * -   enable/disable Strict Contextual Escaping (SCE) in a module
       * -   override the default implementation with a custom delegate
       *
       * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
       */

      /* jshint maxlen: false*/

      /**
       * @ngdoc service
       * @name $sce
       * @kind function
       *
       * @description
       *
       * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
       *
       * # Strict Contextual Escaping
       *
       * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
       * contexts to result in a value that is marked as safe to use for that context.  One example of
       * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
       * to these contexts as privileged or SCE contexts.
       *
       * As of version 1.2, Angular ships with SCE enabled by default.
       *
       * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
       * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
       * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
       * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
       * to the top of your HTML document.
       *
       * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
       * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
       *
       * Here's an example of a binding in a privileged context:
       *
       * ```
       * <input ng-model="userHtml" aria-label="User input">
       * <div ng-bind-html="userHtml"></div>
       * ```
       *
       * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
       * disabled, this application allows the user to render arbitrary HTML into the DIV.
       * In a more realistic example, one may be rendering user comments, blog articles, etc. via
       * bindings.  (HTML is just one example of a context where rendering user controlled input creates
       * security vulnerabilities.)
       *
       * For the case of HTML, you might use a library, either on the client side, or on the server side,
       * to sanitize unsafe HTML before binding to the value and rendering it in the document.
       *
       * How would you ensure that every place that used these types of bindings was bound to a value that
       * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
       * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
       * properties/fields and forgot to update the binding to the sanitized value?
       *
       * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
       * determine that something explicitly says it's safe to use a value for binding in that
       * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
       * for those values that you can easily tell are safe - because they were received from your server,
       * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
       * allowing only the files in a specific directory to do this.  Ensuring that the internal API
       * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
       *
       * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
       * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
       * obtain values that will be accepted by SCE / privileged contexts.
       *
       *
       * ## How does it work?
       *
       * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
       * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
       * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
       * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
       *
       * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
       * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
       * simplified):
       *
       * ```
       * var ngBindHtmlDirective = ['$sce', function($sce) {
       *   return function(scope, element, attr) {
       *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
       *       element.html(value || '');
       *     });
       *   };
       * }];
       * ```
       *
       * ## Impact on loading templates
       *
       * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
       * `templateUrl`'s specified by {@link guide/directive directives}.
       *
       * By default, Angular only loads templates from the same domain and protocol as the application
       * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
       * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
       * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
       * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
       *
       * *Please note*:
       * The browser's
       * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
       * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
       * policy apply in addition to this and may further restrict whether the template is successfully
       * loaded.  This means that without the right CORS policy, loading templates from a different domain
       * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
       * browsers.
       *
       * ## This feels like too much overhead
       *
       * It's important to remember that SCE only applies to interpolation expressions.
       *
       * If your expressions are constant literals, they're automatically trusted and you don't need to
       * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
       * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
       *
       * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
       * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
       *
       * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
       * templates in `ng-include` from your application's domain without having to even know about SCE.
       * It blocks loading templates from other domains or loading templates over http from an https
       * served document.  You can change these by setting your own custom {@link
       * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
       * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
       *
       * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
       * application that's secure and can be audited to verify that with much more ease than bolting
       * security onto an application later.
       *
       * <a name="contexts"></a>
       * ## What trusted context types are supported?
       *
       * | Context             | Notes          |
       * |---------------------|----------------|
       * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
       * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
       * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
       * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
       * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
       *
       * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
       *
       *  Each element in these arrays must be one of the following:
       *
       *  - **'self'**
       *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
       *      domain** as the application document using the **same protocol**.
       *  - **String** (except the special value `'self'`)
       *    - The string is matched against the full *normalized / absolute URL* of the resource
       *      being tested (substring matches are not good enough.)
       *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
       *      match themselves.
       *    - `*`: matches zero or more occurrences of any character other than one of the following 6
       *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
       *      in a whitelist.
       *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
       *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
       *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
       *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
       *      http://foo.example.com/templates/**).
       *  - **RegExp** (*see caveat below*)
       *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
       *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
       *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
       *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
       *      small number of cases.  A `.` character in the regex used when matching the scheme or a
       *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
       *      is highly recommended to use the string patterns and only fall back to regular expressions
       *      as a last resort.
       *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
       *      matched against the **entire** *normalized / absolute URL* of the resource being tested
       *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
       *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
       *    - If you are generating your JavaScript from some other templating engine (not
       *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
       *      remember to escape your regular expression (and be aware that you might need more than
       *      one level of escaping depending on your templating engine and the way you interpolated
       *      the value.)  Do make use of your platform's escaping mechanism as it might be good
       *      enough before coding your own.  E.g. Ruby has
       *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
       *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
       *      Javascript lacks a similar built in function for escaping.  Take a look at Google
       *      Closure library's [goog.string.regExpEscape(s)](
       *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
       *
       * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
       *
       * ## Show me an example using SCE.
       *
       * <example module="mySceApp" deps="angular-sanitize.js">
       * <file name="index.html">
       *   <div ng-controller="AppController as myCtrl">
       *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
       *     <b>User comments</b><br>
       *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
       *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
       *     exploit.
       *     <div class="well">
       *       <div ng-repeat="userComment in myCtrl.userComments">
       *         <b>{{userComment.name}}</b>:
       *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
       *         <br>
       *       </div>
       *     </div>
       *   </div>
       * </file>
       *
       * <file name="script.js">
       *   angular.module('mySceApp', ['ngSanitize'])
       *     .controller('AppController', ['$http', '$templateCache', '$sce',
       *       function($http, $templateCache, $sce) {
       *         var self = this;
       *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
       *           self.userComments = userComments;
       *         });
       *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
       *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
       *             'sanitization.&quot;">Hover over this text.</span>');
       *       }]);
       * </file>
       *
       * <file name="test_data.json">
       * [
       *   { "name": "Alice",
       *     "htmlComment":
       *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
       *   },
       *   { "name": "Bob",
       *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
       *   }
       * ]
       * </file>
       *
       * <file name="protractor.js" type="protractor">
       *   describe('SCE doc demo', function() {
       *     it('should sanitize untrusted values', function() {
       *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
       *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
       *     });
       *
       *     it('should NOT sanitize explicitly trusted values', function() {
       *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
       *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
       *           'sanitization.&quot;">Hover over this text.</span>');
       *     });
       *   });
       * </file>
       * </example>
       *
       *
       *
       * ## Can I disable SCE completely?
       *
       * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
       * for little coding overhead.  It will be much harder to take an SCE disabled application and
       * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
       * for cases where you have a lot of existing code that was written before SCE was introduced and
       * you're migrating them a module at a time.
       *
       * That said, here's how you can completely disable SCE:
       *
       * ```
       * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
       *   // Completely disable SCE.  For demonstration purposes only!
       *   // Do not use in new projects.
       *   $sceProvider.enabled(false);
       * });
       * ```
       *
       */
      /* jshint maxlen: 100 */

      function $SceProvider() {
        var enabled = true;

        /**
         * @ngdoc method
         * @name $sceProvider#enabled
         * @kind function
         *
         * @param {boolean=} value If provided, then enables/disables SCE.
         * @return {boolean} true if SCE is enabled, false otherwise.
         *
         * @description
         * Enables/disables SCE and returns the current value.
         */
        this.enabled = function (value) {
          if (arguments.length) {
            enabled = !!value;
          }
          return enabled;
        };

        /* Design notes on the default implementation for SCE.
         *
         * The API contract for the SCE delegate
         * -------------------------------------
         * The SCE delegate object must provide the following 3 methods:
         *
         * - trustAs(contextEnum, value)
         *     This method is used to tell the SCE service that the provided value is OK to use in the
         *     contexts specified by contextEnum.  It must return an object that will be accepted by
         *     getTrusted() for a compatible contextEnum and return this value.
         *
         * - valueOf(value)
         *     For values that were not produced by trustAs(), return them as is.  For values that were
         *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
         *     trustAs is wrapping the given values into some type, this operation unwraps it when given
         *     such a value.
         *
         * - getTrusted(contextEnum, value)
         *     This function should return the a value that is safe to use in the context specified by
         *     contextEnum or throw and exception otherwise.
         *
         * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
         * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
         * instance, an implementation could maintain a registry of all trusted objects by context.  In
         * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
         * return the same object passed in if it was found in the registry under a compatible context or
         * throw an exception otherwise.  An implementation might only wrap values some of the time based
         * on some criteria.  getTrusted() might return a value and not throw an exception for special
         * constants or objects even if not wrapped.  All such implementations fulfill this contract.
         *
         *
         * A note on the inheritance model for SCE contexts
         * ------------------------------------------------
         * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
         * is purely an implementation details.
         *
         * The contract is simply this:
         *
         *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
         *     will also succeed.
         *
         * Inheritance happens to capture this in a natural way.  In some future, we
         * may not use inheritance anymore.  That is OK because no code outside of
         * sce.js and sceSpecs.js would need to be aware of this detail.
         */

        this.$get = ['$parse', '$sceDelegate', function ($parse, $sceDelegate) {
          // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
          // the "expression(javascript expression)" syntax which is insecure.
          if (enabled && msie < 8) {
            throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
          }

          var sce = shallowCopy(SCE_CONTEXTS);

          /**
           * @ngdoc method
           * @name $sce#isEnabled
           * @kind function
           *
           * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
           * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
           *
           * @description
           * Returns a boolean indicating if SCE is enabled.
           */
          sce.isEnabled = function () {
            return enabled;
          };
          sce.trustAs = $sceDelegate.trustAs;
          sce.getTrusted = $sceDelegate.getTrusted;
          sce.valueOf = $sceDelegate.valueOf;

          if (!enabled) {
            sce.trustAs = sce.getTrusted = function (type, value) {
              return value;
            };
            sce.valueOf = identity;
          }

          /**
           * @ngdoc method
           * @name $sce#parseAs
           *
           * @description
           * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
           * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
           * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
           * *result*)}
           *
           * @param {string} type The kind of SCE context in which this result will be used.
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */
          sce.parseAs = function sceParseAs(type, expr) {
            var parsed = $parse(expr);
            if (parsed.literal && parsed.constant) {
              return parsed;
            } else {
              return $parse(expr, function (value) {
                return sce.getTrusted(type, value);
              });
            }
          };

          /**
           * @ngdoc method
           * @name $sce#trustAs
           *
           * @description
           * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
           * returns an object that is trusted by angular for use in specified strict contextual
           * escaping contexts (such as ng-bind-html, ng-include, any src attribute
           * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
           * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
           * escaping.
           *
           * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
           *   resourceUrl, html, js and css.
           * @param {*} value The value that that should be considered trusted/safe.
           * @returns {*} A value that can be used to stand in for the provided `value` in places
           * where Angular expects a $sce.trustAs() return value.
           */

          /**
           * @ngdoc method
           * @name $sce#trustAsHtml
           *
           * @description
           * Shorthand method.  `$sce.trustAsHtml(value)` →
           *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
           *
           * @param {*} value The value to trustAs.
           * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
           *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
           *     only accept expressions that are either literal constants or are the
           *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
           */

          /**
           * @ngdoc method
           * @name $sce#trustAsUrl
           *
           * @description
           * Shorthand method.  `$sce.trustAsUrl(value)` →
           *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
           *
           * @param {*} value The value to trustAs.
           * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
           *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
           *     only accept expressions that are either literal constants or are the
           *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
           */

          /**
           * @ngdoc method
           * @name $sce#trustAsResourceUrl
           *
           * @description
           * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
           *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
           *
           * @param {*} value The value to trustAs.
           * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
           *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
           *     only accept expressions that are either literal constants or are the return
           *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
           */

          /**
           * @ngdoc method
           * @name $sce#trustAsJs
           *
           * @description
           * Shorthand method.  `$sce.trustAsJs(value)` →
           *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
           *
           * @param {*} value The value to trustAs.
           * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
           *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
           *     only accept expressions that are either literal constants or are the
           *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
           */

          /**
           * @ngdoc method
           * @name $sce#getTrusted
           *
           * @description
           * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
           * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
           * originally supplied value if the queried context type is a supertype of the created type.
           * If this condition isn't satisfied, throws an exception.
           *
           * @param {string} type The kind of context in which this value is to be used.
           * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
           *                         call.
           * @returns {*} The value the was originally provided to
           *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
           *              Otherwise, throws an exception.
           */

          /**
           * @ngdoc method
           * @name $sce#getTrustedHtml
           *
           * @description
           * Shorthand method.  `$sce.getTrustedHtml(value)` →
           *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
           *
           * @param {*} value The value to pass to `$sce.getTrusted`.
           * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
           */

          /**
           * @ngdoc method
           * @name $sce#getTrustedCss
           *
           * @description
           * Shorthand method.  `$sce.getTrustedCss(value)` →
           *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
           *
           * @param {*} value The value to pass to `$sce.getTrusted`.
           * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
           */

          /**
           * @ngdoc method
           * @name $sce#getTrustedUrl
           *
           * @description
           * Shorthand method.  `$sce.getTrustedUrl(value)` →
           *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
           *
           * @param {*} value The value to pass to `$sce.getTrusted`.
           * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
           */

          /**
           * @ngdoc method
           * @name $sce#getTrustedResourceUrl
           *
           * @description
           * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
           *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
           *
           * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
           * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
           */

          /**
           * @ngdoc method
           * @name $sce#getTrustedJs
           *
           * @description
           * Shorthand method.  `$sce.getTrustedJs(value)` →
           *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
           *
           * @param {*} value The value to pass to `$sce.getTrusted`.
           * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
           */

          /**
           * @ngdoc method
           * @name $sce#parseAsHtml
           *
           * @description
           * Shorthand method.  `$sce.parseAsHtml(expression string)` →
           *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
           *
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */

          /**
           * @ngdoc method
           * @name $sce#parseAsCss
           *
           * @description
           * Shorthand method.  `$sce.parseAsCss(value)` →
           *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
           *
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */

          /**
           * @ngdoc method
           * @name $sce#parseAsUrl
           *
           * @description
           * Shorthand method.  `$sce.parseAsUrl(value)` →
           *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
           *
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */

          /**
           * @ngdoc method
           * @name $sce#parseAsResourceUrl
           *
           * @description
           * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
           *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
           *
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */

          /**
           * @ngdoc method
           * @name $sce#parseAsJs
           *
           * @description
           * Shorthand method.  `$sce.parseAsJs(value)` →
           *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
           *
           * @param {string} expression String expression to compile.
           * @returns {function(context, locals)} a function which represents the compiled expression:
           *
           *    * `context` – `{object}` – an object against which any expressions embedded in the strings
           *      are evaluated against (typically a scope object).
           *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
           *      `context`.
           */

          // Shorthand delegations.
          var parse = sce.parseAs,
              getTrusted = sce.getTrusted,
              trustAs = sce.trustAs;

          forEach(SCE_CONTEXTS, function (enumValue, name) {
            var lName = lowercase(name);
            sce[camelCase("parse_as_" + lName)] = function (expr) {
              return parse(enumValue, expr);
            };
            sce[camelCase("get_trusted_" + lName)] = function (value) {
              return getTrusted(enumValue, value);
            };
            sce[camelCase("trust_as_" + lName)] = function (value) {
              return trustAs(enumValue, value);
            };
          });

          return sce;
        }];
      }

      /**
       * !!! This is an undocumented "private" service !!!
       *
       * @name $sniffer
       * @requires $window
       * @requires $document
       *
       * @property {boolean} history Does the browser support html5 history api ?
       * @property {boolean} transitions Does the browser support CSS transition events ?
       * @property {boolean} animations Does the browser support CSS animation events ?
       *
       * @description
       * This is very simple implementation of testing browser's features.
       */
      function $SnifferProvider() {
        this.$get = ['$window', '$document', function ($window, $document) {
          var eventSupport = {},

          // Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
          // the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
          isChromePackagedApp = $window.chrome && $window.chrome.app && $window.chrome.app.runtime,
              hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
              android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
              boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
              document = $document[0] || {},
              vendorPrefix,
              vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
              bodyStyle = document.body && document.body.style,
              transitions = false,
              animations = false,
              match;

          if (bodyStyle) {
            for (var prop in bodyStyle) {
              if (match = vendorRegex.exec(prop)) {
                vendorPrefix = match[0];
                vendorPrefix = vendorPrefix[0].toUpperCase() + vendorPrefix.substr(1);
                break;
              }
            }

            if (!vendorPrefix) {
              vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
            }

            transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
            animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);

            if (android && (!transitions || !animations)) {
              transitions = isString(bodyStyle.webkitTransition);
              animations = isString(bodyStyle.webkitAnimation);
            }
          }

          return {
            // Android has history.pushState, but it does not update location correctly
            // so let's not use the history API at all.
            // http://code.google.com/p/android/issues/detail?id=17471
            // https://github.com/angular/angular.js/issues/904

            // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
            // so let's not use the history API also
            // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
            // jshint -W018
            history: !!(hasHistoryPushState && !(android < 4) && !boxee),
            // jshint +W018
            hasEvent: function (event) {
              // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
              // it. In particular the event is not fired when backspace or delete key are pressed or
              // when cut operation is performed.
              // IE10+ implements 'input' event but it erroneously fires under various situations,
              // e.g. when placeholder changes, or a form is focused.
              if (event === 'input' && msie <= 11) return false;

              if (isUndefined(eventSupport[event])) {
                var divElm = document.createElement('div');
                eventSupport[event] = 'on' + event in divElm;
              }

              return eventSupport[event];
            },
            csp: csp(),
            vendorPrefix: vendorPrefix,
            transitions: transitions,
            animations: animations,
            android: android
          };
        }];
      }

      var $templateRequestMinErr = minErr('$compile');

      /**
       * @ngdoc provider
       * @name $templateRequestProvider
       * @description
       * Used to configure the options passed to the {@link $http} service when making a template request.
       *
       * For example, it can be used for specifying the "Accept" header that is sent to the server, when
       * requesting a template.
       */
      function $TemplateRequestProvider() {

        var httpOptions;

        /**
         * @ngdoc method
         * @name $templateRequestProvider#httpOptions
         * @description
         * The options to be passed to the {@link $http} service when making the request.
         * You can use this to override options such as the "Accept" header for template requests.
         *
         * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
         * options if not overridden here.
         *
         * @param {string=} value new value for the {@link $http} options.
         * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
         */
        this.httpOptions = function (val) {
          if (val) {
            httpOptions = val;
            return this;
          }
          return httpOptions;
        };

        /**
         * @ngdoc service
         * @name $templateRequest
         *
         * @description
         * The `$templateRequest` service runs security checks then downloads the provided template using
         * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
         * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
         * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
         * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
         * when `tpl` is of type string and `$templateCache` has the matching entry.
         *
         * If you want to pass custom options to the `$http` service, such as setting the Accept header you
         * can configure this via {@link $templateRequestProvider#httpOptions}.
         *
         * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
         * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
         *
         * @return {Promise} a promise for the HTTP response data of the given URL.
         *
         * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
         */
        this.$get = ['$templateCache', '$http', '$q', '$sce', function ($templateCache, $http, $q, $sce) {

          function handleRequestFn(tpl, ignoreRequestError) {
            handleRequestFn.totalPendingRequests++;

            // We consider the template cache holds only trusted templates, so
            // there's no need to go through whitelisting again for keys that already
            // are included in there. This also makes Angular accept any script
            // directive, no matter its name. However, we still need to unwrap trusted
            // types.
            if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
              tpl = $sce.getTrustedResourceUrl(tpl);
            }

            var transformResponse = $http.defaults && $http.defaults.transformResponse;

            if (isArray(transformResponse)) {
              transformResponse = transformResponse.filter(function (transformer) {
                return transformer !== defaultHttpResponseTransform;
              });
            } else if (transformResponse === defaultHttpResponseTransform) {
              transformResponse = null;
            }

            return $http.get(tpl, extend({
              cache: $templateCache,
              transformResponse: transformResponse
            }, httpOptions))['finally'](function () {
              handleRequestFn.totalPendingRequests--;
            }).then(function (response) {
              $templateCache.put(tpl, response.data);
              return response.data;
            }, handleError);

            function handleError(resp) {
              if (!ignoreRequestError) {
                throw $templateRequestMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})', tpl, resp.status, resp.statusText);
              }
              return $q.reject(resp);
            }
          }

          handleRequestFn.totalPendingRequests = 0;

          return handleRequestFn;
        }];
      }

      function $$TestabilityProvider() {
        this.$get = ['$rootScope', '$browser', '$location', function ($rootScope, $browser, $location) {

          /**
           * @name $testability
           *
           * @description
           * The private $$testability service provides a collection of methods for use when debugging
           * or by automated test and debugging tools.
           */
          var testability = {};

          /**
           * @name $$testability#findBindings
           *
           * @description
           * Returns an array of elements that are bound (via ng-bind or {{}})
           * to expressions matching the input.
           *
           * @param {Element} element The element root to search from.
           * @param {string} expression The binding expression to match.
           * @param {boolean} opt_exactMatch If true, only returns exact matches
           *     for the expression. Filters and whitespace are ignored.
           */
          testability.findBindings = function (element, expression, opt_exactMatch) {
            var bindings = element.getElementsByClassName('ng-binding');
            var matches = [];
            forEach(bindings, function (binding) {
              var dataBinding = angular.element(binding).data('$binding');
              if (dataBinding) {
                forEach(dataBinding, function (bindingName) {
                  if (opt_exactMatch) {
                    var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
                    if (matcher.test(bindingName)) {
                      matches.push(binding);
                    }
                  } else {
                    if (bindingName.indexOf(expression) != -1) {
                      matches.push(binding);
                    }
                  }
                });
              }
            });
            return matches;
          };

          /**
           * @name $$testability#findModels
           *
           * @description
           * Returns an array of elements that are two-way found via ng-model to
           * expressions matching the input.
           *
           * @param {Element} element The element root to search from.
           * @param {string} expression The model expression to match.
           * @param {boolean} opt_exactMatch If true, only returns exact matches
           *     for the expression.
           */
          testability.findModels = function (element, expression, opt_exactMatch) {
            var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
            for (var p = 0; p < prefixes.length; ++p) {
              var attributeEquals = opt_exactMatch ? '=' : '*=';
              var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
              var elements = element.querySelectorAll(selector);
              if (elements.length) {
                return elements;
              }
            }
          };

          /**
           * @name $$testability#getLocation
           *
           * @description
           * Shortcut for getting the location in a browser agnostic way. Returns
           *     the path, search, and hash. (e.g. /path?a=b#hash)
           */
          testability.getLocation = function () {
            return $location.url();
          };

          /**
           * @name $$testability#setLocation
           *
           * @description
           * Shortcut for navigating to a location without doing a full page reload.
           *
           * @param {string} url The location url (path, search and hash,
           *     e.g. /path?a=b#hash) to go to.
           */
          testability.setLocation = function (url) {
            if (url !== $location.url()) {
              $location.url(url);
              $rootScope.$digest();
            }
          };

          /**
           * @name $$testability#whenStable
           *
           * @description
           * Calls the callback when $timeout and $http requests are completed.
           *
           * @param {function} callback
           */
          testability.whenStable = function (callback) {
            $browser.notifyWhenNoOutstandingRequests(callback);
          };

          return testability;
        }];
      }

      function $TimeoutProvider() {
        this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler', function ($rootScope, $browser, $q, $$q, $exceptionHandler) {

          var deferreds = {};

          /**
           * @ngdoc service
           * @name $timeout
           *
           * @description
           * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
           * block and delegates any exceptions to
           * {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * The return value of calling `$timeout` is a promise, which will be resolved when
           * the delay has passed and the timeout function, if provided, is executed.
           *
           * To cancel a timeout request, call `$timeout.cancel(promise)`.
           *
           * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
           * synchronously flush the queue of deferred functions.
           *
           * If you only want a promise that will be resolved after some specified delay
           * then you can call `$timeout` without the `fn` function.
           *
           * @param {function()=} fn A function, whose execution should be delayed.
           * @param {number=} [delay=0] Delay in milliseconds.
           * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
           *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
           * @param {...*=} Pass additional parameters to the executed function.
           * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
           *   will be resolved with the return value of the `fn` function.
           *
           */
          function timeout(fn, delay, invokeApply) {
            if (!isFunction(fn)) {
              invokeApply = delay;
              delay = fn;
              fn = noop;
            }

            var args = sliceArgs(arguments, 3),
                skipApply = isDefined(invokeApply) && !invokeApply,
                deferred = (skipApply ? $$q : $q).defer(),
                promise = deferred.promise,
                timeoutId;

            timeoutId = $browser.defer(function () {
              try {
                deferred.resolve(fn.apply(null, args));
              } catch (e) {
                deferred.reject(e);
                $exceptionHandler(e);
              } finally {
                delete deferreds[promise.$$timeoutId];
              }

              if (!skipApply) $rootScope.$apply();
            }, delay);

            promise.$$timeoutId = timeoutId;
            deferreds[timeoutId] = deferred;

            return promise;
          }

          /**
           * @ngdoc method
           * @name $timeout#cancel
           *
           * @description
           * Cancels a task associated with the `promise`. As a result of this, the promise will be
           * resolved with a rejection.
           *
           * @param {Promise=} promise Promise returned by the `$timeout` function.
           * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
           *   canceled.
           */
          timeout.cancel = function (promise) {
            if (promise && promise.$$timeoutId in deferreds) {
              deferreds[promise.$$timeoutId].reject('canceled');
              delete deferreds[promise.$$timeoutId];
              return $browser.defer.cancel(promise.$$timeoutId);
            }
            return false;
          };

          return timeout;
        }];
      }

      // NOTE:  The usage of window and document instead of $window and $document here is
      // deliberate.  This service depends on the specific behavior of anchor nodes created by the
      // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
      // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
      // doesn't know about mocked locations and resolves URLs to the real document - which is
      // exactly the behavior needed here.  There is little value is mocking these out for this
      // service.
      var urlParsingNode = window.document.createElement("a");
      var originUrl = urlResolve(window.location.href);

      /**
       *
       * Implementation Notes for non-IE browsers
       * ----------------------------------------
       * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
       * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
       * URL will be resolved into an absolute URL in the context of the application document.
       * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
       * properties are all populated to reflect the normalized URL.  This approach has wide
       * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
       * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
       *
       * Implementation Notes for IE
       * ---------------------------
       * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
       * browsers.  However, the parsed components will not be set if the URL assigned did not specify
       * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
       * work around that by performing the parsing in a 2nd step by taking a previously normalized
       * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
       * properties such as protocol, hostname, port, etc.
       *
       * References:
       *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
       *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
       *   http://url.spec.whatwg.org/#urlutils
       *   https://github.com/angular/angular.js/pull/2902
       *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
       *
       * @kind function
       * @param {string} url The URL to be parsed.
       * @description Normalizes and parses a URL.
       * @returns {object} Returns the normalized URL as a dictionary.
       *
       *   | member name   | Description    |
       *   |---------------|----------------|
       *   | href          | A normalized version of the provided URL if it was not an absolute URL |
       *   | protocol      | The protocol including the trailing colon                              |
       *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
       *   | search        | The search params, minus the question mark                             |
       *   | hash          | The hash string, minus the hash symbol
       *   | hostname      | The hostname
       *   | port          | The port, without ":"
       *   | pathname      | The pathname, beginning with "/"
       *
       */
      function urlResolve(url) {
        var href = url;

        if (msie) {
          // Normalize before parse.  Refer Implementation Notes on why this is
          // done in two steps on IE.
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
      }

      /**
       * Parse a request URL and determine whether this is a same-origin request as the application document.
       *
       * @param {string|object} requestUrl The url of the request as a string that will be resolved
       * or a parsed URL object.
       * @returns {boolean} Whether the request is for the same origin as the application document.
       */
      function urlIsSameOrigin(requestUrl) {
        var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
        return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
      }

      /**
       * @ngdoc service
       * @name $window
       *
       * @description
       * A reference to the browser's `window` object. While `window`
       * is globally available in JavaScript, it causes testability problems, because
       * it is a global variable. In angular we always refer to it through the
       * `$window` service, so it may be overridden, removed or mocked for testing.
       *
       * Expressions, like the one defined for the `ngClick` directive in the example
       * below, are evaluated with respect to the current scope.  Therefore, there is
       * no risk of inadvertently coding in a dependency on a global value in such an
       * expression.
       *
       * @example
         <example module="windowExample">
           <file name="index.html">
             <script>
               angular.module('windowExample', [])
                 .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
                   $scope.greeting = 'Hello, World!';
                   $scope.doGreeting = function(greeting) {
                     $window.alert(greeting);
                   };
                 }]);
             </script>
             <div ng-controller="ExampleController">
               <input type="text" ng-model="greeting" aria-label="greeting" />
               <button ng-click="doGreeting(greeting)">ALERT</button>
             </div>
           </file>
           <file name="protractor.js" type="protractor">
            it('should display the greeting in the input box', function() {
             element(by.model('greeting')).sendKeys('Hello, E2E Tests');
             // If we click the button it will block the test runner
             // element(':button').click();
            });
           </file>
         </example>
       */
      function $WindowProvider() {
        this.$get = valueFn(window);
      }

      /**
       * @name $$cookieReader
       * @requires $document
       *
       * @description
       * This is a private service for reading cookies used by $http and ngCookies
       *
       * @return {Object} a key/value map of the current cookies
       */
      function $$CookieReader($document) {
        var rawDocument = $document[0] || {};
        var lastCookies = {};
        var lastCookieString = '';

        function safeDecodeURIComponent(str) {
          try {
            return decodeURIComponent(str);
          } catch (e) {
            return str;
          }
        }

        return function () {
          var cookieArray, cookie, i, index, name;
          var currentCookieString = rawDocument.cookie || '';

          if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};

            for (i = 0; i < cookieArray.length; i++) {
              cookie = cookieArray[i];
              index = cookie.indexOf('=');
              if (index > 0) {
                //ignore nameless cookies
                name = safeDecodeURIComponent(cookie.substring(0, index));
                // the first value that is seen for a cookie is the most
                // specific one.  values for the same cookie name that
                // follow are for less specific paths.
                if (isUndefined(lastCookies[name])) {
                  lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                }
              }
            }
          }
          return lastCookies;
        };
      }

      $$CookieReader.$inject = ['$document'];

      function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
      }

      /* global currencyFilter: true,
       dateFilter: true,
       filterFilter: true,
       jsonFilter: true,
       limitToFilter: true,
       lowercaseFilter: true,
       numberFilter: true,
       orderByFilter: true,
       uppercaseFilter: true,
       */

      /**
       * @ngdoc provider
       * @name $filterProvider
       * @description
       *
       * Filters are just functions which transform input to an output. However filters need to be
       * Dependency Injected. To achieve this a filter definition consists of a factory function which is
       * annotated with dependencies and is responsible for creating a filter function.
       *
       * <div class="alert alert-warning">
       * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
       * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
       * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
       * (`myapp_subsection_filterx`).
       * </div>
       *
       * ```js
       *   // Filter registration
       *   function MyModule($provide, $filterProvider) {
       *     // create a service to demonstrate injection (not always needed)
       *     $provide.value('greet', function(name){
       *       return 'Hello ' + name + '!';
       *     });
       *
       *     // register a filter factory which uses the
       *     // greet service to demonstrate DI.
       *     $filterProvider.register('greet', function(greet){
       *       // return the filter function which uses the greet service
       *       // to generate salutation
       *       return function(text) {
       *         // filters need to be forgiving so check input validity
       *         return text && greet(text) || text;
       *       };
       *     });
       *   }
       * ```
       *
       * The filter function is registered with the `$injector` under the filter name suffix with
       * `Filter`.
       *
       * ```js
       *   it('should be the same instance', inject(
       *     function($filterProvider) {
       *       $filterProvider.register('reverse', function(){
       *         return ...;
       *       });
       *     },
       *     function($filter, reverseFilter) {
       *       expect($filter('reverse')).toBe(reverseFilter);
       *     });
       * ```
       *
       *
       * For more information about how angular filters work, and how to create your own filters, see
       * {@link guide/filter Filters} in the Angular Developer Guide.
       */

      /**
       * @ngdoc service
       * @name $filter
       * @kind function
       * @description
       * Filters are used for formatting data displayed to the user.
       *
       * The general syntax in templates is as follows:
       *
       *         {{ expression [| filter_name[:parameter_value] ... ] }}
       *
       * @param {String} name Name of the filter function to retrieve
       * @return {Function} the filter function
       * @example
         <example name="$filter" module="filterExample">
           <file name="index.html">
             <div ng-controller="MainCtrl">
              <h3>{{ originalText }}</h3>
              <h3>{{ filteredText }}</h3>
             </div>
           </file>
      
           <file name="script.js">
            angular.module('filterExample', [])
            .controller('MainCtrl', function($scope, $filter) {
              $scope.originalText = 'hello';
              $scope.filteredText = $filter('uppercase')($scope.originalText);
            });
           </file>
         </example>
        */
      $FilterProvider.$inject = ['$provide'];
      function $FilterProvider($provide) {
        var suffix = 'Filter';

        /**
         * @ngdoc method
         * @name $filterProvider#register
         * @param {string|Object} name Name of the filter function, or an object map of filters where
         *    the keys are the filter names and the values are the filter factories.
         *
         *    <div class="alert alert-warning">
         *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
         *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
         *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
         *    (`myapp_subsection_filterx`).
         *    </div>
          * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
         * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
         *    of the registered filter instances.
         */
        function register(name, factory) {
          if (isObject(name)) {
            var filters = {};
            forEach(name, function (filter, key) {
              filters[key] = register(key, filter);
            });
            return filters;
          } else {
            return $provide.factory(name + suffix, factory);
          }
        }
        this.register = register;

        this.$get = ['$injector', function ($injector) {
          return function (name) {
            return $injector.get(name + suffix);
          };
        }];

        ////////////////////////////////////////

        /* global
          currencyFilter: false,
          dateFilter: false,
          filterFilter: false,
          jsonFilter: false,
          limitToFilter: false,
          lowercaseFilter: false,
          numberFilter: false,
          orderByFilter: false,
          uppercaseFilter: false,
        */

        register('currency', currencyFilter);
        register('date', dateFilter);
        register('filter', filterFilter);
        register('json', jsonFilter);
        register('limitTo', limitToFilter);
        register('lowercase', lowercaseFilter);
        register('number', numberFilter);
        register('orderBy', orderByFilter);
        register('uppercase', uppercaseFilter);
      }

      /**
       * @ngdoc filter
       * @name filter
       * @kind function
       *
       * @description
       * Selects a subset of items from `array` and returns it as a new array.
       *
       * @param {Array} array The source array.
       * @param {string|Object|function()} expression The predicate to be used for selecting items from
       *   `array`.
       *
       *   Can be one of:
       *
       *   - `string`: The string is used for matching against the contents of the `array`. All strings or
       *     objects with string properties in `array` that match this string will be returned. This also
       *     applies to nested object properties.
       *     The predicate can be negated by prefixing the string with `!`.
       *
       *   - `Object`: A pattern object can be used to filter specific properties on objects contained
       *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
       *     which have property `name` containing "M" and property `phone` containing "1". A special
       *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
       *     against any property of the object or its nested object properties. That's equivalent to the
       *     simple substring match with a `string` as described above. The special property name can be
       *     overwritten, using the `anyPropertyKey` parameter.
       *     The predicate can be negated by prefixing the string with `!`.
       *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
       *     not containing "M".
       *
       *     Note that a named property will match properties on the same level only, while the special
       *     `$` property will match properties on the same level or deeper. E.g. an array item like
       *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
       *     **will** be matched by `{$: 'John'}`.
       *
       *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
       *     The function is called for each element of the array, with the element, its index, and
       *     the entire array itself as arguments.
       *
       *     The final result is an array of those elements that the predicate returned true for.
       *
       * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
       *     determining if the expected value (from the filter expression) and actual value (from
       *     the object in the array) should be considered a match.
       *
       *   Can be one of:
       *
       *   - `function(actual, expected)`:
       *     The function will be given the object value and the predicate value to compare and
       *     should return true if both values should be considered equal.
       *
       *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
       *     This is essentially strict comparison of expected and actual.
       *
       *   - `false|undefined`: A short hand for a function which will look for a substring match in case
       *     insensitive way.
       *
       *     Primitive values are converted to strings. Objects are not compared against primitives,
       *     unless they have a custom `toString` method (e.g. `Date` objects).
       *
       * @param {string=} anyPropertyKey The special property name that matches against any property.
       *     By default `$`.
       *
       * @example
         <example>
           <file name="index.html">
             <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                      {name:'Mary', phone:'800-BIG-MARY'},
                                      {name:'Mike', phone:'555-4321'},
                                      {name:'Adam', phone:'555-5678'},
                                      {name:'Julie', phone:'555-8765'},
                                      {name:'Juliette', phone:'555-5678'}]"></div>
      
             <label>Search: <input ng-model="searchText"></label>
             <table id="searchTextResults">
               <tr><th>Name</th><th>Phone</th></tr>
               <tr ng-repeat="friend in friends | filter:searchText">
                 <td>{{friend.name}}</td>
                 <td>{{friend.phone}}</td>
               </tr>
             </table>
             <hr>
             <label>Any: <input ng-model="search.$"></label> <br>
             <label>Name only <input ng-model="search.name"></label><br>
             <label>Phone only <input ng-model="search.phone"></label><br>
             <label>Equality <input type="checkbox" ng-model="strict"></label><br>
             <table id="searchObjResults">
               <tr><th>Name</th><th>Phone</th></tr>
               <tr ng-repeat="friendObj in friends | filter:search:strict">
                 <td>{{friendObj.name}}</td>
                 <td>{{friendObj.phone}}</td>
               </tr>
             </table>
           </file>
           <file name="protractor.js" type="protractor">
             var expectFriendNames = function(expectedNames, key) {
               element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
                 arr.forEach(function(wd, i) {
                   expect(wd.getText()).toMatch(expectedNames[i]);
                 });
               });
             };
      
             it('should search across all fields when filtering with a string', function() {
               var searchText = element(by.model('searchText'));
               searchText.clear();
               searchText.sendKeys('m');
               expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
      
               searchText.clear();
               searchText.sendKeys('76');
               expectFriendNames(['John', 'Julie'], 'friend');
             });
      
             it('should search in specific fields when filtering with a predicate object', function() {
               var searchAny = element(by.model('search.$'));
               searchAny.clear();
               searchAny.sendKeys('i');
               expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
             });
             it('should use a equal comparison when comparator is true', function() {
               var searchName = element(by.model('search.name'));
               var strict = element(by.model('strict'));
               searchName.clear();
               searchName.sendKeys('Julie');
               strict.click();
               expectFriendNames(['Julie'], 'friendObj');
             });
           </file>
         </example>
       */

      function filterFilter() {
        return function (array, expression, comparator, anyPropertyKey) {
          if (!isArrayLike(array)) {
            if (array == null) {
              return array;
            } else {
              throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
            }
          }

          anyPropertyKey = anyPropertyKey || '$';
          var expressionType = getTypeForFilter(expression);
          var predicateFn;
          var matchAgainstAnyProp;

          switch (expressionType) {
            case 'function':
              predicateFn = expression;
              break;
            case 'boolean':
            case 'null':
            case 'number':
            case 'string':
              matchAgainstAnyProp = true;
            //jshint -W086
            case 'object':
              //jshint +W086
              predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
              break;
            default:
              return array;
          }

          return Array.prototype.filter.call(array, predicateFn);
        };
      }

      // Helper functions for `filterFilter`
      function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
        var shouldMatchPrimitives = isObject(expression) && anyPropertyKey in expression;
        var predicateFn;

        if (comparator === true) {
          comparator = equals;
        } else if (!isFunction(comparator)) {
          comparator = function (actual, expected) {
            if (isUndefined(actual)) {
              // No substring matching against `undefined`
              return false;
            }
            if (actual === null || expected === null) {
              // No substring matching against `null`; only match against `null`
              return actual === expected;
            }
            if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) {
              // Should not compare primitives against objects, unless they have custom `toString` method
              return false;
            }

            actual = lowercase('' + actual);
            expected = lowercase('' + expected);
            return actual.indexOf(expected) !== -1;
          };
        }

        predicateFn = function (item) {
          if (shouldMatchPrimitives && !isObject(item)) {
            return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
          }
          return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
        };

        return predicateFn;
      }

      function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual);
        var expectedType = getTypeForFilter(expected);

        if (expectedType === 'string' && expected.charAt(0) === '!') {
          return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
        } else if (isArray(actual)) {
          // In case `actual` is an array, consider it a match
          // if ANY of it's items matches `expected`
          return actual.some(function (item) {
            return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
          });
        }

        switch (actualType) {
          case 'object':
            var key;
            if (matchAgainstAnyProp) {
              for (key in actual) {
                if (key.charAt(0) !== '$' && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
                  return true;
                }
              }
              return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
            } else if (expectedType === 'object') {
              for (key in expected) {
                var expectedVal = expected[key];
                if (isFunction(expectedVal) || isUndefined(expectedVal)) {
                  continue;
                }

                var matchAnyProperty = key === anyPropertyKey;
                var actualVal = matchAnyProperty ? actual : actual[key];
                if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
                  return false;
                }
              }
              return true;
            } else {
              return comparator(actual, expected);
            }
            break;
          case 'function':
            return false;
          default:
            return comparator(actual, expected);
        }
      }

      // Used for easily differentiating between `null` and actual `object`
      function getTypeForFilter(val) {
        return val === null ? 'null' : typeof val;
      }

      var MAX_DIGITS = 22;
      var DECIMAL_SEP = '.';
      var ZERO_CHAR = '0';

      /**
       * @ngdoc filter
       * @name currency
       * @kind function
       *
       * @description
       * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
       * symbol for current locale is used.
       *
       * @param {number} amount Input to filter.
       * @param {string=} symbol Currency symbol or identifier to be displayed.
       * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
       * @returns {string} Formatted number.
       *
       *
       * @example
         <example module="currencyExample">
           <file name="index.html">
             <script>
               angular.module('currencyExample', [])
                 .controller('ExampleController', ['$scope', function($scope) {
                   $scope.amount = 1234.56;
                 }]);
             </script>
             <div ng-controller="ExampleController">
               <input type="number" ng-model="amount" aria-label="amount"> <br>
               default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
               custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
               no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
             </div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should init with 1234.56', function() {
               expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
               expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
               expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
             });
             it('should update', function() {
               if (browser.params.browser == 'safari') {
                 // Safari does not understand the minus key. See
                 // https://github.com/angular/protractor/issues/481
                 return;
               }
               element(by.model('amount')).clear();
               element(by.model('amount')).sendKeys('-1234');
               expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
               expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
               expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
             });
           </file>
         </example>
       */
      currencyFilter.$inject = ['$locale'];
      function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (amount, currencySymbol, fractionSize) {
          if (isUndefined(currencySymbol)) {
            currencySymbol = formats.CURRENCY_SYM;
          }

          if (isUndefined(fractionSize)) {
            fractionSize = formats.PATTERNS[1].maxFrac;
          }

          // if null or undefined pass it through
          return amount == null ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(/\u00A4/g, currencySymbol);
        };
      }

      /**
       * @ngdoc filter
       * @name number
       * @kind function
       *
       * @description
       * Formats a number as text.
       *
       * If the input is null or undefined, it will just be returned.
       * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
       * If the input is not a number an empty string is returned.
       *
       *
       * @param {number|string} number Number to format.
       * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
       * If this is not provided then the fraction size is computed from the current locale's number
       * formatting pattern. In the case of the default locale, it will be 3.
       * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
       *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
       *                   include "," group separators after each third digit).
       *
       * @example
         <example module="numberFilterExample">
           <file name="index.html">
             <script>
               angular.module('numberFilterExample', [])
                 .controller('ExampleController', ['$scope', function($scope) {
                   $scope.val = 1234.56789;
                 }]);
             </script>
             <div ng-controller="ExampleController">
               <label>Enter number: <input ng-model='val'></label><br>
               Default formatting: <span id='number-default'>{{val | number}}</span><br>
               No fractions: <span>{{val | number:0}}</span><br>
               Negative number: <span>{{-val | number:4}}</span>
             </div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should format numbers', function() {
               expect(element(by.id('number-default')).getText()).toBe('1,234.568');
               expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
               expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
             });
      
             it('should update', function() {
               element(by.model('val')).clear();
               element(by.model('val')).sendKeys('3374.333');
               expect(element(by.id('number-default')).getText()).toBe('3,374.333');
               expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
               expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
            });
           </file>
         </example>
       */
      numberFilter.$inject = ['$locale'];
      function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function (number, fractionSize) {

          // if null or undefined pass it through
          return number == null ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
      }

      /**
       * Parse a number (as a string) into three components that can be used
       * for formatting the number.
       *
       * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
       *
       * @param  {string} numStr The number to parse
       * @return {object} An object describing this number, containing the following keys:
       *  - d : an array of digits containing leading zeros as necessary
       *  - i : the number of the digits in `d` that are to the left of the decimal point
       *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
       *
       */
      function parse(numStr) {
        var exponent = 0,
            digits,
            numberOfIntegerDigits;
        var i, j, zeros;

        // Decimal point?
        if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
          numStr = numStr.replace(DECIMAL_SEP, '');
        }

        // Exponential form?
        if ((i = numStr.search(/e/i)) > 0) {
          // Work out the exponent.
          if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
          numberOfIntegerDigits += +numStr.slice(i + 1);
          numStr = numStr.substring(0, i);
        } else if (numberOfIntegerDigits < 0) {
          // There was no decimal point or exponent so it is an integer.
          numberOfIntegerDigits = numStr.length;
        }

        // Count the number of leading zeros.
        for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) {/* jshint noempty: false */}

        if (i == (zeros = numStr.length)) {
          // The digits are all zero.
          digits = [0];
          numberOfIntegerDigits = 1;
        } else {
          // Count the number of trailing zeros
          zeros--;
          while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;

          // Trailing zeros are insignificant so ignore them
          numberOfIntegerDigits -= i;
          digits = [];
          // Convert string to array of digits without leading/trailing zeros.
          for (j = 0; i <= zeros; i++, j++) {
            digits[j] = +numStr.charAt(i);
          }
        }

        // If the number overflows the maximum allowed digits then use an exponent.
        if (numberOfIntegerDigits > MAX_DIGITS) {
          digits = digits.splice(0, MAX_DIGITS - 1);
          exponent = numberOfIntegerDigits - 1;
          numberOfIntegerDigits = 1;
        }

        return { d: digits, e: exponent, i: numberOfIntegerDigits };
      }

      /**
       * Round the parsed number to the specified number of decimal places
       * This function changed the parsedNumber in-place
       */
      function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
        var digits = parsedNumber.d;
        var fractionLen = digits.length - parsedNumber.i;

        // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
        fractionSize = isUndefined(fractionSize) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

        // The index of the digit to where rounding is to occur
        var roundAt = fractionSize + parsedNumber.i;
        var digit = digits[roundAt];

        if (roundAt > 0) {
          // Drop fractional digits beyond `roundAt`
          digits.splice(Math.max(parsedNumber.i, roundAt));

          // Set non-fractional digits beyond `roundAt` to 0
          for (var j = roundAt; j < digits.length; j++) {
            digits[j] = 0;
          }
        } else {
          // We rounded to zero so reset the parsedNumber
          fractionLen = Math.max(0, fractionLen);
          parsedNumber.i = 1;
          digits.length = Math.max(1, roundAt = fractionSize + 1);
          digits[0] = 0;
          for (var i = 1; i < roundAt; i++) digits[i] = 0;
        }

        if (digit >= 5) {
          if (roundAt - 1 < 0) {
            for (var k = 0; k > roundAt; k--) {
              digits.unshift(0);
              parsedNumber.i++;
            }
            digits.unshift(1);
            parsedNumber.i++;
          } else {
            digits[roundAt - 1]++;
          }
        }

        // Pad out with zeros to get the required fraction length
        for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);

        // Do any carrying, e.g. a digit was rounded up to 10
        var carry = digits.reduceRight(function (carry, d, i, digits) {
          d = d + carry;
          digits[i] = d % 10;
          return Math.floor(d / 10);
        }, 0);
        if (carry) {
          digits.unshift(carry);
          parsedNumber.i++;
        }
      }

      /**
       * Format a number into a string
       * @param  {number} number       The number to format
       * @param  {{
       *           minFrac, // the minimum number of digits required in the fraction part of the number
       *           maxFrac, // the maximum number of digits required in the fraction part of the number
       *           gSize,   // number of digits in each group of separated digits
       *           lgSize,  // number of digits in the last group of digits before the decimal separator
       *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
       *           posPre,  // the string to go in front of a positive number
       *           negSuf,  // the string to go after a negative number (e.g. `)`)
       *           posSuf   // the string to go after a positive number
       *         }} pattern
       * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
       * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
       * @param  {[type]} fractionSize The size of the fractional part of the number
       * @return {string}              The number formatted as a string
       */
      function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

        if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

        var isInfinity = !isFinite(number);
        var isZero = false;
        var numStr = Math.abs(number) + '',
            formattedText = '',
            parsedNumber;

        if (isInfinity) {
          formattedText = '\u221e';
        } else {
          parsedNumber = parse(numStr);

          roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

          var digits = parsedNumber.d;
          var integerLen = parsedNumber.i;
          var exponent = parsedNumber.e;
          var decimals = [];
          isZero = digits.reduce(function (isZero, d) {
            return isZero && !d;
          }, true);

          // pad zeros for small numbers
          while (integerLen < 0) {
            digits.unshift(0);
            integerLen++;
          }

          // extract decimals digits
          if (integerLen > 0) {
            decimals = digits.splice(integerLen, digits.length);
          } else {
            decimals = digits;
            digits = [0];
          }

          // format the integer digits with grouping separators
          var groups = [];
          if (digits.length >= pattern.lgSize) {
            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
          }
          while (digits.length > pattern.gSize) {
            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
          }
          if (digits.length) {
            groups.unshift(digits.join(''));
          }
          formattedText = groups.join(groupSep);

          // append the decimal digits
          if (decimals.length) {
            formattedText += decimalSep + decimals.join('');
          }

          if (exponent) {
            formattedText += 'e+' + exponent;
          }
        }
        if (number < 0 && !isZero) {
          return pattern.negPre + formattedText + pattern.negSuf;
        } else {
          return pattern.posPre + formattedText + pattern.posSuf;
        }
      }

      function padNumber(num, digits, trim, negWrap) {
        var neg = '';
        if (num < 0 || negWrap && num <= 0) {
          if (negWrap) {
            num = -num + 1;
          } else {
            num = -num;
            neg = '-';
          }
        }
        num = '' + num;
        while (num.length < digits) num = ZERO_CHAR + num;
        if (trim) {
          num = num.substr(num.length - digits);
        }
        return neg + num;
      }

      function dateGetter(name, size, offset, trim, negWrap) {
        offset = offset || 0;
        return function (date) {
          var value = date['get' + name]();
          if (offset > 0 || value > -offset) {
            value += offset;
          }
          if (value === 0 && offset == -12) value = 12;
          return padNumber(value, size, trim, negWrap);
        };
      }

      function dateStrGetter(name, shortForm, standAlone) {
        return function (date, formats) {
          var value = date['get' + name]();
          var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
          var get = uppercase(propPrefix + name);

          return formats[get][value];
        };
      }

      function timeZoneGetter(date, formats, offset) {
        var zone = -1 * offset;
        var paddedZone = zone >= 0 ? "+" : "";

        paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);

        return paddedZone;
      }

      function getFirstThursdayOfYear(year) {
        // 0 = index of January
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        // 4 = index of Thursday (+1 to account for 1st = 5)
        // 11 = index of *next* Thursday (+1 account for 1st = 12)
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
      }

      function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(),
        // 4 = index of Thursday
        datetime.getDate() + (4 - datetime.getDay()));
      }

      function weekGetter(size) {
        return function (date) {
          var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
              thisThurs = getThursdayThisWeek(date);

          var diff = +thisThurs - +firstThurs,
              result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

          return padNumber(result, size);
        };
      }

      function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
      }

      function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
      }

      function longEraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
      }

      var DATE_FORMATS = {
        yyyy: dateGetter('FullYear', 4, 0, false, true),
        yy: dateGetter('FullYear', 2, 0, true, true),
        y: dateGetter('FullYear', 1, 0, false, true),
        MMMM: dateStrGetter('Month'),
        MMM: dateStrGetter('Month', true),
        MM: dateGetter('Month', 2, 1),
        M: dateGetter('Month', 1, 1),
        LLLL: dateStrGetter('Month', false, true),
        dd: dateGetter('Date', 2),
        d: dateGetter('Date', 1),
        HH: dateGetter('Hours', 2),
        H: dateGetter('Hours', 1),
        hh: dateGetter('Hours', 2, -12),
        h: dateGetter('Hours', 1, -12),
        mm: dateGetter('Minutes', 2),
        m: dateGetter('Minutes', 1),
        ss: dateGetter('Seconds', 2),
        s: dateGetter('Seconds', 1),
        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
        // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
        sss: dateGetter('Milliseconds', 3),
        EEEE: dateStrGetter('Day'),
        EEE: dateStrGetter('Day', true),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1),
        G: eraGetter,
        GG: eraGetter,
        GGG: eraGetter,
        GGGG: longEraGetter
      };

      var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
          NUMBER_STRING = /^\-?\d+$/;

      /**
       * @ngdoc filter
       * @name date
       * @kind function
       *
       * @description
       *   Formats `date` to a string based on the requested `format`.
       *
       *   `format` string can be composed of the following elements:
       *
       *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
       *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
       *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
       *   * `'MMMM'`: Month in year (January-December)
       *   * `'MMM'`: Month in year (Jan-Dec)
       *   * `'MM'`: Month in year, padded (01-12)
       *   * `'M'`: Month in year (1-12)
       *   * `'LLLL'`: Stand-alone month in year (January-December)
       *   * `'dd'`: Day in month, padded (01-31)
       *   * `'d'`: Day in month (1-31)
       *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
       *   * `'EEE'`: Day in Week, (Sun-Sat)
       *   * `'HH'`: Hour in day, padded (00-23)
       *   * `'H'`: Hour in day (0-23)
       *   * `'hh'`: Hour in AM/PM, padded (01-12)
       *   * `'h'`: Hour in AM/PM, (1-12)
       *   * `'mm'`: Minute in hour, padded (00-59)
       *   * `'m'`: Minute in hour (0-59)
       *   * `'ss'`: Second in minute, padded (00-59)
       *   * `'s'`: Second in minute (0-59)
       *   * `'sss'`: Millisecond in second, padded (000-999)
       *   * `'a'`: AM/PM marker
       *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
       *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
       *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
       *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
       *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
       *
       *   `format` string can also be one of the following predefined
       *   {@link guide/i18n localizable formats}:
       *
       *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
       *     (e.g. Sep 3, 2010 12:05:08 PM)
       *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
       *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
       *     (e.g. Friday, September 3, 2010)
       *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
       *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
       *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
       *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
       *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
       *
       *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
       *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
       *   (e.g. `"h 'o''clock'"`).
       *
       * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
       *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
       *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
       *    specified in the string input, the time is considered to be in the local timezone.
       * @param {string=} format Formatting rules (see Description). If not specified,
       *    `mediumDate` is used.
       * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
       *    continental US time zone abbreviations, but for general use, use a time zone offset, for
       *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
       *    If not specified, the timezone of the browser will be used.
       * @returns {string} Formatted string or the input if input is not recognized as date/millis.
       *
       * @example
         <example>
           <file name="index.html">
             <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
                 <span>{{1288323623006 | date:'medium'}}</span><br>
             <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
                <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
             <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
                <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
             <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
                <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
           </file>
           <file name="protractor.js" type="protractor">
             it('should format date', function() {
               expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
                  toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
               expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
                  toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
               expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
                  toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
               expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
                  toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
             });
           </file>
         </example>
       */
      dateFilter.$inject = ['$locale'];
      function dateFilter($locale) {

        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        // 1        2       3         4          5          6          7          8  9     10      11
        function jsonStringToDate(string) {
          var match;
          if (match = string.match(R_ISO8601_STR)) {
            var date = new Date(0),
                tzHour = 0,
                tzMin = 0,
                dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
                timeSetter = match[8] ? date.setUTCHours : date.setHours;

            if (match[9]) {
              tzHour = toInt(match[9] + match[10]);
              tzMin = toInt(match[9] + match[11]);
            }
            dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
            var h = toInt(match[4] || 0) - tzHour;
            var m = toInt(match[5] || 0) - tzMin;
            var s = toInt(match[6] || 0);
            var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
            timeSetter.call(date, h, m, s, ms);
            return date;
          }
          return string;
        }

        return function (date, format, timezone) {
          var text = '',
              parts = [],
              fn,
              match;

          format = format || 'mediumDate';
          format = $locale.DATETIME_FORMATS[format] || format;
          if (isString(date)) {
            date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
          }

          if (isNumber(date)) {
            date = new Date(date);
          }

          if (!isDate(date) || !isFinite(date.getTime())) {
            return date;
          }

          while (format) {
            match = DATE_FORMATS_SPLIT.exec(format);
            if (match) {
              parts = concat(parts, match, 1);
              format = parts.pop();
            } else {
              parts.push(format);
              format = null;
            }
          }

          var dateTimezoneOffset = date.getTimezoneOffset();
          if (timezone) {
            dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
            date = convertTimezoneToLocal(date, timezone, true);
          }
          forEach(parts, function (value) {
            fn = DATE_FORMATS[value];
            text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
          });

          return text;
        };
      }

      /**
       * @ngdoc filter
       * @name json
       * @kind function
       *
       * @description
       *   Allows you to convert a JavaScript object into JSON string.
       *
       *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
       *   the binding is automatically converted to JSON.
       *
       * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
       * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
       * @returns {string} JSON string.
       *
       *
       * @example
         <example>
           <file name="index.html">
             <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
             <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
           </file>
           <file name="protractor.js" type="protractor">
             it('should jsonify filtered objects', function() {
               expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
               expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
             });
           </file>
         </example>
       *
       */
      function jsonFilter() {
        return function (object, spacing) {
          if (isUndefined(spacing)) {
            spacing = 2;
          }
          return toJson(object, spacing);
        };
      }

      /**
       * @ngdoc filter
       * @name lowercase
       * @kind function
       * @description
       * Converts string to lowercase.
       * @see angular.lowercase
       */
      var lowercaseFilter = valueFn(lowercase);

      /**
       * @ngdoc filter
       * @name uppercase
       * @kind function
       * @description
       * Converts string to uppercase.
       * @see angular.uppercase
       */
      var uppercaseFilter = valueFn(uppercase);

      /**
       * @ngdoc filter
       * @name limitTo
       * @kind function
       *
       * @description
       * Creates a new array or string containing only a specified number of elements. The elements are
       * taken from either the beginning or the end of the source array, string or number, as specified by
       * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
       * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
       * it is converted to a string.
       *
       * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
       * @param {string|number} limit - The length of the returned array or string. If the `limit` number
       *     is positive, `limit` number of items from the beginning of the source array/string are copied.
       *     If the number is negative, `limit` number  of items from the end of the source array/string
       *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
       *     the input will be returned unchanged.
       * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
       *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
       * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
       *     less than `limit` elements.
       *
       * @example
         <example module="limitToExample">
           <file name="index.html">
             <script>
               angular.module('limitToExample', [])
                 .controller('ExampleController', ['$scope', function($scope) {
                   $scope.numbers = [1,2,3,4,5,6,7,8,9];
                   $scope.letters = "abcdefghi";
                   $scope.longNumber = 2345432342;
                   $scope.numLimit = 3;
                   $scope.letterLimit = 3;
                   $scope.longNumberLimit = 3;
                 }]);
             </script>
             <div ng-controller="ExampleController">
               <label>
                  Limit {{numbers}} to:
                  <input type="number" step="1" ng-model="numLimit">
               </label>
               <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
               <label>
                  Limit {{letters}} to:
                  <input type="number" step="1" ng-model="letterLimit">
               </label>
               <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
               <label>
                  Limit {{longNumber}} to:
                  <input type="number" step="1" ng-model="longNumberLimit">
               </label>
               <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
             </div>
           </file>
           <file name="protractor.js" type="protractor">
             var numLimitInput = element(by.model('numLimit'));
             var letterLimitInput = element(by.model('letterLimit'));
             var longNumberLimitInput = element(by.model('longNumberLimit'));
             var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
             var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
             var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
      
             it('should limit the number array to first three items', function() {
               expect(numLimitInput.getAttribute('value')).toBe('3');
               expect(letterLimitInput.getAttribute('value')).toBe('3');
               expect(longNumberLimitInput.getAttribute('value')).toBe('3');
               expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
               expect(limitedLetters.getText()).toEqual('Output letters: abc');
               expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
             });
      
             // There is a bug in safari and protractor that doesn't like the minus key
             // it('should update the output when -3 is entered', function() {
             //   numLimitInput.clear();
             //   numLimitInput.sendKeys('-3');
             //   letterLimitInput.clear();
             //   letterLimitInput.sendKeys('-3');
             //   longNumberLimitInput.clear();
             //   longNumberLimitInput.sendKeys('-3');
             //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
             //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
             //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
             // });
      
             it('should not exceed the maximum size of input array', function() {
               numLimitInput.clear();
               numLimitInput.sendKeys('100');
               letterLimitInput.clear();
               letterLimitInput.sendKeys('100');
               longNumberLimitInput.clear();
               longNumberLimitInput.sendKeys('100');
               expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
               expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
               expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
             });
           </file>
         </example>
      */
      function limitToFilter() {
        return function (input, limit, begin) {
          if (Math.abs(Number(limit)) === Infinity) {
            limit = Number(limit);
          } else {
            limit = toInt(limit);
          }
          if (isNaN(limit)) return input;

          if (isNumber(input)) input = input.toString();
          if (!isArrayLike(input)) return input;

          begin = !begin || isNaN(begin) ? 0 : toInt(begin);
          begin = begin < 0 ? Math.max(0, input.length + begin) : begin;

          if (limit >= 0) {
            return sliceFn(input, begin, begin + limit);
          } else {
            if (begin === 0) {
              return sliceFn(input, limit, input.length);
            } else {
              return sliceFn(input, Math.max(0, begin + limit), begin);
            }
          }
        };
      }

      function sliceFn(input, begin, end) {
        if (isString(input)) return input.slice(begin, end);

        return slice.call(input, begin, end);
      }

      /**
       * @ngdoc filter
       * @name orderBy
       * @kind function
       *
       * @description
       * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
       * function based on the values computed using the `expression` predicate.
       *
       * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
       * `[{id: 'bar'}, {id: 'foo'}]`.
       *
       * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
       * String, etc).
       *
       * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
       * for the preceeding one. The `expression` is evaluated against each item and the output is used
       * for comparing with other items.
       *
       * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
       * ascending order.
       *
       * The comparison is done using the `comparator` function. If none is specified, a default, built-in
       * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
       * strings alphabetically).
       *
       * ### Under the hood
       *
       * Ordering the specified `collection` happens in two phases:
       *
       * 1. All items are passed through the predicate (or predicates), and the returned values are saved
       *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
       *    through a predicate that extracts the value of the `label` property, would be transformed to:
       *    ```
       *    {
       *      value: 'foo',
       *      type: 'string',
       *      index: ...
       *    }
       *    ```
       * 2. The comparator function is used to sort the items, based on the derived values, types and
       *    indices.
       *
       * If you use a custom comparator, it will be called with pairs of objects of the form
       * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
       * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
       * second, or `1` otherwise.
       *
       * In order to ensure that the sorting will be deterministic across platforms, if none of the
       * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
       * dummy predicate that returns the item's index as `value`.
       * (If you are using a custom comparator, make sure it can handle this predicate as well.)
       *
       * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
       * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
       * it to the comparator. The following rules govern the conversion:
       *
       * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
       *    used instead.<br />
       *    (If the object has a `valueOf()` method that returns another object, then the returned object
       *    will be used in subsequent steps.)
       * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
       *    returns a primitive, its return value will be used instead.<br />
       *    (If the object has a `toString()` method that returns another object, then the returned object
       *    will be used in subsequent steps.)
       * 3. No conversion; the object itself is used.
       *
       * ### The default comparator
       *
       * The default, built-in comparator should be sufficient for most usecases. In short, it compares
       * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
       * using their index in the original collection, and sorts values of different types by type.
       *
       * More specifically, it follows these steps to determine the relative order of items:
       *
       * 1. If the compared values are of different types, compare the types themselves alphabetically.
       * 2. If both values are of type `string`, compare them alphabetically in a case- and
       *    locale-insensitive way.
       * 3. If both values are objects, compare their indices instead.
       * 4. Otherwise, return:
       *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
       *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
       *    -  `1`, otherwise.
       *
       * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
       *           saved as numbers and not strings.
       *
       * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
       * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
       *    predicates) to be used by the comparator to determine the order of elements.
       *
       *    Can be one of:
       *
       *    - `Function`: A getter function. This function will be called with each item as argument and
       *      the return value will be used for sorting.
       *    - `string`: An Angular expression. This expression will be evaluated against each item and the
       *      result will be used for sorting. For example, use `'label'` to sort by a property called
       *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
       *      property.<br />
       *      (The result of a constant expression is interpreted as a property name to be used for
       *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
       *      property called `special name`.)<br />
       *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
       *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
       *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
       *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
       *      relative order of two items, the next predicate is used as a tie-breaker.
       *
       * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
       *
       * @param {boolean=} reverse - If `true`, reverse the sorting order.
       * @param {(Function)=} comparator - The comparator function used to determine the relative order of
       *    value pairs. If omitted, the built-in comparator will be used.
       *
       * @returns {Array} - The sorted array.
       *
       *
       * @example
       * ### Ordering a table with `ngRepeat`
       *
       * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
       * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
       * it defaults to the built-in comparator.
       *
         <example name="orderBy-static" module="orderByExample1">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <table class="friends">
                 <tr>
                   <th>Name</th>
                   <th>Phone Number</th>
                   <th>Age</th>
                 </tr>
                 <tr ng-repeat="friend in friends | orderBy:'-age'">
                   <td>{{friend.name}}</td>
                   <td>{{friend.phone}}</td>
                   <td>{{friend.age}}</td>
                 </tr>
               </table>
             </div>
           </file>
           <file name="script.js">
             angular.module('orderByExample1', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.friends = [
                   {name: 'John',   phone: '555-1212',  age: 10},
                   {name: 'Mary',   phone: '555-9876',  age: 19},
                   {name: 'Mike',   phone: '555-4321',  age: 21},
                   {name: 'Adam',   phone: '555-5678',  age: 35},
                   {name: 'Julie',  phone: '555-8765',  age: 29}
                 ];
               }]);
           </file>
           <file name="style.css">
             .friends {
               border-collapse: collapse;
             }
      
             .friends th {
               border-bottom: 1px solid;
             }
             .friends td, .friends th {
               border-left: 1px solid;
               padding: 5px 10px;
             }
             .friends td:first-child, .friends th:first-child {
               border-left: none;
             }
           </file>
           <file name="protractor.js" type="protractor">
             // Element locators
             var names = element.all(by.repeater('friends').column('friend.name'));
      
             it('should sort friends by age in reverse order', function() {
               expect(names.get(0).getText()).toBe('Adam');
               expect(names.get(1).getText()).toBe('Julie');
               expect(names.get(2).getText()).toBe('Mike');
               expect(names.get(3).getText()).toBe('Mary');
               expect(names.get(4).getText()).toBe('John');
             });
           </file>
         </example>
       * <hr />
       *
       * @example
       * ### Changing parameters dynamically
       *
       * All parameters can be changed dynamically. The next example shows how you can make the columns of
       * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
       *
         <example name="orderBy-dynamic" module="orderByExample2">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
               <hr/>
               <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
               <hr/>
               <table class="friends">
                 <tr>
                   <th>
                     <button ng-click="sortBy('name')">Name</button>
                     <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
                   </th>
                   <th>
                     <button ng-click="sortBy('phone')">Phone Number</button>
                     <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
                   </th>
                   <th>
                     <button ng-click="sortBy('age')">Age</button>
                     <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
                   </th>
                 </tr>
                 <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
                   <td>{{friend.name}}</td>
                   <td>{{friend.phone}}</td>
                   <td>{{friend.age}}</td>
                 </tr>
               </table>
             </div>
           </file>
           <file name="script.js">
             angular.module('orderByExample2', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 var friends = [
                   {name: 'John',   phone: '555-1212',  age: 10},
                   {name: 'Mary',   phone: '555-9876',  age: 19},
                   {name: 'Mike',   phone: '555-4321',  age: 21},
                   {name: 'Adam',   phone: '555-5678',  age: 35},
                   {name: 'Julie',  phone: '555-8765',  age: 29}
                 ];
      
                 $scope.propertyName = 'age';
                 $scope.reverse = true;
                 $scope.friends = friends;
      
                 $scope.sortBy = function(propertyName) {
                   $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
                   $scope.propertyName = propertyName;
                 };
               }]);
           </file>
           <file name="style.css">
             .friends {
               border-collapse: collapse;
             }
      
             .friends th {
               border-bottom: 1px solid;
             }
             .friends td, .friends th {
               border-left: 1px solid;
               padding: 5px 10px;
             }
             .friends td:first-child, .friends th:first-child {
               border-left: none;
             }
      
             .sortorder:after {
               content: '\25b2';   // BLACK UP-POINTING TRIANGLE
             }
             .sortorder.reverse:after {
               content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
             }
           </file>
           <file name="protractor.js" type="protractor">
             // Element locators
             var unsortButton = element(by.partialButtonText('unsorted'));
             var nameHeader = element(by.partialButtonText('Name'));
             var phoneHeader = element(by.partialButtonText('Phone'));
             var ageHeader = element(by.partialButtonText('Age'));
             var firstName = element(by.repeater('friends').column('friend.name').row(0));
             var lastName = element(by.repeater('friends').column('friend.name').row(4));
      
             it('should sort friends by some property, when clicking on the column header', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               phoneHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Mary');
      
               nameHeader.click();
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('Mike');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Adam');
             });
      
             it('should sort friends in reverse order, when clicking on the same column', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Adam');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
             });
      
             it('should restore the original order, when clicking "Set to unsorted"', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               unsortButton.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Julie');
             });
           </file>
         </example>
       * <hr />
       *
       * @example
       * ### Using `orderBy` inside a controller
       *
       * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
       * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
       * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
       *
         <example name="orderBy-call-manually" module="orderByExample3">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
               <hr/>
               <button ng-click="sortBy(null)">Set to unsorted</button>
               <hr/>
               <table class="friends">
                 <tr>
                   <th>
                     <button ng-click="sortBy('name')">Name</button>
                     <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
                   </th>
                   <th>
                     <button ng-click="sortBy('phone')">Phone Number</button>
                     <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
                   </th>
                   <th>
                     <button ng-click="sortBy('age')">Age</button>
                     <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
                   </th>
                 </tr>
                 <tr ng-repeat="friend in friends">
                   <td>{{friend.name}}</td>
                   <td>{{friend.phone}}</td>
                   <td>{{friend.age}}</td>
                 </tr>
               </table>
             </div>
           </file>
           <file name="script.js">
             angular.module('orderByExample3', [])
               .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
                 var friends = [
                   {name: 'John',   phone: '555-1212',  age: 10},
                   {name: 'Mary',   phone: '555-9876',  age: 19},
                   {name: 'Mike',   phone: '555-4321',  age: 21},
                   {name: 'Adam',   phone: '555-5678',  age: 35},
                   {name: 'Julie',  phone: '555-8765',  age: 29}
                 ];
      
                 $scope.propertyName = 'age';
                 $scope.reverse = true;
                 $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
      
                 $scope.sortBy = function(propertyName) {
                   $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
                       ? !$scope.reverse : false;
                   $scope.propertyName = propertyName;
                   $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
                 };
               }]);
           </file>
           <file name="style.css">
             .friends {
               border-collapse: collapse;
             }
      
             .friends th {
               border-bottom: 1px solid;
             }
             .friends td, .friends th {
               border-left: 1px solid;
               padding: 5px 10px;
             }
             .friends td:first-child, .friends th:first-child {
               border-left: none;
             }
      
             .sortorder:after {
               content: '\25b2';   // BLACK UP-POINTING TRIANGLE
             }
             .sortorder.reverse:after {
               content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
             }
           </file>
           <file name="protractor.js" type="protractor">
             // Element locators
             var unsortButton = element(by.partialButtonText('unsorted'));
             var nameHeader = element(by.partialButtonText('Name'));
             var phoneHeader = element(by.partialButtonText('Phone'));
             var ageHeader = element(by.partialButtonText('Age'));
             var firstName = element(by.repeater('friends').column('friend.name').row(0));
             var lastName = element(by.repeater('friends').column('friend.name').row(4));
      
             it('should sort friends by some property, when clicking on the column header', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               phoneHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Mary');
      
               nameHeader.click();
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('Mike');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Adam');
             });
      
             it('should sort friends in reverse order, when clicking on the same column', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Adam');
      
               ageHeader.click();
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
             });
      
             it('should restore the original order, when clicking "Set to unsorted"', function() {
               expect(firstName.getText()).toBe('Adam');
               expect(lastName.getText()).toBe('John');
      
               unsortButton.click();
               expect(firstName.getText()).toBe('John');
               expect(lastName.getText()).toBe('Julie');
             });
           </file>
         </example>
       * <hr />
       *
       * @example
       * ### Using a custom comparator
       *
       * If you have very specific requirements about the way items are sorted, you can pass your own
       * comparator function. For example, you might need to compare some strings in a locale-sensitive
       * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
       * argument - passing `false` retains the default sorting order, i.e. ascending.)
       *
         <example name="orderBy-custom-comparator" module="orderByExample4">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <div class="friends-container custom-comparator">
                 <h3>Locale-sensitive Comparator</h3>
                 <table class="friends">
                   <tr>
                     <th>Name</th>
                     <th>Favorite Letter</th>
                   </tr>
                   <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
                     <td>{{friend.name}}</td>
                     <td>{{friend.favoriteLetter}}</td>
                   </tr>
                 </table>
               </div>
               <div class="friends-container default-comparator">
                 <h3>Default Comparator</h3>
                 <table class="friends">
                   <tr>
                     <th>Name</th>
                     <th>Favorite Letter</th>
                   </tr>
                   <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
                     <td>{{friend.name}}</td>
                     <td>{{friend.favoriteLetter}}</td>
                   </tr>
                 </table>
               </div>
             </div>
           </file>
           <file name="script.js">
             angular.module('orderByExample4', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.friends = [
                   {name: 'John',   favoriteLetter: 'Ä'},
                   {name: 'Mary',   favoriteLetter: 'Ü'},
                   {name: 'Mike',   favoriteLetter: 'Ö'},
                   {name: 'Adam',   favoriteLetter: 'H'},
                   {name: 'Julie',  favoriteLetter: 'Z'}
                 ];
      
                 $scope.localeSensitiveComparator = function(v1, v2) {
                   // If we don't get strings, just compare by index
                   if (v1.type !== 'string' || v2.type !== 'string') {
                     return (v1.index < v2.index) ? -1 : 1;
                   }
      
                   // Compare strings alphabetically, taking locale into account
                   return v1.value.localeCompare(v2.value);
                 };
               }]);
           </file>
           <file name="style.css">
             .friends-container {
               display: inline-block;
               margin: 0 30px;
             }
      
             .friends {
               border-collapse: collapse;
             }
      
             .friends th {
               border-bottom: 1px solid;
             }
             .friends td, .friends th {
               border-left: 1px solid;
               padding: 5px 10px;
             }
             .friends td:first-child, .friends th:first-child {
               border-left: none;
             }
           </file>
           <file name="protractor.js" type="protractor">
             // Element locators
             var container = element(by.css('.custom-comparator'));
             var names = container.all(by.repeater('friends').column('friend.name'));
      
             it('should sort friends by favorite letter (in correct alphabetical order)', function() {
               expect(names.get(0).getText()).toBe('John');
               expect(names.get(1).getText()).toBe('Adam');
               expect(names.get(2).getText()).toBe('Mike');
               expect(names.get(3).getText()).toBe('Mary');
               expect(names.get(4).getText()).toBe('Julie');
             });
           </file>
         </example>
       *
       */
      orderByFilter.$inject = ['$parse'];
      function orderByFilter($parse) {
        return function (array, sortPredicate, reverseOrder, compareFn) {

          if (array == null) return array;
          if (!isArrayLike(array)) {
            throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
          }

          if (!isArray(sortPredicate)) {
            sortPredicate = [sortPredicate];
          }
          if (sortPredicate.length === 0) {
            sortPredicate = ['+'];
          }

          var predicates = processPredicates(sortPredicate);

          var descending = reverseOrder ? -1 : 1;

          // Define the `compare()` function. Use a default comparator if none is specified.
          var compare = isFunction(compareFn) ? compareFn : defaultCompare;

          // The next three lines are a version of a Swartzian Transform idiom from Perl
          // (sometimes called the Decorate-Sort-Undecorate idiom)
          // See https://en.wikipedia.org/wiki/Schwartzian_transform
          var compareValues = Array.prototype.map.call(array, getComparisonObject);
          compareValues.sort(doComparison);
          array = compareValues.map(function (item) {
            return item.value;
          });

          return array;

          function getComparisonObject(value, index) {
            // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
            // This will be used to keep the sort stable when none of the input predicates can
            // distinguish between two elements.
            return {
              value: value,
              tieBreaker: { value: index, type: 'number', index: index },
              predicateValues: predicates.map(function (predicate) {
                return getPredicateValue(predicate.get(value), index);
              })
            };
          }

          function doComparison(v1, v2) {
            for (var i = 0, ii = predicates.length; i < ii; i++) {
              var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
              if (result) {
                return result * predicates[i].descending * descending;
              }
            }

            return compare(v1.tieBreaker, v2.tieBreaker) * descending;
          }
        };

        function processPredicates(sortPredicates) {
          return sortPredicates.map(function (predicate) {
            var descending = 1,
                get = identity;

            if (isFunction(predicate)) {
              get = predicate;
            } else if (isString(predicate)) {
              if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
                descending = predicate.charAt(0) == '-' ? -1 : 1;
                predicate = predicate.substring(1);
              }
              if (predicate !== '') {
                get = $parse(predicate);
                if (get.constant) {
                  var key = get();
                  get = function (value) {
                    return value[key];
                  };
                }
              }
            }
            return { get: get, descending: descending };
          });
        }

        function isPrimitive(value) {
          switch (typeof value) {
            case 'number': /* falls through */
            case 'boolean': /* falls through */
            case 'string':
              return true;
            default:
              return false;
          }
        }

        function objectValue(value) {
          // If `valueOf` is a valid function use that
          if (isFunction(value.valueOf)) {
            value = value.valueOf();
            if (isPrimitive(value)) return value;
          }
          // If `toString` is a valid function and not the one from `Object.prototype` use that
          if (hasCustomToString(value)) {
            value = value.toString();
            if (isPrimitive(value)) return value;
          }

          return value;
        }

        function getPredicateValue(value, index) {
          var type = typeof value;
          if (value === null) {
            type = 'string';
            value = 'null';
          } else if (type === 'object') {
            value = objectValue(value);
          }
          return { value: value, type: type, index: index };
        }

        function defaultCompare(v1, v2) {
          var result = 0;
          var type1 = v1.type;
          var type2 = v2.type;

          if (type1 === type2) {
            var value1 = v1.value;
            var value2 = v2.value;

            if (type1 === 'string') {
              // Compare strings case-insensitively
              value1 = value1.toLowerCase();
              value2 = value2.toLowerCase();
            } else if (type1 === 'object') {
              // For basic objects, use the position of the object
              // in the collection instead of the value
              if (isObject(value1)) value1 = v1.index;
              if (isObject(value2)) value2 = v2.index;
            }

            if (value1 !== value2) {
              result = value1 < value2 ? -1 : 1;
            }
          } else {
            result = type1 < type2 ? -1 : 1;
          }

          return result;
        }
      }

      function ngDirective(directive) {
        if (isFunction(directive)) {
          directive = {
            link: directive
          };
        }
        directive.restrict = directive.restrict || 'AC';
        return valueFn(directive);
      }

      /**
       * @ngdoc directive
       * @name a
       * @restrict E
       *
       * @description
       * Modifies the default behavior of the html A tag so that the default action is prevented when
       * the href attribute is empty.
       *
       * This change permits the easy creation of action links with the `ngClick` directive
       * without changing the location or causing page reloads, e.g.:
       * `<a href="" ng-click="list.addItem()">Add Item</a>`
       */
      var htmlAnchorDirective = valueFn({
        restrict: 'E',
        compile: function (element, attr) {
          if (!attr.href && !attr.xlinkHref) {
            return function (scope, element) {
              // If the linked element is not an anchor tag anymore, do nothing
              if (element[0].nodeName.toLowerCase() !== 'a') return;

              // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
              var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
              element.on('click', function (event) {
                // if we have no href url, then don't navigate anywhere.
                if (!element.attr(href)) {
                  event.preventDefault();
                }
              });
            };
          }
        }
      });

      /**
       * @ngdoc directive
       * @name ngHref
       * @restrict A
       * @priority 99
       *
       * @description
       * Using Angular markup like `{{hash}}` in an href attribute will
       * make the link go to the wrong URL if the user clicks it before
       * Angular has a chance to replace the `{{hash}}` markup with its
       * value. Until Angular replaces the markup the link will be broken
       * and will most likely return a 404 error. The `ngHref` directive
       * solves this problem.
       *
       * The wrong way to write it:
       * ```html
       * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
       * ```
       *
       * The correct way to write it:
       * ```html
       * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
       * ```
       *
       * @element A
       * @param {template} ngHref any string which can contain `{{}}` markup.
       *
       * @example
       * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
       * in links and their different behaviors:
          <example>
            <file name="index.html">
              <input ng-model="value" /><br />
              <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
              <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
              <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
              <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
              <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
              <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
            </file>
            <file name="protractor.js" type="protractor">
              it('should execute ng-click but not reload when href without value', function() {
                element(by.id('link-1')).click();
                expect(element(by.model('value')).getAttribute('value')).toEqual('1');
                expect(element(by.id('link-1')).getAttribute('href')).toBe('');
              });
      
              it('should execute ng-click but not reload when href empty string', function() {
                element(by.id('link-2')).click();
                expect(element(by.model('value')).getAttribute('value')).toEqual('2');
                expect(element(by.id('link-2')).getAttribute('href')).toBe('');
              });
      
              it('should execute ng-click and change url when ng-href specified', function() {
                expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
      
                element(by.id('link-3')).click();
      
                // At this point, we navigate away from an Angular page, so we need
                // to use browser.driver to get the base webdriver.
      
                browser.wait(function() {
                  return browser.driver.getCurrentUrl().then(function(url) {
                    return url.match(/\/123$/);
                  });
                }, 5000, 'page should navigate to /123');
              });
      
              it('should execute ng-click but not reload when href empty string and name specified', function() {
                element(by.id('link-4')).click();
                expect(element(by.model('value')).getAttribute('value')).toEqual('4');
                expect(element(by.id('link-4')).getAttribute('href')).toBe('');
              });
      
              it('should execute ng-click but not reload when no href but name specified', function() {
                element(by.id('link-5')).click();
                expect(element(by.model('value')).getAttribute('value')).toEqual('5');
                expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
              });
      
              it('should only change url when only ng-href', function() {
                element(by.model('value')).clear();
                element(by.model('value')).sendKeys('6');
                expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
      
                element(by.id('link-6')).click();
      
                // At this point, we navigate away from an Angular page, so we need
                // to use browser.driver to get the base webdriver.
                browser.wait(function() {
                  return browser.driver.getCurrentUrl().then(function(url) {
                    return url.match(/\/6$/);
                  });
                }, 5000, 'page should navigate to /6');
              });
            </file>
          </example>
       */

      /**
       * @ngdoc directive
       * @name ngSrc
       * @restrict A
       * @priority 99
       *
       * @description
       * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
       * work right: The browser will fetch from the URL with the literal
       * text `{{hash}}` until Angular replaces the expression inside
       * `{{hash}}`. The `ngSrc` directive solves this problem.
       *
       * The buggy way to write it:
       * ```html
       * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
       * ```
       *
       * The correct way to write it:
       * ```html
       * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
       * ```
       *
       * @element IMG
       * @param {template} ngSrc any string which can contain `{{}}` markup.
       */

      /**
       * @ngdoc directive
       * @name ngSrcset
       * @restrict A
       * @priority 99
       *
       * @description
       * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
       * work right: The browser will fetch from the URL with the literal
       * text `{{hash}}` until Angular replaces the expression inside
       * `{{hash}}`. The `ngSrcset` directive solves this problem.
       *
       * The buggy way to write it:
       * ```html
       * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
       * ```
       *
       * The correct way to write it:
       * ```html
       * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
       * ```
       *
       * @element IMG
       * @param {template} ngSrcset any string which can contain `{{}}` markup.
       */

      /**
       * @ngdoc directive
       * @name ngDisabled
       * @restrict A
       * @priority 100
       *
       * @description
       *
       * This directive sets the `disabled` attribute on the element if the
       * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
       *
       * A special directive is necessary because we cannot use interpolation inside the `disabled`
       * attribute. See the {@link guide/interpolation interpolation guide} for more info.
       *
       * @example
          <example>
            <file name="index.html">
              <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
              <button ng-model="button" ng-disabled="checked">Button</button>
            </file>
            <file name="protractor.js" type="protractor">
              it('should toggle button', function() {
                expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
                element(by.model('checked')).click();
                expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
              });
            </file>
          </example>
       *
       * @element INPUT
       * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
       *     then the `disabled` attribute will be set on the element
       */

      /**
       * @ngdoc directive
       * @name ngChecked
       * @restrict A
       * @priority 100
       *
       * @description
       * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
       *
       * Note that this directive should not be used together with {@link ngModel `ngModel`},
       * as this can lead to unexpected behavior.
       *
       * A special directive is necessary because we cannot use interpolation inside the `checked`
       * attribute. See the {@link guide/interpolation interpolation guide} for more info.
       *
       * @example
          <example>
            <file name="index.html">
              <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
              <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
            </file>
            <file name="protractor.js" type="protractor">
              it('should check both checkBoxes', function() {
                expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
                element(by.model('master')).click();
                expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
              });
            </file>
          </example>
       *
       * @element INPUT
       * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
       *     then the `checked` attribute will be set on the element
       */

      /**
       * @ngdoc directive
       * @name ngReadonly
       * @restrict A
       * @priority 100
       *
       * @description
       *
       * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
       * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
       * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
       *
       * A special directive is necessary because we cannot use interpolation inside the `readonly`
       * attribute. See the {@link guide/interpolation interpolation guide} for more info.
       *
       * @example
          <example>
            <file name="index.html">
              <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
              <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
            </file>
            <file name="protractor.js" type="protractor">
              it('should toggle readonly attr', function() {
                expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
                element(by.model('checked')).click();
                expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
              });
            </file>
          </example>
       *
       * @element INPUT
       * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
       *     then special attribute "readonly" will be set on the element
       */

      /**
       * @ngdoc directive
       * @name ngSelected
       * @restrict A
       * @priority 100
       *
       * @description
       *
       * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
       *
       * A special directive is necessary because we cannot use interpolation inside the `selected`
       * attribute. See the {@link guide/interpolation interpolation guide} for more info.
       *
       * <div class="alert alert-warning">
       *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
       *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
       *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
       *   selected options.
       * </div>
       *
       * @example
          <example>
            <file name="index.html">
              <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
              <select aria-label="ngSelected demo">
                <option>Hello!</option>
                <option id="greet" ng-selected="selected">Greetings!</option>
              </select>
            </file>
            <file name="protractor.js" type="protractor">
              it('should select Greetings!', function() {
                expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
                element(by.model('selected')).click();
                expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
              });
            </file>
          </example>
       *
       * @element OPTION
       * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
       *     then special attribute "selected" will be set on the element
       */

      /**
       * @ngdoc directive
       * @name ngOpen
       * @restrict A
       * @priority 100
       *
       * @description
       *
       * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
       *
       * A special directive is necessary because we cannot use interpolation inside the `open`
       * attribute. See the {@link guide/interpolation interpolation guide} for more info.
       *
       * ## A note about browser compatibility
       *
       * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
       * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
       *
       * @example
           <example>
             <file name="index.html">
               <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
               <details id="details" ng-open="open">
                  <summary>Show/Hide me</summary>
               </details>
             </file>
             <file name="protractor.js" type="protractor">
               it('should toggle open', function() {
                 expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
                 element(by.model('open')).click();
                 expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
               });
             </file>
           </example>
       *
       * @element DETAILS
       * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
       *     then special attribute "open" will be set on the element
       */

      var ngAttributeAliasDirectives = {};

      // boolean attrs are evaluated
      forEach(BOOLEAN_ATTR, function (propName, attrName) {
        // binding to multiple is not supported
        if (propName == "multiple") return;

        function defaultLinkFn(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }

        var normalized = directiveNormalize('ng-' + attrName);
        var linkFn = defaultLinkFn;

        if (propName === 'checked') {
          linkFn = function (scope, element, attr) {
            // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
            if (attr.ngModel !== attr[normalized]) {
              defaultLinkFn(scope, element, attr);
            }
          };
        }

        ngAttributeAliasDirectives[normalized] = function () {
          return {
            restrict: 'A',
            priority: 100,
            link: linkFn
          };
        };
      });

      // aliased input attrs are evaluated
      forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function () {
          return {
            priority: 100,
            link: function (scope, element, attr) {
              //special case ngPattern when a literal regular expression value
              //is used as the expression (this way we don't have to watch anything).
              if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
                var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                if (match) {
                  attr.$set("ngPattern", new RegExp(match[1], match[2]));
                  return;
                }
              }

              scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
                attr.$set(ngAttr, value);
              });
            }
          };
        };
      });

      // ng-src, ng-srcset, ng-href are interpolated
      forEach(['src', 'srcset', 'href'], function (attrName) {
        var normalized = directiveNormalize('ng-' + attrName);
        ngAttributeAliasDirectives[normalized] = function () {
          return {
            priority: 99, // it needs to run after the attributes are interpolated
            link: function (scope, element, attr) {
              var propName = attrName,
                  name = attrName;

              if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
                name = 'xlinkHref';
                attr.$attr[name] = 'xlink:href';
                propName = null;
              }

              attr.$observe(normalized, function (value) {
                if (!value) {
                  if (attrName === 'href') {
                    attr.$set(name, null);
                  }
                  return;
                }

                attr.$set(name, value);

                // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
                // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
                // to set the property as well to achieve the desired effect.
                // we use attr[attrName] value since $set can sanitize the url.
                if (msie && propName) element.prop(propName, attr[name]);
              });
            }
          };
        };
      });

      /* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
       */
      var nullFormCtrl = {
        $addControl: noop,
        $$renameControl: nullFormRenameControl,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop
      },
          SUBMITTED_CLASS = 'ng-submitted';

      function nullFormRenameControl(control, name) {
        control.$name = name;
      }

      /**
       * @ngdoc type
       * @name form.FormController
       *
       * @property {boolean} $pristine True if user has not interacted with the form yet.
       * @property {boolean} $dirty True if user has already interacted with the form.
       * @property {boolean} $valid True if all of the containing forms and controls are valid.
       * @property {boolean} $invalid True if at least one containing control or form is invalid.
       * @property {boolean} $pending True if at least one containing control or form is pending.
       * @property {boolean} $submitted True if user has submitted the form even if its invalid.
       *
       * @property {Object} $error Is an object hash, containing references to controls or
       *  forms with failing validators, where:
       *
       *  - keys are validation tokens (error names),
       *  - values are arrays of controls or forms that have a failing validator for given error name.
       *
       *  Built-in validation tokens:
       *
       *  - `email`
       *  - `max`
       *  - `maxlength`
       *  - `min`
       *  - `minlength`
       *  - `number`
       *  - `pattern`
       *  - `required`
       *  - `url`
       *  - `date`
       *  - `datetimelocal`
       *  - `time`
       *  - `week`
       *  - `month`
       *
       * @description
       * `FormController` keeps track of all its controls and nested forms as well as the state of them,
       * such as being valid/invalid or dirty/pristine.
       *
       * Each {@link ng.directive:form form} directive creates an instance
       * of `FormController`.
       *
       */
      //asks for $scope to fool the BC controller module
      FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
      function FormController(element, attrs, $scope, $animate, $interpolate) {
        var form = this,
            controls = [];

        // init state
        form.$error = {};
        form.$$success = {};
        form.$pending = undefined;
        form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
        form.$dirty = false;
        form.$pristine = true;
        form.$valid = true;
        form.$invalid = false;
        form.$submitted = false;
        form.$$parentForm = nullFormCtrl;

        /**
         * @ngdoc method
         * @name form.FormController#$rollbackViewValue
         *
         * @description
         * Rollback all form controls pending updates to the `$modelValue`.
         *
         * Updates may be pending by a debounced event or because the input is waiting for a some future
         * event defined in `ng-model-options`. This method is typically needed by the reset button of
         * a form that uses `ng-model-options` to pend updates.
         */
        form.$rollbackViewValue = function () {
          forEach(controls, function (control) {
            control.$rollbackViewValue();
          });
        };

        /**
         * @ngdoc method
         * @name form.FormController#$commitViewValue
         *
         * @description
         * Commit all form controls pending updates to the `$modelValue`.
         *
         * Updates may be pending by a debounced event or because the input is waiting for a some future
         * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
         * usually handles calling this in response to input events.
         */
        form.$commitViewValue = function () {
          forEach(controls, function (control) {
            control.$commitViewValue();
          });
        };

        /**
         * @ngdoc method
         * @name form.FormController#$addControl
         * @param {object} control control object, either a {@link form.FormController} or an
         * {@link ngModel.NgModelController}
         *
         * @description
         * Register a control with the form. Input elements using ngModelController do this automatically
         * when they are linked.
         *
         * Note that the current state of the control will not be reflected on the new parent form. This
         * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
         * state.
         *
         * However, if the method is used programmatically, for example by adding dynamically created controls,
         * or controls that have been previously removed without destroying their corresponding DOM element,
         * it's the developers responsibility to make sure the current state propagates to the parent form.
         *
         * For example, if an input control is added that is already `$dirty` and has `$error` properties,
         * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
         */
        form.$addControl = function (control) {
          // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
          // and not added to the scope.  Now we throw an error.
          assertNotHasOwnProperty(control.$name, 'input');
          controls.push(control);

          if (control.$name) {
            form[control.$name] = control;
          }

          control.$$parentForm = form;
        };

        // Private API: rename a form control
        form.$$renameControl = function (control, newName) {
          var oldName = control.$name;

          if (form[oldName] === control) {
            delete form[oldName];
          }
          form[newName] = control;
          control.$name = newName;
        };

        /**
         * @ngdoc method
         * @name form.FormController#$removeControl
         * @param {object} control control object, either a {@link form.FormController} or an
         * {@link ngModel.NgModelController}
         *
         * @description
         * Deregister a control from the form.
         *
         * Input elements using ngModelController do this automatically when they are destroyed.
         *
         * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
         * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
         * different from case to case. For example, removing the only `$dirty` control from a form may or
         * may not mean that the form is still `$dirty`.
         */
        form.$removeControl = function (control) {
          if (control.$name && form[control.$name] === control) {
            delete form[control.$name];
          }
          forEach(form.$pending, function (value, name) {
            form.$setValidity(name, null, control);
          });
          forEach(form.$error, function (value, name) {
            form.$setValidity(name, null, control);
          });
          forEach(form.$$success, function (value, name) {
            form.$setValidity(name, null, control);
          });

          arrayRemove(controls, control);
          control.$$parentForm = nullFormCtrl;
        };

        /**
         * @ngdoc method
         * @name form.FormController#$setValidity
         *
         * @description
         * Sets the validity of a form control.
         *
         * This method will also propagate to parent forms.
         */
        addSetValidityMethod({
          ctrl: this,
          $element: element,
          set: function (object, property, controller) {
            var list = object[property];
            if (!list) {
              object[property] = [controller];
            } else {
              var index = list.indexOf(controller);
              if (index === -1) {
                list.push(controller);
              }
            }
          },
          unset: function (object, property, controller) {
            var list = object[property];
            if (!list) {
              return;
            }
            arrayRemove(list, controller);
            if (list.length === 0) {
              delete object[property];
            }
          },
          $animate: $animate
        });

        /**
         * @ngdoc method
         * @name form.FormController#$setDirty
         *
         * @description
         * Sets the form to a dirty state.
         *
         * This method can be called to add the 'ng-dirty' class and set the form to a dirty
         * state (ng-dirty class). This method will also propagate to parent forms.
         */
        form.$setDirty = function () {
          $animate.removeClass(element, PRISTINE_CLASS);
          $animate.addClass(element, DIRTY_CLASS);
          form.$dirty = true;
          form.$pristine = false;
          form.$$parentForm.$setDirty();
        };

        /**
         * @ngdoc method
         * @name form.FormController#$setPristine
         *
         * @description
         * Sets the form to its pristine state.
         *
         * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
         * state (ng-pristine class). This method will also propagate to all the controls contained
         * in this form.
         *
         * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
         * saving or resetting it.
         */
        form.$setPristine = function () {
          $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
          form.$dirty = false;
          form.$pristine = true;
          form.$submitted = false;
          forEach(controls, function (control) {
            control.$setPristine();
          });
        };

        /**
         * @ngdoc method
         * @name form.FormController#$setUntouched
         *
         * @description
         * Sets the form to its untouched state.
         *
         * This method can be called to remove the 'ng-touched' class and set the form controls to their
         * untouched state (ng-untouched class).
         *
         * Setting a form controls back to their untouched state is often useful when setting the form
         * back to its pristine state.
         */
        form.$setUntouched = function () {
          forEach(controls, function (control) {
            control.$setUntouched();
          });
        };

        /**
         * @ngdoc method
         * @name form.FormController#$setSubmitted
         *
         * @description
         * Sets the form to its submitted state.
         */
        form.$setSubmitted = function () {
          $animate.addClass(element, SUBMITTED_CLASS);
          form.$submitted = true;
          form.$$parentForm.$setSubmitted();
        };
      }

      /**
       * @ngdoc directive
       * @name ngForm
       * @restrict EAC
       *
       * @description
       * Nestable alias of {@link ng.directive:form `form`} directive. HTML
       * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
       * sub-group of controls needs to be determined.
       *
       * Note: the purpose of `ngForm` is to group controls,
       * but not to be a replacement for the `<form>` tag with all of its capabilities
       * (e.g. posting to the server, ...).
       *
       * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
       *                       related scope, under this name.
       *
       */

      /**
      * @ngdoc directive
      * @name form
      * @restrict E
      *
      * @description
      * Directive that instantiates
      * {@link form.FormController FormController}.
      *
      * If the `name` attribute is specified, the form controller is published onto the current scope under
      * this name.
      *
      * # Alias: {@link ng.directive:ngForm `ngForm`}
      *
      * In Angular, forms can be nested. This means that the outer form is valid when all of the child
      * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
      * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
      * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
      * of controls needs to be determined.
      *
      * # CSS classes
      *  - `ng-valid` is set if the form is valid.
      *  - `ng-invalid` is set if the form is invalid.
      *  - `ng-pending` is set if the form is pending.
      *  - `ng-pristine` is set if the form is pristine.
      *  - `ng-dirty` is set if the form is dirty.
      *  - `ng-submitted` is set if the form was submitted.
      *
      * Keep in mind that ngAnimate can detect each of these classes when added and removed.
      *
      *
      * # Submitting a form and preventing the default action
      *
      * Since the role of forms in client-side Angular applications is different than in classical
      * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
      * page reload that sends the data to the server. Instead some javascript logic should be triggered
      * to handle the form submission in an application-specific way.
      *
      * For this reason, Angular prevents the default action (form submission to the server) unless the
      * `<form>` element has an `action` attribute specified.
      *
      * You can use one of the following two ways to specify what javascript method should be called when
      * a form is submitted:
      *
      * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
      * - {@link ng.directive:ngClick ngClick} directive on the first
       *  button or input field of type submit (input[type=submit])
      *
      * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
      * or {@link ng.directive:ngClick ngClick} directives.
      * This is because of the following form submission rules in the HTML specification:
      *
      * - If a form has only one input field then hitting enter in this field triggers form submit
      * (`ngSubmit`)
      * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
      * doesn't trigger submit
      * - if a form has one or more input fields and one or more buttons or input[type=submit] then
      * hitting enter in any of the input fields will trigger the click handler on the *first* button or
      * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
      *
      * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
      * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
      * to have access to the updated model.
      *
      * ## Animation Hooks
      *
      * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
      * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
      * other validations that are performed within the form. Animations in ngForm are similar to how
      * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
      * as JS animations.
      *
      * The following example shows a simple way to utilize CSS transitions to style a form element
      * that has been rendered as invalid after it has been validated:
      *
      * <pre>
      * //be sure to include ngAnimate as a module to hook into more
      * //advanced animations
      * .my-form {
      *   transition:0.5s linear all;
      *   background: white;
      * }
      * .my-form.ng-invalid {
      *   background: red;
      *   color:white;
      * }
      * </pre>
      *
      * @example
         <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
           <file name="index.html">
            <script>
              angular.module('formExample', [])
                .controller('FormController', ['$scope', function($scope) {
                  $scope.userType = 'guest';
                }]);
            </script>
            <style>
             .my-form {
               transition:all linear 0.5s;
               background: transparent;
             }
             .my-form.ng-invalid {
               background: red;
             }
            </style>
            <form name="myForm" ng-controller="FormController" class="my-form">
              userType: <input name="input" ng-model="userType" required>
              <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
              <code>userType = {{userType}}</code><br>
              <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
              <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
              <code>myForm.$valid = {{myForm.$valid}}</code><br>
              <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
             </form>
           </file>
           <file name="protractor.js" type="protractor">
             it('should initialize to model', function() {
               var userType = element(by.binding('userType'));
               var valid = element(by.binding('myForm.input.$valid'));
                expect(userType.getText()).toContain('guest');
               expect(valid.getText()).toContain('true');
             });
              it('should be invalid if empty', function() {
               var userType = element(by.binding('userType'));
               var valid = element(by.binding('myForm.input.$valid'));
               var userInput = element(by.model('userType'));
                userInput.clear();
               userInput.sendKeys('');
                expect(userType.getText()).toEqual('userType =');
               expect(valid.getText()).toContain('false');
             });
           </file>
         </example>
      *
      * @param {string=} name Name of the form. If specified, the form controller will be published into
      *                       related scope, under this name.
      */
      var formDirectiveFactory = function (isNgForm) {
        return ['$timeout', '$parse', function ($timeout, $parse) {
          var formDirective = {
            name: 'form',
            restrict: isNgForm ? 'EAC' : 'E',
            require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
            controller: FormController,
            compile: function ngFormCompile(formElement, attr) {
              // Setup initial state of the control
              formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

              var nameAttr = attr.name ? 'name' : isNgForm && attr.ngForm ? 'ngForm' : false;

              return {
                pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
                  var controller = ctrls[0];

                  // if `action` attr is not present on the form, prevent the default action (submission)
                  if (!('action' in attr)) {
                    // we can't use jq events because if a form is destroyed during submission the default
                    // action is not prevented. see #1238
                    //
                    // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                    // page reload if the form was destroyed by submission of the form via a click handler
                    // on a button in the form. Looks like an IE9 specific bug.
                    var handleFormSubmission = function (event) {
                      scope.$apply(function () {
                        controller.$commitViewValue();
                        controller.$setSubmitted();
                      });

                      event.preventDefault();
                    };

                    addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

                    // unregister the preventDefault listener so that we don't not leak memory but in a
                    // way that will achieve the prevention of the default action.
                    formElement.on('$destroy', function () {
                      $timeout(function () {
                        removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                      }, 0, false);
                    });
                  }

                  var parentFormCtrl = ctrls[1] || controller.$$parentForm;
                  parentFormCtrl.$addControl(controller);

                  var setter = nameAttr ? getSetter(controller.$name) : noop;

                  if (nameAttr) {
                    setter(scope, controller);
                    attr.$observe(nameAttr, function (newValue) {
                      if (controller.$name === newValue) return;
                      setter(scope, undefined);
                      controller.$$parentForm.$$renameControl(controller, newValue);
                      setter = getSetter(controller.$name);
                      setter(scope, controller);
                    });
                  }
                  formElement.on('$destroy', function () {
                    controller.$$parentForm.$removeControl(controller);
                    setter(scope, undefined);
                    extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
                  });
                }
              };
            }
          };

          return formDirective;

          function getSetter(expression) {
            if (expression === '') {
              //create an assignable expression, so forms with an empty name can be renamed later
              return $parse('this[""]').assign;
            }
            return $parse(expression).assign || noop;
          }
        }];
      };

      var formDirective = formDirectiveFactory();
      var ngFormDirective = formDirectiveFactory(true);

      /* global VALID_CLASS: false,
        INVALID_CLASS: false,
        PRISTINE_CLASS: false,
        DIRTY_CLASS: false,
        UNTOUCHED_CLASS: false,
        TOUCHED_CLASS: false,
        ngModelMinErr: false,
      */

      // Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
      var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
      // See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
      // Note: We are being more lenient, because browsers are too.
      //   1. Scheme
      //   2. Slashes
      //   3. Username
      //   4. Password
      //   5. Hostname
      //   6. Port
      //   7. Path
      //   8. Query
      //   9. Fragment
      //                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
      var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
      /* jshint maxlen:220 */
      var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
      /* jshint maxlen:200 */
      var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
      var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
      var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
      var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
      var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
      var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

      var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
      var PARTIAL_VALIDATION_TYPES = createMap();
      forEach('date,datetime-local,month,time,week'.split(','), function (type) {
        PARTIAL_VALIDATION_TYPES[type] = true;
      });

      var inputType = {

        /**
         * @ngdoc input
         * @name input[text]
         *
         * @description
         * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
         *
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Adds `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
         *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object, then this is used directly.
         *    If the expression evaluates to a string, then it will be converted to a RegExp
         *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
         *    `new RegExp('^abc$')`.<br />
         *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
         *    start at the index of the last search's match, thus not taking the whole input value into
         *    account.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
         *    This parameter is ignored for input[type=password] controls, which will never trim the
         *    input.
         *
         * @example
            <example name="text-input-directive" module="textInputExample">
              <file name="index.html">
               <script>
                 angular.module('textInputExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.example = {
                       text: 'guest',
                       word: /^\s*\w*\s*$/
                     };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <label>Single word:
                   <input type="text" name="input" ng-model="example.text"
                          ng-pattern="example.word" required ng-trim="false">
                 </label>
                 <div role="alert">
                   <span class="error" ng-show="myForm.input.$error.required">
                     Required!</span>
                   <span class="error" ng-show="myForm.input.$error.pattern">
                     Single word only!</span>
                 </div>
                 <code>text = {{example.text}}</code><br/>
                 <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
                 <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
                 <code>myForm.$valid = {{myForm.$valid}}</code><br/>
                 <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('example.text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('example.text'));
                 it('should initialize to model', function() {
                  expect(text.getText()).toContain('guest');
                  expect(valid.getText()).toContain('true');
                });
                 it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                   expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
                 it('should be invalid if multi word', function() {
                  input.clear();
                  input.sendKeys('hello world');
                   expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'text': textInputType,

        /**
         * @ngdoc input
         * @name input[date]
         *
         * @description
         * Input with date validation and transformation. In browsers that do not yet support
         * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
         * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
         * modern browsers do not yet support this input type, it is important to provide cues to users on the
         * expected input format via a placeholder or label.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
         *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
         *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
         *   constraint validation.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
         *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
         *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
         *   constraint validation.
         * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
         *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
         * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
         *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="date-input-directive" module="dateInputExample">
         <file name="index.html">
           <script>
              angular.module('dateInputExample', [])
                .controller('DateController', ['$scope', function($scope) {
                  $scope.example = {
                    value: new Date(2013, 9, 22)
                  };
                }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
              <label for="exampleInput">Pick a date in 2013:</label>
              <input type="date" id="exampleInput" name="input" ng-model="example.value"
                  placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
              <div role="alert">
                <span class="error" ng-show="myForm.input.$error.required">
                    Required!</span>
                <span class="error" ng-show="myForm.input.$error.date">
                    Not a valid date!</span>
               </div>
               <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
               <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
               <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
               <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
               <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('example.value'));
             // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (see https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
             it('should initialize to model', function() {
              expect(value.getText()).toContain('2013-10-22');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
             it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
             it('should be invalid if over max', function() {
              setInput('2015-01-01');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'date': createDateInputType('date', DATE_REGEXP, createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']), 'yyyy-MM-dd'),

        /**
         * @ngdoc input
         * @name input[datetime-local]
         *
         * @description
         * Input with datetime validation and transformation. In browsers that do not yet support
         * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
         *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
         *   Note that `min` will also add native HTML5 constraint validation.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
         *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
         *   Note that `max` will also add native HTML5 constraint validation.
         * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
         *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
         * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
         *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="datetimelocal-input-directive" module="dateExample">
         <file name="index.html">
           <script>
             angular.module('dateExample', [])
               .controller('DateController', ['$scope', function($scope) {
                 $scope.example = {
                   value: new Date(2010, 11, 28, 14, 57)
                 };
               }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             <label for="exampleInput">Pick a date between in 2013:</label>
             <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
                 placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                   Required!</span>
               <span class="error" ng-show="myForm.input.$error.datetimelocal">
                   Not a valid date!</span>
             </div>
             <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
           var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
           var valid = element(by.binding('myForm.input.$valid'));
           var input = element(by.model('example.value'));
            // currently protractor/webdriver does not support
           // sending keys to all known HTML5 input controls
           // for various browsers (https://github.com/angular/protractor/issues/562).
           function setInput(val) {
             // set the value of the element and force validation.
             var scr = "var ipt = document.getElementById('exampleInput'); " +
             "ipt.value = '" + val + "';" +
             "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
             browser.executeScript(scr);
           }
            it('should initialize to model', function() {
             expect(value.getText()).toContain('2010-12-28T14:57:00');
             expect(valid.getText()).toContain('myForm.input.$valid = true');
           });
            it('should be invalid if empty', function() {
             setInput('');
             expect(value.getText()).toEqual('value =');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
            it('should be invalid if over max', function() {
             setInput('2015-01-01T23:59:00');
             expect(value.getText()).toContain('');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
         </file>
         </example>
         */
        'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']), 'yyyy-MM-ddTHH:mm:ss.sss'),

        /**
         * @ngdoc input
         * @name input[time]
         *
         * @description
         * Input with time validation and transformation. In browsers that do not yet support
         * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
         * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
         *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
         *   native HTML5 constraint validation.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
         *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
         *   native HTML5 constraint validation.
         * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
         *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
         * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
         *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="time-input-directive" module="timeExample">
         <file name="index.html">
           <script>
            angular.module('timeExample', [])
              .controller('DateController', ['$scope', function($scope) {
                $scope.example = {
                  value: new Date(1970, 0, 1, 14, 57, 0)
                };
              }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
              <label for="exampleInput">Pick a time between 8am and 5pm:</label>
              <input type="time" id="exampleInput" name="input" ng-model="example.value"
                  placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
              <div role="alert">
                <span class="error" ng-show="myForm.input.$error.required">
                    Required!</span>
                <span class="error" ng-show="myForm.input.$error.time">
                    Not a valid date!</span>
              </div>
              <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
              <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
              <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
              <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
              <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('example.value | date: "HH:mm:ss"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('example.value'));
             // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
             it('should initialize to model', function() {
              expect(value.getText()).toContain('14:57:00');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
             it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
             it('should be invalid if over max', function() {
              setInput('23:59:00');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'time': createDateInputType('time', TIME_REGEXP, createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']), 'HH:mm:ss.sss'),

        /**
         * @ngdoc input
         * @name input[week]
         *
         * @description
         * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
         * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * week format (yyyy-W##), for example: `2013-W02`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
         *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
         *   native HTML5 constraint validation.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
         *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
         *   native HTML5 constraint validation.
         * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
         *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
         * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
         *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="week-input-directive" module="weekExample">
         <file name="index.html">
           <script>
           angular.module('weekExample', [])
             .controller('DateController', ['$scope', function($scope) {
               $scope.example = {
                 value: new Date(2013, 0, 3)
               };
             }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             <label>Pick a date between in 2013:
               <input id="exampleInput" type="week" name="input" ng-model="example.value"
                      placeholder="YYYY-W##" min="2012-W32"
                      max="2013-W52" required />
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                   Required!</span>
               <span class="error" ng-show="myForm.input.$error.week">
                   Not a valid date!</span>
             </div>
             <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
           var value = element(by.binding('example.value | date: "yyyy-Www"'));
           var valid = element(by.binding('myForm.input.$valid'));
           var input = element(by.model('example.value'));
            // currently protractor/webdriver does not support
           // sending keys to all known HTML5 input controls
           // for various browsers (https://github.com/angular/protractor/issues/562).
           function setInput(val) {
             // set the value of the element and force validation.
             var scr = "var ipt = document.getElementById('exampleInput'); " +
             "ipt.value = '" + val + "';" +
             "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
             browser.executeScript(scr);
           }
            it('should initialize to model', function() {
             expect(value.getText()).toContain('2013-W01');
             expect(valid.getText()).toContain('myForm.input.$valid = true');
           });
            it('should be invalid if empty', function() {
             setInput('');
             expect(value.getText()).toEqual('value =');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
            it('should be invalid if over max', function() {
             setInput('2015-W01');
             expect(value.getText()).toContain('');
             expect(valid.getText()).toContain('myForm.input.$valid = false');
           });
         </file>
         </example>
         */
        'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

        /**
         * @ngdoc input
         * @name input[month]
         *
         * @description
         * Input with month validation and transformation. In browsers that do not yet support
         * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
         * month format (yyyy-MM), for example: `2009-01`.
         *
         * The model must always be a Date object, otherwise Angular will throw an error.
         * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
         * If the model is not set to the first of the month, the next view to model update will set it
         * to the first of the month.
         *
         * The timezone to be used to read/write the `Date` instance in the model can be defined using
         * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
         *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
         *   native HTML5 constraint validation.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
         *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
         *   native HTML5 constraint validation.
         * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
         *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
         * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
         *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
          * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
         <example name="month-input-directive" module="monthExample">
         <file name="index.html">
           <script>
            angular.module('monthExample', [])
              .controller('DateController', ['$scope', function($scope) {
                $scope.example = {
                  value: new Date(2013, 9, 1)
                };
              }]);
           </script>
           <form name="myForm" ng-controller="DateController as dateCtrl">
             <label for="exampleInput">Pick a month in 2013:</label>
             <input id="exampleInput" type="month" name="input" ng-model="example.value"
                placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                  Required!</span>
               <span class="error" ng-show="myForm.input.$error.month">
                  Not a valid month!</span>
             </div>
             <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           </form>
         </file>
         <file name="protractor.js" type="protractor">
            var value = element(by.binding('example.value | date: "yyyy-MM"'));
            var valid = element(by.binding('myForm.input.$valid'));
            var input = element(by.model('example.value'));
             // currently protractor/webdriver does not support
            // sending keys to all known HTML5 input controls
            // for various browsers (https://github.com/angular/protractor/issues/562).
            function setInput(val) {
              // set the value of the element and force validation.
              var scr = "var ipt = document.getElementById('exampleInput'); " +
              "ipt.value = '" + val + "';" +
              "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
              browser.executeScript(scr);
            }
             it('should initialize to model', function() {
              expect(value.getText()).toContain('2013-10');
              expect(valid.getText()).toContain('myForm.input.$valid = true');
            });
             it('should be invalid if empty', function() {
              setInput('');
              expect(value.getText()).toEqual('value =');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
             it('should be invalid if over max', function() {
              setInput('2015-01');
              expect(value.getText()).toContain('');
              expect(valid.getText()).toContain('myForm.input.$valid = false');
            });
         </file>
         </example>
         */
        'month': createDateInputType('month', MONTH_REGEXP, createDateParser(MONTH_REGEXP, ['yyyy', 'MM']), 'yyyy-MM'),

        /**
         * @ngdoc input
         * @name input[number]
         *
         * @description
         * Text input with number validation and transformation. Sets the `number` validation
         * error if not a valid number.
         *
         * <div class="alert alert-warning">
         * The model must always be of type `number` otherwise Angular will throw an error.
         * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
         * error docs for more information and an example of how to convert your model if necessary.
         * </div>
         *
         * ## Issues with HTML5 constraint validation
         *
         * In browsers that follow the
         * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
         * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
         * If a non-number is entered in the input, the browser will report the value as an empty string,
         * which means the view / model values in `ngModel` and subsequently the scope value
         * will also be an empty string.
         *
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
         * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
         *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object, then this is used directly.
         *    If the expression evaluates to a string, then it will be converted to a RegExp
         *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
         *    `new RegExp('^abc$')`.<br />
         *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
         *    start at the index of the last search's match, thus not taking the whole input value into
         *    account.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="number-input-directive" module="numberExample">
              <file name="index.html">
               <script>
                 angular.module('numberExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.example = {
                       value: 12
                     };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <label>Number:
                   <input type="number" name="input" ng-model="example.value"
                          min="0" max="99" required>
                </label>
                 <div role="alert">
                   <span class="error" ng-show="myForm.input.$error.required">
                     Required!</span>
                   <span class="error" ng-show="myForm.input.$error.number">
                     Not valid number!</span>
                 </div>
                 <tt>value = {{example.value}}</tt><br/>
                 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var value = element(by.binding('example.value'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('example.value'));
                 it('should initialize to model', function() {
                  expect(value.getText()).toContain('12');
                  expect(valid.getText()).toContain('true');
                });
                 it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                  expect(value.getText()).toEqual('value =');
                  expect(valid.getText()).toContain('false');
                });
                 it('should be invalid if over max', function() {
                  input.clear();
                  input.sendKeys('123');
                  expect(value.getText()).toEqual('value =');
                  expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'number': numberInputType,

        /**
         * @ngdoc input
         * @name input[url]
         *
         * @description
         * Text input with URL validation. Sets the `url` validation error key if the content is not a
         * valid URL.
         *
         * <div class="alert alert-warning">
         * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
         * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
         * the built-in validators (see the {@link guide/forms Forms guide})
         * </div>
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
         *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object, then this is used directly.
         *    If the expression evaluates to a string, then it will be converted to a RegExp
         *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
         *    `new RegExp('^abc$')`.<br />
         *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
         *    start at the index of the last search's match, thus not taking the whole input value into
         *    account.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="url-input-directive" module="urlExample">
              <file name="index.html">
               <script>
                 angular.module('urlExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.url = {
                       text: 'http://google.com'
                     };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <label>URL:
                   <input type="url" name="input" ng-model="url.text" required>
                 <label>
                 <div role="alert">
                   <span class="error" ng-show="myForm.input.$error.required">
                     Required!</span>
                   <span class="error" ng-show="myForm.input.$error.url">
                     Not valid url!</span>
                 </div>
                 <tt>text = {{url.text}}</tt><br/>
                 <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                 <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                 <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                 <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                 <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('url.text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('url.text'));
                 it('should initialize to model', function() {
                  expect(text.getText()).toContain('http://google.com');
                  expect(valid.getText()).toContain('true');
                });
                 it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                   expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
                 it('should be invalid if not url', function() {
                  input.clear();
                  input.sendKeys('box');
                   expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'url': urlInputType,

        /**
         * @ngdoc input
         * @name input[email]
         *
         * @description
         * Text input with email validation. Sets the `email` validation error key if not a valid email
         * address.
         *
         * <div class="alert alert-warning">
         * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
         * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
         * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
         * </div>
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} required Sets `required` validation error key if the value is not entered.
         * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
         *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
         *    `required` when you want to data-bind to the `required` attribute.
         * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
         *    minlength.
         * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
         *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
         *    any length.
         * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
         *    that contains the regular expression body that will be converted to a regular expression
         *    as in the ngPattern directive.
         * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
         *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
         *    If the expression evaluates to a RegExp object, then this is used directly.
         *    If the expression evaluates to a string, then it will be converted to a RegExp
         *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
         *    `new RegExp('^abc$')`.<br />
         *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
         *    start at the index of the last search's match, thus not taking the whole input value into
         *    account.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="email-input-directive" module="emailExample">
              <file name="index.html">
               <script>
                 angular.module('emailExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.email = {
                       text: 'me@example.com'
                     };
                   }]);
               </script>
                 <form name="myForm" ng-controller="ExampleController">
                   <label>Email:
                     <input type="email" name="input" ng-model="email.text" required>
                   </label>
                   <div role="alert">
                     <span class="error" ng-show="myForm.input.$error.required">
                       Required!</span>
                     <span class="error" ng-show="myForm.input.$error.email">
                       Not valid email!</span>
                   </div>
                   <tt>text = {{email.text}}</tt><br/>
                   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
                   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
                   <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
                   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
                   <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
                 </form>
               </file>
              <file name="protractor.js" type="protractor">
                var text = element(by.binding('email.text'));
                var valid = element(by.binding('myForm.input.$valid'));
                var input = element(by.model('email.text'));
                 it('should initialize to model', function() {
                  expect(text.getText()).toContain('me@example.com');
                  expect(valid.getText()).toContain('true');
                });
                 it('should be invalid if empty', function() {
                  input.clear();
                  input.sendKeys('');
                  expect(text.getText()).toEqual('text =');
                  expect(valid.getText()).toContain('false');
                });
                 it('should be invalid if not email', function() {
                  input.clear();
                  input.sendKeys('xxx');
                   expect(valid.getText()).toContain('false');
                });
              </file>
            </example>
         */
        'email': emailInputType,

        /**
         * @ngdoc input
         * @name input[radio]
         *
         * @description
         * HTML radio button.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string} value The value to which the `ngModel` expression should be set when selected.
         *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
         *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
         *    is selected. Should be used instead of the `value` attribute if you need
         *    a non-string `ngModel` (`boolean`, `array`, ...).
         *
         * @example
            <example name="radio-input-directive" module="radioExample">
              <file name="index.html">
               <script>
                 angular.module('radioExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.color = {
                       name: 'blue'
                     };
                     $scope.specialValue = {
                       "id": "12345",
                       "value": "green"
                     };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <label>
                   <input type="radio" ng-model="color.name" value="red">
                   Red
                 </label><br/>
                 <label>
                   <input type="radio" ng-model="color.name" ng-value="specialValue">
                   Green
                 </label><br/>
                 <label>
                   <input type="radio" ng-model="color.name" value="blue">
                   Blue
                 </label><br/>
                 <tt>color = {{color.name | json}}</tt><br/>
                </form>
                Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
              </file>
              <file name="protractor.js" type="protractor">
                it('should change state', function() {
                  var color = element(by.binding('color.name'));
                   expect(color.getText()).toContain('blue');
                   element.all(by.model('color.name')).get(0).click();
                   expect(color.getText()).toContain('red');
                });
              </file>
            </example>
         */
        'radio': radioInputType,

        /**
         * @ngdoc input
         * @name input[checkbox]
         *
         * @description
         * HTML checkbox.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
         * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         *
         * @example
            <example name="checkbox-input-directive" module="checkboxExample">
              <file name="index.html">
               <script>
                 angular.module('checkboxExample', [])
                   .controller('ExampleController', ['$scope', function($scope) {
                     $scope.checkboxModel = {
                      value1 : true,
                      value2 : 'YES'
                    };
                   }]);
               </script>
               <form name="myForm" ng-controller="ExampleController">
                 <label>Value1:
                   <input type="checkbox" ng-model="checkboxModel.value1">
                 </label><br/>
                 <label>Value2:
                   <input type="checkbox" ng-model="checkboxModel.value2"
                          ng-true-value="'YES'" ng-false-value="'NO'">
                  </label><br/>
                 <tt>value1 = {{checkboxModel.value1}}</tt><br/>
                 <tt>value2 = {{checkboxModel.value2}}</tt><br/>
                </form>
              </file>
              <file name="protractor.js" type="protractor">
                it('should change state', function() {
                  var value1 = element(by.binding('checkboxModel.value1'));
                  var value2 = element(by.binding('checkboxModel.value2'));
                   expect(value1.getText()).toContain('true');
                  expect(value2.getText()).toContain('YES');
                   element(by.model('checkboxModel.value1')).click();
                  element(by.model('checkboxModel.value2')).click();
                   expect(value1.getText()).toContain('false');
                  expect(value2.getText()).toContain('NO');
                });
              </file>
            </example>
         */
        'checkbox': checkboxInputType,

        'hidden': noop,
        'button': noop,
        'submit': noop,
        'reset': noop,
        'file': noop
      };

      function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function (value) {
          return ctrl.$isEmpty(value) ? value : value.toString();
        });
      }

      function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
      }

      function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var type = lowercase(element[0].type);

        // In composition mode, users are still inputing intermediate text buffer,
        // hold the listener until composition is done.
        // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
        if (!$sniffer.android) {
          var composing = false;

          element.on('compositionstart', function () {
            composing = true;
          });

          element.on('compositionend', function () {
            composing = false;
            listener();
          });
        }

        var timeout;

        var listener = function (ev) {
          if (timeout) {
            $browser.defer.cancel(timeout);
            timeout = null;
          }
          if (composing) return;
          var value = element.val(),
              event = ev && ev.type;

          // By default we will trim the value
          // If the attribute ng-trim exists we will avoid trimming
          // If input type is 'password', the value is never trimmed
          if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
            value = trim(value);
          }

          // If a control is suffering from bad input (due to native validators), browsers discard its
          // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
          // control's value is the same empty value twice in a row.
          if (ctrl.$viewValue !== value || value === '' && ctrl.$$hasNativeValidators) {
            ctrl.$setViewValue(value, event);
          }
        };

        // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
        // input event on backspace, delete or cut
        if ($sniffer.hasEvent('input')) {
          element.on('input', listener);
        } else {
          var deferListener = function (ev, input, origValue) {
            if (!timeout) {
              timeout = $browser.defer(function () {
                timeout = null;
                if (!input || input.value !== origValue) {
                  listener(ev);
                }
              });
            }
          };

          element.on('keydown', function (event) {
            var key = event.keyCode;

            // ignore
            //    command            modifiers                   arrows
            if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40) return;

            deferListener(event, this, this.value);
          });

          // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
          if ($sniffer.hasEvent('paste')) {
            element.on('paste cut', deferListener);
          }
        }

        // if user paste into input using mouse on older browser
        // or form autocomplete on newer browser, we need "change" event to catch it
        element.on('change', listener);

        // Some native input types (date-family) have the ability to change validity without
        // firing any input/change events.
        // For these event types, when native validators are present and the browser supports the type,
        // check for validity changes on various DOM events.
        if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
          element.on(PARTIAL_VALIDATION_EVENTS, function (ev) {
            if (!timeout) {
              var validity = this[VALIDITY_STATE_PROPERTY];
              var origBadInput = validity.badInput;
              var origTypeMismatch = validity.typeMismatch;
              timeout = $browser.defer(function () {
                timeout = null;
                if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
                  listener(ev);
                }
              });
            }
          });
        }

        ctrl.$render = function () {
          // Workaround for Firefox validation #12102.
          var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
          if (element.val() !== value) {
            element.val(value);
          }
        };
      }

      function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) {
          return isoWeek;
        }

        if (isString(isoWeek)) {
          WEEK_REGEXP.lastIndex = 0;
          var parts = WEEK_REGEXP.exec(isoWeek);
          if (parts) {
            var year = +parts[1],
                week = +parts[2],
                hours = 0,
                minutes = 0,
                seconds = 0,
                milliseconds = 0,
                firstThurs = getFirstThursdayOfYear(year),
                addDays = (week - 1) * 7;

            if (existingDate) {
              hours = existingDate.getHours();
              minutes = existingDate.getMinutes();
              seconds = existingDate.getSeconds();
              milliseconds = existingDate.getMilliseconds();
            }

            return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
          }
        }

        return NaN;
      }

      function createDateParser(regexp, mapping) {
        return function (iso, date) {
          var parts, map;

          if (isDate(iso)) {
            return iso;
          }

          if (isString(iso)) {
            // When a date is JSON'ified to wraps itself inside of an extra
            // set of double quotes. This makes the date parsing code unable
            // to match the date string and parse it as a date.
            if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
              iso = iso.substring(1, iso.length - 1);
            }
            if (ISO_DATE_REGEXP.test(iso)) {
              return new Date(iso);
            }
            regexp.lastIndex = 0;
            parts = regexp.exec(iso);

            if (parts) {
              parts.shift();
              if (date) {
                map = {
                  yyyy: date.getFullYear(),
                  MM: date.getMonth() + 1,
                  dd: date.getDate(),
                  HH: date.getHours(),
                  mm: date.getMinutes(),
                  ss: date.getSeconds(),
                  sss: date.getMilliseconds() / 1000
                };
              } else {
                map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
              }

              forEach(parts, function (part, index) {
                if (index < mapping.length) {
                  map[mapping[index]] = +part;
                }
              });
              return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
            }
          }

          return NaN;
        };
      }

      function createDateInputType(type, regexp, parseDate, format) {
        return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
          badInputChecker(scope, element, attr, ctrl);
          baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
          var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
          var previousDate;

          ctrl.$$parserName = type;
          ctrl.$parsers.push(function (value) {
            if (ctrl.$isEmpty(value)) return null;
            if (regexp.test(value)) {
              // Note: We cannot read ctrl.$modelValue, as there might be a different
              // parser/formatter in the processing chain so that the model
              // contains some different data format!
              var parsedDate = parseDate(value, previousDate);
              if (timezone) {
                parsedDate = convertTimezoneToLocal(parsedDate, timezone);
              }
              return parsedDate;
            }
            return undefined;
          });

          ctrl.$formatters.push(function (value) {
            if (value && !isDate(value)) {
              throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
            }
            if (isValidDate(value)) {
              previousDate = value;
              if (previousDate && timezone) {
                previousDate = convertTimezoneToLocal(previousDate, timezone, true);
              }
              return $filter('date')(value, format, timezone);
            } else {
              previousDate = null;
              return '';
            }
          });

          if (isDefined(attr.min) || attr.ngMin) {
            var minVal;
            ctrl.$validators.min = function (value) {
              return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
            };
            attr.$observe('min', function (val) {
              minVal = parseObservedDateValue(val);
              ctrl.$validate();
            });
          }

          if (isDefined(attr.max) || attr.ngMax) {
            var maxVal;
            ctrl.$validators.max = function (value) {
              return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
            };
            attr.$observe('max', function (val) {
              maxVal = parseObservedDateValue(val);
              ctrl.$validate();
            });
          }

          function isValidDate(value) {
            // Invalid Date: getTime() returns NaN
            return value && !(value.getTime && value.getTime() !== value.getTime());
          }

          function parseObservedDateValue(val) {
            return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
          }
        };
      }

      function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
        if (nativeValidation) {
          ctrl.$parsers.push(function (value) {
            var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
            return validity.badInput || validity.typeMismatch ? undefined : value;
          });
        }
      }

      function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

        ctrl.$$parserName = 'number';
        ctrl.$parsers.push(function (value) {
          if (ctrl.$isEmpty(value)) return null;
          if (NUMBER_REGEXP.test(value)) return parseFloat(value);
          return undefined;
        });

        ctrl.$formatters.push(function (value) {
          if (!ctrl.$isEmpty(value)) {
            if (!isNumber(value)) {
              throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
            }
            value = value.toString();
          }
          return value;
        });

        if (isDefined(attr.min) || attr.ngMin) {
          var minVal;
          ctrl.$validators.min = function (value) {
            return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
          };

          attr.$observe('min', function (val) {
            if (isDefined(val) && !isNumber(val)) {
              val = parseFloat(val);
            }
            minVal = isNumber(val) && !isNaN(val) ? val : undefined;
            // TODO(matsko): implement validateLater to reduce number of validations
            ctrl.$validate();
          });
        }

        if (isDefined(attr.max) || attr.ngMax) {
          var maxVal;
          ctrl.$validators.max = function (value) {
            return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
          };

          attr.$observe('max', function (val) {
            if (isDefined(val) && !isNumber(val)) {
              val = parseFloat(val);
            }
            maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
            // TODO(matsko): implement validateLater to reduce number of validations
            ctrl.$validate();
          });
        }
      }

      function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);

        ctrl.$$parserName = 'url';
        ctrl.$validators.url = function (modelValue, viewValue) {
          var value = modelValue || viewValue;
          return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
      }

      function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        // Note: no badInputChecker here by purpose as `url` is only a validation
        // in browsers, i.e. we can always read out input.value even if it is not valid!
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);

        ctrl.$$parserName = 'email';
        ctrl.$validators.email = function (modelValue, viewValue) {
          var value = modelValue || viewValue;
          return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
      }

      function radioInputType(scope, element, attr, ctrl) {
        // make the name unique, if not defined
        if (isUndefined(attr.name)) {
          element.attr('name', nextUid());
        }

        var listener = function (ev) {
          if (element[0].checked) {
            ctrl.$setViewValue(attr.value, ev && ev.type);
          }
        };

        element.on('click', listener);

        ctrl.$render = function () {
          var value = attr.value;
          element[0].checked = value == ctrl.$viewValue;
        };

        attr.$observe('value', ctrl.$render);
      }

      function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
          parseFn = $parse(expression);
          if (!parseFn.constant) {
            throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' + '`{1}`.', name, expression);
          }
          return parseFn(context);
        }
        return fallback;
      }

      function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
        var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

        var listener = function (ev) {
          ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };

        element.on('click', listener);

        ctrl.$render = function () {
          element[0].checked = ctrl.$viewValue;
        };

        // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
        // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
        // it to a boolean.
        ctrl.$isEmpty = function (value) {
          return value === false;
        };

        ctrl.$formatters.push(function (value) {
          return equals(value, trueValue);
        });

        ctrl.$parsers.push(function (value) {
          return value ? trueValue : falseValue;
        });
      }

      /**
       * @ngdoc directive
       * @name textarea
       * @restrict E
       *
       * @description
       * HTML textarea element control with angular data-binding. The data-binding and validation
       * properties of this element are exactly the same as those of the
       * {@link ng.directive:input input element}.
       *
       * @param {string} ngModel Assignable angular expression to data-bind to.
       * @param {string=} name Property name of the form under which the control is published.
       * @param {string=} required Sets `required` validation error key if the value is not entered.
       * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
       *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
       *    `required` when you want to data-bind to the `required` attribute.
       * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
       *    minlength.
       * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
       *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
       *    length.
       * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
       *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
       *    If the expression evaluates to a RegExp object, then this is used directly.
       *    If the expression evaluates to a string, then it will be converted to a RegExp
       *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
       *    `new RegExp('^abc$')`.<br />
       *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
       *    start at the index of the last search's match, thus not taking the whole input value into
       *    account.
       * @param {string=} ngChange Angular expression to be executed when input changes due to user
       *    interaction with the input element.
       * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
       */

      /**
       * @ngdoc directive
       * @name input
       * @restrict E
       *
       * @description
       * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
       * input state control, and validation.
       * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
       *
       * <div class="alert alert-warning">
       * **Note:** Not every feature offered is available for all input types.
       * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
       * </div>
       *
       * @param {string} ngModel Assignable angular expression to data-bind to.
       * @param {string=} name Property name of the form under which the control is published.
       * @param {string=} required Sets `required` validation error key if the value is not entered.
       * @param {boolean=} ngRequired Sets `required` attribute if set to true
       * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
       *    minlength.
       * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
       *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
       *    length.
       * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
       *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
       *    If the expression evaluates to a RegExp object, then this is used directly.
       *    If the expression evaluates to a string, then it will be converted to a RegExp
       *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
       *    `new RegExp('^abc$')`.<br />
       *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
       *    start at the index of the last search's match, thus not taking the whole input value into
       *    account.
       * @param {string=} ngChange Angular expression to be executed when input changes due to user
       *    interaction with the input element.
       * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
       *    This parameter is ignored for input[type=password] controls, which will never trim the
       *    input.
       *
       * @example
          <example name="input-directive" module="inputExample">
            <file name="index.html">
             <script>
                angular.module('inputExample', [])
                  .controller('ExampleController', ['$scope', function($scope) {
                    $scope.user = {name: 'guest', last: 'visitor'};
                  }]);
             </script>
             <div ng-controller="ExampleController">
               <form name="myForm">
                 <label>
                    User name:
                    <input type="text" name="userName" ng-model="user.name" required>
                 </label>
                 <div role="alert">
                   <span class="error" ng-show="myForm.userName.$error.required">
                    Required!</span>
                 </div>
                 <label>
                    Last name:
                    <input type="text" name="lastName" ng-model="user.last"
                    ng-minlength="3" ng-maxlength="10">
                 </label>
                 <div role="alert">
                   <span class="error" ng-show="myForm.lastName.$error.minlength">
                     Too short!</span>
                   <span class="error" ng-show="myForm.lastName.$error.maxlength">
                     Too long!</span>
                 </div>
               </form>
               <hr>
               <tt>user = {{user}}</tt><br/>
               <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
               <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
               <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
               <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
               <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
               <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
               <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
               <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
             </div>
            </file>
            <file name="protractor.js" type="protractor">
              var user = element(by.exactBinding('user'));
              var userNameValid = element(by.binding('myForm.userName.$valid'));
              var lastNameValid = element(by.binding('myForm.lastName.$valid'));
              var lastNameError = element(by.binding('myForm.lastName.$error'));
              var formValid = element(by.binding('myForm.$valid'));
              var userNameInput = element(by.model('user.name'));
              var userLastInput = element(by.model('user.last'));
      
              it('should initialize to model', function() {
                expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
                expect(userNameValid.getText()).toContain('true');
                expect(formValid.getText()).toContain('true');
              });
      
              it('should be invalid if empty when required', function() {
                userNameInput.clear();
                userNameInput.sendKeys('');
      
                expect(user.getText()).toContain('{"last":"visitor"}');
                expect(userNameValid.getText()).toContain('false');
                expect(formValid.getText()).toContain('false');
              });
      
              it('should be valid if empty when min length is set', function() {
                userLastInput.clear();
                userLastInput.sendKeys('');
      
                expect(user.getText()).toContain('{"name":"guest","last":""}');
                expect(lastNameValid.getText()).toContain('true');
                expect(formValid.getText()).toContain('true');
              });
      
              it('should be invalid if less than required min length', function() {
                userLastInput.clear();
                userLastInput.sendKeys('xx');
      
                expect(user.getText()).toContain('{"name":"guest"}');
                expect(lastNameValid.getText()).toContain('false');
                expect(lastNameError.getText()).toContain('minlength');
                expect(formValid.getText()).toContain('false');
              });
      
              it('should be invalid if longer than max length', function() {
                userLastInput.clear();
                userLastInput.sendKeys('some ridiculously long name');
      
                expect(user.getText()).toContain('{"name":"guest"}');
                expect(lastNameValid.getText()).toContain('false');
                expect(lastNameError.getText()).toContain('maxlength');
                expect(formValid.getText()).toContain('false');
              });
            </file>
          </example>
       */
      var inputDirective = ['$browser', '$sniffer', '$filter', '$parse', function ($browser, $sniffer, $filter, $parse) {
        return {
          restrict: 'E',
          require: ['?ngModel'],
          link: {
            pre: function (scope, element, attr, ctrls) {
              if (ctrls[0]) {
                (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
              }
            }
          }
        };
      }];

      var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
      /**
       * @ngdoc directive
       * @name ngValue
       *
       * @description
       * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
       * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
       * the bound value.
       *
       * `ngValue` is useful when dynamically generating lists of radio buttons using
       * {@link ngRepeat `ngRepeat`}, as shown below.
       *
       * Likewise, `ngValue` can be used to generate `<option>` elements for
       * the {@link select `select`} element. In that case however, only strings are supported
       * for the `value `attribute, so the resulting `ngModel` will always be a string.
       * Support for `select` models with non-string values is available via `ngOptions`.
       *
       * @element input
       * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
       *   of the `input` element
       *
       * @example
          <example name="ngValue-directive" module="valueExample">
            <file name="index.html">
             <script>
                angular.module('valueExample', [])
                  .controller('ExampleController', ['$scope', function($scope) {
                    $scope.names = ['pizza', 'unicorns', 'robots'];
                    $scope.my = { favorite: 'unicorns' };
                  }]);
             </script>
              <form ng-controller="ExampleController">
                <h2>Which is your favorite?</h2>
                  <label ng-repeat="name in names" for="{{name}}">
                    {{name}}
                    <input type="radio"
                           ng-model="my.favorite"
                           ng-value="name"
                           id="{{name}}"
                           name="favorite">
                  </label>
                <div>You chose {{my.favorite}}</div>
              </form>
            </file>
            <file name="protractor.js" type="protractor">
              var favorite = element(by.binding('my.favorite'));
      
              it('should initialize to model', function() {
                expect(favorite.getText()).toContain('unicorns');
              });
              it('should bind the values to the inputs', function() {
                element.all(by.model('my.favorite')).get(0).click();
                expect(favorite.getText()).toContain('pizza');
              });
            </file>
          </example>
       */
      var ngValueDirective = function () {
        return {
          restrict: 'A',
          priority: 100,
          compile: function (tpl, tplAttr) {
            if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
              return function ngValueConstantLink(scope, elm, attr) {
                attr.$set('value', scope.$eval(attr.ngValue));
              };
            } else {
              return function ngValueLink(scope, elm, attr) {
                scope.$watch(attr.ngValue, function valueWatchAction(value) {
                  attr.$set('value', value);
                });
              };
            }
          }
        };
      };

      /**
       * @ngdoc directive
       * @name ngBind
       * @restrict AC
       *
       * @description
       * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
       * with the value of a given expression, and to update the text content when the value of that
       * expression changes.
       *
       * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
       * `{{ expression }}` which is similar but less verbose.
       *
       * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
       * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
       * element attribute, it makes the bindings invisible to the user while the page is loading.
       *
       * An alternative solution to this problem would be using the
       * {@link ng.directive:ngCloak ngCloak} directive.
       *
       *
       * @element ANY
       * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
       *
       * @example
       * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
         <example module="bindExample">
           <file name="index.html">
             <script>
               angular.module('bindExample', [])
                 .controller('ExampleController', ['$scope', function($scope) {
                   $scope.name = 'Whirled';
                 }]);
             </script>
             <div ng-controller="ExampleController">
               <label>Enter name: <input type="text" ng-model="name"></label><br>
               Hello <span ng-bind="name"></span>!
             </div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-bind', function() {
               var nameInput = element(by.model('name'));
      
               expect(element(by.binding('name')).getText()).toBe('Whirled');
               nameInput.clear();
               nameInput.sendKeys('world');
               expect(element(by.binding('name')).getText()).toBe('world');
             });
           </file>
         </example>
       */
      var ngBindDirective = ['$compile', function ($compile) {
        return {
          restrict: 'AC',
          compile: function ngBindCompile(templateElement) {
            $compile.$$addBindingClass(templateElement);
            return function ngBindLink(scope, element, attr) {
              $compile.$$addBindingInfo(element, attr.ngBind);
              element = element[0];
              scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                element.textContent = isUndefined(value) ? '' : value;
              });
            };
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngBindTemplate
       *
       * @description
       * The `ngBindTemplate` directive specifies that the element
       * text content should be replaced with the interpolation of the template
       * in the `ngBindTemplate` attribute.
       * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
       * expressions. This directive is needed since some HTML elements
       * (such as TITLE and OPTION) cannot contain SPAN elements.
       *
       * @element ANY
       * @param {string} ngBindTemplate template of form
       *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
       *
       * @example
       * Try it here: enter text in text box and watch the greeting change.
         <example module="bindExample">
           <file name="index.html">
             <script>
               angular.module('bindExample', [])
                 .controller('ExampleController', ['$scope', function($scope) {
                   $scope.salutation = 'Hello';
                   $scope.name = 'World';
                 }]);
             </script>
             <div ng-controller="ExampleController">
              <label>Salutation: <input type="text" ng-model="salutation"></label><br>
              <label>Name: <input type="text" ng-model="name"></label><br>
              <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
             </div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-bind', function() {
               var salutationElem = element(by.binding('salutation'));
               var salutationInput = element(by.model('salutation'));
               var nameInput = element(by.model('name'));
      
               expect(salutationElem.getText()).toBe('Hello World!');
      
               salutationInput.clear();
               salutationInput.sendKeys('Greetings');
               nameInput.clear();
               nameInput.sendKeys('user');
      
               expect(salutationElem.getText()).toBe('Greetings user!');
             });
           </file>
         </example>
       */
      var ngBindTemplateDirective = ['$interpolate', '$compile', function ($interpolate, $compile) {
        return {
          compile: function ngBindTemplateCompile(templateElement) {
            $compile.$$addBindingClass(templateElement);
            return function ngBindTemplateLink(scope, element, attr) {
              var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
              $compile.$$addBindingInfo(element, interpolateFn.expressions);
              element = element[0];
              attr.$observe('ngBindTemplate', function (value) {
                element.textContent = isUndefined(value) ? '' : value;
              });
            };
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngBindHtml
       *
       * @description
       * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
       * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
       * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
       * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
       * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
       *
       * You may also bypass sanitization for values you know are safe. To do so, bind to
       * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
       * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
       *
       * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
       * will have an exception (instead of an exploit.)
       *
       * @element ANY
       * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
       *
       * @example
      
         <example module="bindHtmlExample" deps="angular-sanitize.js">
           <file name="index.html">
             <div ng-controller="ExampleController">
              <p ng-bind-html="myHTML"></p>
             </div>
           </file>
      
           <file name="script.js">
             angular.module('bindHtmlExample', ['ngSanitize'])
               .controller('ExampleController', ['$scope', function($scope) {
                 $scope.myHTML =
                    'I am an <code>HTML</code>string with ' +
                    '<a href="#">links!</a> and other <em>stuff</em>';
               }]);
           </file>
      
           <file name="protractor.js" type="protractor">
             it('should check ng-bind-html', function() {
               expect(element(by.binding('myHTML')).getText()).toBe(
                   'I am an HTMLstring with links! and other stuff');
             });
           </file>
         </example>
       */
      var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function ($sce, $parse, $compile) {
        return {
          restrict: 'A',
          compile: function ngBindHtmlCompile(tElement, tAttrs) {
            var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
            var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
              // Unwrap the value to compare the actual inner safe value, not the wrapper object.
              return $sce.valueOf(val);
            });
            $compile.$$addBindingClass(tElement);

            return function ngBindHtmlLink(scope, element, attr) {
              $compile.$$addBindingInfo(element, attr.ngBindHtml);

              scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
                var value = ngBindHtmlGetter(scope);
                element.html($sce.getTrustedHtml(value) || '');
              });
            };
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngChange
       *
       * @description
       * Evaluate the given expression when the user changes the input.
       * The expression is evaluated immediately, unlike the JavaScript onchange event
       * which only triggers at the end of a change (usually, when the user leaves the
       * form element or presses the return key).
       *
       * The `ngChange` expression is only evaluated when a change in the input value causes
       * a new value to be committed to the model.
       *
       * It will not be evaluated:
       * * if the value returned from the `$parsers` transformation pipeline has not changed
       * * if the input has continued to be invalid since the model will stay `null`
       * * if the model is changed programmatically and not by a change to the input value
       *
       *
       * Note, this directive requires `ngModel` to be present.
       *
       * @element input
       * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
       * in input value.
       *
       * @example
       * <example name="ngChange-directive" module="changeExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('changeExample', [])
       *         .controller('ExampleController', ['$scope', function($scope) {
       *           $scope.counter = 0;
       *           $scope.change = function() {
       *             $scope.counter++;
       *           };
       *         }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
       *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
       *       <label for="ng-change-example2">Confirmed</label><br />
       *       <tt>debug = {{confirmed}}</tt><br/>
       *       <tt>counter = {{counter}}</tt><br/>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *     var counter = element(by.binding('counter'));
       *     var debug = element(by.binding('confirmed'));
       *
       *     it('should evaluate the expression if changing from view', function() {
       *       expect(counter.getText()).toContain('0');
       *
       *       element(by.id('ng-change-example1')).click();
       *
       *       expect(counter.getText()).toContain('1');
       *       expect(debug.getText()).toContain('true');
       *     });
       *
       *     it('should not evaluate the expression if changing from model', function() {
       *       element(by.id('ng-change-example2')).click();
      
       *       expect(counter.getText()).toContain('0');
       *       expect(debug.getText()).toContain('true');
       *     });
       *   </file>
       * </example>
       */
      var ngChangeDirective = valueFn({
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attr, ctrl) {
          ctrl.$viewChangeListeners.push(function () {
            scope.$eval(attr.ngChange);
          });
        }
      });

      function classDirective(name, selector) {
        name = 'ngClass' + name;
        return ['$animate', function ($animate) {
          return {
            restrict: 'AC',
            link: function (scope, element, attr) {
              var oldVal;

              scope.$watch(attr[name], ngClassWatchAction, true);

              attr.$observe('class', function (value) {
                ngClassWatchAction(scope.$eval(attr[name]));
              });

              if (name !== 'ngClass') {
                scope.$watch('$index', function ($index, old$index) {
                  // jshint bitwise: false
                  var mod = $index & 1;
                  if (mod !== (old$index & 1)) {
                    var classes = arrayClasses(scope.$eval(attr[name]));
                    mod === selector ? addClasses(classes) : removeClasses(classes);
                  }
                });
              }

              function addClasses(classes) {
                var newClasses = digestClassCounts(classes, 1);
                attr.$addClass(newClasses);
              }

              function removeClasses(classes) {
                var newClasses = digestClassCounts(classes, -1);
                attr.$removeClass(newClasses);
              }

              function digestClassCounts(classes, count) {
                // Use createMap() to prevent class assumptions involving property
                // names in Object.prototype
                var classCounts = element.data('$classCounts') || createMap();
                var classesToUpdate = [];
                forEach(classes, function (className) {
                  if (count > 0 || classCounts[className]) {
                    classCounts[className] = (classCounts[className] || 0) + count;
                    if (classCounts[className] === +(count > 0)) {
                      classesToUpdate.push(className);
                    }
                  }
                });
                element.data('$classCounts', classCounts);
                return classesToUpdate.join(' ');
              }

              function updateClasses(oldClasses, newClasses) {
                var toAdd = arrayDifference(newClasses, oldClasses);
                var toRemove = arrayDifference(oldClasses, newClasses);
                toAdd = digestClassCounts(toAdd, 1);
                toRemove = digestClassCounts(toRemove, -1);
                if (toAdd && toAdd.length) {
                  $animate.addClass(element, toAdd);
                }
                if (toRemove && toRemove.length) {
                  $animate.removeClass(element, toRemove);
                }
              }

              function ngClassWatchAction(newVal) {
                // jshint bitwise: false
                if (selector === true || (scope.$index & 1) === selector) {
                  // jshint bitwise: true
                  var newClasses = arrayClasses(newVal || []);
                  if (!oldVal) {
                    addClasses(newClasses);
                  } else if (!equals(newVal, oldVal)) {
                    var oldClasses = arrayClasses(oldVal);
                    updateClasses(oldClasses, newClasses);
                  }
                }
                if (isArray(newVal)) {
                  oldVal = newVal.map(function (v) {
                    return shallowCopy(v);
                  });
                } else {
                  oldVal = shallowCopy(newVal);
                }
              }
            }
          };

          function arrayDifference(tokens1, tokens2) {
            var values = [];

            outer: for (var i = 0; i < tokens1.length; i++) {
              var token = tokens1[i];
              for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j]) continue outer;
              }
              values.push(token);
            }
            return values;
          }

          function arrayClasses(classVal) {
            var classes = [];
            if (isArray(classVal)) {
              forEach(classVal, function (v) {
                classes = classes.concat(arrayClasses(v));
              });
              return classes;
            } else if (isString(classVal)) {
              return classVal.split(' ');
            } else if (isObject(classVal)) {
              forEach(classVal, function (v, k) {
                if (v) {
                  classes = classes.concat(k.split(' '));
                }
              });
              return classes;
            }
            return classVal;
          }
        }];
      }

      /**
       * @ngdoc directive
       * @name ngClass
       * @restrict AC
       *
       * @description
       * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
       * an expression that represents all classes to be added.
       *
       * The directive operates in three different ways, depending on which of three types the expression
       * evaluates to:
       *
       * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
       * names.
       *
       * 2. If the expression evaluates to an object, then for each key-value pair of the
       * object with a truthy value the corresponding key is used as a class name.
       *
       * 3. If the expression evaluates to an array, each element of the array should either be a string as in
       * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
       * to give you more control over what CSS classes appear. See the code below for an example of this.
       *
       *
       * The directive won't add duplicate classes if a particular class was already set.
       *
       * When the expression changes, the previously added classes are removed and only then are the
       * new classes added.
       *
       * @knownIssue
       * You should not use {@link guide/interpolation interpolation} in the value of the `class`
       * attribute, when using the `ngClass` directive on the same element.
       * See {@link guide/interpolation#known-issues here} for more info.
       *
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
       * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
       *
       * @element ANY
       * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
       *   of the evaluation can be a string representing space delimited class
       *   names, an array, or a map of class names to boolean values. In the case of a map, the
       *   names of the properties whose values are truthy will be added as css classes to the
       *   element.
       *
       * @example Example that demonstrates basic bindings via ngClass directive.
         <example>
           <file name="index.html">
             <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
             <label>
                <input type="checkbox" ng-model="deleted">
                deleted (apply "strike" class)
             </label><br>
             <label>
                <input type="checkbox" ng-model="important">
                important (apply "bold" class)
             </label><br>
             <label>
                <input type="checkbox" ng-model="error">
                error (apply "has-error" class)
             </label>
             <hr>
             <p ng-class="style">Using String Syntax</p>
             <input type="text" ng-model="style"
                    placeholder="Type: bold strike red" aria-label="Type: bold strike red">
             <hr>
             <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
             <input ng-model="style1"
                    placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
             <input ng-model="style2"
                    placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
             <input ng-model="style3"
                    placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
             <hr>
             <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
             <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
             <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
           </file>
           <file name="style.css">
             .strike {
                 text-decoration: line-through;
             }
             .bold {
                 font-weight: bold;
             }
             .red {
                 color: red;
             }
             .has-error {
                 color: red;
                 background-color: yellow;
             }
             .orange {
                 color: orange;
             }
           </file>
           <file name="protractor.js" type="protractor">
             var ps = element.all(by.css('p'));
      
             it('should let you toggle the class', function() {
      
               expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
               expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
      
               element(by.model('important')).click();
               expect(ps.first().getAttribute('class')).toMatch(/bold/);
      
               element(by.model('error')).click();
               expect(ps.first().getAttribute('class')).toMatch(/has-error/);
             });
      
             it('should let you toggle string example', function() {
               expect(ps.get(1).getAttribute('class')).toBe('');
               element(by.model('style')).clear();
               element(by.model('style')).sendKeys('red');
               expect(ps.get(1).getAttribute('class')).toBe('red');
             });
      
             it('array example should have 3 classes', function() {
               expect(ps.get(2).getAttribute('class')).toBe('');
               element(by.model('style1')).sendKeys('bold');
               element(by.model('style2')).sendKeys('strike');
               element(by.model('style3')).sendKeys('red');
               expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
             });
      
             it('array with map example should have 2 classes', function() {
               expect(ps.last().getAttribute('class')).toBe('');
               element(by.model('style4')).sendKeys('bold');
               element(by.model('warning')).click();
               expect(ps.last().getAttribute('class')).toBe('bold orange');
             });
           </file>
         </example>
      
         ## Animations
      
         The example below demonstrates how to perform animations using ngClass.
      
         <example module="ngAnimate" deps="angular-animate.js" animations="true">
           <file name="index.html">
            <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
            <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
            <br>
            <span class="base-class" ng-class="myVar">Sample Text</span>
           </file>
           <file name="style.css">
             .base-class {
               transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
             }
      
             .base-class.my-class {
               color: red;
               font-size:3em;
             }
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-class', function() {
               expect(element(by.css('.base-class')).getAttribute('class')).not.
                 toMatch(/my-class/);
      
               element(by.id('setbtn')).click();
      
               expect(element(by.css('.base-class')).getAttribute('class')).
                 toMatch(/my-class/);
      
               element(by.id('clearbtn')).click();
      
               expect(element(by.css('.base-class')).getAttribute('class')).not.
                 toMatch(/my-class/);
             });
           </file>
         </example>
      
      
         ## ngClass and pre-existing CSS3 Transitions/Animations
         The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
         Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
         any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
         to view the step by step details of {@link $animate#addClass $animate.addClass} and
         {@link $animate#removeClass $animate.removeClass}.
       */
      var ngClassDirective = classDirective('', true);

      /**
       * @ngdoc directive
       * @name ngClassOdd
       * @restrict AC
       *
       * @description
       * The `ngClassOdd` and `ngClassEven` directives work exactly as
       * {@link ng.directive:ngClass ngClass}, except they work in
       * conjunction with `ngRepeat` and take effect only on odd (even) rows.
       *
       * This directive can be applied only within the scope of an
       * {@link ng.directive:ngRepeat ngRepeat}.
       *
       * @element ANY
       * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
       *   of the evaluation can be a string representing space delimited class names or an array.
       *
       * @example
         <example>
           <file name="index.html">
              <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
                <li ng-repeat="name in names">
                 <span ng-class-odd="'odd'" ng-class-even="'even'">
                   {{name}}
                 </span>
                </li>
              </ol>
           </file>
           <file name="style.css">
             .odd {
               color: red;
             }
             .even {
               color: blue;
             }
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-class-odd and ng-class-even', function() {
               expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
                 toMatch(/odd/);
               expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
                 toMatch(/even/);
             });
           </file>
         </example>
       */
      var ngClassOddDirective = classDirective('Odd', 0);

      /**
       * @ngdoc directive
       * @name ngClassEven
       * @restrict AC
       *
       * @description
       * The `ngClassOdd` and `ngClassEven` directives work exactly as
       * {@link ng.directive:ngClass ngClass}, except they work in
       * conjunction with `ngRepeat` and take effect only on odd (even) rows.
       *
       * This directive can be applied only within the scope of an
       * {@link ng.directive:ngRepeat ngRepeat}.
       *
       * @element ANY
       * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
       *   result of the evaluation can be a string representing space delimited class names or an array.
       *
       * @example
         <example>
           <file name="index.html">
              <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
                <li ng-repeat="name in names">
                 <span ng-class-odd="'odd'" ng-class-even="'even'">
                   {{name}} &nbsp; &nbsp; &nbsp;
                 </span>
                </li>
              </ol>
           </file>
           <file name="style.css">
             .odd {
               color: red;
             }
             .even {
               color: blue;
             }
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-class-odd and ng-class-even', function() {
               expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
                 toMatch(/odd/);
               expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
                 toMatch(/even/);
             });
           </file>
         </example>
       */
      var ngClassEvenDirective = classDirective('Even', 1);

      /**
       * @ngdoc directive
       * @name ngCloak
       * @restrict AC
       *
       * @description
       * The `ngCloak` directive is used to prevent the Angular html template from being briefly
       * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
       * directive to avoid the undesirable flicker effect caused by the html template display.
       *
       * The directive can be applied to the `<body>` element, but the preferred usage is to apply
       * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
       * of the browser view.
       *
       * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
       * `angular.min.js`.
       * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
       *
       * ```css
       * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
       *   display: none !important;
       * }
       * ```
       *
       * When this css rule is loaded by the browser, all html elements (including their children) that
       * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
       * during the compilation of the template it deletes the `ngCloak` element attribute, making
       * the compiled element visible.
       *
       * For the best result, the `angular.js` script must be loaded in the head section of the html
       * document; alternatively, the css rule above must be included in the external stylesheet of the
       * application.
       *
       * @element ANY
       *
       * @example
         <example>
           <file name="index.html">
              <div id="template1" ng-cloak>{{ 'hello' }}</div>
              <div id="template2" class="ng-cloak">{{ 'world' }}</div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should remove the template directive and css class', function() {
               expect($('#template1').getAttribute('ng-cloak')).
                 toBeNull();
               expect($('#template2').getAttribute('ng-cloak')).
                 toBeNull();
             });
           </file>
         </example>
       *
       */
      var ngCloakDirective = ngDirective({
        compile: function (element, attr) {
          attr.$set('ngCloak', undefined);
          element.removeClass('ng-cloak');
        }
      });

      /**
       * @ngdoc directive
       * @name ngController
       *
       * @description
       * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
       * supports the principles behind the Model-View-Controller design pattern.
       *
       * MVC components in angular:
       *
       * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
       *   are accessed through bindings.
       * * View — The template (HTML with data bindings) that is rendered into the View.
       * * Controller — The `ngController` directive specifies a Controller class; the class contains business
       *   logic behind the application to decorate the scope with functions and values
       *
       * Note that you can also attach controllers to the DOM by declaring it in a route definition
       * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
       * again using `ng-controller` in the template itself.  This will cause the controller to be attached
       * and executed twice.
       *
       * @element ANY
       * @scope
       * @priority 500
       * @param {expression} ngController Name of a constructor function registered with the current
       * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
       * that on the current scope evaluates to a constructor function.
       *
       * The controller instance can be published into a scope property by specifying
       * `ng-controller="as propertyName"`.
       *
       * If the current `$controllerProvider` is configured to use globals (via
       * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
       * also be the name of a globally accessible constructor function (not recommended).
       *
       * @example
       * Here is a simple form for editing user contact information. Adding, removing, clearing, and
       * greeting are methods declared on the controller (see source tab). These methods can
       * easily be called from the angular markup. Any changes to the data are automatically reflected
       * in the View without the need for a manual update.
       *
       * Two different declaration styles are included below:
       *
       * * one binds methods and properties directly onto the controller using `this`:
       * `ng-controller="SettingsController1 as settings"`
       * * one injects `$scope` into the controller:
       * `ng-controller="SettingsController2"`
       *
       * The second option is more common in the Angular community, and is generally used in boilerplates
       * and in this guide. However, there are advantages to binding properties directly to the controller
       * and avoiding scope.
       *
       * * Using `controller as` makes it obvious which controller you are accessing in the template when
       * multiple controllers apply to an element.
       * * If you are writing your controllers as classes you have easier access to the properties and
       * methods, which will appear on the scope, from inside the controller code.
       * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
       * inheritance masking primitives.
       *
       * This example demonstrates the `controller as` syntax.
       *
       * <example name="ngControllerAs" module="controllerAsExample">
       *   <file name="index.html">
       *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
       *      <label>Name: <input type="text" ng-model="settings.name"/></label>
       *      <button ng-click="settings.greet()">greet</button><br/>
       *      Contact:
       *      <ul>
       *        <li ng-repeat="contact in settings.contacts">
       *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
       *             <option>phone</option>
       *             <option>email</option>
       *          </select>
       *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
       *          <button ng-click="settings.clearContact(contact)">clear</button>
       *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
       *        </li>
       *        <li><button ng-click="settings.addContact()">add</button></li>
       *     </ul>
       *    </div>
       *   </file>
       *   <file name="app.js">
       *    angular.module('controllerAsExample', [])
       *      .controller('SettingsController1', SettingsController1);
       *
       *    function SettingsController1() {
       *      this.name = "John Smith";
       *      this.contacts = [
       *        {type: 'phone', value: '408 555 1212'},
       *        {type: 'email', value: 'john.smith@example.org'} ];
       *    }
       *
       *    SettingsController1.prototype.greet = function() {
       *      alert(this.name);
       *    };
       *
       *    SettingsController1.prototype.addContact = function() {
       *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
       *    };
       *
       *    SettingsController1.prototype.removeContact = function(contactToRemove) {
       *     var index = this.contacts.indexOf(contactToRemove);
       *      this.contacts.splice(index, 1);
       *    };
       *
       *    SettingsController1.prototype.clearContact = function(contact) {
       *      contact.type = 'phone';
       *      contact.value = '';
       *    };
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *     it('should check controller as', function() {
       *       var container = element(by.id('ctrl-as-exmpl'));
       *         expect(container.element(by.model('settings.name'))
       *           .getAttribute('value')).toBe('John Smith');
       *
       *       var firstRepeat =
       *           container.element(by.repeater('contact in settings.contacts').row(0));
       *       var secondRepeat =
       *           container.element(by.repeater('contact in settings.contacts').row(1));
       *
       *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
       *           .toBe('408 555 1212');
       *
       *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
       *           .toBe('john.smith@example.org');
       *
       *       firstRepeat.element(by.buttonText('clear')).click();
       *
       *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
       *           .toBe('');
       *
       *       container.element(by.buttonText('add')).click();
       *
       *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
       *           .element(by.model('contact.value'))
       *           .getAttribute('value'))
       *           .toBe('yourname@example.org');
       *     });
       *   </file>
       * </example>
       *
       * This example demonstrates the "attach to `$scope`" style of controller.
       *
       * <example name="ngController" module="controllerExample">
       *  <file name="index.html">
       *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
       *     <label>Name: <input type="text" ng-model="name"/></label>
       *     <button ng-click="greet()">greet</button><br/>
       *     Contact:
       *     <ul>
       *       <li ng-repeat="contact in contacts">
       *         <select ng-model="contact.type" id="select_{{$index}}">
       *            <option>phone</option>
       *            <option>email</option>
       *         </select>
       *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
       *         <button ng-click="clearContact(contact)">clear</button>
       *         <button ng-click="removeContact(contact)">X</button>
       *       </li>
       *       <li>[ <button ng-click="addContact()">add</button> ]</li>
       *    </ul>
       *   </div>
       *  </file>
       *  <file name="app.js">
       *   angular.module('controllerExample', [])
       *     .controller('SettingsController2', ['$scope', SettingsController2]);
       *
       *   function SettingsController2($scope) {
       *     $scope.name = "John Smith";
       *     $scope.contacts = [
       *       {type:'phone', value:'408 555 1212'},
       *       {type:'email', value:'john.smith@example.org'} ];
       *
       *     $scope.greet = function() {
       *       alert($scope.name);
       *     };
       *
       *     $scope.addContact = function() {
       *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
       *     };
       *
       *     $scope.removeContact = function(contactToRemove) {
       *       var index = $scope.contacts.indexOf(contactToRemove);
       *       $scope.contacts.splice(index, 1);
       *     };
       *
       *     $scope.clearContact = function(contact) {
       *       contact.type = 'phone';
       *       contact.value = '';
       *     };
       *   }
       *  </file>
       *  <file name="protractor.js" type="protractor">
       *    it('should check controller', function() {
       *      var container = element(by.id('ctrl-exmpl'));
       *
       *      expect(container.element(by.model('name'))
       *          .getAttribute('value')).toBe('John Smith');
       *
       *      var firstRepeat =
       *          container.element(by.repeater('contact in contacts').row(0));
       *      var secondRepeat =
       *          container.element(by.repeater('contact in contacts').row(1));
       *
       *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
       *          .toBe('408 555 1212');
       *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
       *          .toBe('john.smith@example.org');
       *
       *      firstRepeat.element(by.buttonText('clear')).click();
       *
       *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
       *          .toBe('');
       *
       *      container.element(by.buttonText('add')).click();
       *
       *      expect(container.element(by.repeater('contact in contacts').row(2))
       *          .element(by.model('contact.value'))
       *          .getAttribute('value'))
       *          .toBe('yourname@example.org');
       *    });
       *  </file>
       *</example>
      
       */
      var ngControllerDirective = [function () {
        return {
          restrict: 'A',
          scope: true,
          controller: '@',
          priority: 500
        };
      }];

      /**
       * @ngdoc directive
       * @name ngCsp
       *
       * @element html
       * @description
       *
       * Angular has some features that can break certain
       * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
       *
       * If you intend to implement these rules then you must tell Angular not to use these features.
       *
       * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
       *
       *
       * The following rules affect Angular:
       *
       * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
       * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
       * increase in the speed of evaluating Angular expressions.
       *
       * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
       * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
       * To make these directives work when a CSP rule is blocking inline styles, you must link to the
       * `angular-csp.css` in your HTML manually.
       *
       * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
       * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
       * however, triggers a CSP error to be logged in the console:
       *
       * ```
       * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
       * script in the following Content Security Policy directive: "default-src 'self'". Note that
       * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
       * ```
       *
       * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
       * directive on an element of the HTML document that appears before the `<script>` tag that loads
       * the `angular.js` file.
       *
       * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
       *
       * You can specify which of the CSP related Angular features should be deactivated by providing
       * a value for the `ng-csp` attribute. The options are as follows:
       *
       * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
       *
       * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
       *
       * You can use these values in the following combinations:
       *
       *
       * * No declaration means that Angular will assume that you can do inline styles, but it will do
       * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
       * of Angular.
       *
       * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
       * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
       * of Angular.
       *
       * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
       * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
       *
       * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
       * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
       *
       * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
       * styles nor use eval, which is the same as an empty: ng-csp.
       * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
       *
       * @example
       * This example shows how to apply the `ngCsp` directive to the `html` tag.
         ```html
           <!doctype html>
           <html ng-app ng-csp>
           ...
           ...
           </html>
         ```
        * @example
            // Note: the suffix `.csp` in the example name triggers
            // csp mode in our http server!
            <example name="example.csp" module="cspExample" ng-csp="true">
              <file name="index.html">
                <div ng-controller="MainController as ctrl">
                  <div>
                    <button ng-click="ctrl.inc()" id="inc">Increment</button>
                    <span id="counter">
                      {{ctrl.counter}}
                    </span>
                  </div>
      
                  <div>
                    <button ng-click="ctrl.evil()" id="evil">Evil</button>
                    <span id="evilError">
                      {{ctrl.evilError}}
                    </span>
                  </div>
                </div>
              </file>
              <file name="script.js">
                 angular.module('cspExample', [])
                   .controller('MainController', function() {
                      this.counter = 0;
                      this.inc = function() {
                        this.counter++;
                      };
                      this.evil = function() {
                        // jshint evil:true
                        try {
                          eval('1+2');
                        } catch (e) {
                          this.evilError = e.message;
                        }
                      };
                    });
              </file>
              <file name="protractor.js" type="protractor">
                var util, webdriver;
      
                var incBtn = element(by.id('inc'));
                var counter = element(by.id('counter'));
                var evilBtn = element(by.id('evil'));
                var evilError = element(by.id('evilError'));
      
                function getAndClearSevereErrors() {
                  return browser.manage().logs().get('browser').then(function(browserLog) {
                    return browserLog.filter(function(logEntry) {
                      return logEntry.level.value > webdriver.logging.Level.WARNING.value;
                    });
                  });
                }
      
                function clearErrors() {
                  getAndClearSevereErrors();
                }
      
                function expectNoErrors() {
                  getAndClearSevereErrors().then(function(filteredLog) {
                    expect(filteredLog.length).toEqual(0);
                    if (filteredLog.length) {
                      console.log('browser console errors: ' + util.inspect(filteredLog));
                    }
                  });
                }
      
                function expectError(regex) {
                  getAndClearSevereErrors().then(function(filteredLog) {
                    var found = false;
                    filteredLog.forEach(function(log) {
                      if (log.message.match(regex)) {
                        found = true;
                      }
                    });
                    if (!found) {
                      throw new Error('expected an error that matches ' + regex);
                    }
                  });
                }
      
                beforeEach(function() {
                  util = require('util');
                  webdriver = require('protractor/node_modules/selenium-webdriver');
                });
      
                // For now, we only test on Chrome,
                // as Safari does not load the page with Protractor's injected scripts,
                // and Firefox webdriver always disables content security policy (#6358)
                if (browser.params.browser !== 'chrome') {
                  return;
                }
      
                it('should not report errors when the page is loaded', function() {
                  // clear errors so we are not dependent on previous tests
                  clearErrors();
                  // Need to reload the page as the page is already loaded when
                  // we come here
                  browser.driver.getCurrentUrl().then(function(url) {
                    browser.get(url);
                  });
                  expectNoErrors();
                });
      
                it('should evaluate expressions', function() {
                  expect(counter.getText()).toEqual('0');
                  incBtn.click();
                  expect(counter.getText()).toEqual('1');
                  expectNoErrors();
                });
      
                it('should throw and report an error when using "eval"', function() {
                  evilBtn.click();
                  expect(evilError.getText()).toMatch(/Content Security Policy/);
                  expectError(/Content Security Policy/);
                });
              </file>
            </example>
        */

      // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
      // bootstrap the system (before $parse is instantiated), for this reason we just have
      // the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

      /**
       * @ngdoc directive
       * @name ngClick
       *
       * @description
       * The ngClick directive allows you to specify custom behavior when
       * an element is clicked.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
       * click. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-click="count = count + 1" ng-init="count=0">
              Increment
            </button>
            <span>
              count: {{count}}
            </span>
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-click', function() {
               expect(element(by.binding('count')).getText()).toMatch('0');
               element(by.css('button')).click();
               expect(element(by.binding('count')).getText()).toMatch('1');
             });
           </file>
         </example>
       */
      /*
       * A collection of directives that allows creation of custom event handlers that are defined as
       * angular expressions and are compiled and executed within the current scope.
       */
      var ngEventDirectives = {};

      // For events that might fire synchronously during DOM manipulation
      // we need to execute their event handlers asynchronously using $evalAsync,
      // so that they are not executed in an inconsistent state.
      var forceAsyncEvents = {
        'blur': true,
        'focus': true
      };
      forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
        var directiveName = directiveNormalize('ng-' + eventName);
        ngEventDirectives[directiveName] = ['$parse', '$rootScope', function ($parse, $rootScope) {
          return {
            restrict: 'A',
            compile: function ($element, attr) {
              // We expose the powerful $event object on the scope that provides access to the Window,
              // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
              // checks at the cost of speed since event handler expressions are not executed as
              // frequently as regular change detection.
              var fn = $parse(attr[directiveName], /* interceptorFn */null, /* expensiveChecks */true);
              return function ngEventHandler(scope, element) {
                element.on(eventName, function (event) {
                  var callback = function () {
                    fn(scope, { $event: event });
                  };
                  if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                    scope.$evalAsync(callback);
                  } else {
                    scope.$apply(callback);
                  }
                });
              };
            }
          };
        }];
      });

      /**
       * @ngdoc directive
       * @name ngDblclick
       *
       * @description
       * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
       * a dblclick. (The Event object is available as `$event`)
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-dblclick="count = count + 1" ng-init="count=0">
              Increment (on double click)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMousedown
       *
       * @description
       * The ngMousedown directive allows you to specify custom behavior on mousedown event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
       * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mousedown="count = count + 1" ng-init="count=0">
              Increment (on mouse down)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMouseup
       *
       * @description
       * Specify custom behavior on mouseup event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
       * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mouseup="count = count + 1" ng-init="count=0">
              Increment (on mouse up)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMouseover
       *
       * @description
       * Specify custom behavior on mouseover event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
       * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mouseover="count = count + 1" ng-init="count=0">
              Increment (when mouse is over)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMouseenter
       *
       * @description
       * Specify custom behavior on mouseenter event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
       * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mouseenter="count = count + 1" ng-init="count=0">
              Increment (when mouse enters)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMouseleave
       *
       * @description
       * Specify custom behavior on mouseleave event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
       * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mouseleave="count = count + 1" ng-init="count=0">
              Increment (when mouse leaves)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngMousemove
       *
       * @description
       * Specify custom behavior on mousemove event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
       * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <button ng-mousemove="count = count + 1" ng-init="count=0">
              Increment (when mouse moves)
            </button>
            count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngKeydown
       *
       * @description
       * Specify custom behavior on keydown event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
       * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
       *
       * @example
         <example>
           <file name="index.html">
            <input ng-keydown="count = count + 1" ng-init="count=0">
            key down count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngKeyup
       *
       * @description
       * Specify custom behavior on keyup event.
       *
       * @element ANY
       * @priority 0
       * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
       * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
       *
       * @example
         <example>
           <file name="index.html">
             <p>Typing in the input box below updates the key count</p>
             <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
      
             <p>Typing in the input box below updates the keycode</p>
             <input ng-keyup="event=$event">
             <p>event keyCode: {{ event.keyCode }}</p>
             <p>event altKey: {{ event.altKey }}</p>
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngKeypress
       *
       * @description
       * Specify custom behavior on keypress event.
       *
       * @element ANY
       * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
       * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
       * and can be interrogated for keyCode, altKey, etc.)
       *
       * @example
         <example>
           <file name="index.html">
            <input ng-keypress="count = count + 1" ng-init="count=0">
            key press count: {{count}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngSubmit
       *
       * @description
       * Enables binding angular expressions to onsubmit events.
       *
       * Additionally it prevents the default action (which for form means sending the request to the
       * server and reloading the current page), but only if the form does not contain `action`,
       * `data-action`, or `x-action` attributes.
       *
       * <div class="alert alert-warning">
       * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
       * `ngSubmit` handlers together. See the
       * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
       * for a detailed discussion of when `ngSubmit` may be triggered.
       * </div>
       *
       * @element form
       * @priority 0
       * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
       * ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example module="submitExample">
           <file name="index.html">
            <script>
              angular.module('submitExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.list = [];
                  $scope.text = 'hello';
                  $scope.submit = function() {
                    if ($scope.text) {
                      $scope.list.push(this.text);
                      $scope.text = '';
                    }
                  };
                }]);
            </script>
            <form ng-submit="submit()" ng-controller="ExampleController">
              Enter text and hit enter:
              <input type="text" ng-model="text" name="text" />
              <input type="submit" id="submit" value="Submit" />
              <pre>list={{list}}</pre>
            </form>
           </file>
           <file name="protractor.js" type="protractor">
             it('should check ng-submit', function() {
               expect(element(by.binding('list')).getText()).toBe('list=[]');
               element(by.css('#submit')).click();
               expect(element(by.binding('list')).getText()).toContain('hello');
               expect(element(by.model('text')).getAttribute('value')).toBe('');
             });
             it('should ignore empty strings', function() {
               expect(element(by.binding('list')).getText()).toBe('list=[]');
               element(by.css('#submit')).click();
               element(by.css('#submit')).click();
               expect(element(by.binding('list')).getText()).toContain('hello');
              });
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngFocus
       *
       * @description
       * Specify custom behavior on focus event.
       *
       * Note: As the `focus` event is executed synchronously when calling `input.focus()`
       * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
       * during an `$apply` to ensure a consistent state.
       *
       * @element window, input, select, textarea, a
       * @priority 0
       * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
       * focus. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
       * See {@link ng.directive:ngClick ngClick}
       */

      /**
       * @ngdoc directive
       * @name ngBlur
       *
       * @description
       * Specify custom behavior on blur event.
       *
       * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
       * an element has lost focus.
       *
       * Note: As the `blur` event is executed synchronously also during DOM manipulations
       * (e.g. removing a focussed input),
       * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
       * during an `$apply` to ensure a consistent state.
       *
       * @element window, input, select, textarea, a
       * @priority 0
       * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
       * blur. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
       * See {@link ng.directive:ngClick ngClick}
       */

      /**
       * @ngdoc directive
       * @name ngCopy
       *
       * @description
       * Specify custom behavior on copy event.
       *
       * @element window, input, select, textarea, a
       * @priority 0
       * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
       * copy. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
            copied: {{copied}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngCut
       *
       * @description
       * Specify custom behavior on cut event.
       *
       * @element window, input, select, textarea, a
       * @priority 0
       * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
       * cut. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
            cut: {{cut}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngPaste
       *
       * @description
       * Specify custom behavior on paste event.
       *
       * @element window, input, select, textarea, a
       * @priority 0
       * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
       * paste. ({@link guide/expression#-event- Event object is available as `$event`})
       *
       * @example
         <example>
           <file name="index.html">
            <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
            pasted: {{paste}}
           </file>
         </example>
       */

      /**
       * @ngdoc directive
       * @name ngIf
       * @restrict A
       * @multiElement
       *
       * @description
       * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
       * {expression}. If the expression assigned to `ngIf` evaluates to a false
       * value then the element is removed from the DOM, otherwise a clone of the
       * element is reinserted into the DOM.
       *
       * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
       * element in the DOM rather than changing its visibility via the `display` css property.  A common
       * case when this difference is significant is when using css selectors that rely on an element's
       * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
       *
       * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
       * is created when the element is restored.  The scope created within `ngIf` inherits from
       * its parent scope using
       * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
       * An important implication of this is if `ngModel` is used within `ngIf` to bind to
       * a javascript primitive defined in the parent scope. In this case any modifications made to the
       * variable within the child scope will override (hide) the value in the parent scope.
       *
       * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
       * is if an element's class attribute is directly modified after it's compiled, using something like
       * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
       * the added class will be lost because the original compiled state is used to regenerate the element.
       *
       * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
       * and `leave` effects.
       *
       * @animations
       * | Animation                        | Occurs                               |
       * |----------------------------------|-------------------------------------|
       * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
       * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
       *
       * @element ANY
       * @scope
       * @priority 600
       * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
       *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
       *     element is added to the DOM tree.
       *
       * @example
        <example module="ngAnimate" deps="angular-animate.js" animations="true">
          <file name="index.html">
            <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
            Show when checked:
            <span ng-if="checked" class="animate-if">
              This is removed when the checkbox is unchecked.
            </span>
          </file>
          <file name="animations.css">
            .animate-if {
              background:white;
              border:1px solid black;
              padding:10px;
            }
      
            .animate-if.ng-enter, .animate-if.ng-leave {
              transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
            }
      
            .animate-if.ng-enter,
            .animate-if.ng-leave.ng-leave-active {
              opacity:0;
            }
      
            .animate-if.ng-leave,
            .animate-if.ng-enter.ng-enter-active {
              opacity:1;
            }
          </file>
        </example>
       */
      var ngIfDirective = ['$animate', '$compile', function ($animate, $compile) {
        return {
          multiElement: true,
          transclude: 'element',
          priority: 600,
          terminal: true,
          restrict: 'A',
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var block, childScope, previousElements;
            $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

              if (value) {
                if (!childScope) {
                  $transclude(function (clone, newScope) {
                    childScope = newScope;
                    clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block = {
                      clone: clone
                    };
                    $animate.enter(clone, $element.parent(), $element);
                  });
                }
              } else {
                if (previousElements) {
                  previousElements.remove();
                  previousElements = null;
                }
                if (childScope) {
                  childScope.$destroy();
                  childScope = null;
                }
                if (block) {
                  previousElements = getBlockNodes(block.clone);
                  $animate.leave(previousElements).then(function () {
                    previousElements = null;
                  });
                  block = null;
                }
              }
            });
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngInclude
       * @restrict ECA
       *
       * @description
       * Fetches, compiles and includes an external HTML fragment.
       *
       * By default, the template URL is restricted to the same domain and protocol as the
       * application document. This is done by calling {@link $sce#getTrustedResourceUrl
       * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
       * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
       * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
       * ng.$sce Strict Contextual Escaping}.
       *
       * In addition, the browser's
       * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
       * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
       * policy may further restrict whether the template is successfully loaded.
       * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
       * access on some browsers.
       *
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
       * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
       *
       * The enter and leave animation occur concurrently.
       *
       * @scope
       * @priority 400
       *
       * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
       *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
       * @param {string=} onload Expression to evaluate when a new partial is loaded.
       *                  <div class="alert alert-warning">
       *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
       *                  a function with the name on the window element, which will usually throw a
       *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
       *                  different form that {@link guide/directive#normalization matches} `onload`.
       *                  </div>
         *
       * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
       *                  $anchorScroll} to scroll the viewport after the content is loaded.
       *
       *                  - If the attribute is not set, disable scrolling.
       *                  - If the attribute is set without value, enable scrolling.
       *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
       *
       * @example
        <example module="includeExample" deps="angular-animate.js" animations="true">
          <file name="index.html">
           <div ng-controller="ExampleController">
             <select ng-model="template" ng-options="t.name for t in templates">
              <option value="">(blank)</option>
             </select>
             url of the template: <code>{{template.url}}</code>
             <hr/>
             <div class="slide-animate-container">
               <div class="slide-animate" ng-include="template.url"></div>
             </div>
           </div>
          </file>
          <file name="script.js">
            angular.module('includeExample', ['ngAnimate'])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.templates =
                  [ { name: 'template1.html', url: 'template1.html'},
                    { name: 'template2.html', url: 'template2.html'} ];
                $scope.template = $scope.templates[0];
              }]);
           </file>
          <file name="template1.html">
            Content of template1.html
          </file>
          <file name="template2.html">
            Content of template2.html
          </file>
          <file name="animations.css">
            .slide-animate-container {
              position:relative;
              background:white;
              border:1px solid black;
              height:40px;
              overflow:hidden;
            }
      
            .slide-animate {
              padding:10px;
            }
      
            .slide-animate.ng-enter, .slide-animate.ng-leave {
              transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      
              position:absolute;
              top:0;
              left:0;
              right:0;
              bottom:0;
              display:block;
              padding:10px;
            }
      
            .slide-animate.ng-enter {
              top:-50px;
            }
            .slide-animate.ng-enter.ng-enter-active {
              top:0;
            }
      
            .slide-animate.ng-leave {
              top:0;
            }
            .slide-animate.ng-leave.ng-leave-active {
              top:50px;
            }
          </file>
          <file name="protractor.js" type="protractor">
            var templateSelect = element(by.model('template'));
            var includeElem = element(by.css('[ng-include]'));
      
            it('should load template1.html', function() {
              expect(includeElem.getText()).toMatch(/Content of template1.html/);
            });
      
            it('should load template2.html', function() {
              if (browser.params.browser == 'firefox') {
                // Firefox can't handle using selects
                // See https://github.com/angular/protractor/issues/480
                return;
              }
              templateSelect.click();
              templateSelect.all(by.css('option')).get(2).click();
              expect(includeElem.getText()).toMatch(/Content of template2.html/);
            });
      
            it('should change to blank', function() {
              if (browser.params.browser == 'firefox') {
                // Firefox can't handle using selects
                return;
              }
              templateSelect.click();
              templateSelect.all(by.css('option')).get(0).click();
              expect(includeElem.isPresent()).toBe(false);
            });
          </file>
        </example>
       */

      /**
       * @ngdoc event
       * @name ngInclude#$includeContentRequested
       * @eventType emit on the scope ngInclude was declared in
       * @description
       * Emitted every time the ngInclude content is requested.
       *
       * @param {Object} angularEvent Synthetic event object.
       * @param {String} src URL of content to load.
       */

      /**
       * @ngdoc event
       * @name ngInclude#$includeContentLoaded
       * @eventType emit on the current ngInclude scope
       * @description
       * Emitted every time the ngInclude content is reloaded.
       *
       * @param {Object} angularEvent Synthetic event object.
       * @param {String} src URL of content to load.
       */

      /**
       * @ngdoc event
       * @name ngInclude#$includeContentError
       * @eventType emit on the scope ngInclude was declared in
       * @description
       * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
       *
       * @param {Object} angularEvent Synthetic event object.
       * @param {String} src URL of content to load.
       */
      var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', function ($templateRequest, $anchorScroll, $animate) {
        return {
          restrict: 'ECA',
          priority: 400,
          terminal: true,
          transclude: 'element',
          controller: angular.noop,
          compile: function (element, attr) {
            var srcExp = attr.ngInclude || attr.src,
                onloadExp = attr.onload || '',
                autoScrollExp = attr.autoscroll;

            return function (scope, $element, $attr, ctrl, $transclude) {
              var changeCounter = 0,
                  currentScope,
                  previousElement,
                  currentElement;

              var cleanupLastIncludeContent = function () {
                if (previousElement) {
                  previousElement.remove();
                  previousElement = null;
                }
                if (currentScope) {
                  currentScope.$destroy();
                  currentScope = null;
                }
                if (currentElement) {
                  $animate.leave(currentElement).then(function () {
                    previousElement = null;
                  });
                  previousElement = currentElement;
                  currentElement = null;
                }
              };

              scope.$watch(srcExp, function ngIncludeWatchAction(src) {
                var afterAnimation = function () {
                  if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                };
                var thisChangeId = ++changeCounter;

                if (src) {
                  //set the 2nd param to true to ignore the template request error so that the inner
                  //contents and scope can be cleaned up.
                  $templateRequest(src, true).then(function (response) {
                    if (scope.$$destroyed) return;

                    if (thisChangeId !== changeCounter) return;
                    var newScope = scope.$new();
                    ctrl.template = response;

                    // Note: This will also link all children of ng-include that were contained in the original
                    // html. If that content contains controllers, ... they could pollute/change the scope.
                    // However, using ng-include on an element with additional content does not make sense...
                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                    // function is called before linking the content, which would apply child
                    // directives to non existing elements.
                    var clone = $transclude(newScope, function (clone) {
                      cleanupLastIncludeContent();
                      $animate.enter(clone, null, $element).then(afterAnimation);
                    });

                    currentScope = newScope;
                    currentElement = clone;

                    currentScope.$emit('$includeContentLoaded', src);
                    scope.$eval(onloadExp);
                  }, function () {
                    if (scope.$$destroyed) return;

                    if (thisChangeId === changeCounter) {
                      cleanupLastIncludeContent();
                      scope.$emit('$includeContentError', src);
                    }
                  });
                  scope.$emit('$includeContentRequested', src);
                } else {
                  cleanupLastIncludeContent();
                  ctrl.template = null;
                }
              });
            };
          }
        };
      }];

      // This directive is called during the $transclude call of the first `ngInclude` directive.
      // It will replace and compile the content of the element with the loaded template.
      // We need this directive so that the element content is already filled when
      // the link function of another directive on the same element as ngInclude
      // is called.
      var ngIncludeFillContentDirective = ['$compile', function ($compile) {
        return {
          restrict: 'ECA',
          priority: -400,
          require: 'ngInclude',
          link: function (scope, $element, $attr, ctrl) {
            if (toString.call($element[0]).match(/SVG/)) {
              // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
              // support innerHTML, so detect this here and try to generate the contents
              // specially.
              $element.empty();
              $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                $element.append(clone);
              }, { futureParentElement: $element });
              return;
            }

            $element.html(ctrl.template);
            $compile($element.contents())(scope);
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngInit
       * @restrict AC
       *
       * @description
       * The `ngInit` directive allows you to evaluate an expression in the
       * current scope.
       *
       * <div class="alert alert-danger">
       * This directive can be abused to add unnecessary amounts of logic into your templates.
       * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
       * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
       * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
       * rather than `ngInit` to initialize values on a scope.
       * </div>
       *
       * <div class="alert alert-warning">
       * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
       * sure you have parentheses to ensure correct operator precedence:
       * <pre class="prettyprint">
       * `<div ng-init="test1 = ($index | toString)"></div>`
       * </pre>
       * </div>
       *
       * @priority 450
       *
       * @element ANY
       * @param {expression} ngInit {@link guide/expression Expression} to eval.
       *
       * @example
         <example module="initExample">
           <file name="index.html">
         <script>
           angular.module('initExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.list = [['a', 'b'], ['c', 'd']];
             }]);
         </script>
         <div ng-controller="ExampleController">
           <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
             <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
                <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
             </div>
           </div>
         </div>
           </file>
           <file name="protractor.js" type="protractor">
             it('should alias index positions', function() {
               var elements = element.all(by.css('.example-init'));
               expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
               expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
               expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
               expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
             });
           </file>
         </example>
       */
      var ngInitDirective = ngDirective({
        priority: 450,
        compile: function () {
          return {
            pre: function (scope, element, attrs) {
              scope.$eval(attrs.ngInit);
            }
          };
        }
      });

      /**
       * @ngdoc directive
       * @name ngList
       *
       * @description
       * Text input that converts between a delimited string and an array of strings. The default
       * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
       * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
       *
       * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
       * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
       *   list item is respected. This implies that the user of the directive is responsible for
       *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
       *   tab or newline character.
       * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
       *   when joining the list items back together) and whitespace around each list item is stripped
       *   before it is added to the model.
       *
       * ### Example with Validation
       *
       * <example name="ngList-directive" module="listExample">
       *   <file name="app.js">
       *      angular.module('listExample', [])
       *        .controller('ExampleController', ['$scope', function($scope) {
       *          $scope.names = ['morpheus', 'neo', 'trinity'];
       *        }]);
       *   </file>
       *   <file name="index.html">
       *    <form name="myForm" ng-controller="ExampleController">
       *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
       *      <span role="alert">
       *        <span class="error" ng-show="myForm.namesInput.$error.required">
       *        Required!</span>
       *      </span>
       *      <br>
       *      <tt>names = {{names}}</tt><br/>
       *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
       *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
       *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       *     </form>
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *     var listInput = element(by.model('names'));
       *     var names = element(by.exactBinding('names'));
       *     var valid = element(by.binding('myForm.namesInput.$valid'));
       *     var error = element(by.css('span.error'));
       *
       *     it('should initialize to model', function() {
       *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
       *       expect(valid.getText()).toContain('true');
       *       expect(error.getCssValue('display')).toBe('none');
       *     });
       *
       *     it('should be invalid if empty', function() {
       *       listInput.clear();
       *       listInput.sendKeys('');
       *
       *       expect(names.getText()).toContain('');
       *       expect(valid.getText()).toContain('false');
       *       expect(error.getCssValue('display')).not.toBe('none');
       *     });
       *   </file>
       * </example>
       *
       * ### Example - splitting on newline
       * <example name="ngList-directive-newlines">
       *   <file name="index.html">
       *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
       *    <pre>{{ list | json }}</pre>
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *     it("should split the text by newlines", function() {
       *       var listInput = element(by.model('list'));
       *       var output = element(by.binding('list | json'));
       *       listInput.sendKeys('abc\ndef\nghi');
       *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
       *     });
       *   </file>
       * </example>
       *
       * @element input
       * @param {string=} ngList optional delimiter that should be used to split the value.
       */
      var ngListDirective = function () {
        return {
          restrict: 'A',
          priority: 100,
          require: 'ngModel',
          link: function (scope, element, attr, ctrl) {
            // We want to control whitespace trimming so we use this convoluted approach
            // to access the ngList attribute, which doesn't pre-trim the attribute
            var ngList = element.attr(attr.$attr.ngList) || ', ';
            var trimValues = attr.ngTrim !== 'false';
            var separator = trimValues ? trim(ngList) : ngList;

            var parse = function (viewValue) {
              // If the viewValue is invalid (say required but empty) it will be `undefined`
              if (isUndefined(viewValue)) return;

              var list = [];

              if (viewValue) {
                forEach(viewValue.split(separator), function (value) {
                  if (value) list.push(trimValues ? trim(value) : value);
                });
              }

              return list;
            };

            ctrl.$parsers.push(parse);
            ctrl.$formatters.push(function (value) {
              if (isArray(value)) {
                return value.join(ngList);
              }

              return undefined;
            });

            // Override the standard $isEmpty because an empty array means the input is empty.
            ctrl.$isEmpty = function (value) {
              return !value || !value.length;
            };
          }
        };
      };

      /* global VALID_CLASS: true,
        INVALID_CLASS: true,
        PRISTINE_CLASS: true,
        DIRTY_CLASS: true,
        UNTOUCHED_CLASS: true,
        TOUCHED_CLASS: true,
      */

      var VALID_CLASS = 'ng-valid',
          INVALID_CLASS = 'ng-invalid',
          PRISTINE_CLASS = 'ng-pristine',
          DIRTY_CLASS = 'ng-dirty',
          UNTOUCHED_CLASS = 'ng-untouched',
          TOUCHED_CLASS = 'ng-touched',
          PENDING_CLASS = 'ng-pending',
          EMPTY_CLASS = 'ng-empty',
          NOT_EMPTY_CLASS = 'ng-not-empty';

      var ngModelMinErr = minErr('ngModel');

      /**
       * @ngdoc type
       * @name ngModel.NgModelController
       *
       * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
       * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
       * is set.
       * @property {*} $modelValue The value in the model that the control is bound to.
       * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
             the control reads value from the DOM. The functions are called in array order, each passing
             its return value through to the next. The last return value is forwarded to the
             {@link ngModel.NgModelController#$validators `$validators`} collection.
      
      Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
      `$viewValue`}.
      
      Returning `undefined` from a parser means a parse error occurred. In that case,
      no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
      will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
      is set to `true`. The parse error is stored in `ngModel.$error.parse`.
      
       *
       * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
             the model value changes. The functions are called in reverse array order, each passing the value through to the
             next. The last return value is used as the actual DOM value.
             Used to format / convert values for display in the control.
       * ```js
       * function formatter(value) {
       *   if (value) {
       *     return value.toUpperCase();
       *   }
       * }
       * ngModel.$formatters.push(formatter);
       * ```
       *
       * @property {Object.<string, function>} $validators A collection of validators that are applied
       *      whenever the model value changes. The key value within the object refers to the name of the
       *      validator while the function refers to the validation operation. The validation operation is
       *      provided with the model value as an argument and must return a true or false value depending
       *      on the response of that validation.
       *
       * ```js
       * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
       *   var value = modelValue || viewValue;
       *   return /[0-9]+/.test(value) &&
       *          /[a-z]+/.test(value) &&
       *          /[A-Z]+/.test(value) &&
       *          /\W+/.test(value);
       * };
       * ```
       *
       * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
       *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
       *      is expected to return a promise when it is run during the model validation process. Once the promise
       *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
       *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
       *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
       *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
       *      will only run once all synchronous validators have passed.
       *
       * Please note that if $http is used then it is important that the server returns a success HTTP response code
       * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
       *
       * ```js
       * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
       *   var value = modelValue || viewValue;
       *
       *   // Lookup user by username
       *   return $http.get('/api/users/' + value).
       *      then(function resolved() {
       *        //username exists, this means validation fails
       *        return $q.reject('exists');
       *      }, function rejected() {
       *        //username does not exist, therefore this validation passes
       *        return true;
       *      });
       * };
       * ```
       *
       * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
       *     view value has changed. It is called with no arguments, and its return value is ignored.
       *     This can be used in place of additional $watches against the model value.
       *
       * @property {Object} $error An object hash with all failing validator ids as keys.
       * @property {Object} $pending An object hash with all pending validator ids as keys.
       *
       * @property {boolean} $untouched True if control has not lost focus yet.
       * @property {boolean} $touched True if control has lost focus.
       * @property {boolean} $pristine True if user has not interacted with the control yet.
       * @property {boolean} $dirty True if user has already interacted with the control.
       * @property {boolean} $valid True if there is no error.
       * @property {boolean} $invalid True if at least one error on the control.
       * @property {string} $name The name attribute of the control.
       *
       * @description
       *
       * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
       * The controller contains services for data-binding, validation, CSS updates, and value formatting
       * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
       * listening to DOM events.
       * Such DOM related logic should be provided by other directives which make use of
       * `NgModelController` for data-binding to control elements.
       * Angular provides this DOM logic for most {@link input `input`} elements.
       * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
       * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
       *
       * @example
       * ### Custom Control Example
       * This example shows how to use `NgModelController` with a custom control to achieve
       * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
       * collaborate together to achieve the desired result.
       *
       * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
       * contents be edited in place by the user.
       *
       * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
       * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
       * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
       * that content using the `$sce` service.
       *
       * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
          <file name="style.css">
            [contenteditable] {
              border: 1px solid black;
              background-color: white;
              min-height: 20px;
            }
      
            .ng-invalid {
              border: 1px solid red;
            }
      
          </file>
          <file name="script.js">
            angular.module('customControl', ['ngSanitize']).
              directive('contenteditable', ['$sce', function($sce) {
                return {
                  restrict: 'A', // only activate on element attribute
                  require: '?ngModel', // get a hold of NgModelController
                  link: function(scope, element, attrs, ngModel) {
                    if (!ngModel) return; // do nothing if no ng-model
      
                    // Specify how UI should be updated
                    ngModel.$render = function() {
                      element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
                    };
      
                    // Listen for change events to enable binding
                    element.on('blur keyup change', function() {
                      scope.$evalAsync(read);
                    });
                    read(); // initialize
      
                    // Write data to the model
                    function read() {
                      var html = element.html();
                      // When we clear the content editable the browser leaves a <br> behind
                      // If strip-br attribute is provided then we strip this out
                      if ( attrs.stripBr && html == '<br>' ) {
                        html = '';
                      }
                      ngModel.$setViewValue(html);
                    }
                  }
                };
              }]);
          </file>
          <file name="index.html">
            <form name="myForm">
             <div contenteditable
                  name="myWidget" ng-model="userContent"
                  strip-br="true"
                  required>Change me!</div>
              <span ng-show="myForm.myWidget.$error.required">Required!</span>
             <hr>
             <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
            </form>
          </file>
          <file name="protractor.js" type="protractor">
          it('should data-bind and become invalid', function() {
            if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
              // SafariDriver can't handle contenteditable
              // and Firefox driver can't clear contenteditables very well
              return;
            }
            var contentEditable = element(by.css('[contenteditable]'));
            var content = 'Change me!';
      
            expect(contentEditable.getText()).toEqual(content);
      
            contentEditable.clear();
            contentEditable.sendKeys(protractor.Key.BACK_SPACE);
            expect(contentEditable.getText()).toEqual('');
            expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
          });
          </file>
       * </example>
       *
       *
       */
      var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate', function ($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = true;
        this.$touched = false;
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$error = {}; // keep invalid keys here
        this.$$success = {}; // keep valid keys here
        this.$pending = undefined; // keep pending keys here
        this.$name = $interpolate($attr.name || '', false)($scope);
        this.$$parentForm = nullFormCtrl;

        var parsedNgModel = $parse($attr.ngModel),
            parsedNgModelAssign = parsedNgModel.assign,
            ngModelGet = parsedNgModel,
            ngModelSet = parsedNgModelAssign,
            pendingDebounce = null,
            parserValid,
            ctrl = this;

        this.$$setOptions = function (options) {
          ctrl.$options = options;
          if (options && options.getterSetter) {
            var invokeModelGetter = $parse($attr.ngModel + '()'),
                invokeModelSetter = $parse($attr.ngModel + '($$$p)');

            ngModelGet = function ($scope) {
              var modelValue = parsedNgModel($scope);
              if (isFunction(modelValue)) {
                modelValue = invokeModelGetter($scope);
              }
              return modelValue;
            };
            ngModelSet = function ($scope, newValue) {
              if (isFunction(parsedNgModel($scope))) {
                invokeModelSetter($scope, { $$$p: newValue });
              } else {
                parsedNgModelAssign($scope, newValue);
              }
            };
          } else if (!parsedNgModel.assign) {
            throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}", $attr.ngModel, startingTag($element));
          }
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$render
         *
         * @description
         * Called when the view needs to be updated. It is expected that the user of the ng-model
         * directive will implement this method.
         *
         * The `$render()` method is invoked in the following situations:
         *
         * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
         *   committed value then `$render()` is called to update the input control.
         * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
         *   the `$viewValue` are different from last time.
         *
         * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
         * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
         * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
         * invoked if you only change a property on the objects.
         */
        this.$render = noop;

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$isEmpty
         *
         * @description
         * This is called when we need to determine if the value of an input is empty.
         *
         * For instance, the required directive does this to work out if the input has data or not.
         *
         * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
         *
         * You can override this for input directives whose concept of being empty is different from the
         * default. The `checkboxInputType` directive does this because in its case a value of `false`
         * implies empty.
         *
         * @param {*} value The value of the input to check for emptiness.
         * @returns {boolean} True if `value` is "empty".
         */
        this.$isEmpty = function (value) {
          return isUndefined(value) || value === '' || value === null || value !== value;
        };

        this.$$updateEmptyClasses = function (value) {
          if (ctrl.$isEmpty(value)) {
            $animate.removeClass($element, NOT_EMPTY_CLASS);
            $animate.addClass($element, EMPTY_CLASS);
          } else {
            $animate.removeClass($element, EMPTY_CLASS);
            $animate.addClass($element, NOT_EMPTY_CLASS);
          }
        };

        var currentValidationRunId = 0;

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setValidity
         *
         * @description
         * Change the validity state, and notify the form.
         *
         * This method can be called within $parsers/$formatters or a custom validation implementation.
         * However, in most cases it should be sufficient to use the `ngModel.$validators` and
         * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
         *
         * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
         *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
         *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
         *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
         *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
         *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
         * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
         *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
         *                          Skipped is used by Angular when validators do not run because of parse errors and
         *                          when `$asyncValidators` do not run because any of the `$validators` failed.
         */
        addSetValidityMethod({
          ctrl: this,
          $element: $element,
          set: function (object, property) {
            object[property] = true;
          },
          unset: function (object, property) {
            delete object[property];
          },
          $animate: $animate
        });

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setPristine
         *
         * @description
         * Sets the control to its pristine state.
         *
         * This method can be called to remove the `ng-dirty` class and set the control to its pristine
         * state (`ng-pristine` class). A model is considered to be pristine when the control
         * has not been changed from when first compiled.
         */
        this.$setPristine = function () {
          ctrl.$dirty = false;
          ctrl.$pristine = true;
          $animate.removeClass($element, DIRTY_CLASS);
          $animate.addClass($element, PRISTINE_CLASS);
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setDirty
         *
         * @description
         * Sets the control to its dirty state.
         *
         * This method can be called to remove the `ng-pristine` class and set the control to its dirty
         * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
         * from when first compiled.
         */
        this.$setDirty = function () {
          ctrl.$dirty = true;
          ctrl.$pristine = false;
          $animate.removeClass($element, PRISTINE_CLASS);
          $animate.addClass($element, DIRTY_CLASS);
          ctrl.$$parentForm.$setDirty();
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setUntouched
         *
         * @description
         * Sets the control to its untouched state.
         *
         * This method can be called to remove the `ng-touched` class and set the control to its
         * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
         * by default, however this function can be used to restore that state if the model has
         * already been touched by the user.
         */
        this.$setUntouched = function () {
          ctrl.$touched = false;
          ctrl.$untouched = true;
          $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setTouched
         *
         * @description
         * Sets the control to its touched state.
         *
         * This method can be called to remove the `ng-untouched` class and set the control to its
         * touched state (`ng-touched` class). A model is considered to be touched when the user has
         * first focused the control element and then shifted focus away from the control (blur event).
         */
        this.$setTouched = function () {
          ctrl.$touched = true;
          ctrl.$untouched = false;
          $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$rollbackViewValue
         *
         * @description
         * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
         * which may be caused by a pending debounced event or because the input is waiting for a some
         * future event.
         *
         * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
         * depend on special events such as blur, you can have a situation where there is a period when
         * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
         *
         * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
         * and reset the input to the last committed view value.
         *
         * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
         * programmatically before these debounced/future events have resolved/occurred, because Angular's
         * dirty checking mechanism is not able to tell whether the model has actually changed or not.
         *
         * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
         * input which may have such events pending. This is important in order to make sure that the
         * input field will be updated with the new model value and any pending operations are cancelled.
         *
         * <example name="ng-model-cancel-update" module="cancel-update-example">
         *   <file name="app.js">
         *     angular.module('cancel-update-example', [])
         *
         *     .controller('CancelUpdateController', ['$scope', function($scope) {
         *       $scope.model = {};
         *
         *       $scope.setEmpty = function(e, value, rollback) {
         *         if (e.keyCode == 27) {
         *           e.preventDefault();
         *           if (rollback) {
         *             $scope.myForm[value].$rollbackViewValue();
         *           }
         *           $scope.model[value] = '';
         *         }
         *       };
         *     }]);
         *   </file>
         *   <file name="index.html">
         *     <div ng-controller="CancelUpdateController">
         *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
         *        empty them. Follow these steps and observe the difference:</p>
         *       <ol>
         *         <li>Type something in the input. You will see that the model is not yet updated</li>
         *         <li>Press the Escape key.
         *           <ol>
         *             <li> In the first example, nothing happens, because the model is already '', and no
         *             update is detected. If you blur the input, the model will be set to the current view.
         *             </li>
         *             <li> In the second example, the pending update is cancelled, and the input is set back
         *             to the last committed view value (''). Blurring the input does nothing.
         *             </li>
         *           </ol>
         *         </li>
         *       </ol>
         *
         *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
         *         <div>
         *        <p id="inputDescription1">Without $rollbackViewValue():</p>
         *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
         *                ng-keydown="setEmpty($event, 'value1')">
         *         value1: "{{ model.value1 }}"
         *         </div>
         *
         *         <div>
         *        <p id="inputDescription2">With $rollbackViewValue():</p>
         *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
         *                ng-keydown="setEmpty($event, 'value2', true)">
         *         value2: "{{ model.value2 }}"
         *         </div>
         *       </form>
         *     </div>
         *   </file>
             <file name="style.css">
                div {
                  display: table-cell;
                }
                div:nth-child(1) {
                  padding-right: 30px;
                }
               </file>
         * </example>
         */
        this.$rollbackViewValue = function () {
          $timeout.cancel(pendingDebounce);
          ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
          ctrl.$render();
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$validate
         *
         * @description
         * Runs each of the registered validators (first synchronous validators and then
         * asynchronous validators).
         * If the validity changes to invalid, the model will be set to `undefined`,
         * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
         * If the validity changes to valid, it will set the model to the last available valid
         * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
         */
        this.$validate = function () {
          // ignore $validate before model is initialized
          if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
            return;
          }

          var viewValue = ctrl.$$lastCommittedViewValue;
          // Note: we use the $$rawModelValue as $modelValue might have been
          // set to undefined during a view -> model update that found validation
          // errors. We can't parse the view here, since that could change
          // the model although neither viewValue nor the model on the scope changed
          var modelValue = ctrl.$$rawModelValue;

          var prevValid = ctrl.$valid;
          var prevModelValue = ctrl.$modelValue;

          var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

          ctrl.$$runValidators(modelValue, viewValue, function (allValid) {
            // If there was no change in validity, don't update the model
            // This prevents changing an invalid modelValue to undefined
            if (!allowInvalid && prevValid !== allValid) {
              // Note: Don't check ctrl.$valid here, as we could have
              // external validators (e.g. calculated on the server),
              // that just call $setValidity and need the model value
              // to calculate their validity.
              ctrl.$modelValue = allValid ? modelValue : undefined;

              if (ctrl.$modelValue !== prevModelValue) {
                ctrl.$$writeModelToScope();
              }
            }
          });
        };

        this.$$runValidators = function (modelValue, viewValue, doneCallback) {
          currentValidationRunId++;
          var localValidationRunId = currentValidationRunId;

          // check parser error
          if (!processParseErrors()) {
            validationDone(false);
            return;
          }
          if (!processSyncValidators()) {
            validationDone(false);
            return;
          }
          processAsyncValidators();

          function processParseErrors() {
            var errorKey = ctrl.$$parserName || 'parse';
            if (isUndefined(parserValid)) {
              setValidity(errorKey, null);
            } else {
              if (!parserValid) {
                forEach(ctrl.$validators, function (v, name) {
                  setValidity(name, null);
                });
                forEach(ctrl.$asyncValidators, function (v, name) {
                  setValidity(name, null);
                });
              }
              // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
              setValidity(errorKey, parserValid);
              return parserValid;
            }
            return true;
          }

          function processSyncValidators() {
            var syncValidatorsValid = true;
            forEach(ctrl.$validators, function (validator, name) {
              var result = validator(modelValue, viewValue);
              syncValidatorsValid = syncValidatorsValid && result;
              setValidity(name, result);
            });
            if (!syncValidatorsValid) {
              forEach(ctrl.$asyncValidators, function (v, name) {
                setValidity(name, null);
              });
              return false;
            }
            return true;
          }

          function processAsyncValidators() {
            var validatorPromises = [];
            var allValid = true;
            forEach(ctrl.$asyncValidators, function (validator, name) {
              var promise = validator(modelValue, viewValue);
              if (!isPromiseLike(promise)) {
                throw ngModelMinErr('nopromise', "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
              }
              setValidity(name, undefined);
              validatorPromises.push(promise.then(function () {
                setValidity(name, true);
              }, function () {
                allValid = false;
                setValidity(name, false);
              }));
            });
            if (!validatorPromises.length) {
              validationDone(true);
            } else {
              $q.all(validatorPromises).then(function () {
                validationDone(allValid);
              }, noop);
            }
          }

          function setValidity(name, isValid) {
            if (localValidationRunId === currentValidationRunId) {
              ctrl.$setValidity(name, isValid);
            }
          }

          function validationDone(allValid) {
            if (localValidationRunId === currentValidationRunId) {

              doneCallback(allValid);
            }
          }
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$commitViewValue
         *
         * @description
         * Commit a pending update to the `$modelValue`.
         *
         * Updates may be pending by a debounced event or because the input is waiting for a some future
         * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
         * usually handles calling this in response to input events.
         */
        this.$commitViewValue = function () {
          var viewValue = ctrl.$viewValue;

          $timeout.cancel(pendingDebounce);

          // If the view value has not changed then we should just exit, except in the case where there is
          // a native validator on the element. In this case the validation state may have changed even though
          // the viewValue has stayed empty.
          if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
            return;
          }
          ctrl.$$updateEmptyClasses(viewValue);
          ctrl.$$lastCommittedViewValue = viewValue;

          // change to dirty
          if (ctrl.$pristine) {
            this.$setDirty();
          }
          this.$$parseAndValidate();
        };

        this.$$parseAndValidate = function () {
          var viewValue = ctrl.$$lastCommittedViewValue;
          var modelValue = viewValue;
          parserValid = isUndefined(modelValue) ? undefined : true;

          if (parserValid) {
            for (var i = 0; i < ctrl.$parsers.length; i++) {
              modelValue = ctrl.$parsers[i](modelValue);
              if (isUndefined(modelValue)) {
                parserValid = false;
                break;
              }
            }
          }
          if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
            // ctrl.$modelValue has not been touched yet...
            ctrl.$modelValue = ngModelGet($scope);
          }
          var prevModelValue = ctrl.$modelValue;
          var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
          ctrl.$$rawModelValue = modelValue;

          if (allowInvalid) {
            ctrl.$modelValue = modelValue;
            writeToModelIfNeeded();
          }

          // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
          // This can happen if e.g. $setViewValue is called from inside a parser
          ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function (allValid) {
            if (!allowInvalid) {
              // Note: Don't check ctrl.$valid here, as we could have
              // external validators (e.g. calculated on the server),
              // that just call $setValidity and need the model value
              // to calculate their validity.
              ctrl.$modelValue = allValid ? modelValue : undefined;
              writeToModelIfNeeded();
            }
          });

          function writeToModelIfNeeded() {
            if (ctrl.$modelValue !== prevModelValue) {
              ctrl.$$writeModelToScope();
            }
          }
        };

        this.$$writeModelToScope = function () {
          ngModelSet($scope, ctrl.$modelValue);
          forEach(ctrl.$viewChangeListeners, function (listener) {
            try {
              listener();
            } catch (e) {
              $exceptionHandler(e);
            }
          });
        };

        /**
         * @ngdoc method
         * @name ngModel.NgModelController#$setViewValue
         *
         * @description
         * Update the view value.
         *
         * This method should be called when a control wants to change the view value; typically,
         * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
         * directive calls it when the value of the input changes and {@link ng.directive:select select}
         * calls it when an option is selected.
         *
         * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
         * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
         * value sent directly for processing, finally to be applied to `$modelValue` and then the
         * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
         * in the `$viewChangeListeners` list, are called.
         *
         * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
         * and the `default` trigger is not listed, all those actions will remain pending until one of the
         * `updateOn` events is triggered on the DOM element.
         * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
         * directive is used with a custom debounce for this particular event.
         * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
         * is specified, once the timer runs out.
         *
         * When used with standard inputs, the view value will always be a string (which is in some cases
         * parsed into another type, such as a `Date` object for `input[date]`.)
         * However, custom controls might also pass objects to this method. In this case, we should make
         * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
         * perform a deep watch of objects, it only looks for a change of identity. If you only change
         * the property of the object then ngModel will not realize that the object has changed and
         * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
         * not change properties of the copy once it has been passed to `$setViewValue`.
         * Otherwise you may cause the model value on the scope to change incorrectly.
         *
         * <div class="alert alert-info">
         * In any case, the value passed to the method should always reflect the current value
         * of the control. For example, if you are calling `$setViewValue` for an input element,
         * you should pass the input DOM value. Otherwise, the control and the scope model become
         * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
         * the control's DOM value in any way. If we want to change the control's DOM value
         * programmatically, we should update the `ngModel` scope expression. Its new value will be
         * picked up by the model controller, which will run it through the `$formatters`, `$render` it
         * to update the DOM, and finally call `$validate` on it.
         * </div>
         *
         * @param {*} value value from the view.
         * @param {string} trigger Event that triggered the update.
         */
        this.$setViewValue = function (value, trigger) {
          ctrl.$viewValue = value;
          if (!ctrl.$options || ctrl.$options.updateOnDefault) {
            ctrl.$$debounceViewValueCommit(trigger);
          }
        };

        this.$$debounceViewValueCommit = function (trigger) {
          var debounceDelay = 0,
              options = ctrl.$options,
              debounce;

          if (options && isDefined(options.debounce)) {
            debounce = options.debounce;
            if (isNumber(debounce)) {
              debounceDelay = debounce;
            } else if (isNumber(debounce[trigger])) {
              debounceDelay = debounce[trigger];
            } else if (isNumber(debounce['default'])) {
              debounceDelay = debounce['default'];
            }
          }

          $timeout.cancel(pendingDebounce);
          if (debounceDelay) {
            pendingDebounce = $timeout(function () {
              ctrl.$commitViewValue();
            }, debounceDelay);
          } else if ($rootScope.$$phase) {
            ctrl.$commitViewValue();
          } else {
            $scope.$apply(function () {
              ctrl.$commitViewValue();
            });
          }
        };

        // model -> value
        // Note: we cannot use a normal scope.$watch as we want to detect the following:
        // 1. scope value is 'a'
        // 2. user enters 'b'
        // 3. ng-change kicks in and reverts scope value to 'a'
        //    -> scope value did not change since the last digest as
        //       ng-change executes in apply phase
        // 4. view should be changed back to 'a'
        $scope.$watch(function ngModelWatch() {
          var modelValue = ngModelGet($scope);

          // if scope model value and ngModel value are out of sync
          // TODO(perf): why not move this to the action fn?
          if (modelValue !== ctrl.$modelValue && (
          // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
          ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)) {
            ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
            parserValid = undefined;

            var formatters = ctrl.$formatters,
                idx = formatters.length;

            var viewValue = modelValue;
            while (idx--) {
              viewValue = formatters[idx](viewValue);
            }
            if (ctrl.$viewValue !== viewValue) {
              ctrl.$$updateEmptyClasses(viewValue);
              ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
              ctrl.$render();

              ctrl.$$runValidators(modelValue, viewValue, noop);
            }
          }

          return modelValue;
        });
      }];

      /**
       * @ngdoc directive
       * @name ngModel
       *
       * @element input
       * @priority 1
       *
       * @description
       * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
       * property on the scope using {@link ngModel.NgModelController NgModelController},
       * which is created and exposed by this directive.
       *
       * `ngModel` is responsible for:
       *
       * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
       *   require.
       * - Providing validation behavior (i.e. required, number, email, url).
       * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
       * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
       *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
       * - Registering the control with its parent {@link ng.directive:form form}.
       *
       * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
       * current scope. If the property doesn't already exist on this scope, it will be created
       * implicitly and added to the scope.
       *
       * For best practices on using `ngModel`, see:
       *
       *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
       *
       * For basic examples, how to use `ngModel`, see:
       *
       *  - {@link ng.directive:input input}
       *    - {@link input[text] text}
       *    - {@link input[checkbox] checkbox}
       *    - {@link input[radio] radio}
       *    - {@link input[number] number}
       *    - {@link input[email] email}
       *    - {@link input[url] url}
       *    - {@link input[date] date}
       *    - {@link input[datetime-local] datetime-local}
       *    - {@link input[time] time}
       *    - {@link input[month] month}
       *    - {@link input[week] week}
       *  - {@link ng.directive:select select}
       *  - {@link ng.directive:textarea textarea}
       *
       * # Complex Models (objects or collections)
       *
       * By default, `ngModel` watches the model by reference, not value. This is important to know when
       * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
       * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
       *
       * The model must be assigned an entirely new object or collection before a re-rendering will occur.
       *
       * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
       * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
       * if the select is given the `multiple` attribute.
       *
       * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
       * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
       * not trigger a re-rendering of the model.
       *
       * # CSS classes
       * The following CSS classes are added and removed on the associated input/select/textarea element
       * depending on the validity of the model.
       *
       *  - `ng-valid`: the model is valid
       *  - `ng-invalid`: the model is invalid
       *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
       *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
       *  - `ng-pristine`: the control hasn't been interacted with yet
       *  - `ng-dirty`: the control has been interacted with
       *  - `ng-touched`: the control has been blurred
       *  - `ng-untouched`: the control hasn't been blurred
       *  - `ng-pending`: any `$asyncValidators` are unfulfilled
       *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
       *     by the {@link ngModel.NgModelController#$isEmpty} method
       *  - `ng-not-empty`: the view contains a non-empty value
       *
       * Keep in mind that ngAnimate can detect each of these classes when added and removed.
       *
       * ## Animation Hooks
       *
       * Animations within models are triggered when any of the associated CSS classes are added and removed
       * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
       * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
       * The animations that are triggered within ngModel are similar to how they work in ngClass and
       * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
       *
       * The following example shows a simple way to utilize CSS transitions to style an input element
       * that has been rendered as invalid after it has been validated:
       *
       * <pre>
       * //be sure to include ngAnimate as a module to hook into more
       * //advanced animations
       * .my-input {
       *   transition:0.5s linear all;
       *   background: white;
       * }
       * .my-input.ng-invalid {
       *   background: red;
       *   color:white;
       * }
       * </pre>
       *
       * @example
       * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
           <file name="index.html">
             <script>
              angular.module('inputExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.val = '1';
                }]);
             </script>
             <style>
               .my-input {
                 transition:all linear 0.5s;
                 background: transparent;
               }
               .my-input.ng-invalid {
                 color:white;
                 background: red;
               }
             </style>
             <p id="inputDescription">
              Update input to see transitions when valid/invalid.
              Integer is a valid value.
             </p>
             <form name="testForm" ng-controller="ExampleController">
               <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                      aria-describedby="inputDescription" />
             </form>
           </file>
       * </example>
       *
       * ## Binding to a getter/setter
       *
       * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
       * function that returns a representation of the model when called with zero arguments, and sets
       * the internal state of a model when called with an argument. It's sometimes useful to use this
       * for models that have an internal representation that's different from what the model exposes
       * to the view.
       *
       * <div class="alert alert-success">
       * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
       * frequently than other parts of your code.
       * </div>
       *
       * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
       * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
       * a `<form>`, which will enable this behavior for all `<input>`s within it. See
       * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
       *
       * The following example shows how to use `ngModel` with a getter/setter:
       *
       * @example
       * <example name="ngModel-getter-setter" module="getterSetterExample">
           <file name="index.html">
             <div ng-controller="ExampleController">
               <form name="userForm">
                 <label>Name:
                   <input type="text" name="userName"
                          ng-model="user.name"
                          ng-model-options="{ getterSetter: true }" />
                 </label>
               </form>
               <pre>user.name = <span ng-bind="user.name()"></span></pre>
             </div>
           </file>
           <file name="app.js">
             angular.module('getterSetterExample', [])
               .controller('ExampleController', ['$scope', function($scope) {
                 var _name = 'Brian';
                 $scope.user = {
                   name: function(newName) {
                    // Note that newName can be undefined for two reasons:
                    // 1. Because it is called as a getter and thus called with no arguments
                    // 2. Because the property should actually be set to undefined. This happens e.g. if the
                    //    input is invalid
                    return arguments.length ? (_name = newName) : _name;
                   }
                 };
               }]);
           </file>
       * </example>
       */
      var ngModelDirective = ['$rootScope', function ($rootScope) {
        return {
          restrict: 'A',
          require: ['ngModel', '^?form', '^?ngModelOptions'],
          controller: NgModelController,
          // Prelink needs to run before any input directive
          // so that we can set the NgModelOptions in NgModelController
          // before anyone else uses it.
          priority: 1,
          compile: function ngModelCompile(element) {
            // Setup initial state of the control
            element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

            return {
              pre: function ngModelPreLink(scope, element, attr, ctrls) {
                var modelCtrl = ctrls[0],
                    formCtrl = ctrls[1] || modelCtrl.$$parentForm;

                modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

                // notify others, especially parent forms
                formCtrl.$addControl(modelCtrl);

                attr.$observe('name', function (newValue) {
                  if (modelCtrl.$name !== newValue) {
                    modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                  }
                });

                scope.$on('$destroy', function () {
                  modelCtrl.$$parentForm.$removeControl(modelCtrl);
                });
              },
              post: function ngModelPostLink(scope, element, attr, ctrls) {
                var modelCtrl = ctrls[0];
                if (modelCtrl.$options && modelCtrl.$options.updateOn) {
                  element.on(modelCtrl.$options.updateOn, function (ev) {
                    modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                  });
                }

                element.on('blur', function () {
                  if (modelCtrl.$touched) return;

                  if ($rootScope.$$phase) {
                    scope.$evalAsync(modelCtrl.$setTouched);
                  } else {
                    scope.$apply(modelCtrl.$setTouched);
                  }
                });
              }
            };
          }
        };
      }];

      var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

      /**
       * @ngdoc directive
       * @name ngModelOptions
       *
       * @description
       * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
       * events that will trigger a model update and/or a debouncing delay so that the actual update only
       * takes place when a timer expires; this timer will be reset after another change takes place.
       *
       * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
       * be different from the value in the actual model. This means that if you update the model you
       * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
       * order to make sure it is synchronized with the model and that any debounced action is canceled.
       *
       * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
       * method is by making sure the input is placed inside a form that has a `name` attribute. This is
       * important because `form` controllers are published to the related scope under the name in their
       * `name` attribute.
       *
       * Any pending changes will take place immediately when an enclosing form is submitted via the
       * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
       * to have access to the updated model.
       *
       * `ngModelOptions` has an effect on the element it's declared on and its descendants.
       *
       * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
       *   - `updateOn`: string specifying which event should the input be bound to. You can set several
       *     events using an space delimited list. There is a special event called `default` that
       *     matches the default events belonging of the control.
       *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
       *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
       *     custom value for each event. For example:
       *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
       *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
       *     not validate correctly instead of the default behavior of setting the model to undefined.
       *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
             `ngModel` as getters/setters.
       *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
       *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
       *     continental US time zone abbreviations, but for general use, use a time zone offset, for
       *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
       *     If not specified, the timezone of the browser will be used.
       *
       * @example
      
        The following example shows how to override immediate updates. Changes on the inputs within the
        form will update the model only when the control loses focus (blur event). If `escape` key is
        pressed while the input field is focused, the value is reset to the value in the current model.
      
        <example name="ngModelOptions-directive-blur" module="optionsExample">
          <file name="index.html">
            <div ng-controller="ExampleController">
              <form name="userForm">
                <label>Name:
                  <input type="text" name="userName"
                         ng-model="user.name"
                         ng-model-options="{ updateOn: 'blur' }"
                         ng-keyup="cancel($event)" />
                </label><br />
                <label>Other data:
                  <input type="text" ng-model="user.data" />
                </label><br />
              </form>
              <pre>user.name = <span ng-bind="user.name"></span></pre>
              <pre>user.data = <span ng-bind="user.data"></span></pre>
            </div>
          </file>
          <file name="app.js">
            angular.module('optionsExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.user = { name: 'John', data: '' };
      
                $scope.cancel = function(e) {
                  if (e.keyCode == 27) {
                    $scope.userForm.userName.$rollbackViewValue();
                  }
                };
              }]);
          </file>
          <file name="protractor.js" type="protractor">
            var model = element(by.binding('user.name'));
            var input = element(by.model('user.name'));
            var other = element(by.model('user.data'));
      
            it('should allow custom events', function() {
              input.sendKeys(' Doe');
              input.click();
              expect(model.getText()).toEqual('John');
              other.click();
              expect(model.getText()).toEqual('John Doe');
            });
      
            it('should $rollbackViewValue when model changes', function() {
              input.sendKeys(' Doe');
              expect(input.getAttribute('value')).toEqual('John Doe');
              input.sendKeys(protractor.Key.ESCAPE);
              expect(input.getAttribute('value')).toEqual('John');
              other.click();
              expect(model.getText()).toEqual('John');
            });
          </file>
        </example>
      
        This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
        If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
      
        <example name="ngModelOptions-directive-debounce" module="optionsExample">
          <file name="index.html">
            <div ng-controller="ExampleController">
              <form name="userForm">
                <label>Name:
                  <input type="text" name="userName"
                         ng-model="user.name"
                         ng-model-options="{ debounce: 1000 }" />
                </label>
                <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
                <br />
              </form>
              <pre>user.name = <span ng-bind="user.name"></span></pre>
            </div>
          </file>
          <file name="app.js">
            angular.module('optionsExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.user = { name: 'Igor' };
              }]);
          </file>
        </example>
      
        This one shows how to bind to getter/setters:
      
        <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
          <file name="index.html">
            <div ng-controller="ExampleController">
              <form name="userForm">
                <label>Name:
                  <input type="text" name="userName"
                         ng-model="user.name"
                         ng-model-options="{ getterSetter: true }" />
                </label>
              </form>
              <pre>user.name = <span ng-bind="user.name()"></span></pre>
            </div>
          </file>
          <file name="app.js">
            angular.module('getterSetterExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                var _name = 'Brian';
                $scope.user = {
                  name: function(newName) {
                    // Note that newName can be undefined for two reasons:
                    // 1. Because it is called as a getter and thus called with no arguments
                    // 2. Because the property should actually be set to undefined. This happens e.g. if the
                    //    input is invalid
                    return arguments.length ? (_name = newName) : _name;
                  }
                };
              }]);
          </file>
        </example>
       */
      var ngModelOptionsDirective = function () {
        return {
          restrict: 'A',
          controller: ['$scope', '$attrs', function ($scope, $attrs) {
            var that = this;
            this.$options = copy($scope.$eval($attrs.ngModelOptions));
            // Allow adding/overriding bound events
            if (isDefined(this.$options.updateOn)) {
              this.$options.updateOnDefault = false;
              // extract "default" pseudo-event from list of events that can trigger a model update
              this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function () {
                that.$options.updateOnDefault = true;
                return ' ';
              }));
            } else {
              this.$options.updateOnDefault = true;
            }
          }]
        };
      };

      // helper methods
      function addSetValidityMethod(context) {
        var ctrl = context.ctrl,
            $element = context.$element,
            classCache = {},
            set = context.set,
            unset = context.unset,
            $animate = context.$animate;

        classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

        ctrl.$setValidity = setValidity;

        function setValidity(validationErrorKey, state, controller) {
          if (isUndefined(state)) {
            createAndSet('$pending', validationErrorKey, controller);
          } else {
            unsetAndCleanup('$pending', validationErrorKey, controller);
          }
          if (!isBoolean(state)) {
            unset(ctrl.$error, validationErrorKey, controller);
            unset(ctrl.$$success, validationErrorKey, controller);
          } else {
            if (state) {
              unset(ctrl.$error, validationErrorKey, controller);
              set(ctrl.$$success, validationErrorKey, controller);
            } else {
              set(ctrl.$error, validationErrorKey, controller);
              unset(ctrl.$$success, validationErrorKey, controller);
            }
          }
          if (ctrl.$pending) {
            cachedToggleClass(PENDING_CLASS, true);
            ctrl.$valid = ctrl.$invalid = undefined;
            toggleValidationCss('', null);
          } else {
            cachedToggleClass(PENDING_CLASS, false);
            ctrl.$valid = isObjectEmpty(ctrl.$error);
            ctrl.$invalid = !ctrl.$valid;
            toggleValidationCss('', ctrl.$valid);
          }

          // re-read the state as the set/unset methods could have
          // combined state in ctrl.$error[validationError] (used for forms),
          // where setting/unsetting only increments/decrements the value,
          // and does not replace it.
          var combinedState;
          if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
            combinedState = undefined;
          } else if (ctrl.$error[validationErrorKey]) {
            combinedState = false;
          } else if (ctrl.$$success[validationErrorKey]) {
            combinedState = true;
          } else {
            combinedState = null;
          }

          toggleValidationCss(validationErrorKey, combinedState);
          ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
        }

        function createAndSet(name, value, controller) {
          if (!ctrl[name]) {
            ctrl[name] = {};
          }
          set(ctrl[name], value, controller);
        }

        function unsetAndCleanup(name, value, controller) {
          if (ctrl[name]) {
            unset(ctrl[name], value, controller);
          }
          if (isObjectEmpty(ctrl[name])) {
            ctrl[name] = undefined;
          }
        }

        function cachedToggleClass(className, switchValue) {
          if (switchValue && !classCache[className]) {
            $animate.addClass($element, className);
            classCache[className] = true;
          } else if (!switchValue && classCache[className]) {
            $animate.removeClass($element, className);
            classCache[className] = false;
          }
        }

        function toggleValidationCss(validationErrorKey, isValid) {
          validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

          cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
          cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
        }
      }

      function isObjectEmpty(obj) {
        if (obj) {
          for (var prop in obj) {
            if (obj.hasOwnProperty(prop)) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * @ngdoc directive
       * @name ngNonBindable
       * @restrict AC
       * @priority 1000
       *
       * @description
       * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
       * DOM element. This is useful if the element contains what appears to be Angular directives and
       * bindings but which should be ignored by Angular. This could be the case if you have a site that
       * displays snippets of code, for instance.
       *
       * @element ANY
       *
       * @example
       * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
       * but the one wrapped in `ngNonBindable` is left alone.
       *
       * @example
          <example>
            <file name="index.html">
              <div>Normal: {{1 + 2}}</div>
              <div ng-non-bindable>Ignored: {{1 + 2}}</div>
            </file>
            <file name="protractor.js" type="protractor">
             it('should check ng-non-bindable', function() {
               expect(element(by.binding('1 + 2')).getText()).toContain('3');
               expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
             });
            </file>
          </example>
       */
      var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

      /* global jqLiteRemove */

      var ngOptionsMinErr = minErr('ngOptions');

      /**
       * @ngdoc directive
       * @name ngOptions
       * @restrict A
       *
       * @description
       *
       * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
       * elements for the `<select>` element using the array or object obtained by evaluating the
       * `ngOptions` comprehension expression.
       *
       * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
       * similar result. However, `ngOptions` provides some benefits such as reducing memory and
       * increasing speed by not creating a new scope for each repeated instance, as well as providing
       * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
       * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
       *  to a non-string value. This is because an option element can only be bound to string values at
       * present.
       *
       * When an item in the `<select>` menu is selected, the array element or object property
       * represented by the selected option will be bound to the model identified by the `ngModel`
       * directive.
       *
       * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
       * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
       * option. See example below for demonstration.
       *
       * ## Complex Models (objects or collections)
       *
       * By default, `ngModel` watches the model by reference, not value. This is important to know when
       * binding the select to a model that is an object or a collection.
       *
       * One issue occurs if you want to preselect an option. For example, if you set
       * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
       * because the objects are not identical. So by default, you should always reference the item in your collection
       * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
       *
       * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
       * of the item not by reference, but by the result of the `track by` expression. For example, if your
       * collection items have an id property, you would `track by item.id`.
       *
       * A different issue with objects or collections is that ngModel won't detect if an object property or
       * a collection item changes. For that reason, `ngOptions` additionally watches the model using
       * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
       * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
       * has not changed identity, but only a property on the object or an item in the collection changes.
       *
       * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
       * if the model is an array). This means that changing a property deeper than the first level inside the
       * object/collection will not trigger a re-rendering.
       *
       * ## `select` **`as`**
       *
       * Using `select` **`as`** will bind the result of the `select` expression to the model, but
       * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
       * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
       * is used, the result of that expression will be set as the value of the `option` and `select` elements.
       *
       *
       * ### `select` **`as`** and **`track by`**
       *
       * <div class="alert alert-warning">
       * Be careful when using `select` **`as`** and **`track by`** in the same expression.
       * </div>
       *
       * Given this array of items on the $scope:
       *
       * ```js
       * $scope.items = [{
       *   id: 1,
       *   label: 'aLabel',
       *   subItem: { name: 'aSubItem' }
       * }, {
       *   id: 2,
       *   label: 'bLabel',
       *   subItem: { name: 'bSubItem' }
       * }];
       * ```
       *
       * This will work:
       *
       * ```html
       * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
       * ```
       * ```js
       * $scope.selected = $scope.items[0];
       * ```
       *
       * but this will not work:
       *
       * ```html
       * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
       * ```
       * ```js
       * $scope.selected = $scope.items[0].subItem;
       * ```
       *
       * In both examples, the **`track by`** expression is applied successfully to each `item` in the
       * `items` array. Because the selected option has been set programmatically in the controller, the
       * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
       * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
       * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
       * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
       * is not matched against any `<option>` and the `<select>` appears as having no selected value.
       *
       *
       * @param {string} ngModel Assignable angular expression to data-bind to.
       * @param {string=} name Property name of the form under which the control is published.
       * @param {string=} required The control is considered valid only if value is entered.
       * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
       *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
       *    `required` when you want to data-bind to the `required` attribute.
       * @param {comprehension_expression=} ngOptions in one of the following forms:
       *
       *   * for array data sources:
       *     * `label` **`for`** `value` **`in`** `array`
       *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
       *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
       *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
       *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
       *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
       *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
       *        (for including a filter with `track by`)
       *   * for object data sources:
       *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
       *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
       *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
       *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
       *     * `select` **`as`** `label` **`group by`** `group`
       *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
       *     * `select` **`as`** `label` **`disable when`** `disable`
       *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
       *
       * Where:
       *
       *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
       *   * `value`: local variable which will refer to each item in the `array` or each property value
       *      of `object` during iteration.
       *   * `key`: local variable which will refer to a property name in `object` during iteration.
       *   * `label`: The result of this expression will be the label for `<option>` element. The
       *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
       *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
       *      element. If not specified, `select` expression will default to `value`.
       *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
       *      DOM element.
       *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
       *      element. Return `true` to disable.
       *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
       *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
       *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
       *      even when the options are recreated (e.g. reloaded from the server).
       *
       * @example
          <example module="selectExample">
            <file name="index.html">
              <script>
              angular.module('selectExample', [])
                .controller('ExampleController', ['$scope', function($scope) {
                  $scope.colors = [
                    {name:'black', shade:'dark'},
                    {name:'white', shade:'light', notAnOption: true},
                    {name:'red', shade:'dark'},
                    {name:'blue', shade:'dark', notAnOption: true},
                    {name:'yellow', shade:'light', notAnOption: false}
                  ];
                  $scope.myColor = $scope.colors[2]; // red
                }]);
              </script>
              <div ng-controller="ExampleController">
                <ul>
                  <li ng-repeat="color in colors">
                    <label>Name: <input ng-model="color.name"></label>
                    <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
                    <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
                  </li>
                  <li>
                    <button ng-click="colors.push({})">add</button>
                  </li>
                </ul>
                <hr/>
                <label>Color (null not allowed):
                  <select ng-model="myColor" ng-options="color.name for color in colors"></select>
                </label><br/>
                <label>Color (null allowed):
                <span  class="nullable">
                  <select ng-model="myColor" ng-options="color.name for color in colors">
                    <option value="">-- choose color --</option>
                  </select>
                </span></label><br/>
      
                <label>Color grouped by shade:
                  <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
                  </select>
                </label><br/>
      
                <label>Color grouped by shade, with some disabled:
                  <select ng-model="myColor"
                        ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
                  </select>
                </label><br/>
      
      
      
                Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
                <br/>
                <hr/>
                Currently selected: {{ {selected_color:myColor} }}
                <div style="border:solid 1px black; height:20px"
                     ng-style="{'background-color':myColor.name}">
                </div>
              </div>
            </file>
            <file name="protractor.js" type="protractor">
               it('should check ng-options', function() {
                 expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
                 element.all(by.model('myColor')).first().click();
                 element.all(by.css('select[ng-model="myColor"] option')).first().click();
                 expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
                 element(by.css('.nullable select[ng-model="myColor"]')).click();
                 element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
                 expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
               });
            </file>
          </example>
       */

      // jshint maxlen: false
      //                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
      var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
      // 1: value expression (valueFn)
      // 2: label expression (displayFn)
      // 3: group by expression (groupByFn)
      // 4: disable when expression (disableWhenFn)
      // 5: array item variable name
      // 6: object item key variable name
      // 7: object item value variable name
      // 8: collection expression
      // 9: track by expression
      // jshint maxlen: 100


      var ngOptionsDirective = ['$compile', '$document', '$parse', function ($compile, $document, $parse) {

        function parseOptionsExpression(optionsExp, selectElement, scope) {

          var match = optionsExp.match(NG_OPTIONS_REGEXP);
          if (!match) {
            throw ngOptionsMinErr('iexp', "Expected expression in form of " + "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" + " but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
          }

          // Extract the parts from the ngOptions expression

          // The variable name for the value of the item in the collection
          var valueName = match[5] || match[7];
          // The variable name for the key of the item in the collection
          var keyName = match[6];

          // An expression that generates the viewValue for an option if there is a label expression
          var selectAs = / as /.test(match[0]) && match[1];
          // An expression that is used to track the id of each object in the options collection
          var trackBy = match[9];
          // An expression that generates the viewValue for an option if there is no label expression
          var valueFn = $parse(match[2] ? match[1] : valueName);
          var selectAsFn = selectAs && $parse(selectAs);
          var viewValueFn = selectAsFn || valueFn;
          var trackByFn = trackBy && $parse(trackBy);

          // Get the value by which we are going to track the option
          // if we have a trackFn then use that (passing scope and locals)
          // otherwise just hash the given viewValue
          var getTrackByValueFn = trackBy ? function (value, locals) {
            return trackByFn(scope, locals);
          } : function getHashOfValue(value) {
            return hashKey(value);
          };
          var getTrackByValue = function (value, key) {
            return getTrackByValueFn(value, getLocals(value, key));
          };

          var displayFn = $parse(match[2] || match[1]);
          var groupByFn = $parse(match[3] || '');
          var disableWhenFn = $parse(match[4] || '');
          var valuesFn = $parse(match[8]);

          var locals = {};
          var getLocals = keyName ? function (value, key) {
            locals[keyName] = key;
            locals[valueName] = value;
            return locals;
          } : function (value) {
            locals[valueName] = value;
            return locals;
          };

          function Option(selectValue, viewValue, label, group, disabled) {
            this.selectValue = selectValue;
            this.viewValue = viewValue;
            this.label = label;
            this.group = group;
            this.disabled = disabled;
          }

          function getOptionValuesKeys(optionValues) {
            var optionValuesKeys;

            if (!keyName && isArrayLike(optionValues)) {
              optionValuesKeys = optionValues;
            } else {
              // if object, extract keys, in enumeration order, unsorted
              optionValuesKeys = [];
              for (var itemKey in optionValues) {
                if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
                  optionValuesKeys.push(itemKey);
                }
              }
            }
            return optionValuesKeys;
          }

          return {
            trackBy: trackBy,
            getTrackByValue: getTrackByValue,
            getWatchables: $parse(valuesFn, function (optionValues) {
              // Create a collection of things that we would like to watch (watchedArray)
              // so that they can all be watched using a single $watchCollection
              // that only runs the handler once if anything changes
              var watchedArray = [];
              optionValues = optionValues || [];

              var optionValuesKeys = getOptionValuesKeys(optionValues);
              var optionValuesLength = optionValuesKeys.length;
              for (var index = 0; index < optionValuesLength; index++) {
                var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                var value = optionValues[key];

                var locals = getLocals(value, key);
                var selectValue = getTrackByValueFn(value, locals);
                watchedArray.push(selectValue);

                // Only need to watch the displayFn if there is a specific label expression
                if (match[2] || match[1]) {
                  var label = displayFn(scope, locals);
                  watchedArray.push(label);
                }

                // Only need to watch the disableWhenFn if there is a specific disable expression
                if (match[4]) {
                  var disableWhen = disableWhenFn(scope, locals);
                  watchedArray.push(disableWhen);
                }
              }
              return watchedArray;
            }),

            getOptions: function () {

              var optionItems = [];
              var selectValueMap = {};

              // The option values were already computed in the `getWatchables` fn,
              // which must have been called to trigger `getOptions`
              var optionValues = valuesFn(scope) || [];
              var optionValuesKeys = getOptionValuesKeys(optionValues);
              var optionValuesLength = optionValuesKeys.length;

              for (var index = 0; index < optionValuesLength; index++) {
                var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                var value = optionValues[key];
                var locals = getLocals(value, key);
                var viewValue = viewValueFn(scope, locals);
                var selectValue = getTrackByValueFn(viewValue, locals);
                var label = displayFn(scope, locals);
                var group = groupByFn(scope, locals);
                var disabled = disableWhenFn(scope, locals);
                var optionItem = new Option(selectValue, viewValue, label, group, disabled);

                optionItems.push(optionItem);
                selectValueMap[selectValue] = optionItem;
              }

              return {
                items: optionItems,
                selectValueMap: selectValueMap,
                getOptionFromViewValue: function (value) {
                  return selectValueMap[getTrackByValue(value)];
                },
                getViewValueFromOption: function (option) {
                  // If the viewValue could be an object that may be mutated by the application,
                  // we need to make a copy and not return the reference to the value on the option.
                  return trackBy ? angular.copy(option.viewValue) : option.viewValue;
                }
              };
            }
          };
        }

        // we can't just jqLite('<option>') since jqLite is not smart enough
        // to create it in <select> and IE barfs otherwise.
        var optionTemplate = window.document.createElement('option'),
            optGroupTemplate = window.document.createElement('optgroup');

        function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

          var selectCtrl = ctrls[0];
          var ngModelCtrl = ctrls[1];
          var multiple = attr.multiple;

          // The emptyOption allows the application developer to provide their own custom "empty"
          // option when the viewValue does not match any of the option values.
          var emptyOption;
          for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
            if (children[i].value === '') {
              emptyOption = children.eq(i);
              break;
            }
          }

          var providedEmptyOption = !!emptyOption;

          var unknownOption = jqLite(optionTemplate.cloneNode(false));
          unknownOption.val('?');

          var options;
          var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
          // This stores the newly created options before they are appended to the select.
          // Since the contents are removed from the fragment when it is appended,
          // we only need to create it once.
          var listFragment = $document[0].createDocumentFragment();

          var renderEmptyOption = function () {
            if (!providedEmptyOption) {
              selectElement.prepend(emptyOption);
            }
            selectElement.val('');
            emptyOption.prop('selected', true); // needed for IE
            emptyOption.attr('selected', true);
          };

          var removeEmptyOption = function () {
            if (!providedEmptyOption) {
              emptyOption.remove();
            }
          };

          var renderUnknownOption = function () {
            selectElement.prepend(unknownOption);
            selectElement.val('?');
            unknownOption.prop('selected', true); // needed for IE
            unknownOption.attr('selected', true);
          };

          var removeUnknownOption = function () {
            unknownOption.remove();
          };

          // Update the controller methods for multiple selectable options
          if (!multiple) {

            selectCtrl.writeValue = function writeNgOptionsValue(value) {
              var option = options.getOptionFromViewValue(value);

              if (option) {
                // Don't update the option when it is already selected.
                // For example, the browser will select the first option by default. In that case,
                // most properties are set automatically - except the `selected` attribute, which we
                // set always

                if (selectElement[0].value !== option.selectValue) {
                  removeUnknownOption();
                  removeEmptyOption();

                  selectElement[0].value = option.selectValue;
                  option.element.selected = true;
                }

                option.element.setAttribute('selected', 'selected');
              } else {
                if (value === null || providedEmptyOption) {
                  removeUnknownOption();
                  renderEmptyOption();
                } else {
                  removeEmptyOption();
                  renderUnknownOption();
                }
              }
            };

            selectCtrl.readValue = function readNgOptionsValue() {

              var selectedOption = options.selectValueMap[selectElement.val()];

              if (selectedOption && !selectedOption.disabled) {
                removeEmptyOption();
                removeUnknownOption();
                return options.getViewValueFromOption(selectedOption);
              }
              return null;
            };

            // If we are using `track by` then we must watch the tracked value on the model
            // since ngModel only watches for object identity change
            if (ngOptions.trackBy) {
              scope.$watch(function () {
                return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
              }, function () {
                ngModelCtrl.$render();
              });
            }
          } else {

            ngModelCtrl.$isEmpty = function (value) {
              return !value || value.length === 0;
            };

            selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
              options.items.forEach(function (option) {
                option.element.selected = false;
              });

              if (value) {
                value.forEach(function (item) {
                  var option = options.getOptionFromViewValue(item);
                  if (option) option.element.selected = true;
                });
              }
            };

            selectCtrl.readValue = function readNgOptionsMultiple() {
              var selectedValues = selectElement.val() || [],
                  selections = [];

              forEach(selectedValues, function (value) {
                var option = options.selectValueMap[value];
                if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
              });

              return selections;
            };

            // If we are using `track by` then we must watch these tracked values on the model
            // since ngModel only watches for object identity change
            if (ngOptions.trackBy) {

              scope.$watchCollection(function () {
                if (isArray(ngModelCtrl.$viewValue)) {
                  return ngModelCtrl.$viewValue.map(function (value) {
                    return ngOptions.getTrackByValue(value);
                  });
                }
              }, function () {
                ngModelCtrl.$render();
              });
            }
          }

          if (providedEmptyOption) {

            // we need to remove it before calling selectElement.empty() because otherwise IE will
            // remove the label from the element. wtf?
            emptyOption.remove();

            // compile the element since there might be bindings in it
            $compile(emptyOption)(scope);

            // remove the class, which is added automatically because we recompile the element and it
            // becomes the compilation root
            emptyOption.removeClass('ng-scope');
          } else {
            emptyOption = jqLite(optionTemplate.cloneNode(false));
          }

          selectElement.empty();

          // We need to do this here to ensure that the options object is defined
          // when we first hit it in writeNgOptionsValue
          updateOptions();

          // We will re-render the option elements if the option values or labels change
          scope.$watchCollection(ngOptions.getWatchables, updateOptions);

          // ------------------------------------------------------------------ //

          function addOptionElement(option, parent) {
            var optionElement = optionTemplate.cloneNode(false);
            parent.appendChild(optionElement);
            updateOptionElement(option, optionElement);
          }

          function updateOptionElement(option, element) {
            option.element = element;
            element.disabled = option.disabled;
            // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
            // selects in certain circumstances when multiple selects are next to each other and display
            // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
            // See https://github.com/angular/angular.js/issues/11314 for more info.
            // This is unfortunately untestable with unit / e2e tests
            if (option.label !== element.label) {
              element.label = option.label;
              element.textContent = option.label;
            }
            if (option.value !== element.value) element.value = option.selectValue;
          }

          function updateOptions() {
            var previousValue = options && selectCtrl.readValue();

            // We must remove all current options, but cannot simply set innerHTML = null
            // since the providedEmptyOption might have an ngIf on it that inserts comments which we
            // must preserve.
            // Instead, iterate over the current option elements and remove them or their optgroup
            // parents
            if (options) {

              for (var i = options.items.length - 1; i >= 0; i--) {
                var option = options.items[i];
                if (isDefined(option.group)) {
                  jqLiteRemove(option.element.parentNode);
                } else {
                  jqLiteRemove(option.element);
                }
              }
            }

            options = ngOptions.getOptions();

            var groupElementMap = {};

            // Ensure that the empty option is always there if it was explicitly provided
            if (providedEmptyOption) {
              selectElement.prepend(emptyOption);
            }

            options.items.forEach(function addOption(option) {
              var groupElement;

              if (isDefined(option.group)) {

                // This option is to live in a group
                // See if we have already created this group
                groupElement = groupElementMap[option.group];

                if (!groupElement) {

                  groupElement = optGroupTemplate.cloneNode(false);
                  listFragment.appendChild(groupElement);

                  // Update the label on the group element
                  // "null" is special cased because of Safari
                  groupElement.label = option.group === null ? 'null' : option.group;

                  // Store it for use later
                  groupElementMap[option.group] = groupElement;
                }

                addOptionElement(option, groupElement);
              } else {

                // This option is not in a group
                addOptionElement(option, listFragment);
              }
            });

            selectElement[0].appendChild(listFragment);

            ngModelCtrl.$render();

            // Check to see if the value has changed due to the update to the options
            if (!ngModelCtrl.$isEmpty(previousValue)) {
              var nextValue = selectCtrl.readValue();
              var isNotPrimitive = ngOptions.trackBy || multiple;
              if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                ngModelCtrl.$setViewValue(nextValue);
                ngModelCtrl.$render();
              }
            }
          }
        }

        return {
          restrict: 'A',
          terminal: true,
          require: ['select', 'ngModel'],
          link: {
            pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
              // Deactivate the SelectController.register method to prevent
              // option directives from accidentally registering themselves
              // (and unwanted $destroy handlers etc.)
              ctrls[0].registerOption = noop;
            },
            post: ngOptionsPostLink
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngPluralize
       * @restrict EA
       *
       * @description
       * `ngPluralize` is a directive that displays messages according to en-US localization rules.
       * These rules are bundled with angular.js, but can be overridden
       * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
       * by specifying the mappings between
       * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
       * and the strings to be displayed.
       *
       * # Plural categories and explicit number rules
       * There are two
       * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
       * in Angular's default en-US locale: "one" and "other".
       *
       * While a plural category may match many numbers (for example, in en-US locale, "other" can match
       * any number that is not 1), an explicit number rule can only match one number. For example, the
       * explicit number rule for "3" matches the number 3. There are examples of plural categories
       * and explicit number rules throughout the rest of this documentation.
       *
       * # Configuring ngPluralize
       * You configure ngPluralize by providing 2 attributes: `count` and `when`.
       * You can also provide an optional attribute, `offset`.
       *
       * The value of the `count` attribute can be either a string or an {@link guide/expression
       * Angular expression}; these are evaluated on the current scope for its bound value.
       *
       * The `when` attribute specifies the mappings between plural categories and the actual
       * string to be displayed. The value of the attribute should be a JSON object.
       *
       * The following example shows how to configure ngPluralize:
       *
       * ```html
       * <ng-pluralize count="personCount"
                       when="{'0': 'Nobody is viewing.',
       *                      'one': '1 person is viewing.',
       *                      'other': '{} people are viewing.'}">
       * </ng-pluralize>
       *```
       *
       * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
       * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
       * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
       * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
       * show "a dozen people are viewing".
       *
       * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
       * into pluralized strings. In the previous example, Angular will replace `{}` with
       * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
       * for <span ng-non-bindable>{{numberExpression}}</span>.
       *
       * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
       * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
       *
       * # Configuring ngPluralize with offset
       * The `offset` attribute allows further customization of pluralized text, which can result in
       * a better user experience. For example, instead of the message "4 people are viewing this document",
       * you might display "John, Kate and 2 others are viewing this document".
       * The offset attribute allows you to offset a number by any desired value.
       * Let's take a look at an example:
       *
       * ```html
       * <ng-pluralize count="personCount" offset=2
       *               when="{'0': 'Nobody is viewing.',
       *                      '1': '{{person1}} is viewing.',
       *                      '2': '{{person1}} and {{person2}} are viewing.',
       *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
       *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
       * </ng-pluralize>
       * ```
       *
       * Notice that we are still using two plural categories(one, other), but we added
       * three explicit number rules 0, 1 and 2.
       * When one person, perhaps John, views the document, "John is viewing" will be shown.
       * When three people view the document, no explicit number rule is found, so
       * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
       * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
       * is shown.
       *
       * Note that when you specify offsets, you must provide explicit number rules for
       * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
       * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
       * plural categories "one" and "other".
       *
       * @param {string|expression} count The variable to be bound to.
       * @param {string} when The mapping between plural category to its corresponding strings.
       * @param {number=} offset Offset to deduct from the total number.
       *
       * @example
          <example module="pluralizeExample">
            <file name="index.html">
              <script>
                angular.module('pluralizeExample', [])
                  .controller('ExampleController', ['$scope', function($scope) {
                    $scope.person1 = 'Igor';
                    $scope.person2 = 'Misko';
                    $scope.personCount = 1;
                  }]);
              </script>
              <div ng-controller="ExampleController">
                <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
                <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
                <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>
      
                <!--- Example with simple pluralization rules for en locale --->
                Without Offset:
                <ng-pluralize count="personCount"
                              when="{'0': 'Nobody is viewing.',
                                     'one': '1 person is viewing.',
                                     'other': '{} people are viewing.'}">
                </ng-pluralize><br>
      
                <!--- Example with offset --->
                With Offset(2):
                <ng-pluralize count="personCount" offset=2
                              when="{'0': 'Nobody is viewing.',
                                     '1': '{{person1}} is viewing.',
                                     '2': '{{person1}} and {{person2}} are viewing.',
                                     'one': '{{person1}}, {{person2}} and one other person are viewing.',
                                     'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
                </ng-pluralize>
              </div>
            </file>
            <file name="protractor.js" type="protractor">
              it('should show correct pluralized string', function() {
                var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
                var withOffset = element.all(by.css('ng-pluralize')).get(1);
                var countInput = element(by.model('personCount'));
      
                expect(withoutOffset.getText()).toEqual('1 person is viewing.');
                expect(withOffset.getText()).toEqual('Igor is viewing.');
      
                countInput.clear();
                countInput.sendKeys('0');
      
                expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
                expect(withOffset.getText()).toEqual('Nobody is viewing.');
      
                countInput.clear();
                countInput.sendKeys('2');
      
                expect(withoutOffset.getText()).toEqual('2 people are viewing.');
                expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
      
                countInput.clear();
                countInput.sendKeys('3');
      
                expect(withoutOffset.getText()).toEqual('3 people are viewing.');
                expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
      
                countInput.clear();
                countInput.sendKeys('4');
      
                expect(withoutOffset.getText()).toEqual('4 people are viewing.');
                expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
              });
              it('should show data-bound names', function() {
                var withOffset = element.all(by.css('ng-pluralize')).get(1);
                var personCount = element(by.model('personCount'));
                var person1 = element(by.model('person1'));
                var person2 = element(by.model('person2'));
                personCount.clear();
                personCount.sendKeys('4');
                person1.clear();
                person1.sendKeys('Di');
                person2.clear();
                person2.sendKeys('Vojta');
                expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
              });
            </file>
          </example>
       */
      var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function ($locale, $interpolate, $log) {
        var BRACE = /{}/g,
            IS_WHEN = /^when(Minus)?(.+)$/;

        return {
          link: function (scope, element, attr) {
            var numberExp = attr.count,
                whenExp = attr.$attr.when && element.attr(attr.$attr.when),
                // we have {{}} in attrs
            offset = attr.offset || 0,
                whens = scope.$eval(whenExp) || {},
                whensExpFns = {},
                startSymbol = $interpolate.startSymbol(),
                endSymbol = $interpolate.endSymbol(),
                braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
                watchRemover = angular.noop,
                lastCount;

            forEach(attr, function (expression, attributeName) {
              var tmpMatch = IS_WHEN.exec(attributeName);
              if (tmpMatch) {
                var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
                whens[whenKey] = element.attr(attr.$attr[attributeName]);
              }
            });
            forEach(whens, function (expression, key) {
              whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
            });

            scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
              var count = parseFloat(newVal);
              var countIsNaN = isNaN(count);

              if (!countIsNaN && !(count in whens)) {
                // If an explicit number rule such as 1, 2, 3... is defined, just use it.
                // Otherwise, check it against pluralization rules in $locale service.
                count = $locale.pluralCat(count - offset);
              }

              // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
              // In JS `NaN !== NaN`, so we have to explicitly check.
              if (count !== lastCount && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
                watchRemover();
                var whenExpFn = whensExpFns[count];
                if (isUndefined(whenExpFn)) {
                  if (newVal != null) {
                    $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
                  }
                  watchRemover = noop;
                  updateElementText();
                } else {
                  watchRemover = scope.$watch(whenExpFn, updateElementText);
                }
                lastCount = count;
              }
            });

            function updateElementText(newText) {
              element.text(newText || '');
            }
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngRepeat
       * @multiElement
       *
       * @description
       * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
       * instance gets its own scope, where the given loop variable is set to the current collection item,
       * and `$index` is set to the item index or key.
       *
       * Special properties are exposed on the local scope of each template instance, including:
       *
       * | Variable  | Type            | Details                                                                     |
       * |-----------|-----------------|-----------------------------------------------------------------------------|
       * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
       * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
       * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
       * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
       * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
       * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
       *
       * <div class="alert alert-info">
       *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
       *   This may be useful when, for instance, nesting ngRepeats.
       * </div>
       *
       *
       * # Iterating over object properties
       *
       * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
       * syntax:
       *
       * ```js
       * <div ng-repeat="(key, value) in myObj"> ... </div>
       * ```
       *
       * However, there are a limitations compared to array iteration:
       *
       * - The JavaScript specification does not define the order of keys
       *   returned for an object, so Angular relies on the order returned by the browser
       *   when running `for key in myObj`. Browsers generally follow the strategy of providing
       *   keys in the order in which they were defined, although there are exceptions when keys are deleted
       *   and reinstated. See the
       *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
       *
       * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
       *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
       *
       * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
       *   objects, and will throw an error if used with one.
       *
       * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
       * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
       * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
       * or implement a `$watch` on the object yourself.
       *
       *
       * # Tracking and Duplicates
       *
       * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
       * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
       *
       * * When an item is added, a new instance of the template is added to the DOM.
       * * When an item is removed, its template instance is removed from the DOM.
       * * When items are reordered, their respective templates are reordered in the DOM.
       *
       * To minimize creation of DOM elements, `ngRepeat` uses a function
       * to "keep track" of all items in the collection and their corresponding DOM elements.
       * For example, if an item is added to the collection, ngRepeat will know that all other items
       * already have DOM elements, and will not re-render them.
       *
       * The default tracking function (which tracks items by their identity) does not allow
       * duplicate items in arrays. This is because when there are duplicates, it is not possible
       * to maintain a one-to-one mapping between collection items and DOM elements.
       *
       * If you do need to repeat duplicate items, you can substitute the default tracking behavior
       * with your own using the `track by` expression.
       *
       * For example, you may track items by the index of each item in the collection, using the
       * special scope property `$index`:
       * ```html
       *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
       *      {{n}}
       *    </div>
       * ```
       *
       * You may also use arbitrary expressions in `track by`, including references to custom functions
       * on the scope:
       * ```html
       *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
       *      {{n}}
       *    </div>
       * ```
       *
       * <div class="alert alert-success">
       * If you are working with objects that have an identifier property, you should track
       * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
       * will not have to rebuild the DOM elements for items it has already rendered, even if the
       * JavaScript objects in the collection have been substituted for new ones. For large collections,
       * this significantly improves rendering performance. If you don't have a unique identifier,
       * `track by $index` can also provide a performance boost.
       * </div>
       * ```html
       *    <div ng-repeat="model in collection track by model.id">
       *      {{model.name}}
       *    </div>
       * ```
       *
       * When no `track by` expression is provided, it is equivalent to tracking by the built-in
       * `$id` function, which tracks items by their identity:
       * ```html
       *    <div ng-repeat="obj in collection track by $id(obj)">
       *      {{obj.prop}}
       *    </div>
       * ```
       *
       * <div class="alert alert-warning">
       * **Note:** `track by` must always be the last expression:
       * </div>
       * ```
       * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
       *     {{model.name}}
       * </div>
       * ```
       *
       * # Special repeat start and end points
       * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
       * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
       * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
       * up to and including the ending HTML tag where **ng-repeat-end** is placed.
       *
       * The example below makes use of this feature:
       * ```html
       *   <header ng-repeat-start="item in items">
       *     Header {{ item }}
       *   </header>
       *   <div class="body">
       *     Body {{ item }}
       *   </div>
       *   <footer ng-repeat-end>
       *     Footer {{ item }}
       *   </footer>
       * ```
       *
       * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
       * ```html
       *   <header>
       *     Header A
       *   </header>
       *   <div class="body">
       *     Body A
       *   </div>
       *   <footer>
       *     Footer A
       *   </footer>
       *   <header>
       *     Header B
       *   </header>
       *   <div class="body">
       *     Body B
       *   </div>
       *   <footer>
       *     Footer B
       *   </footer>
       * ```
       *
       * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
       * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
       *
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
       * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
       * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
       *
       * See the example below for defining CSS animations with ngRepeat.
       *
       * @element ANY
       * @scope
       * @priority 1000
       * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
       *   formats are currently supported:
       *
       *   * `variable in expression` – where variable is the user defined loop variable and `expression`
       *     is a scope expression giving the collection to enumerate.
       *
       *     For example: `album in artist.albums`.
       *
       *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
       *     and `expression` is the scope expression giving the collection to enumerate.
       *
       *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
       *
       *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
       *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
       *     is specified, ng-repeat associates elements by identity. It is an error to have
       *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
       *     mapped to the same DOM element, which is not possible.)
       *
       *     Note that the tracking expression must come last, after any filters, and the alias expression.
       *
       *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
       *     will be associated by item identity in the array.
       *
       *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
       *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
       *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
       *     element in the same way in the DOM.
       *
       *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
       *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
       *     property is same.
       *
       *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
       *     to items in conjunction with a tracking expression.
       *
       *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
       *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
       *     when a filter is active on the repeater, but the filtered result set is empty.
       *
       *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
       *     the items have been processed through the filter.
       *
       *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
       *     (and not as operator, inside an expression).
       *
       *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
       *
       * @example
       * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
       * results by name. New (entering) and removed (leaving) items are animated.
        <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
          <file name="index.html">
            <div ng-controller="repeatController">
              I have {{friends.length}} friends. They are:
              <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
              <ul class="example-animate-container">
                <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
                  [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
                </li>
                <li class="animate-repeat" ng-if="results.length == 0">
                  <strong>No results found...</strong>
                </li>
              </ul>
            </div>
          </file>
          <file name="script.js">
            angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
              $scope.friends = [
                {name:'John', age:25, gender:'boy'},
                {name:'Jessie', age:30, gender:'girl'},
                {name:'Johanna', age:28, gender:'girl'},
                {name:'Joy', age:15, gender:'girl'},
                {name:'Mary', age:28, gender:'girl'},
                {name:'Peter', age:95, gender:'boy'},
                {name:'Sebastian', age:50, gender:'boy'},
                {name:'Erika', age:27, gender:'girl'},
                {name:'Patrick', age:40, gender:'boy'},
                {name:'Samantha', age:60, gender:'girl'}
              ];
            });
          </file>
          <file name="animations.css">
            .example-animate-container {
              background:white;
              border:1px solid black;
              list-style:none;
              margin:0;
              padding:0 10px;
            }
      
            .animate-repeat {
              line-height:30px;
              list-style:none;
              box-sizing:border-box;
            }
      
            .animate-repeat.ng-move,
            .animate-repeat.ng-enter,
            .animate-repeat.ng-leave {
              transition:all linear 0.5s;
            }
      
            .animate-repeat.ng-leave.ng-leave-active,
            .animate-repeat.ng-move,
            .animate-repeat.ng-enter {
              opacity:0;
              max-height:0;
            }
      
            .animate-repeat.ng-leave,
            .animate-repeat.ng-move.ng-move-active,
            .animate-repeat.ng-enter.ng-enter-active {
              opacity:1;
              max-height:30px;
            }
          </file>
          <file name="protractor.js" type="protractor">
            var friends = element.all(by.repeater('friend in friends'));
      
            it('should render initial data set', function() {
              expect(friends.count()).toBe(10);
              expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
              expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
              expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
              expect(element(by.binding('friends.length')).getText())
                  .toMatch("I have 10 friends. They are:");
            });
      
             it('should update repeater when filter predicate changes', function() {
               expect(friends.count()).toBe(10);
      
               element(by.model('q')).sendKeys('ma');
      
               expect(friends.count()).toBe(2);
               expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
               expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
             });
            </file>
          </example>
       */
      var ngRepeatDirective = ['$parse', '$animate', '$compile', function ($parse, $animate, $compile) {
        var NG_REMOVED = '$$NG_REMOVED';
        var ngRepeatMinErr = minErr('ngRepeat');

        var updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
          // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
          scope[valueIdentifier] = value;
          if (keyIdentifier) scope[keyIdentifier] = key;
          scope.$index = index;
          scope.$first = index === 0;
          scope.$last = index === arrayLength - 1;
          scope.$middle = !(scope.$first || scope.$last);
          // jshint bitwise: false
          scope.$odd = !(scope.$even = (index & 1) === 0);
          // jshint bitwise: true
        };

        var getBlockStart = function (block) {
          return block.clone[0];
        };

        var getBlockEnd = function (block) {
          return block.clone[block.clone.length - 1];
        };

        return {
          restrict: 'A',
          multiElement: true,
          transclude: 'element',
          priority: 1000,
          terminal: true,
          $$tlb: true,
          compile: function ngRepeatCompile($element, $attr) {
            var expression = $attr.ngRepeat;
            var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);

            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

            if (!match) {
              throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
            }

            var lhs = match[1];
            var rhs = match[2];
            var aliasAs = match[3];
            var trackByExp = match[4];

            match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

            if (!match) {
              throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
            }
            var valueIdentifier = match[3] || match[1];
            var keyIdentifier = match[2];

            if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
              throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
            }

            var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
            var hashFnLocals = { $id: hashKey };

            if (trackByExp) {
              trackByExpGetter = $parse(trackByExp);
            } else {
              trackByIdArrayFn = function (key, value) {
                return hashKey(value);
              };
              trackByIdObjFn = function (key) {
                return key;
              };
            }

            return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

              if (trackByExpGetter) {
                trackByIdExpFn = function (key, value, index) {
                  // assign key, value, and $index to the locals so that they can be used in hash functions
                  if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
                  hashFnLocals[valueIdentifier] = value;
                  hashFnLocals.$index = index;
                  return trackByExpGetter($scope, hashFnLocals);
                };
              }

              // Store a list of elements from previous run. This is a hash where key is the item from the
              // iterator, and the value is objects with following properties.
              //   - scope: bound scope
              //   - element: previous element.
              //   - index: position
              //
              // We are using no-proto object so that we don't need to guard against inherited props via
              // hasOwnProperty.
              var lastBlockMap = createMap();

              //watch props
              $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                var index,
                    length,
                    previousNode = $element[0],
                    // node that cloned nodes should be inserted after
                // initialized to the comment node anchor
                nextNode,

                // Same as lastBlockMap but it has the current state. It will become the
                // lastBlockMap on the next iteration.
                nextBlockMap = createMap(),
                    collectionLength,
                    key,
                    value,
                    // key/value of iteration
                trackById,
                    trackByIdFn,
                    collectionKeys,
                    block,
                    // last object information {scope, element, id}
                nextBlockOrder,
                    elementsToRemove;

                if (aliasAs) {
                  $scope[aliasAs] = collection;
                }

                if (isArrayLike(collection)) {
                  collectionKeys = collection;
                  trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                } else {
                  trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                  // if object, extract keys, in enumeration order, unsorted
                  collectionKeys = [];
                  for (var itemKey in collection) {
                    if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                      collectionKeys.push(itemKey);
                    }
                  }
                }

                collectionLength = collectionKeys.length;
                nextBlockOrder = new Array(collectionLength);

                // locate existing items
                for (index = 0; index < collectionLength; index++) {
                  key = collection === collectionKeys ? index : collectionKeys[index];
                  value = collection[key];
                  trackById = trackByIdFn(key, value, index);
                  if (lastBlockMap[trackById]) {
                    // found previously seen block
                    block = lastBlockMap[trackById];
                    delete lastBlockMap[trackById];
                    nextBlockMap[trackById] = block;
                    nextBlockOrder[index] = block;
                  } else if (nextBlockMap[trackById]) {
                    // if collision detected. restore lastBlockMap and throw an error
                    forEach(nextBlockOrder, function (block) {
                      if (block && block.scope) lastBlockMap[block.id] = block;
                    });
                    throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                  } else {
                    // new never before seen block
                    nextBlockOrder[index] = { id: trackById, scope: undefined, clone: undefined };
                    nextBlockMap[trackById] = true;
                  }
                }

                // remove leftover items
                for (var blockKey in lastBlockMap) {
                  block = lastBlockMap[blockKey];
                  elementsToRemove = getBlockNodes(block.clone);
                  $animate.leave(elementsToRemove);
                  if (elementsToRemove[0].parentNode) {
                    // if the element was not removed yet because of pending animation, mark it as deleted
                    // so that we can ignore it later
                    for (index = 0, length = elementsToRemove.length; index < length; index++) {
                      elementsToRemove[index][NG_REMOVED] = true;
                    }
                  }
                  block.scope.$destroy();
                }

                // we are not using forEach for perf reasons (trying to avoid #call)
                for (index = 0; index < collectionLength; index++) {
                  key = collection === collectionKeys ? index : collectionKeys[index];
                  value = collection[key];
                  block = nextBlockOrder[index];

                  if (block.scope) {
                    // if we have already seen this object, then we need to reuse the
                    // associated scope/element

                    nextNode = previousNode;

                    // skip nodes that are already pending removal via leave animation
                    do {
                      nextNode = nextNode.nextSibling;
                    } while (nextNode && nextNode[NG_REMOVED]);

                    if (getBlockStart(block) != nextNode) {
                      // existing item which got moved
                      $animate.move(getBlockNodes(block.clone), null, previousNode);
                    }
                    previousNode = getBlockEnd(block);
                    updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                  } else {
                    // new item which we don't know about
                    $transclude(function ngRepeatTransclude(clone, scope) {
                      block.scope = scope;
                      // http://jsperf.com/clone-vs-createcomment
                      var endNode = ngRepeatEndComment.cloneNode(false);
                      clone[clone.length++] = endNode;

                      $animate.enter(clone, null, previousNode);
                      previousNode = endNode;
                      // Note: We only need the first/last node of the cloned nodes.
                      // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                      // by a directive with templateUrl when its template arrives.
                      block.clone = clone;
                      nextBlockMap[block.id] = block;
                      updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                    });
                  }
                }
                lastBlockMap = nextBlockMap;
              });
            };
          }
        };
      }];

      var NG_HIDE_CLASS = 'ng-hide';
      var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
      /**
       * @ngdoc directive
       * @name ngShow
       * @multiElement
       *
       * @description
       * The `ngShow` directive shows or hides the given HTML element based on the expression
       * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
       * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
       * in AngularJS and sets the display style to none (using an !important flag).
       * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
       *
       * ```html
       * <!-- when $scope.myValue is truthy (element is visible) -->
       * <div ng-show="myValue"></div>
       *
       * <!-- when $scope.myValue is falsy (element is hidden) -->
       * <div ng-show="myValue" class="ng-hide"></div>
       * ```
       *
       * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
       * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
       * from the element causing the element not to appear hidden.
       *
       * ## Why is !important used?
       *
       * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
       * can be easily overridden by heavier selectors. For example, something as simple
       * as changing the display style on a HTML list item would make hidden elements appear visible.
       * This also becomes a bigger issue when dealing with CSS frameworks.
       *
       * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
       * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
       * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
       *
       * ### Overriding `.ng-hide`
       *
       * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
       * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
       * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
       * with extra animation classes that can be added.
       *
       * ```css
       * .ng-hide:not(.ng-hide-animate) {
       *   /&#42; this is just another form of hiding an element &#42;/
       *   display: block!important;
       *   position: absolute;
       *   top: -9999px;
       *   left: -9999px;
       * }
       * ```
       *
       * By default you don't need to override in CSS anything and the animations will work around the display style.
       *
       * ## A note about animations with `ngShow`
       *
       * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
       * is true and false. This system works like the animation system present with ngClass except that
       * you must also include the !important flag to override the display property
       * so that you can perform an animation when the element is hidden during the time of the animation.
       *
       * ```css
       * //
       * //a working example can be found at the bottom of this page
       * //
       * .my-element.ng-hide-add, .my-element.ng-hide-remove {
       *   /&#42; this is required as of 1.3x to properly
       *      apply all styling in a show/hide animation &#42;/
       *   transition: 0s linear all;
       * }
       *
       * .my-element.ng-hide-add-active,
       * .my-element.ng-hide-remove-active {
       *   /&#42; the transition is defined in the active class &#42;/
       *   transition: 1s linear all;
       * }
       *
       * .my-element.ng-hide-add { ... }
       * .my-element.ng-hide-add.ng-hide-add-active { ... }
       * .my-element.ng-hide-remove { ... }
       * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
       * ```
       *
       * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
       * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
       *
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
       * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
       *
       * @element ANY
       * @param {expression} ngShow If the {@link guide/expression expression} is truthy
       *     then the element is shown or hidden respectively.
       *
       * @example
        <example module="ngAnimate" deps="angular-animate.js" animations="true">
          <file name="index.html">
            Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
            <div>
              Show:
              <div class="check-element animate-show" ng-show="checked">
                <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
              </div>
            </div>
            <div>
              Hide:
              <div class="check-element animate-show" ng-hide="checked">
                <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
              </div>
            </div>
          </file>
          <file name="glyphicons.css">
            @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
          </file>
          <file name="animations.css">
            .animate-show {
              line-height: 20px;
              opacity: 1;
              padding: 10px;
              border: 1px solid black;
              background: white;
            }
      
            .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
              transition: all linear 0.5s;
            }
      
            .animate-show.ng-hide {
              line-height: 0;
              opacity: 0;
              padding: 0 10px;
            }
      
            .check-element {
              padding: 10px;
              border: 1px solid black;
              background: white;
            }
          </file>
          <file name="protractor.js" type="protractor">
            var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
            var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
      
            it('should check ng-show / ng-hide', function() {
              expect(thumbsUp.isDisplayed()).toBeFalsy();
              expect(thumbsDown.isDisplayed()).toBeTruthy();
      
              element(by.model('checked')).click();
      
              expect(thumbsUp.isDisplayed()).toBeTruthy();
              expect(thumbsDown.isDisplayed()).toBeFalsy();
            });
          </file>
        </example>
       */
      var ngShowDirective = ['$animate', function ($animate) {
        return {
          restrict: 'A',
          multiElement: true,
          link: function (scope, element, attr) {
            scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
              // we're adding a temporary, animation-specific class for ng-hide since this way
              // we can control when the element is actually displayed on screen without having
              // to have a global/greedy CSS selector that breaks when other animations are run.
              // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
              $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
                tempClasses: NG_HIDE_IN_PROGRESS_CLASS
              });
            });
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngHide
       * @multiElement
       *
       * @description
       * The `ngHide` directive shows or hides the given HTML element based on the expression
       * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
       * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
       * in AngularJS and sets the display style to none (using an !important flag).
       * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
       *
       * ```html
       * <!-- when $scope.myValue is truthy (element is hidden) -->
       * <div ng-hide="myValue" class="ng-hide"></div>
       *
       * <!-- when $scope.myValue is falsy (element is visible) -->
       * <div ng-hide="myValue"></div>
       * ```
       *
       * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
       * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
       * from the element causing the element not to appear hidden.
       *
       * ## Why is !important used?
       *
       * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
       * can be easily overridden by heavier selectors. For example, something as simple
       * as changing the display style on a HTML list item would make hidden elements appear visible.
       * This also becomes a bigger issue when dealing with CSS frameworks.
       *
       * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
       * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
       * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
       *
       * ### Overriding `.ng-hide`
       *
       * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
       * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
       * class in CSS:
       *
       * ```css
       * .ng-hide {
       *   /&#42; this is just another form of hiding an element &#42;/
       *   display: block!important;
       *   position: absolute;
       *   top: -9999px;
       *   left: -9999px;
       * }
       * ```
       *
       * By default you don't need to override in CSS anything and the animations will work around the display style.
       *
       * ## A note about animations with `ngHide`
       *
       * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
       * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
       * CSS class is added and removed for you instead of your own CSS class.
       *
       * ```css
       * //
       * //a working example can be found at the bottom of this page
       * //
       * .my-element.ng-hide-add, .my-element.ng-hide-remove {
       *   transition: 0.5s linear all;
       * }
       *
       * .my-element.ng-hide-add { ... }
       * .my-element.ng-hide-add.ng-hide-add-active { ... }
       * .my-element.ng-hide-remove { ... }
       * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
       * ```
       *
       * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
       * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
       *
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
       * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
       *
       *
       * @element ANY
       * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
       *     the element is shown or hidden respectively.
       *
       * @example
        <example module="ngAnimate" deps="angular-animate.js" animations="true">
          <file name="index.html">
            Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
            <div>
              Show:
              <div class="check-element animate-hide" ng-show="checked">
                <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
              </div>
            </div>
            <div>
              Hide:
              <div class="check-element animate-hide" ng-hide="checked">
                <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
              </div>
            </div>
          </file>
          <file name="glyphicons.css">
            @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
          </file>
          <file name="animations.css">
            .animate-hide {
              transition: all linear 0.5s;
              line-height: 20px;
              opacity: 1;
              padding: 10px;
              border: 1px solid black;
              background: white;
            }
      
            .animate-hide.ng-hide {
              line-height: 0;
              opacity: 0;
              padding: 0 10px;
            }
      
            .check-element {
              padding: 10px;
              border: 1px solid black;
              background: white;
            }
          </file>
          <file name="protractor.js" type="protractor">
            var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
            var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
      
            it('should check ng-show / ng-hide', function() {
              expect(thumbsUp.isDisplayed()).toBeFalsy();
              expect(thumbsDown.isDisplayed()).toBeTruthy();
      
              element(by.model('checked')).click();
      
              expect(thumbsUp.isDisplayed()).toBeTruthy();
              expect(thumbsDown.isDisplayed()).toBeFalsy();
            });
          </file>
        </example>
       */
      var ngHideDirective = ['$animate', function ($animate) {
        return {
          restrict: 'A',
          multiElement: true,
          link: function (scope, element, attr) {
            scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
              // The comment inside of the ngShowDirective explains why we add and
              // remove a temporary class for the show/hide animation
              $animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, {
                tempClasses: NG_HIDE_IN_PROGRESS_CLASS
              });
            });
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name ngStyle
       * @restrict AC
       *
       * @description
       * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
       *
       * @knownIssue
       * You should not use {@link guide/interpolation interpolation} in the value of the `style`
       * attribute, when using the `ngStyle` directive on the same element.
       * See {@link guide/interpolation#known-issues here} for more info.
       *
       * @element ANY
       * @param {expression} ngStyle
       *
       * {@link guide/expression Expression} which evals to an
       * object whose keys are CSS style names and values are corresponding values for those CSS
       * keys.
       *
       * Since some CSS style names are not valid keys for an object, they must be quoted.
       * See the 'background-color' style in the example below.
       *
       * @example
         <example>
           <file name="index.html">
              <input type="button" value="set color" ng-click="myStyle={color:'red'}">
              <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
              <input type="button" value="clear" ng-click="myStyle={}">
              <br/>
              <span ng-style="myStyle">Sample Text</span>
              <pre>myStyle={{myStyle}}</pre>
           </file>
           <file name="style.css">
             span {
               color: black;
             }
           </file>
           <file name="protractor.js" type="protractor">
             var colorSpan = element(by.css('span'));
      
             it('should check ng-style', function() {
               expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
               element(by.css('input[value=\'set color\']')).click();
               expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
               element(by.css('input[value=clear]')).click();
               expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
             });
           </file>
         </example>
       */
      var ngStyleDirective = ngDirective(function (scope, element, attr) {
        scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
          if (oldStyles && newStyles !== oldStyles) {
            forEach(oldStyles, function (val, style) {
              element.css(style, '');
            });
          }
          if (newStyles) element.css(newStyles);
        }, true);
      });

      /**
       * @ngdoc directive
       * @name ngSwitch
       * @restrict EA
       *
       * @description
       * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
       * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
       * as specified in the template.
       *
       * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
       * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
       * matches the value obtained from the evaluated expression. In other words, you define a container element
       * (where you place the directive), place an expression on the **`on="..."` attribute**
       * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
       * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
       * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
       * attribute is displayed.
       *
       * <div class="alert alert-info">
       * Be aware that the attribute values to match against cannot be expressions. They are interpreted
       * as literal string values to match against.
       * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
       * value of the expression `$scope.someVal`.
       * </div>
      
       * @animations
       * | Animation                        | Occurs                              |
       * |----------------------------------|-------------------------------------|
       * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
       * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
       *
       * @usage
       *
       * ```
       * <ANY ng-switch="expression">
       *   <ANY ng-switch-when="matchValue1">...</ANY>
       *   <ANY ng-switch-when="matchValue2">...</ANY>
       *   <ANY ng-switch-default>...</ANY>
       * </ANY>
       * ```
       *
       *
       * @scope
       * @priority 1200
       * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
       * On child elements add:
       *
       * * `ngSwitchWhen`: the case statement to match against. If match then this
       *   case will be displayed. If the same match appears multiple times, all the
       *   elements will be displayed.
       * * `ngSwitchDefault`: the default case when no other case match. If there
       *   are multiple default cases, all of them will be displayed when no other
       *   case match.
       *
       *
       * @example
        <example module="switchExample" deps="angular-animate.js" animations="true">
          <file name="index.html">
            <div ng-controller="ExampleController">
              <select ng-model="selection" ng-options="item for item in items">
              </select>
              <code>selection={{selection}}</code>
              <hr/>
              <div class="animate-switch-container"
                ng-switch on="selection">
                  <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
                  <div class="animate-switch" ng-switch-when="home">Home Span</div>
                  <div class="animate-switch" ng-switch-default>default</div>
              </div>
            </div>
          </file>
          <file name="script.js">
            angular.module('switchExample', ['ngAnimate'])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.items = ['settings', 'home', 'other'];
                $scope.selection = $scope.items[0];
              }]);
          </file>
          <file name="animations.css">
            .animate-switch-container {
              position:relative;
              background:white;
              border:1px solid black;
              height:40px;
              overflow:hidden;
            }
      
            .animate-switch {
              padding:10px;
            }
      
            .animate-switch.ng-animate {
              transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      
              position:absolute;
              top:0;
              left:0;
              right:0;
              bottom:0;
            }
      
            .animate-switch.ng-leave.ng-leave-active,
            .animate-switch.ng-enter {
              top:-50px;
            }
            .animate-switch.ng-leave,
            .animate-switch.ng-enter.ng-enter-active {
              top:0;
            }
          </file>
          <file name="protractor.js" type="protractor">
            var switchElem = element(by.css('[ng-switch]'));
            var select = element(by.model('selection'));
      
            it('should start in settings', function() {
              expect(switchElem.getText()).toMatch(/Settings Div/);
            });
            it('should change to home', function() {
              select.all(by.css('option')).get(1).click();
              expect(switchElem.getText()).toMatch(/Home Span/);
            });
            it('should select default', function() {
              select.all(by.css('option')).get(2).click();
              expect(switchElem.getText()).toMatch(/default/);
            });
          </file>
        </example>
       */
      var ngSwitchDirective = ['$animate', '$compile', function ($animate, $compile) {
        return {
          require: 'ngSwitch',

          // asks for $scope to fool the BC controller module
          controller: ['$scope', function ngSwitchController() {
            this.cases = {};
          }],
          link: function (scope, element, attr, ngSwitchController) {
            var watchExpr = attr.ngSwitch || attr.on,
                selectedTranscludes = [],
                selectedElements = [],
                previousLeaveAnimations = [],
                selectedScopes = [];

            var spliceFactory = function (array, index) {
              return function () {
                array.splice(index, 1);
              };
            };

            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
              var i, ii;
              for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
                $animate.cancel(previousLeaveAnimations[i]);
              }
              previousLeaveAnimations.length = 0;

              for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                var selected = getBlockNodes(selectedElements[i].clone);
                selectedScopes[i].$destroy();
                var promise = previousLeaveAnimations[i] = $animate.leave(selected);
                promise.then(spliceFactory(previousLeaveAnimations, i));
              }

              selectedElements.length = 0;
              selectedScopes.length = 0;

              if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                forEach(selectedTranscludes, function (selectedTransclude) {
                  selectedTransclude.transclude(function (caseElement, selectedScope) {
                    selectedScopes.push(selectedScope);
                    var anchor = selectedTransclude.element;
                    caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
                    var block = { clone: caseElement };

                    selectedElements.push(block);
                    $animate.enter(caseElement, anchor.parent(), anchor);
                  });
                });
              }
            });
          }
        };
      }];

      var ngSwitchWhenDirective = ngDirective({
        transclude: 'element',
        priority: 1200,
        require: '^ngSwitch',
        multiElement: true,
        link: function (scope, element, attrs, ctrl, $transclude) {
          ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
          ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
        }
      });

      var ngSwitchDefaultDirective = ngDirective({
        transclude: 'element',
        priority: 1200,
        require: '^ngSwitch',
        multiElement: true,
        link: function (scope, element, attr, ctrl, $transclude) {
          ctrl.cases['?'] = ctrl.cases['?'] || [];
          ctrl.cases['?'].push({ transclude: $transclude, element: element });
        }
      });

      /**
       * @ngdoc directive
       * @name ngTransclude
       * @restrict EAC
       *
       * @description
       * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
       *
       * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
       * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
       *
       * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
       * content of this element will be removed before the transcluded content is inserted.
       * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
       * that no transcluded content is provided.
       *
       * @element ANY
       *
       * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
       *                                               or its value is the same as the name of the attribute then the default slot is used.
       *
       * @example
       * ### Basic transclusion
       * This example demonstrates basic transclusion of content into a component directive.
       * <example name="simpleTranscludeExample" module="transcludeExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('transcludeExample', [])
       *        .directive('pane', function(){
       *           return {
       *             restrict: 'E',
       *             transclude: true,
       *             scope: { title:'@' },
       *             template: '<div style="border: 1px solid black;">' +
       *                         '<div style="background-color: gray">{{title}}</div>' +
       *                         '<ng-transclude></ng-transclude>' +
       *                       '</div>'
       *           };
       *       })
       *       .controller('ExampleController', ['$scope', function($scope) {
       *         $scope.title = 'Lorem Ipsum';
       *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
       *       }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <input ng-model="title" aria-label="title"> <br/>
       *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
       *       <pane title="{{title}}">{{text}}</pane>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *      it('should have transcluded', function() {
       *        var titleElement = element(by.model('title'));
       *        titleElement.clear();
       *        titleElement.sendKeys('TITLE');
       *        var textElement = element(by.model('text'));
       *        textElement.clear();
       *        textElement.sendKeys('TEXT');
       *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
       *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
       *      });
       *   </file>
       * </example>
       *
       * @example
       * ### Transclude fallback content
       * This example shows how to use `NgTransclude` with fallback content, that
       * is displayed if no transcluded content is provided.
       *
       * <example module="transcludeFallbackContentExample">
       * <file name="index.html">
       * <script>
       * angular.module('transcludeFallbackContentExample', [])
       * .directive('myButton', function(){
       *             return {
       *               restrict: 'E',
       *               transclude: true,
       *               scope: true,
       *               template: '<button style="cursor: pointer;">' +
       *                           '<ng-transclude>' +
       *                             '<b style="color: red;">Button1</b>' +
       *                           '</ng-transclude>' +
       *                         '</button>'
       *             };
       *         });
       * </script>
       * <!-- fallback button content -->
       * <my-button id="fallback"></my-button>
       * <!-- modified button content -->
       * <my-button id="modified">
       *   <i style="color: green;">Button2</i>
       * </my-button>
       * </file>
       * <file name="protractor.js" type="protractor">
       * it('should have different transclude element content', function() {
       *          expect(element(by.id('fallback')).getText()).toBe('Button1');
       *          expect(element(by.id('modified')).getText()).toBe('Button2');
       *        });
       * </file>
       * </example>
       *
       * @example
       * ### Multi-slot transclusion
       * This example demonstrates using multi-slot transclusion in a component directive.
       * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
       *   <file name="index.html">
       *    <style>
       *      .title, .footer {
       *        background-color: gray
       *      }
       *    </style>
       *    <div ng-controller="ExampleController">
       *      <input ng-model="title" aria-label="title"> <br/>
       *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
       *      <pane>
       *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
       *        <pane-body><p>{{text}}</p></pane-body>
       *      </pane>
       *    </div>
       *   </file>
       *   <file name="app.js">
       *    angular.module('multiSlotTranscludeExample', [])
       *     .directive('pane', function(){
       *        return {
       *          restrict: 'E',
       *          transclude: {
       *            'title': '?paneTitle',
       *            'body': 'paneBody',
       *            'footer': '?paneFooter'
       *          },
       *          template: '<div style="border: 1px solid black;">' +
       *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
       *                      '<div ng-transclude="body"></div>' +
       *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
       *                    '</div>'
       *        };
       *    })
       *    .controller('ExampleController', ['$scope', function($scope) {
       *      $scope.title = 'Lorem Ipsum';
       *      $scope.link = "https://google.com";
       *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
       *    }]);
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *      it('should have transcluded the title and the body', function() {
       *        var titleElement = element(by.model('title'));
       *        titleElement.clear();
       *        titleElement.sendKeys('TITLE');
       *        var textElement = element(by.model('text'));
       *        textElement.clear();
       *        textElement.sendKeys('TEXT');
       *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
       *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
       *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
       *      });
       *   </file>
       * </example>
       */
      var ngTranscludeMinErr = minErr('ngTransclude');
      var ngTranscludeDirective = ['$compile', function ($compile) {
        return {
          restrict: 'EAC',
          terminal: true,
          compile: function ngTranscludeCompile(tElement) {

            // Remove and cache any original content to act as a fallback
            var fallbackLinkFn = $compile(tElement.contents());
            tElement.empty();

            return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {

              if (!$transclude) {
                throw ngTranscludeMinErr('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
              }

              // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
              if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
                $attrs.ngTransclude = '';
              }
              var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;

              // If the slot is required and no transclusion content is provided then this call will throw an error
              $transclude(ngTranscludeCloneAttachFn, null, slotName);

              // If the slot is optional and no transclusion content is provided then use the fallback content
              if (slotName && !$transclude.isSlotFilled(slotName)) {
                useFallbackContent();
              }

              function ngTranscludeCloneAttachFn(clone, transcludedScope) {
                if (clone.length) {
                  $element.append(clone);
                } else {
                  useFallbackContent();
                  // There is nothing linked against the transcluded scope since no content was available,
                  // so it should be safe to clean up the generated scope.
                  transcludedScope.$destroy();
                }
              }

              function useFallbackContent() {
                // Since this is the fallback content rather than the transcluded content,
                // we link against the scope of this directive rather than the transcluded scope
                fallbackLinkFn($scope, function (clone) {
                  $element.append(clone);
                });
              }
            };
          }
        };
      }];

      /**
       * @ngdoc directive
       * @name script
       * @restrict E
       *
       * @description
       * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
       * template can be used by {@link ng.directive:ngInclude `ngInclude`},
       * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
       * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
       * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
       *
       * @param {string} type Must be set to `'text/ng-template'`.
       * @param {string} id Cache name of the template.
       *
       * @example
        <example>
          <file name="index.html">
            <script type="text/ng-template" id="/tpl.html">
              Content of the template.
            </script>
      
            <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
            <div id="tpl-content" ng-include src="currentTpl"></div>
          </file>
          <file name="protractor.js" type="protractor">
            it('should load template defined inside script tag', function() {
              element(by.css('#tpl-link')).click();
              expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
            });
          </file>
        </example>
       */
      var scriptDirective = ['$templateCache', function ($templateCache) {
        return {
          restrict: 'E',
          terminal: true,
          compile: function (element, attr) {
            if (attr.type == 'text/ng-template') {
              var templateUrl = attr.id,
                  text = element[0].text;

              $templateCache.put(templateUrl, text);
            }
          }
        };
      }];

      var noopNgModelController = { $setViewValue: noop, $render: noop };

      function chromeHack(optionElement) {
        // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
        // Adding an <option selected="selected"> element to a <select required="required"> should
        // automatically select the new element
        if (optionElement[0].hasAttribute('selected')) {
          optionElement[0].selected = true;
        }
      }

      /**
       * @ngdoc type
       * @name  select.SelectController
       * @description
       * The controller for the `<select>` directive. This provides support for reading
       * and writing the selected value(s) of the control and also coordinates dynamically
       * added `<option>` elements, perhaps by an `ngRepeat` directive.
       */
      var SelectController = ['$element', '$scope', function ($element, $scope) {

        var self = this,
            optionsMap = new HashMap();

        // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
        self.ngModelCtrl = noopNgModelController;

        // The "unknown" option is one that is prepended to the list if the viewValue
        // does not match any of the options. When it is rendered the value of the unknown
        // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
        //
        // We can't just jqLite('<option>') since jqLite is not smart enough
        // to create it in <select> and IE barfs otherwise.
        self.unknownOption = jqLite(window.document.createElement('option'));
        self.renderUnknownOption = function (val) {
          var unknownVal = '? ' + hashKey(val) + ' ?';
          self.unknownOption.val(unknownVal);
          $element.prepend(self.unknownOption);
          $element.val(unknownVal);
        };

        $scope.$on('$destroy', function () {
          // disable unknown option so that we don't do work when the whole select is being destroyed
          self.renderUnknownOption = noop;
        });

        self.removeUnknownOption = function () {
          if (self.unknownOption.parent()) self.unknownOption.remove();
        };

        // Read the value of the select control, the implementation of this changes depending
        // upon whether the select can have multiple values and whether ngOptions is at work.
        self.readValue = function readSingleValue() {
          self.removeUnknownOption();
          return $element.val();
        };

        // Write the value to the select control, the implementation of this changes depending
        // upon whether the select can have multiple values and whether ngOptions is at work.
        self.writeValue = function writeSingleValue(value) {
          if (self.hasOption(value)) {
            self.removeUnknownOption();
            $element.val(value);
            if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (value == null && self.emptyOption) {
              self.removeUnknownOption();
              $element.val('');
            } else {
              self.renderUnknownOption(value);
            }
          }
        };

        // Tell the select control that an option, with the given value, has been added
        self.addOption = function (value, element) {
          // Skip comment nodes, as they only pollute the `optionsMap`
          if (element[0].nodeType === NODE_TYPE_COMMENT) return;

          assertNotHasOwnProperty(value, '"option value"');
          if (value === '') {
            self.emptyOption = element;
          }
          var count = optionsMap.get(value) || 0;
          optionsMap.put(value, count + 1);
          self.ngModelCtrl.$render();
          chromeHack(element);
        };

        // Tell the select control that an option, with the given value, has been removed
        self.removeOption = function (value) {
          var count = optionsMap.get(value);
          if (count) {
            if (count === 1) {
              optionsMap.remove(value);
              if (value === '') {
                self.emptyOption = undefined;
              }
            } else {
              optionsMap.put(value, count - 1);
            }
          }
        };

        // Check whether the select control has an option matching the given value
        self.hasOption = function (value) {
          return !!optionsMap.get(value);
        };

        self.registerOption = function (optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

          if (interpolateValueFn) {
            // The value attribute is interpolated
            var oldVal;
            optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
              if (isDefined(oldVal)) {
                self.removeOption(oldVal);
              }
              oldVal = newVal;
              self.addOption(newVal, optionElement);
            });
          } else if (interpolateTextFn) {
            // The text content is interpolated
            optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
              optionAttrs.$set('value', newVal);
              if (oldVal !== newVal) {
                self.removeOption(oldVal);
              }
              self.addOption(newVal, optionElement);
            });
          } else {
            // The value attribute is static
            self.addOption(optionAttrs.value, optionElement);
          }

          optionElement.on('$destroy', function () {
            self.removeOption(optionAttrs.value);
            self.ngModelCtrl.$render();
          });
        };
      }];

      /**
       * @ngdoc directive
       * @name select
       * @restrict E
       *
       * @description
       * HTML `SELECT` element with angular data-binding.
       *
       * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
       * between the scope and the `<select>` control (including setting default values).
       * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
       * {@link ngOptions `ngOptions`} directives.
       *
       * When an item in the `<select>` menu is selected, the value of the selected option will be bound
       * to the model identified by the `ngModel` directive. With static or repeated options, this is
       * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
       * If you want dynamic value attributes, you can use interpolation inside the value attribute.
       *
       * <div class="alert alert-warning">
       * Note that the value of a `select` directive used without `ngOptions` is always a string.
       * When the model needs to be bound to a non-string value, you must either explicitly convert it
       * using a directive (see example below) or use `ngOptions` to specify the set of options.
       * This is because an option element can only be bound to string values at present.
       * </div>
       *
       * If the viewValue of `ngModel` does not match any of the options, then the control
       * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
       *
       * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
       * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
       * option. See example below for demonstration.
       *
       * <div class="alert alert-info">
       * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
       * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
       * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
       * comprehension expression, and additionally in reducing memory and increasing speed by not creating
       * a new scope for each repeated instance.
       * </div>
       *
       *
       * @param {string} ngModel Assignable angular expression to data-bind to.
       * @param {string=} name Property name of the form under which the control is published.
       * @param {string=} multiple Allows multiple options to be selected. The selected values will be
       *     bound to the model as an array.
       * @param {string=} required Sets `required` validation error key if the value is not entered.
       * @param {string=} ngRequired Adds required attribute and required validation constraint to
       * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
       * when you want to data-bind to the required attribute.
       * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
       *    interaction with the select element.
       * @param {string=} ngOptions sets the options that the select is populated with and defines what is
       * set on the model on selection. See {@link ngOptions `ngOptions`}.
       *
       * @example
       * ### Simple `select` elements with static options
       *
       * <example name="static-select" module="staticSelect">
       * <file name="index.html">
       * <div ng-controller="ExampleController">
       *   <form name="myForm">
       *     <label for="singleSelect"> Single select: </label><br>
       *     <select name="singleSelect" ng-model="data.singleSelect">
       *       <option value="option-1">Option 1</option>
       *       <option value="option-2">Option 2</option>
       *     </select><br>
       *
       *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
       *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
       *       <option value="">---Please select---</option> <!-- not selected / blank option -->
       *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
       *       <option value="option-2">Option 2</option>
       *     </select><br>
       *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
       *     <tt>singleSelect = {{data.singleSelect}}</tt>
       *
       *     <hr>
       *     <label for="multipleSelect"> Multiple select: </label><br>
       *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
       *       <option value="option-1">Option 1</option>
       *       <option value="option-2">Option 2</option>
       *       <option value="option-3">Option 3</option>
       *     </select><br>
       *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
       *   </form>
       * </div>
       * </file>
       * <file name="app.js">
       *  angular.module('staticSelect', [])
       *    .controller('ExampleController', ['$scope', function($scope) {
       *      $scope.data = {
       *       singleSelect: null,
       *       multipleSelect: [],
       *       option1: 'option-1',
       *      };
       *
       *      $scope.forceUnknownOption = function() {
       *        $scope.data.singleSelect = 'nonsense';
       *      };
       *   }]);
       * </file>
       *</example>
       *
       * ### Using `ngRepeat` to generate `select` options
       * <example name="ngrepeat-select" module="ngrepeatSelect">
       * <file name="index.html">
       * <div ng-controller="ExampleController">
       *   <form name="myForm">
       *     <label for="repeatSelect"> Repeat select: </label>
       *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
       *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
       *     </select>
       *   </form>
       *   <hr>
       *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
       * </div>
       * </file>
       * <file name="app.js">
       *  angular.module('ngrepeatSelect', [])
       *    .controller('ExampleController', ['$scope', function($scope) {
       *      $scope.data = {
       *       repeatSelect: null,
       *       availableOptions: [
       *         {id: '1', name: 'Option A'},
       *         {id: '2', name: 'Option B'},
       *         {id: '3', name: 'Option C'}
       *       ],
       *      };
       *   }]);
       * </file>
       *</example>
       *
       *
       * ### Using `select` with `ngOptions` and setting a default value
       * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
       *
       * <example name="select-with-default-values" module="defaultValueSelect">
       * <file name="index.html">
       * <div ng-controller="ExampleController">
       *   <form name="myForm">
       *     <label for="mySelect">Make a choice:</label>
       *     <select name="mySelect" id="mySelect"
       *       ng-options="option.name for option in data.availableOptions track by option.id"
       *       ng-model="data.selectedOption"></select>
       *   </form>
       *   <hr>
       *   <tt>option = {{data.selectedOption}}</tt><br/>
       * </div>
       * </file>
       * <file name="app.js">
       *  angular.module('defaultValueSelect', [])
       *    .controller('ExampleController', ['$scope', function($scope) {
       *      $scope.data = {
       *       availableOptions: [
       *         {id: '1', name: 'Option A'},
       *         {id: '2', name: 'Option B'},
       *         {id: '3', name: 'Option C'}
       *       ],
       *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
       *       };
       *   }]);
       * </file>
       *</example>
       *
       *
       * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
       *
       * <example name="select-with-non-string-options" module="nonStringSelect">
       *   <file name="index.html">
       *     <select ng-model="model.id" convert-to-number>
       *       <option value="0">Zero</option>
       *       <option value="1">One</option>
       *       <option value="2">Two</option>
       *     </select>
       *     {{ model }}
       *   </file>
       *   <file name="app.js">
       *     angular.module('nonStringSelect', [])
       *       .run(function($rootScope) {
       *         $rootScope.model = { id: 2 };
       *       })
       *       .directive('convertToNumber', function() {
       *         return {
       *           require: 'ngModel',
       *           link: function(scope, element, attrs, ngModel) {
       *             ngModel.$parsers.push(function(val) {
       *               return parseInt(val, 10);
       *             });
       *             ngModel.$formatters.push(function(val) {
       *               return '' + val;
       *             });
       *           }
       *         };
       *       });
       *   </file>
       *   <file name="protractor.js" type="protractor">
       *     it('should initialize to model', function() {
       *       var select = element(by.css('select'));
       *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
       *     });
       *   </file>
       * </example>
       *
       */
      var selectDirective = function () {

        return {
          restrict: 'E',
          require: ['select', '?ngModel'],
          controller: SelectController,
          priority: 1,
          link: {
            pre: selectPreLink,
            post: selectPostLink
          }
        };

        function selectPreLink(scope, element, attr, ctrls) {

          // if ngModel is not defined, we don't need to do anything
          var ngModelCtrl = ctrls[1];
          if (!ngModelCtrl) return;

          var selectCtrl = ctrls[0];

          selectCtrl.ngModelCtrl = ngModelCtrl;

          // When the selected item(s) changes we delegate getting the value of the select control
          // to the `readValue` method, which can be changed if the select can have multiple
          // selected values or if the options are being generated by `ngOptions`
          element.on('change', function () {
            scope.$apply(function () {
              ngModelCtrl.$setViewValue(selectCtrl.readValue());
            });
          });

          // If the select allows multiple values then we need to modify how we read and write
          // values from and to the control; also what it means for the value to be empty and
          // we have to add an extra watch since ngModel doesn't work well with arrays - it
          // doesn't trigger rendering if only an item in the array changes.
          if (attr.multiple) {

            // Read value now needs to check each option to see if it is selected
            selectCtrl.readValue = function readMultipleValue() {
              var array = [];
              forEach(element.find('option'), function (option) {
                if (option.selected) {
                  array.push(option.value);
                }
              });
              return array;
            };

            // Write value now needs to set the selected property of each matching option
            selectCtrl.writeValue = function writeMultipleValue(value) {
              var items = new HashMap(value);
              forEach(element.find('option'), function (option) {
                option.selected = isDefined(items.get(option.value));
              });
            };

            // we have to do it on each watch since ngModel watches reference, but
            // we need to work of an array, so we need to see if anything was inserted/removed
            var lastView,
                lastViewRef = NaN;
            scope.$watch(function selectMultipleWatch() {
              if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                lastView = shallowCopy(ngModelCtrl.$viewValue);
                ngModelCtrl.$render();
              }
              lastViewRef = ngModelCtrl.$viewValue;
            });

            // If we are a multiple select then value is now a collection
            // so the meaning of $isEmpty changes
            ngModelCtrl.$isEmpty = function (value) {
              return !value || value.length === 0;
            };
          }
        }

        function selectPostLink(scope, element, attrs, ctrls) {
          // if ngModel is not defined, we don't need to do anything
          var ngModelCtrl = ctrls[1];
          if (!ngModelCtrl) return;

          var selectCtrl = ctrls[0];

          // We delegate rendering to the `writeValue` method, which can be changed
          // if the select can have multiple selected values or if the options are being
          // generated by `ngOptions`.
          // This must be done in the postLink fn to prevent $render to be called before
          // all nodes have been linked correctly.
          ngModelCtrl.$render = function () {
            selectCtrl.writeValue(ngModelCtrl.$viewValue);
          };
        }
      };

      // The option directive is purely designed to communicate the existence (or lack of)
      // of dynamically created (and destroyed) option elements to their containing select
      // directive via its controller.
      var optionDirective = ['$interpolate', function ($interpolate) {
        return {
          restrict: 'E',
          priority: 100,
          compile: function (element, attr) {
            if (isDefined(attr.value)) {
              // If the value attribute is defined, check if it contains an interpolation
              var interpolateValueFn = $interpolate(attr.value, true);
            } else {
              // If the value attribute is not defined then we fall back to the
              // text content of the option element, which may be interpolated
              var interpolateTextFn = $interpolate(element.text(), true);
              if (!interpolateTextFn) {
                attr.$set('value', element.text());
              }
            }

            return function (scope, element, attr) {
              // This is an optimization over using ^^ since we don't want to have to search
              // all the way to the root of the DOM for every single option element
              var selectCtrlName = '$selectController',
                  parent = element.parent(),
                  selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName); // in case we are in optgroup

              if (selectCtrl) {
                selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
              }
            };
          }
        };
      }];

      var styleDirective = valueFn({
        restrict: 'E',
        terminal: false
      });

      /**
       * @ngdoc directive
       * @name ngRequired
       * @restrict A
       *
       * @description
       *
       * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
       * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
       * applied to custom controls.
       *
       * The directive sets the `required` attribute on the element if the Angular expression inside
       * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
       * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
       * for more info.
       *
       * The validator will set the `required` error key to true if the `required` attribute is set and
       * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
       * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
       * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
       * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
       *
       * @example
       * <example name="ngRequiredDirective" module="ngRequiredExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('ngRequiredExample', [])
       *         .controller('ExampleController', ['$scope', function($scope) {
       *           $scope.required = true;
       *         }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <form name="form">
       *         <label for="required">Toggle required: </label>
       *         <input type="checkbox" ng-model="required" id="required" />
       *         <br>
       *         <label for="input">This input must be filled if `required` is true: </label>
       *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
       *         <hr>
       *         required error set? = <code>{{form.input.$error.required}}</code><br>
       *         model = <code>{{model}}</code>
       *       </form>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
             var required = element(by.binding('form.input.$error.required'));
             var model = element(by.binding('model'));
             var input = element(by.id('input'));
      
             it('should set the required error', function() {
               expect(required.getText()).toContain('true');
      
               input.sendKeys('123');
               expect(required.getText()).not.toContain('true');
               expect(model.getText()).toContain('123');
             });
       *   </file>
       * </example>
       */
      var requiredDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl) return;
            attr.required = true; // force truthy in case we are on non input element

            ctrl.$validators.required = function (modelValue, viewValue) {
              return !attr.required || !ctrl.$isEmpty(viewValue);
            };

            attr.$observe('required', function () {
              ctrl.$validate();
            });
          }
        };
      };

      /**
       * @ngdoc directive
       * @name ngPattern
       *
       * @description
       *
       * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
       * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
       *
       * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
       * does not match a RegExp which is obtained by evaluating the Angular expression given in the
       * `ngPattern` attribute value:
       * * If the expression evaluates to a RegExp object, then this is used directly.
       * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
       * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
       *
       * <div class="alert alert-info">
       * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
       * start at the index of the last search's match, thus not taking the whole input value into
       * account.
       * </div>
       *
       * <div class="alert alert-info">
       * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
       * differences:
       * <ol>
       *   <li>
       *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
       *     not available.
       *   </li>
       *   <li>
       *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
       *     interpolated.
       *   </li>
       * </ol>
       * </div>
       *
       * @example
       * <example name="ngPatternDirective" module="ngPatternExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('ngPatternExample', [])
       *         .controller('ExampleController', ['$scope', function($scope) {
       *           $scope.regex = '\\d+';
       *         }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <form name="form">
       *         <label for="regex">Set a pattern (regex string): </label>
       *         <input type="text" ng-model="regex" id="regex" />
       *         <br>
       *         <label for="input">This input is restricted by the current pattern: </label>
       *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
       *         <hr>
       *         input valid? = <code>{{form.input.$valid}}</code><br>
       *         model = <code>{{model}}</code>
       *       </form>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
             var model = element(by.binding('model'));
             var input = element(by.id('input'));
      
             it('should validate the input with the default pattern', function() {
               input.sendKeys('aaa');
               expect(model.getText()).not.toContain('aaa');
      
               input.clear().then(function() {
                 input.sendKeys('123');
                 expect(model.getText()).toContain('123');
               });
             });
       *   </file>
       * </example>
       */
      var patternDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl) return;

            var regexp,
                patternExp = attr.ngPattern || attr.pattern;
            attr.$observe('pattern', function (regex) {
              if (isString(regex) && regex.length > 0) {
                regex = new RegExp('^' + regex + '$');
              }

              if (regex && !regex.test) {
                throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp, regex, startingTag(elm));
              }

              regexp = regex || undefined;
              ctrl.$validate();
            });

            ctrl.$validators.pattern = function (modelValue, viewValue) {
              // HTML5 pattern constraint validates the input value, so we validate the viewValue
              return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
            };
          }
        };
      };

      /**
       * @ngdoc directive
       * @name ngMaxlength
       *
       * @description
       *
       * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
       * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
       *
       * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
       * is longer than the integer obtained by evaluating the Angular expression given in the
       * `ngMaxlength` attribute value.
       *
       * <div class="alert alert-info">
       * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
       * differences:
       * <ol>
       *   <li>
       *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
       *     validation is not available.
       *   </li>
       *   <li>
       *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
       *     interpolated.
       *   </li>
       * </ol>
       * </div>
       *
       * @example
       * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('ngMaxlengthExample', [])
       *         .controller('ExampleController', ['$scope', function($scope) {
       *           $scope.maxlength = 5;
       *         }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <form name="form">
       *         <label for="maxlength">Set a maxlength: </label>
       *         <input type="number" ng-model="maxlength" id="maxlength" />
       *         <br>
       *         <label for="input">This input is restricted by the current maxlength: </label>
       *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
       *         <hr>
       *         input valid? = <code>{{form.input.$valid}}</code><br>
       *         model = <code>{{model}}</code>
       *       </form>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
             var model = element(by.binding('model'));
             var input = element(by.id('input'));
      
             it('should validate the input with the default maxlength', function() {
               input.sendKeys('abcdef');
               expect(model.getText()).not.toContain('abcdef');
      
               input.clear().then(function() {
                 input.sendKeys('abcde');
                 expect(model.getText()).toContain('abcde');
               });
             });
       *   </file>
       * </example>
       */
      var maxlengthDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl) return;

            var maxlength = -1;
            attr.$observe('maxlength', function (value) {
              var intVal = toInt(value);
              maxlength = isNaN(intVal) ? -1 : intVal;
              ctrl.$validate();
            });
            ctrl.$validators.maxlength = function (modelValue, viewValue) {
              return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
            };
          }
        };
      };

      /**
       * @ngdoc directive
       * @name ngMinlength
       *
       * @description
       *
       * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
       * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
       *
       * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
       * is shorter than the integer obtained by evaluating the Angular expression given in the
       * `ngMinlength` attribute value.
       *
       * <div class="alert alert-info">
       * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
       * differences:
       * <ol>
       *   <li>
       *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
       *     validation is not available.
       *   </li>
       *   <li>
       *     The `ngMinlength` value must be an expression, while the `minlength` value must be
       *     interpolated.
       *   </li>
       * </ol>
       * </div>
       *
       * @example
       * <example name="ngMinlengthDirective" module="ngMinlengthExample">
       *   <file name="index.html">
       *     <script>
       *       angular.module('ngMinlengthExample', [])
       *         .controller('ExampleController', ['$scope', function($scope) {
       *           $scope.minlength = 3;
       *         }]);
       *     </script>
       *     <div ng-controller="ExampleController">
       *       <form name="form">
       *         <label for="minlength">Set a minlength: </label>
       *         <input type="number" ng-model="minlength" id="minlength" />
       *         <br>
       *         <label for="input">This input is restricted by the current minlength: </label>
       *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
       *         <hr>
       *         input valid? = <code>{{form.input.$valid}}</code><br>
       *         model = <code>{{model}}</code>
       *       </form>
       *     </div>
       *   </file>
       *   <file name="protractor.js" type="protractor">
             var model = element(by.binding('model'));
             var input = element(by.id('input'));
      
             it('should validate the input with the default minlength', function() {
               input.sendKeys('ab');
               expect(model.getText()).not.toContain('ab');
      
               input.sendKeys('abc');
               expect(model.getText()).toContain('abc');
             });
       *   </file>
       * </example>
       */
      var minlengthDirective = function () {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function (scope, elm, attr, ctrl) {
            if (!ctrl) return;

            var minlength = 0;
            attr.$observe('minlength', function (value) {
              minlength = toInt(value) || 0;
              ctrl.$validate();
            });
            ctrl.$validators.minlength = function (modelValue, viewValue) {
              return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
            };
          }
        };
      };

      if (window.angular.bootstrap) {
        //AngularJS is already loaded, so we can return here...
        if (window.console) {
          console.log('WARNING: Tried to load angular more than once.');
        }
        return;
      }

      //try to bind to jquery now so that one can write jqLite(document).ready()
      //but we will rebind on bootstrap again.
      bindJQuery();

      publishExternalAPI(angular);

      angular.module("ngLocale", [], ["$provide", function ($provide) {
        var PLURAL_CATEGORY = { ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other" };
        function getDecimals(n) {
          n = n + '';
          var i = n.indexOf('.');
          return i == -1 ? 0 : n.length - i - 1;
        }

        function getVF(n, opt_precision) {
          var v = opt_precision;

          if (undefined === v) {
            v = Math.min(getDecimals(n), 3);
          }

          var base = Math.pow(10, v);
          var f = (n * base | 0) % base;
          return { v: v, f: f };
        }

        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": ["AM", "PM"],
            "DAY": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            "ERANAMES": ["Before Christ", "Anno Domini"],
            "ERAS": ["BC", "AD"],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "SHORTDAY": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            "SHORTMONTH": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            "STANDALONEMONTH": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "WEEKENDRANGE": [5, 6],
            "fullDate": "EEEE, MMMM d, y",
            "longDate": "MMMM d, y",
            "medium": "MMM d, y h:mm:ss a",
            "mediumDate": "MMM d, y",
            "mediumTime": "h:mm:ss a",
            "short": "M/d/yy h:mm a",
            "shortDate": "M/d/yy",
            "shortTime": "h:mm a"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [{
              "gSize": 3,
              "lgSize": 3,
              "maxFrac": 3,
              "minFrac": 0,
              "minInt": 1,
              "negPre": "-",
              "negSuf": "",
              "posPre": "",
              "posSuf": ""
            }, {
              "gSize": 3,
              "lgSize": 3,
              "maxFrac": 2,
              "minFrac": 2,
              "minInt": 1,
              "negPre": "-\u00a4",
              "negSuf": "",
              "posPre": "\u00a4",
              "posSuf": ""
            }]
          },
          "id": "en-us",
          "localeID": "en_US",
          "pluralCat": function (n, opt_precision) {
            var i = n | 0;var vf = getVF(n, opt_precision);if (i == 1 && vf.v == 0) {
              return PLURAL_CATEGORY.ONE;
            }return PLURAL_CATEGORY.OTHER;
          }
        });
      }]);

      jqLite(window.document).ready(function () {
        angularInit(window.document, bootstrap);
      });
    })(window);

    !window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
  }, {}], 59: [function (require, module, exports) {
    require('./angular');
    module.exports = angular;
  }, { "./angular": 58 }], 60: [function (require, module, exports) {
    var asn1 = exports;

    asn1.bignum = require('bn.js');

    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');
  }, { "./asn1/api": 61, "./asn1/base": 63, "./asn1/constants": 67, "./asn1/decoders": 69, "./asn1/encoders": 72, "bn.js": 78 }], 61: [function (require, module, exports) {
    var asn1 = require('../asn1');
    var inherits = require('inherits');

    var api = exports;

    api.define = function define(name, body) {
      return new Entity(name, body);
    };

    function Entity(name, body) {
      this.name = name;
      this.body = body;

      this.decoders = {};
      this.encoders = {};
    };

    Entity.prototype._createNamed = function createNamed(base) {
      var named;
      try {
        named = require('vm').runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
      } catch (e) {
        named = function (entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base);
      named.prototype._initNamed = function initnamed(entity) {
        base.call(this, entity);
      };

      return new named(this);
    };

    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      // Lazily create decoder
      if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
      return this.decoders[enc];
    };

    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };

    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      // Lazily create encoder
      if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
      return this.encoders[enc];
    };

    Entity.prototype.encode = function encode(data, enc, /* internal */reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }, { "../asn1": 60, "inherits": 158, "vm": 217 }], 62: [function (require, module, exports) {
    var inherits = require('inherits');
    var Reporter = require('../base').Reporter;
    var Buffer = require('buffer').Buffer;

    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }

      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;

    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };

    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;

      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);

      return res;
    };

    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };

    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
    };

    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');

      var res = new DecoderBuffer(this.base);

      // Share reporter state
      res._reporterState = this._reporterState;

      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };

    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };

    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function (item) {
          if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;

    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out) out = new Buffer(this.length);
      if (!offset) offset = 0;

      if (this.length === 0) return out;

      if (Array.isArray(this.value)) {
        this.value.forEach(function (item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
      }

      return out;
    };
  }, { "../base": 63, "buffer": 108, "inherits": 158 }], 63: [function (require, module, exports) {
    var base = exports;

    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');
  }, { "./buffer": 62, "./node": 64, "./reporter": 65 }], 64: [function (require, module, exports) {
    var Reporter = require('../base').Reporter;
    var EncoderBuffer = require('../base').EncoderBuffer;
    var DecoderBuffer = require('../base').DecoderBuffer;
    var assert = require('minimalistic-assert');

    // Supported tags
    var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];

    // Public methods list
    var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);

    // Overrided methods list
    var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

    function Node(enc, parent) {
      var state = {};
      this._baseState = state;

      state.enc = enc;

      state.parent = parent || null;
      state.children = null;

      // State
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;

      // Should create new instance on each method
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;

    var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function (prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };

    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function (method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };

    Node.prototype._init = function init(body) {
      var state = this._baseState;

      assert(state.parent === null);
      body.call(this);

      // Filter children
      state.children = state.children.filter(function (child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
    };

    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState;

      // Filter children and args
      var children = args.filter(function (arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function (arg) {
        return !(arg instanceof this.constructor);
      }, this);

      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;

        // Replace parent to maintain backward link
        children.forEach(function (child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function (arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object) return arg;

          var res = {};
          Object.keys(arg).forEach(function (key) {
            if (key == (key | 0)) key |= 0;
            var value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };

    //
    // Overrided methods
    //

    overrided.forEach(function (method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });

    //
    // Public methods
    //

    tags.forEach(function (tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);

        assert(state.tag === null);
        state.tag = tag;

        this._useArgs(args);

        return this;
      };
    });

    Node.prototype.use = function use(item) {
      var state = this._baseState;

      assert(state.use === null);
      state.use = item;

      return this;
    };

    Node.prototype.optional = function optional() {
      var state = this._baseState;

      state.optional = true;

      return this;
    };

    Node.prototype.def = function def(val) {
      var state = this._baseState;

      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;

      return this;
    };

    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;

      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;

      return this;
    };

    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;

      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;

      return this;
    };

    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);

      state.obj = true;

      if (args.length !== 0) this._useArgs(args);

      return this;
    };

    Node.prototype.key = function key(newKey) {
      var state = this._baseState;

      assert(state.key === null);
      state.key = newKey;

      return this;
    };

    Node.prototype.any = function any() {
      var state = this._baseState;

      state.any = true;

      return this;
    };

    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;

      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function (key) {
        return obj[key];
      }));

      return this;
    };

    Node.prototype.contains = function contains(item) {
      var state = this._baseState;

      assert(state.use === null);
      state.contains = item;

      return this;
    };

    //
    // Decoding
    //

    Node.prototype._decode = function decode(input, options) {
      var state = this._baseState;

      // Decode root node
      if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));

      var result = state['default'];
      var present = true;

      var prevKey = null;
      if (state.key !== null) prevKey = input.enterKey(state.key);

      // Check if tag is there
      if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

        if (tag === null && !state.any) {
          // Trial and Error
          var save = input.save();
          try {
            if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);

          if (input.isError(present)) return present;
        }
      }

      // Push object on stack
      var prevObj;
      if (state.obj && present) prevObj = input.enterObject();

      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit)) return explicit;
          input = explicit;
        }

        var start = input.offset;

        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
          if (state.any) var save = input.save();
          var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
          if (input.isError(body)) return body;

          if (state.any) result = input.raw(save);else input = body;
        }

        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');

        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');

        // Select proper method for tag
        if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);

        if (input.isError(result)) return result;

        // Decode children
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        }

        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }

      // Pop object
      if (state.obj && present) result = input.leaveObject(prevObj);

      // Set key
      if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);

      return result;
    };

    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;

      if (tag === 'seq' || tag === 'set') return null;
      if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };

    Node.prototype._getUse = function _getUse(entity, obj) {

      var state = this._baseState;
      // Create altered use decoder if implicit is set
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };

    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;

      Object.keys(state.choice).some(function (key) {
        var save = input.save();
        var node = state.choice[key];
        try {
          var value = node._decode(input, options);
          if (input.isError(value)) return false;

          result = { type: key, value: value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);

      if (!match) return input.error('Choice not matched');

      return result;
    };

    //
    // Encoding
    //

    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };

    Node.prototype._encode = function encode(data, reporter, parent) {
      var state = this._baseState;
      if (state['default'] !== null && state['default'] === data) return;

      var result = this._encodeValue(data, reporter, parent);
      if (result === undefined) return;

      if (this._skipDefault(result, reporter, parent)) return;

      return result;
    };

    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      var state = this._baseState;

      // Decode root node
      if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());

      var result = null;

      // Set reporter to share it with a child class
      this.reporter = reporter;

      // Check if data is there
      if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default'];else return;
      }

      // Encode children first
      var content = null;
      var primitive = false;
      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function (child) {
          if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);

          if (child._baseState.key === null) return reporter.error('Child should have a key');
          var prevKey = reporter.enterKey(child._baseState.key);

          if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');

          var res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);

          return res;
        }, this).filter(function (child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);

          if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');

          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function (item) {
            var state = this._baseState;

            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }

      // Encode data itself
      var result;
      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? 'universal' : 'context';

        if (tag === null) {
          if (state.use === null) reporter.error('Tag could be ommited only for .use()');
        } else {
          if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
        }
      }

      // Wrap in explicit
      if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);

      return result;
    };

    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      var state = this._baseState;

      var node = state.choice[data.type];
      if (!node) {
        assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
      }
      return node._encode(data.value, reporter);
    };

    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;

      if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else throw new Error('Unsupported tag: ' + tag);
    };

    Node.prototype._isNumstr = function isNumstr(str) {
      return (/^[0-9 ]*$/.test(str)
      );
    };

    Node.prototype._isPrintstr = function isPrintstr(str) {
      return (/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str)
      );
    };
  }, { "../base": 63, "minimalistic-assert": 165 }], 65: [function (require, module, exports) {
    var inherits = require('inherits');

    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;

    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };

    Reporter.prototype.save = function save() {
      var state = this._reporterState;

      return { obj: state.obj, pathLen: state.path.length };
    };

    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;

      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };

    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };

    Reporter.prototype.exitKey = function exitKey(index) {
      var state = this._reporterState;

      state.path = state.path.slice(0, index - 1);
    };

    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      var state = this._reporterState;

      this.exitKey(index);
      if (state.obj !== null) state.obj[key] = value;
    };

    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };

    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;

      var prev = state.obj;
      state.obj = {};
      return prev;
    };

    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;

      var now = state.obj;
      state.obj = prev;
      return now;
    };

    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;

      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function (elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }

      if (!state.options.partial) throw err;

      if (!inherited) state.errors.push(err);

      return err;
    };

    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial) return result;

      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };

    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    };
    inherits(ReporterError, Error);

    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
  }, { "inherits": 158 }], 66: [function (require, module, exports) {
    var constants = require('../constants');

    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = constants._reverse(exports.tagClass);

    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = constants._reverse(exports.tag);
  }, { "../constants": 67 }], 67: [function (require, module, exports) {
    var constants = exports;

    // Helper
    constants._reverse = function reverse(map) {
      var res = {};

      Object.keys(map).forEach(function (key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;

        var value = map[key];
        res[value] = key;
      });

      return res;
    };

    constants.der = require('./der');
  }, { "./der": 66 }], 68: [function (require, module, exports) {
    var inherits = require('inherits');

    var asn1 = require('../../asn1');
    var base = asn1.base;
    var bignum = asn1.bignum;

    // Import DER constants
    var der = asn1.constants.der;

    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    };
    module.exports = DERDecoder;

    DERDecoder.prototype.decode = function decode(data, options) {
      if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);

      return this.tree._decode(data, options);
    };

    // Tree methods

    function DERNode(parent) {
      base.Node.call(this, 'der', parent);
    }
    inherits(DERNode, base.Node);

    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty()) return false;

      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;

      buffer.restore(state);

      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
    };

    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag)) return decodedTag;

      var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');

      // Failure
      if (buffer.isError(len)) return len;

      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }

      if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

      // Indefinite length... find END tag
      var state = buffer.save();
      var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res)) return res;

      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };

    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      while (true) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;

        var res;
        if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail);

        // Failure
        if (buffer.isError(res)) return res;

        if (tag.tagStr === 'end') break;
      }
    };

    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      var result = [];
      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;

        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
      }
      return result;
    };

    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return { unused: unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');

        var str = '';
        for (var i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer.isEmpty()) {
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80) identifiers.push(ident);

      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;

      if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

      if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
      }

      return result;
    };

    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      var str = buffer.raw().toString();
      if (tag === 'gentime') {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;else year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }

      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };

    DERNode.prototype._decodeNull = function decodeNull(buffer) {
      return null;
    };

    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      var res = buffer.readUInt8();
      if (buffer.isError(res)) return res;else return res !== 0;
    };

    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      var raw = buffer.raw();
      var res = new bignum(raw);

      if (values) res = values[res.toString(10)] || res;

      return res;
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getDecoder('der').tree;
    };

    // Utility methods

    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag)) return tag;

      var cls = der.tagClass[tag >> 6];
      var primitive = (tag & 0x20) === 0;

      // Multi-octet tag - load
      if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) return oct;

          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      var tagStr = der.tag[tag];

      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }

    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len)) return len;

      // Indefinite form
      if (!primitive && len === 0x80) return null;

      // Definite form
      if ((len & 0x80) === 0) {
        // Short form
        return len;
      }

      // Long form
      var num = len & 0x7f;
      if (num >= 4) return buf.error('length octect is too long');

      len = 0;
      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
      }

      return len;
    }
  }, { "../../asn1": 60, "inherits": 158 }], 69: [function (require, module, exports) {
    var decoders = exports;

    decoders.der = require('./der');
    decoders.pem = require('./pem');
  }, { "./der": 68, "./pem": 70 }], 70: [function (require, module, exports) {
    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;

    var DERDecoder = require('./der');

    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    };
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;

    PEMDecoder.prototype.decode = function decode(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);

      var label = options.label.toUpperCase();

      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null) continue;

        if (match[2] !== label) continue;

        if (start === -1) {
          if (match[1] !== 'BEGIN') break;
          start = i;
        } else {
          if (match[1] !== 'END') break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);

      var base64 = lines.slice(start + 1, end).join('');
      // Remove excessive symbols
      base64.replace(/[^a-z0-9\+\/=]+/gi, '');

      var input = new Buffer(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }, { "./der": 68, "buffer": 108, "inherits": 158 }], 71: [function (require, module, exports) {
    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;

    var asn1 = require('../../asn1');
    var base = asn1.base;

    // Import DER constants
    var der = asn1.constants.der;

    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    };
    module.exports = DEREncoder;

    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };

    // Tree methods

    function DERNode(parent) {
      base.Node.call(this, 'der', parent);
    }
    inherits(DERNode, base.Node);

    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

      // Short form
      if (content.length < 0x80) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([header, content]);
      }

      // Long form
      // Count octets required to store length
      var lenOctets = 1;
      for (var i = content.length; i >= 0x100; i >>= 8) lenOctets++;

      var header = new Buffer(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;

      for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) header[i] = j & 0xff;

      return this._createEncoderBuffer([header, content]);
    };

    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === 'bmpstr') {
        var buf = new Buffer(str.length * 2);
        for (var i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s\.]+/g);
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      }

      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
      }

      if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }

      // Count number of octets
      var size = 0;
      for (var i = 0; i < id.length; i++) {
        var ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7) size++;
      }

      var objid = new Buffer(size);
      var offset = objid.length - 1;
      for (var i = id.length - 1; i >= 0; i--) {
        var ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0) objid[offset--] = 0x80 | ident & 0x7f;
      }

      return this._createEncoderBuffer(objid);
    };

    function two(num) {
      if (num < 10) return '0' + num;else return num;
    }

    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);

      if (tag === 'gentime') {
        str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else if (tag === 'utctime') {
        str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }

      return this._encodeStr(str, 'octstr');
    };

    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };

    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        }
        num = values[num];
      }

      // Bignum, assume big endian
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = new Buffer(numArray);
      }

      if (Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0) size++;

        var out = new Buffer(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
      }

      if (num < 0x80) return this._createEncoderBuffer(num);

      if (num < 0x100) return this._createEncoderBuffer([0, num]);

      var size = 1;
      for (var i = num; i >= 0x100; i >>= 8) size++;

      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if (out[0] & 0x80) {
        out.unshift(0);
      }

      return this._createEncoderBuffer(new Buffer(out));
    };

    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getEncoder('der').tree;
    };

    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (state['default'] === null) return false;

      var data = dataBuffer.join();
      if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

      if (data.length !== state.defaultBuffer.length) return false;

      for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) return false;

      return true;
    };

    // Utility methods

    function encodeTag(tag, primitive, cls, reporter) {
      var res;

      if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';

      if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);

      if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');

      if (!primitive) res |= 0x20;

      res |= der.tagClassByName[cls || 'universal'] << 6;

      return res;
    }
  }, { "../../asn1": 60, "buffer": 108, "inherits": 158 }], 72: [function (require, module, exports) {
    var encoders = exports;

    encoders.der = require('./der');
    encoders.pem = require('./pem');
  }, { "./der": 71, "./pem": 73 }], 73: [function (require, module, exports) {
    var inherits = require('inherits');

    var DEREncoder = require('./der');

    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    };
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;

    PEMEncoder.prototype.encode = function encode(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);

      var p = buf.toString('base64');
      var out = ['-----BEGIN ' + options.label + '-----'];
      for (var i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
  }, { "./der": 71, "inherits": 158 }], 74: [function (require, module, exports) {
    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
    //
    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
    //
    // Originally from narwhal.js (http://narwhaljs.org)
    // Copyright (c) 2009 Thomas Robinson <280north.com>
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy
    // of this software and associated documentation files (the 'Software'), to
    // deal in the Software without restriction, including without limitation the
    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    // sell copies of the Software, and to permit persons to whom the Software is
    // furnished to do so, subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in
    // all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    // when used in node, this will actually load the util module we depend on
    // versus loading the builtin util module as happens otherwise
    // this is a bug in node module loading as far as I am concerned
    var util = require('util/');

    var pSlice = Array.prototype.slice;
    var hasOwn = Object.prototype.hasOwnProperty;

    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    var assert = module.exports = ok;

    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })

    assert.AssertionError = function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;

          // try to strip useless frames
          var fn_name = stackStartFunction.name;
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }

          this.stack = out;
        }
      }
    };

    // assert.AssertionError instanceof Error
    util.inherits(assert.AssertionError, Error);

    function replacer(key, value) {
      if (util.isUndefined(value)) {
        return '' + value;
      }
      if (util.isNumber(value) && !isFinite(value)) {
        return value.toString();
      }
      if (util.isFunction(value) || util.isRegExp(value)) {
        return value.toString();
      }
      return value;
    }

    function truncate(s, n) {
      if (util.isString(s)) {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }

    function getMessage(self) {
      return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
    }

    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.

    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new assert.AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }

    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert.fail = fail;

    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.

    function ok(value, message) {
      if (!value) fail(value, true, message, '==', assert.ok);
    }
    assert.ok = ok;

    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);

    assert.equal = function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', assert.equal);
    };

    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);

    assert.notEqual = function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', assert.notEqual);
      }
    };

    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);

    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'deepEqual', assert.deepEqual);
      }
    };

    function _deepEqual(actual, expected) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
        if (actual.length != expected.length) return false;

        for (var i = 0; i < actual.length; i++) {
          if (actual[i] !== expected[i]) return false;
        }

        return true;

        // 7.2. If the expected value is a Date object, the actual value is
        // equivalent if it is also a Date object that refers to the same time.
      } else if (util.isDate(actual) && util.isDate(expected)) {
        return actual.getTime() === expected.getTime();

        // 7.3 If the expected value is a RegExp object, the actual value is
        // equivalent if it is also a RegExp object with the same source and
        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
        return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

        // 7.4. Other pairs that do not both pass typeof value == 'object',
        // equivalence is determined by ==.
      } else if (!util.isObject(actual) && !util.isObject(expected)) {
        return actual == expected;

        // 7.5 For all other Object pairs, including Array objects, equivalence is
        // determined by having the same number of owned properties (as verified
        // with Object.prototype.hasOwnProperty.call), the same set of keys
        // (although not necessarily the same order), equivalent values for every
        // corresponding key, and an identical 'prototype' property. Note: this
        // accounts for both named and indexed properties on Arrays.
      } else {
        return objEquiv(actual, expected);
      }
    }

    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b) {
      if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false;
      // an identical 'prototype' property.
      if (a.prototype !== b.prototype) return false;
      // if one is a primitive, the other must be same
      if (util.isPrimitive(a) || util.isPrimitive(b)) {
        return a === b;
      }
      var aIsArgs = isArguments(a),
          bIsArgs = isArguments(b);
      if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b);
      }
      var ka = objectKeys(a),
          kb = objectKeys(b),
          key,
          i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length != kb.length) return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key])) return false;
      }
      return true;
    }

    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);

    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected)) {
        fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
      }
    };

    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);

    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', assert.strictEqual);
      }
    };

    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', assert.notStrictEqual);
      }
    };

    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }

      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      } else if (actual instanceof expected) {
        return true;
      } else if (expected.call({}, actual) === true) {
        return true;
      }

      return false;
    }

    function _throws(shouldThrow, block, expected, message) {
      var actual;

      if (util.isString(expected)) {
        message = expected;
        expected = null;
      }

      try {
        block();
      } catch (e) {
        actual = e;
      }

      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }

      if (!shouldThrow && expectedException(actual, expected)) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }

      if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
        throw actual;
      }
    }

    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);

    assert.throws = function (block, /*optional*/error, /*optional*/message) {
      _throws.apply(this, [true].concat(pSlice.call(arguments)));
    };

    // EXTENSION! This is annoying to write outside this module.
    assert.doesNotThrow = function (block, /*optional*/message) {
      _throws.apply(this, [false].concat(pSlice.call(arguments)));
    };

    assert.ifError = function (err) {
      if (err) {
        throw err;
      }
    };

    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
  }, { "util/": 214 }], 75: [function (require, module, exports) {
    'use strict';

    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function placeHoldersCount(b64) {
      var len = b64.length;
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
    }

    function byteLength(b64) {
      // base64 is 4/3 + up to two characters of the original data
      return b64.length * 3 / 4 - placeHoldersCount(b64);
    }

    function toByteArray(b64) {
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;
      placeHolders = placeHoldersCount(b64);

      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = tmp >> 16 & 0xFF;
        arr[L++] = tmp >> 8 & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[L++] = tmp >> 8 & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
        output.push(tripletToBase64(tmp));
      }
      return output.join('');
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[tmp << 4 & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        output += lookup[tmp >> 10];
        output += lookup[tmp >> 4 & 0x3F];
        output += lookup[tmp << 2 & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('');
    }
  }, {}], 76: [function (require, module, exports) {
    /*! bignumber.js v2.4.0 https://github.com/MikeMcl/bignumber.js/LICENCE */

    ;(function (globalObj) {
      'use strict';

      /*
        bignumber.js v2.4.0
        A JavaScript library for arbitrary-precision arithmetic.
        https://github.com/MikeMcl/bignumber.js
        Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
        MIT Expat Licence
      */

      var BigNumber,
          cryptoObj,
          parseNumeric,
          isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          mathceil = Math.ceil,
          mathfloor = Math.floor,
          notBool = ' not a boolean or binary digit',
          roundingMode = 'rounding mode',
          tooManyDigits = 'number type has more than 15 significant digits',
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,
          // 2^53 - 1
      // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
      POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,


      /*
       * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
       * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
       * exception is thrown (if ERRORS is true).
       */
      MAX = 1E9; // 0 to MAX_INT32

      if (typeof crypto != 'undefined') cryptoObj = crypto;

      /*
       * Create and return a BigNumber constructor.
       */
      function constructorFactory(configObj) {
        var div,


        // id tracks the caller function, so its name can be included in error messages.
        id = 0,
            P = BigNumber.prototype,
            ONE = new BigNumber(1),


        /********************************* EDITABLE DEFAULTS **********************************/

        /*
         * The default values below must be integers within the inclusive ranges stated.
         * The values can also be changed at run-time using BigNumber.config.
         */

        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20,
            // 0 to MAX

        /*
         * The rounding mode used when rounding to the above decimal places, and when using
         * toExponential, toFixed, toFormat and toPrecision, and round (default value).
         * UP         0 Away from zero.
         * DOWN       1 Towards zero.
         * CEIL       2 Towards +Infinity.
         * FLOOR      3 Towards -Infinity.
         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
         */
        ROUNDING_MODE = 4,
            // 0 to 8

        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7,
            // 0 to -MAX

        // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21,
            // 0 to MAX

        // RANGE : [MIN_EXP, MAX_EXP]

        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7,
            // -1 to -MAX

        // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7,
            // 1 to MAX

        // Whether BigNumber Errors are ever thrown.
        ERRORS = true,
            // true or false

        // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors,
            // intValidatorWithErrors/intValidatorNoErrors

        // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false,
            // true or false

        /*
         * The modulo mode used when calculating the modulus: a mod n.
         * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
         * The remainder (r) is calculated as: r = a - n * q.
         *
         * UP        0 The remainder is positive if the dividend is negative, else is negative.
         * DOWN      1 The remainder has the same sign as the dividend.
         *             This modulo mode is commonly known as 'truncated division' and is
         *             equivalent to (a % n) in JavaScript.
         * FLOOR     3 The remainder has the same sign as the divisor (Python %).
         * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
         * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
         *             The remainder is always positive.
         *
         * The truncated division, floored division, Euclidian division and IEEE 754 remainder
         * modes are commonly used for the modulus operation.
         * Although the other rounding modes can also be used, they may not give useful results.
         */
        MODULO_MODE = 1,
            // 0 to 9

        // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 100,
            // 0 to MAX

        // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
          decimalSeparator: '.',
          groupSeparator: ',',
          groupSize: 3,
          secondaryGroupSize: 0,
          fractionGroupSeparator: '\xA0', // non-breaking space
          fractionGroupSize: 0
        };

        /******************************************************************************************/

        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */
        function BigNumber(n, b) {
          var c,
              e,
              i,
              num,
              len,
              str,
              x = this;

          // Enable constructor usage without new.
          if (!(x instanceof BigNumber)) {

            // 'BigNumber() constructor call without new: {n}'
            if (ERRORS) raise(26, 'constructor call without new', n);
            return new BigNumber(n, b);
          }

          // 'new BigNumber() base not an integer: {b}'
          // 'new BigNumber() base out of range: {b}'
          if (b == null || !isValidInt(b, 2, 64, id, 'base')) {

            // Duplicate.
            if (n instanceof BigNumber) {
              x.s = n.s;
              x.e = n.e;
              x.c = (n = n.c) ? n.slice() : n;
              id = 0;
              return;
            }

            if ((num = typeof n == 'number') && n * 0 == 0) {
              x.s = 1 / n < 0 ? (n = -n, -1) : 1;

              // Fast path for integers.
              if (n === ~~n) {
                for (e = 0, i = n; i >= 10; i /= 10, e++);
                x.e = e;
                x.c = [n];
                id = 0;
                return;
              }

              str = n + '';
            } else {
              if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
          } else {
            b = b | 0;
            str = n + '';

            // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
            // Allow exponential notation to be used with base 10 argument.
            if (b == 10) {
              x = new BigNumber(n instanceof BigNumber ? n : str);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }

            // Avoid potential interpretation of Infinity and NaN as base 44+ values.
            // Any number in exponential form will fail due to the [Ee][+-].
            if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {
              return parseNumeric(x, str, num, b);
            }

            if (num) {
              x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

              if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {

                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                raise(id, tooManyDigits, n);
              }

              // Prevent later check for length on converted number.
              num = false;
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }

            str = convertBase(str, 10, b, x.s);
          }

          // Decimal point?
          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

          // Exponential form?
          if ((i = str.search(/e/i)) > 0) {

            // Determine exponent.
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {

            // Integer.
            e = str.length;
          }

          // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++);

          // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;);
          str = str.slice(i, len + 1);

          if (str) {
            len = str.length;

            // Disallow numbers with over 15 significant digits if number type.
            // 'new BigNumber() number type has more than 15 significant digits: {n}'
            if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
              raise(id, tooManyDigits, x.s * n);
            }

            e = e - i - 1;

            // Overflow?
            if (e > MAX_EXP) {

              // Infinity.
              x.c = x.e = null;

              // Underflow?
            } else if (e < MIN_EXP) {

              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];

              // Transform base

              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;

              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));

                for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }

                str = str.slice(i);
                i = LOG_BASE - str.length;
              } else {
                i -= len;
              }

              for (; i--; str += '0');
              x.c.push(+str);
            }
          } else {

            // Zero.
            x.c = [x.e = 0];
          }

          id = 0;
        }

        // CONSTRUCTOR PROPERTIES


        BigNumber.another = constructorFactory;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;

        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */
        BigNumber.config = function () {
          var v,
              p,
              i = 0,
              r = {},
              a = arguments,
              o = a[0],
              has = o && typeof o == 'object' ? function () {
            if (o.hasOwnProperty(p)) return (v = o[p]) != null;
          } : function () {
            if (a.length > i) return (v = a[i++]) != null;
          };

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // 'config() DECIMAL_PLACES not an integer: {v}'
          // 'config() DECIMAL_PLACES out of range: {v}'
          if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
            DECIMAL_PLACES = v | 0;
          }
          r[p] = DECIMAL_PLACES;

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // 'config() ROUNDING_MODE not an integer: {v}'
          // 'config() ROUNDING_MODE out of range: {v}'
          if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
            ROUNDING_MODE = v | 0;
          }
          r[p] = ROUNDING_MODE;

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // 'config() EXPONENTIAL_AT not an integer: {v}'
          // 'config() EXPONENTIAL_AT out of range: {v}'
          if (has(p = 'EXPONENTIAL_AT')) {

            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                TO_EXP_NEG = v[0] | 0;
                TO_EXP_POS = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
            }
          }
          r[p] = [TO_EXP_NEG, TO_EXP_POS];

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // 'config() RANGE not an integer: {v}'
          // 'config() RANGE cannot be zero: {v}'
          // 'config() RANGE out of range: {v}'
          if (has(p = 'RANGE')) {

            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                MIN_EXP = v[0] | 0;
                MAX_EXP = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);
            }
          }
          r[p] = [MIN_EXP, MAX_EXP];

          // ERRORS {boolean|number} true, false, 1 or 0.
          // 'config() ERRORS not a boolean or binary digit: {v}'
          if (has(p = 'ERRORS')) {

            if (v === !!v || v === 1 || v === 0) {
              id = 0;
              isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }
          r[p] = ERRORS;

          // CRYPTO {boolean|number} true, false, 1 or 0.
          // 'config() CRYPTO not a boolean or binary digit: {v}'
          // 'config() crypto unavailable: {crypto}'
          if (has(p = 'CRYPTO')) {

            if (v === !!v || v === 1 || v === 0) {
              CRYPTO = !!(v && cryptoObj);
              if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', cryptoObj);
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }
          r[p] = CRYPTO;

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // 'config() MODULO_MODE not an integer: {v}'
          // 'config() MODULO_MODE out of range: {v}'
          if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
            MODULO_MODE = v | 0;
          }
          r[p] = MODULO_MODE;

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // 'config() POW_PRECISION not an integer: {v}'
          // 'config() POW_PRECISION out of range: {v}'
          if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
            POW_PRECISION = v | 0;
          }
          r[p] = POW_PRECISION;

          // FORMAT {object}
          // 'config() FORMAT not an object: {v}'
          if (has(p = 'FORMAT')) {

            if (typeof v == 'object') {
              FORMAT = v;
            } else if (ERRORS) {
              raise(2, p + ' not an object', v);
            }
          }
          r[p] = FORMAT;

          return r;
        };

        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.max = function () {
          return maxOrMin(arguments, P.lt);
        };

        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.min = function () {
          return maxOrMin(arguments, P.gt);
        };

        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */
        BigNumber.random = function () {
          var pow2_53 = 0x20000000000000;

          // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
            return mathfloor(Math.random() * pow2_53);
          } : function () {
            return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
          };

          return function (dp) {
            var a,
                b,
                e,
                k,
                v,
                i = 0,
                c = [],
                rand = new BigNumber(ONE);

            dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
            k = mathceil(dp / LOG_BASE);

            if (CRYPTO) {

              // Browsers supporting crypto.getRandomValues.
              if (cryptoObj && cryptoObj.getRandomValues) {

                a = cryptoObj.getRandomValues(new Uint32Array(k *= 2));

                for (; i < k;) {

                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                  // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = cryptoObj.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {

                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;

                // Node.js supporting crypto.randomBytes.
              } else if (cryptoObj && cryptoObj.randomBytes) {

                // buffer
                a = cryptoObj.randomBytes(k *= 7);

                for (; i < k;) {

                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                  if (v >= 9e15) {
                    cryptoObj.randomBytes(7).copy(a, i);
                  } else {

                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else if (ERRORS) {
                raise(14, 'crypto unavailable', cryptoObj);
              }
            }

            // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
            if (!i) {

              for (; i < k;) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }

            k = c[--i];
            dp %= LOG_BASE;

            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }

            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);

            // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {

              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE);

              // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

              // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }

            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();

        // PRIVATE FUNCTIONS


        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
          var d,
              e,
              k,
              r,
              x,
              xc,
              y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;

          if (baseIn < 37) str = str.toLowerCase();

          // Non-integer.
          if (i >= 0) {
            k = POW_PRECISION;

            // Unlimited precision.
            POW_PRECISION = 0;
            str = str.replace('.', '');
            y = new BigNumber(baseIn);
            x = y.pow(str.length - i);
            POW_PRECISION = k;

            // Convert str as if an integer, then restore the fraction part by dividing the
            // result by its base raised to a power.
            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
            y.e = y.c.length;
          }

          // Convert the number as integer.
          xc = toBaseOut(str, baseIn, baseOut);
          e = k = xc.length;

          // Remove trailing zeros.
          for (; xc[--k] == 0; xc.pop());
          if (!xc[0]) return '0';

          if (i < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;

            // sign is needed for correct rounding.
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }

          d = e + dp + 1;

          // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
          i = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;

          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

          if (d < 1 || !xc[0]) {

            // 1^-dp or 0.
            str = r ? toFixedPoint('1', -dp) : '0';
          } else {
            xc.length = d;

            if (r) {

              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (--baseOut; ++xc[--d] > baseOut;) {
                xc[d] = 0;

                if (!d) {
                  ++e;
                  xc.unshift(1);
                }
              }
            }

            // Determine trailing zeros.
            for (k = xc.length; !xc[--k];);

            // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));
            str = toFixedPoint(str, e);
          }

          // The caller will add the sign.
          return str;
        }

        // Perform division in the specified base. Called by div and convertBase.
        div = function () {

          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m,
                temp,
                xlo,
                xhi,
                carry = 0,
                i = x.length,
                klo = k % SQRT_BASE,
                khi = k / SQRT_BASE | 0;

            for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }

            if (carry) x.unshift(carry);

            return x;
          }

          function compare(a, b, aL, bL) {
            var i, cmp;

            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {

              for (i = cmp = 0; i < aL; i++) {

                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }

          function subtract(a, b, aL, base) {
            var i = 0;

            // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }

            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.shift());
          }

          // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp,
                e,
                i,
                more,
                n,
                prod,
                prodL,
                q,
                qc,
                rem,
                remL,
                rem0,
                xi,
                xL,
                yc0,
                yL,
                yz,
                s = x.s == y.s ? 1 : -1,
                xc = x.c,
                yc = y.c;

            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {

              return new BigNumber(

              // Return NaN if either NaN, or both Infinity or 0.
              !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

              // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
            }

            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;

            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }

            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);
            if (yc[i] > (xc[i] || 0)) e--;

            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;

              // Normalise xc and yc so highest order digit of yc is >= base / 2.

              n = mathfloor(base / (yc[0] + 1));

              // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
              // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }

              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0);
              yz = yc.slice();
              yz.unshift(0);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

              do {
                n = 0;

                // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, n.

                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0);

                  //  Algorithm:
                  //  1. product = divisor * trial digit (n)
                  //  2. if product > remainder: product -= divisor, n--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, n++

                  if (n > 1) {

                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1;

                    // product = divisor * trial digit.
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    // If product > remainder.
                    // Trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {

                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {

                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    }

                    // product = divisor
                    prod = yc.slice();
                    prodL = prod.length;
                  }

                  if (prodL < remL) prod.unshift(0);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);
                  remL = rem.length;

                  // If product was < remainder.
                  if (cmp == -1) {

                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                } // else cmp === 1 and n will be 0

                // Add the next digit, n, to the result array.
                qc[i++] = n;

                // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);

              more = rem[0] != null;

              // Leading zero?
              if (!qc[0]) qc.shift();
            }

            if (base == BASE) {

              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

              // Caller is convertBase.
            } else {
              q.e = e;
              q.r = +more;
            }

            return q;
          };
        }();

        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */
        function format(n, i, rm, caller) {
          var c0, e, ne, len, str;

          rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;

          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;

          if (i == null) {
            str = coeffToString(n.c);
            str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
          } else {
            n = round(new BigNumber(n), i, rm);

            // n.e may have changed if the value was rounded up.
            e = n.e;

            str = coeffToString(n.c);
            len = str.length;

            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.

            // Exponential notation.
            if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {

              // Append zeros?
              for (; len < i; str += '0', len++);
              str = toExponential(str, e);

              // Fixed-point notation.
            } else {
              i -= ne;
              str = toFixedPoint(str, e);

              // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0');
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += '.';
                  for (; i--; str += '0');
                }
              }
            }
          }

          return n.s < 0 && c0 ? '-' + str : str;
        }

        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var m,
              n,
              i = 0;

          if (isArray(args[0])) args = args[0];
          m = new BigNumber(args[0]);

          for (; ++i < args.length;) {
            n = new BigNumber(args[i]);

            // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }

          return m;
        }

        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */
        function intValidatorWithErrors(n, min, max, caller, name) {
          if (n < min || n > max || n != truncate(n)) {
            raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);
          }

          return true;
        }

        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
          var i = 1,
              j = c.length;

          // Remove trailing zeros.
          for (; !c[--j]; c.pop());

          // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++);

          // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

            // Infinity.
            n.c = n.e = null;

            // Underflow?
          } else if (e < MIN_EXP) {

            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }

          return n;
        }

        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
              dotAfter = /^([^.]+)\.$/,
              dotBefore = /^\.([^.]+)$/,
              isInfinityOrNaN = /^-?(Infinity|NaN)$/,
              whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

          return function (x, str, num, b) {
            var base,
                s = num ? str : str.replace(whitespaceOrPlus, '');

            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!num) {

                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });

                if (b) {
                  base = b;

                  // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }

                if (str != s) return new BigNumber(s, base);
              }

              // 'new BigNumber() not a number: {n}'
              // 'new BigNumber() not a base {b} number: {n}'
              if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
              x.s = null;
            }

            x.c = x.e = null;
            id = 0;
          };
        }();

        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
          var error = new Error(['new BigNumber', // 0
          'cmp', // 1
          'config', // 2
          'div', // 3
          'divToInt', // 4
          'eq', // 5
          'gt', // 6
          'gte', // 7
          'lt', // 8
          'lte', // 9
          'minus', // 10
          'mod', // 11
          'plus', // 12
          'precision', // 13
          'random', // 14
          'round', // 15
          'shift', // 16
          'times', // 17
          'toDigits', // 18
          'toExponential', // 19
          'toFixed', // 20
          'toFormat', // 21
          'toFraction', // 22
          'pow', // 23
          'toPrecision', // 24
          'toString', // 25
          'BigNumber' // 26
          ][caller] + '() ' + msg + ': ' + val);

          error.name = 'BigNumber Error';
          id = 0;
          throw error;
        }

        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
          var d,
              i,
              j,
              k,
              n,
              ni,
              rd,
              xc = x.c,
              pows10 = POWS_TEN;

          // if x is not Infinity or NaN...
          if (xc) {

            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {

              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
              i = sd - d;

              // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];

                // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);

                if (ni >= xc.length) {

                  if (r) {

                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0));
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];

                  // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++);

                  // Get the index of rd within n.
                  i %= LOG_BASE;

                  // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d;

                  // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }

              r = r || sd < 0 ||

              // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

              // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

              if (sd < 1 || !xc[0]) {
                xc.length = 0;

                if (r) {

                  // Convert sd to decimal places.
                  sd -= x.e + 1;

                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {

                  // Zero.
                  xc[0] = x.e = 0;
                }

                return x;
              }

              // Remove excess digits.
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];

                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }

              // Round up?
              if (r) {

                for (;;) {

                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {

                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++);

                    // if i != k the length has increased.
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }

                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }

              // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop());
            }

            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null;

              // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }

          return x;
        }

        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);
          if (x.s < 0) x.s = 1;
          return x;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */
        P.ceil = function () {
          return round(new BigNumber(this), this.e + 1, 2);
        };

        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */
        P.comparedTo = P.cmp = function (y, b) {
          id = 1;
          return compare(this, new BigNumber(y, b));
        };

        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */
        P.decimalPlaces = P.dp = function () {
          var n,
              v,
              c = this.c;

          if (!c) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
          if (n < 0) n = 0;

          return n;
        };

        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
          id = 3;
          return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };

        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.divToInt = function (y, b) {
          id = 4;
          return div(this, new BigNumber(y, b), 0, 1);
        };

        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.equals = P.eq = function (y, b) {
          id = 5;
          return compare(this, new BigNumber(y, b)) === 0;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */
        P.floor = function () {
          return round(new BigNumber(this), this.e + 1, 3);
        };

        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.greaterThan = P.gt = function (y, b) {
          id = 6;
          return compare(this, new BigNumber(y, b)) > 0;
        };

        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.greaterThanOrEqualTo = P.gte = function (y, b) {
          id = 7;
          return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };

        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */
        P.isFinite = function () {
          return !!this.c;
        };

        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = P.isInt = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };

        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */
        P.isNaN = function () {
          return !this.s;
        };

        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */
        P.isNegative = P.isNeg = function () {
          return this.s < 0;
        };

        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */
        P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        };

        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.lessThan = P.lt = function (y, b) {
          id = 8;
          return compare(this, new BigNumber(y, b)) < 0;
        };

        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.lessThanOrEqualTo = P.lte = function (y, b) {
          id = 9;
          return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };

        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = P.sub = function (y, b) {
          var i,
              j,
              t,
              xLTy,
              x = this,
              a = x.s;

          id = 10;
          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }

          var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;

          if (!xe || !ye) {

            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

            // Either zero?
            if (!xc[0] || !yc[0]) {

              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

              // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
              ROUNDING_MODE == 3 ? -0 : 0);
            }
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Determine which is the bigger number.
          if (a = xe - ye) {

            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }

            t.reverse();

            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
          } else {

            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

            for (a = b = 0; b < j; b++) {

              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }

          // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

          b = (j = yc.length) - (i = xc.length);

          // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0);
          b = BASE - 1;

          // Subtract yc from xc.
          for (; j > a;) {

            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b);
              --xc[i];
              xc[j] += BASE;
            }

            xc[j] -= yc[j];
          }

          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.shift(), --ye);

          // Zero?
          if (!xc[0]) {

            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }

          // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        };

        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
          var q,
              s,
              x = this;

          id = 11;
          y = new BigNumber(y, b);

          // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN);

            // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }

          if (MODULO_MODE == 9) {

            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }

          return x.minus(q.times(y));
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = P.neg = function () {
          var x = new BigNumber(this);
          x.s = -x.s || null;
          return x;
        };

        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = P.add = function (y, b) {
          var t,
              x = this,
              a = x.s;

          id = 12;
          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }

          var xe = x.e / LOG_BASE,
              ye = y.e / LOG_BASE,
              xc = x.c,
              yc = y.c;

          if (!xe || !ye) {

            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);

            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }

            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
          }

          a = xc.length;
          b = yc.length;

          // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

          // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] %= BASE;
          }

          if (a) {
            xc.unshift(a);
            ++ye;
          }

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        };

        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */
        P.precision = P.sd = function (z) {
          var n,
              v,
              x = this,
              c = x.c;

          // 'precision() argument not a boolean or binary digit: {z}'
          if (z != null && z !== !!z && z !== 1 && z !== 0) {
            if (ERRORS) raise(13, 'argument' + notBool, z);
            if (z != !!z) z = null;
          }

          if (!c) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;

          if (v = c[v]) {

            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);

            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
          }

          if (z && x.e + 1 > n) n = x.e + 1;

          return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */
        P.round = function (dp, rm) {
          var n = new BigNumber(this);

          if (dp == null || isValidInt(dp, 0, MAX, 15)) {
            round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
          }

          return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */
        P.shift = function (k) {
          var n = this;
          return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')

          // k < 1e+21, or truncate(k) will produce exponential notation.
          ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        };

        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
          var m,
              n,
              r,
              rep,
              t,
              x = this,
              c = x.c,
              s = x.s,
              e = x.e,
              dp = DECIMAL_PLACES + 4,
              half = new BigNumber('0.5');

          // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }

          // Initial estimate.
          s = Math.sqrt(+x);

          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

            if (s == 1 / 0) {
              n = '1e' + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf('e') + 1) + e;
            }

            r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          }

          // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;

            // Newton-Raphson iteration.
            for (;;) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));

              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);

                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {

                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);

                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }

                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {

                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }

                  break;
                }
              }
            }
          }

          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };

        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */
        P.times = P.mul = function (y, b) {
          var c,
              e,
              i,
              j,
              k,
              m,
              xcL,
              xlo,
              xhi,
              ycL,
              ylo,
              yhi,
              zc,
              base,
              sqrtBase,
              x = this,
              xc = x.c,
              yc = (id = 17, y = new BigNumber(y, b)).c;

          // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {

            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;

              // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null;

                // Return ±0 if either is ±0.
              } else {
                y.c = [0];
                y.e = 0;
              }
            }

            return y;
          }

          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;

          // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

          // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0));

          base = BASE;
          sqrtBase = SQRT_BASE;

          for (i = ycL; --i >= 0;) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;

            for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }

            zc[j] = c;
          }

          if (c) {
            ++e;
          } else {
            zc.shift();
          }

          return normalise(y, zc, e);
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */
        P.toDigits = function (sd, rm) {
          var n = new BigNumber(this);
          sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
          rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
          return sd ? round(n, sd, rm) : n;
        };

        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */
        P.toExponential = function (dp, rm) {
          return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */
        P.toFixed = function (dp, rm) {
          return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */
        P.toFormat = function (dp, rm) {
          var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);

          if (this.c) {
            var i,
                arr = str.split('.'),
                g1 = +FORMAT.groupSize,
                g2 = +FORMAT.secondaryGroupSize,
                groupSeparator = FORMAT.groupSeparator,
                intPart = arr[0],
                fractionPart = arr[1],
                isNeg = this.s < 0,
                intDigits = isNeg ? intPart.slice(1) : intPart,
                len = intDigits.length;

            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);

              for (; i < len; i += g1) {
                intPart += groupSeparator + intDigits.substr(i, g1);
              }

              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = '-' + intPart;
            }

            str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
          }

          return str;
        };

        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */
        P.toFraction = function (md) {
          var arr,
              d0,
              d2,
              e,
              exp,
              n,
              n0,
              q,
              s,
              k = ERRORS,
              x = this,
              xc = x.c,
              d = new BigNumber(ONE),
              n1 = d0 = new BigNumber(ONE),
              d1 = n0 = new BigNumber(ONE);

          if (md != null) {
            ERRORS = false;
            n = new BigNumber(md);
            ERRORS = k;

            if (!(k = n.isInt()) || n.lt(ONE)) {

              if (ERRORS) {
                raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
              }

              // ERRORS is false:
              // If md is a finite non-integer >= 1, round it to an integer and use it.
              md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
            }
          }

          if (!xc) return x.toString();
          s = coeffToString(xc);

          // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;

          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber(s);

          // n0 = d1 = 0
          n0.c[0] = 0;

          for (;;) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.cmp(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }

          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e *= 2;

          // Determine which fraction is closer to x, n0/d0 or n1/d1
          arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];

          MAX_EXP = exp;
          return arr;
        };

        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
          return +this;
        };

        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
         * ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are positive integers,
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
         *
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         * [m] {number|string|BigNumber} The modulus.
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         *
         * Performs 54 loop iterations for n of 9007199254740991.
         */
        P.toPower = P.pow = function (n, m) {
          var k,
              y,
              z,
              i = mathfloor(n < 0 ? -n : +n),
              x = this;

          if (m != null) {
            id = 23;
            m = new BigNumber(m);
          }

          // Pass ±Infinity to Math.pow if exponent is out of range.
          if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {
            k = Math.pow(+x, n);
            return new BigNumber(m ? k % m : k);
          }

          if (m) {
            if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {
              x = x.mod(m);
            } else {
              z = m;

              // Nullify m so only a single mod operation is performed at the end.
              m = null;
            }
          } else if (POW_PRECISION) {

            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            // (Using + 1.5 would give [9, 21] guard digits.)
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }

          y = new BigNumber(ONE);

          for (;;) {
            if (i % 2) {
              y = y.times(x);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (m) {
                y = y.mod(m);
              }
            }

            i = mathfloor(i / 2);
            if (!i) break;
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (m) {
              x = x.mod(m);
            }
          }

          if (m) return y;
          if (n < 0) y = ONE.div(y);

          return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };

        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */
        P.toPrecision = function (sd, rm) {
          return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);
        };

        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */
        P.toString = function (b) {
          var str,
              n = this,
              s = n.s,
              e = n.e;

          // Infinity or NaN?
          if (e === null) {

            if (s) {
              str = 'Infinity';
              if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            str = coeffToString(n.c);

            if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
            } else {
              str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
            }

            if (s < 0 && n.c[0]) str = '-' + str;
          }

          return str;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */
        P.truncated = P.trunc = function () {
          return round(new BigNumber(this), this.e + 1, 1);
        };

        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
          var str,
              n = this,
              e = n.e;

          if (e === null) return n.toString();

          str = coeffToString(n.c);

          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);

          return n.s < 0 ? '-' + str : str;
        };

        // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;


        if (configObj != null) BigNumber.config(configObj);

        return BigNumber;
      }

      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }

      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s,
            z,
            i = 1,
            j = a.length,
            r = a[0] + '';

        for (; i < j;) {
          s = a[i++] + '';
          z = LOG_BASE - s.length;
          for (; z--; s = '0' + s);
          r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
      }

      // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a,
            b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }

      /*
       * Return true if n is a valid number in range, otherwise false.
       * Use for argument validation when ERRORS is false.
       * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
       */
      function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
      }

      function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
      }

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. convertBase('255', 10, 16) returns [15, 15].
       * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
          arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));

          for (; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
      }

      function toFixedPoint(str, e) {
        var len, z;

        // Negative exponent?
        if (e < 0) {

          // Prepend zeros.
          for (z = '0.'; ++e; z += '0');
          str = z + str;

          // Positive exponent
        } else {
          len = str.length;

          // Append zeros.
          if (++e > len) {
            for (z = '0', e -= len; --e; z += '0');
            str += z;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        return str;
      }

      function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
      }

      // EXPORT


      BigNumber = constructorFactory();
      BigNumber.default = BigNumber.BigNumber = BigNumber;

      // AMD.
      if (typeof define == 'function' && define.amd) {
        define(function () {
          return BigNumber;
        });

        // Node.js and other environments that support module.exports.
      } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber;

        // Split string stops browserify adding crypto shim.
        if (!cryptoObj) try {
          cryptoObj = require('cry' + 'pto');
        } catch (e) {}

        // Browser.
      } else {
        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();
        globalObj.BigNumber = BigNumber;
      }
    })(this);
  }, {}], 77: [function (require, module, exports) {
    (function (Buffer) {
      // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
      // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
      // NOTE: SIGHASH byte ignored AND restricted, truncate before use

      function check(buffer) {
        if (buffer.length < 8) return false;
        if (buffer.length > 72) return false;
        if (buffer[0] !== 0x30) return false;
        if (buffer[1] !== buffer.length - 2) return false;
        if (buffer[2] !== 0x02) return false;

        var lenR = buffer[3];
        if (lenR === 0) return false;
        if (5 + lenR >= buffer.length) return false;
        if (buffer[4 + lenR] !== 0x02) return false;

        var lenS = buffer[5 + lenR];
        if (lenS === 0) return false;
        if (6 + lenR + lenS !== buffer.length) return false;

        if (buffer[4] & 0x80) return false;
        if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) return false;

        if (buffer[lenR + 6] & 0x80) return false;
        if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) return false;
        return true;
      }

      function decode(buffer) {
        if (buffer.length < 8) throw new Error('DER sequence length is too short');
        if (buffer.length > 72) throw new Error('DER sequence length is too long');
        if (buffer[0] !== 0x30) throw new Error('Expected DER sequence');
        if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid');
        if (buffer[2] !== 0x02) throw new Error('Expected DER integer');

        var lenR = buffer[3];
        if (lenR === 0) throw new Error('R length is zero');
        if (5 + lenR >= buffer.length) throw new Error('R length is too long');
        if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');

        var lenS = buffer[5 + lenR];
        if (lenS === 0) throw new Error('S length is zero');
        if (6 + lenR + lenS !== buffer.length) throw new Error('S length is invalid');

        if (buffer[4] & 0x80) throw new Error('R value is negative');
        if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) throw new Error('R value excessively padded');

        if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative');
        if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded');

        // non-BIP66 - extract R, S values
        return {
          r: buffer.slice(4, 4 + lenR),
          s: buffer.slice(6 + lenR)
        };
      }

      /*
       * Expects r and s to be positive DER integers.
       *
       * The DER format uses the most significant bit as a sign bit (& 0x80).
       * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
       *
       * Examples:
       *
       *      0 =>     0x00
       *      1 =>     0x01
       *     -1 =>     0xff
       *    127 =>     0x7f
       *   -127 =>     0x81
       *    128 =>   0x0080
       *   -128 =>     0x80
       *    255 =>   0x00ff
       *   -255 =>   0xff01
       *  16300 =>   0x3fac
       * -16300 =>   0xc054
       *  62300 => 0x00f35c
       * -62300 => 0xff0ca4
      */
      function encode(r, s) {
        var lenR = r.length;
        var lenS = s.length;
        if (lenR === 0) throw new Error('R length is zero');
        if (lenS === 0) throw new Error('S length is zero');
        if (lenR > 33) throw new Error('R length is too long');
        if (lenS > 33) throw new Error('S length is too long');
        if (r[0] & 0x80) throw new Error('R value is negative');
        if (s[0] & 0x80) throw new Error('S value is negative');
        if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');
        if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');

        var signature = new Buffer(6 + lenR + lenS);

        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        signature[0] = 0x30;
        signature[1] = signature.length - 2;
        signature[2] = 0x02;
        signature[3] = r.length;
        r.copy(signature, 4);
        signature[4 + lenR] = 0x02;
        signature[5 + lenR] = s.length;
        s.copy(signature, 6 + lenR);

        return signature;
      }

      module.exports = {
        check: check,
        decode: decode,
        encode: encode
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 78: [function (require, module, exports) {
    (function (module, exports) {
      'use strict';

      // Utils

      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        Buffer = require('buf' + 'fer').Buffer;
      } catch (e) {}

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this.strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r <<= 4;

          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;

            // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;

            // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        }
        this.strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

            // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

            // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*
       var zeros = [];
      var groupSizes = [];
      var groupBases = [];
       var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
       */

      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];

      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return this.negative !== 0 ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = bit / 26 | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd(num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

          // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
          // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

          // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff;carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff;carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min(qj / bhi | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);
  }, {}], 79: [function (require, module, exports) {
    var r;

    module.exports = function rand(len) {
      if (!r) r = new Rand(null);

      return r.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    if (typeof window === 'object') {
      if (window.crypto && window.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          window.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (window.msCrypto && window.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          window.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else {
        // Old junk
        Rand.prototype._rand = function () {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker
      try {
        var crypto = require('crypto');

        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
        // Emulate crypto API using randy
        Rand.prototype._rand = function _rand(n) {
          var res = new Uint8Array(n);
          for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
          return res;
        };
      }
    }
  }, { "crypto": 80 }], 80: [function (require, module, exports) {}, {}], 81: [function (require, module, exports) {
    (function (Buffer) {
      // based on the aes implimentation in triple sec
      // https://github.com/keybase/triplesec

      // which is in turn based on the one from crypto-js
      // https://code.google.com/p/crypto-js/

      var uint_max = Math.pow(2, 32);
      function fixup_uint32(x) {
        var ret, x_pos;
        ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
        return ret;
      }
      function scrub_vec(v) {
        for (var i = 0; i < v.length; v++) {
          v[i] = 0;
        }
        return false;
      }

      function Global() {
        this.SBOX = [];
        this.INV_SBOX = [];
        this.SUB_MIX = [[], [], [], []];
        this.INV_SUB_MIX = [[], [], [], []];
        this.init();
        this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
      }

      Global.prototype.init = function () {
        var d, i, sx, t, x, x2, x4, x8, xi, _i;
        d = function () {
          var _i, _results;
          _results = [];
          for (i = _i = 0; _i < 256; i = ++_i) {
            if (i < 128) {
              _results.push(i << 1);
            } else {
              _results.push(i << 1 ^ 0x11b);
            }
          }
          return _results;
        }();
        x = 0;
        xi = 0;
        for (i = _i = 0; _i < 256; i = ++_i) {
          sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
          sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
          this.SBOX[x] = sx;
          this.INV_SBOX[sx] = x;
          x2 = d[x];
          x4 = d[x2];
          x8 = d[x4];
          t = d[sx] * 0x101 ^ sx * 0x1010100;
          this.SUB_MIX[0][x] = t << 24 | t >>> 8;
          this.SUB_MIX[1][x] = t << 16 | t >>> 16;
          this.SUB_MIX[2][x] = t << 8 | t >>> 24;
          this.SUB_MIX[3][x] = t;
          t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
          this.INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
          this.INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
          this.INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
          this.INV_SUB_MIX[3][sx] = t;
          if (x === 0) {
            x = xi = 1;
          } else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
          }
        }
        return true;
      };

      var G = new Global();

      AES.blockSize = 4 * 4;

      AES.prototype.blockSize = AES.blockSize;

      AES.keySize = 256 / 8;

      AES.prototype.keySize = AES.keySize;

      function bufferToArray(buf) {
        var len = buf.length / 4;
        var out = new Array(len);
        var i = -1;
        while (++i < len) {
          out[i] = buf.readUInt32BE(i * 4);
        }
        return out;
      }
      function AES(key) {
        this._key = bufferToArray(key);
        this._doReset();
      }

      AES.prototype._doReset = function () {
        var invKsRow, keySize, keyWords, ksRow, ksRows, t;
        keyWords = this._key;
        keySize = keyWords.length;
        this._nRounds = keySize + 6;
        ksRows = (this._nRounds + 1) * 4;
        this._keySchedule = [];
        for (ksRow = 0; ksRow < ksRows; ksRow++) {
          this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], ksRow % keySize === 0 ? (t = t << 8 | t >>> 24, t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff], t ^= G.RCON[ksRow / keySize | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
        }
        this._invKeySchedule = [];
        for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
          ksRow = ksRows - invKsRow;
          t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
          this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[t >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[t >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
        }
        return true;
      };

      AES.prototype.encryptBlock = function (M) {
        M = bufferToArray(new Buffer(M));
        var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
        var buf = new Buffer(16);
        buf.writeUInt32BE(out[0], 0);
        buf.writeUInt32BE(out[1], 4);
        buf.writeUInt32BE(out[2], 8);
        buf.writeUInt32BE(out[3], 12);
        return buf;
      };

      AES.prototype.decryptBlock = function (M) {
        M = bufferToArray(new Buffer(M));
        var temp = [M[3], M[1]];
        M[1] = temp[0];
        M[3] = temp[1];
        var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
        var buf = new Buffer(16);
        buf.writeUInt32BE(out[0], 0);
        buf.writeUInt32BE(out[3], 4);
        buf.writeUInt32BE(out[2], 8);
        buf.writeUInt32BE(out[1], 12);
        return buf;
      };

      AES.prototype.scrub = function () {
        scrub_vec(this._keySchedule);
        scrub_vec(this._invKeySchedule);
        scrub_vec(this._key);
      };

      AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
        var ksRow, s0, s1, s2, s3, t0, t1, t2, t3;

        s0 = M[0] ^ keySchedule[0];
        s1 = M[1] ^ keySchedule[1];
        s2 = M[2] ^ keySchedule[2];
        s3 = M[3] ^ keySchedule[3];
        ksRow = 4;
        for (var round = 1; round < this._nRounds; round++) {
          t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][s1 >>> 16 & 0xff] ^ SUB_MIX[2][s2 >>> 8 & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
          t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][s2 >>> 16 & 0xff] ^ SUB_MIX[2][s3 >>> 8 & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
          t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][s3 >>> 16 & 0xff] ^ SUB_MIX[2][s0 >>> 8 & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
          t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][s0 >>> 16 & 0xff] ^ SUB_MIX[2][s1 >>> 8 & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
          s0 = t0;
          s1 = t1;
          s2 = t2;
          s3 = t3;
        }
        t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
        t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
        t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
        t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
        return [fixup_uint32(t0), fixup_uint32(t1), fixup_uint32(t2), fixup_uint32(t3)];
      };

      exports.AES = AES;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 82: [function (require, module, exports) {
    (function (Buffer) {
      var aes = require('./aes');
      var Transform = require('cipher-base');
      var inherits = require('inherits');
      var GHASH = require('./ghash');
      var xor = require('buffer-xor');
      inherits(StreamCipher, Transform);
      module.exports = StreamCipher;

      function StreamCipher(mode, key, iv, decrypt) {
        if (!(this instanceof StreamCipher)) {
          return new StreamCipher(mode, key, iv);
        }
        Transform.call(this);
        this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
        iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
        this._cipher = new aes.AES(key);
        this._prev = new Buffer(iv.length);
        this._cache = new Buffer('');
        this._secCache = new Buffer('');
        this._decrypt = decrypt;
        this._alen = 0;
        this._len = 0;
        iv.copy(this._prev);
        this._mode = mode;
        var h = new Buffer(4);
        h.fill(0);
        this._ghash = new GHASH(this._cipher.encryptBlock(h));
        this._authTag = null;
        this._called = false;
      }
      StreamCipher.prototype._update = function (chunk) {
        if (!this._called && this._alen) {
          var rump = 16 - this._alen % 16;
          if (rump < 16) {
            rump = new Buffer(rump);
            rump.fill(0);
            this._ghash.update(rump);
          }
        }
        this._called = true;
        var out = this._mode.encrypt(this, chunk);
        if (this._decrypt) {
          this._ghash.update(chunk);
        } else {
          this._ghash.update(out);
        }
        this._len += chunk.length;
        return out;
      };
      StreamCipher.prototype._final = function () {
        if (this._decrypt && !this._authTag) {
          throw new Error('Unsupported state or unable to authenticate data');
        }
        var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
        if (this._decrypt) {
          if (xorTest(tag, this._authTag)) {
            throw new Error('Unsupported state or unable to authenticate data');
          }
        } else {
          this._authTag = tag;
        }
        this._cipher.scrub();
      };
      StreamCipher.prototype.getAuthTag = function getAuthTag() {
        if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
          return this._authTag;
        } else {
          throw new Error('Attempting to get auth tag in unsupported state');
        }
      };
      StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
        if (this._decrypt) {
          this._authTag = tag;
        } else {
          throw new Error('Attempting to set auth tag in unsupported state');
        }
      };
      StreamCipher.prototype.setAAD = function setAAD(buf) {
        if (!this._called) {
          this._ghash.update(buf);
          this._alen += buf.length;
        } else {
          throw new Error('Attempting to set AAD in unsupported state');
        }
      };
      function xorTest(a, b) {
        var out = 0;
        if (a.length !== b.length) {
          out++;
        }
        var len = Math.min(a.length, b.length);
        var i = -1;
        while (++i < len) {
          out += a[i] ^ b[i];
        }
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, { "./aes": 81, "./ghash": 86, "buffer": 108, "buffer-xor": 107, "cipher-base": 109, "inherits": 158 }], 83: [function (require, module, exports) {
    var ciphers = require('./encrypter');
    exports.createCipher = exports.Cipher = ciphers.createCipher;
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
    var deciphers = require('./decrypter');
    exports.createDecipher = exports.Decipher = deciphers.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
    var modes = require('./modes');
    function getCiphers() {
      return Object.keys(modes);
    }
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, { "./decrypter": 84, "./encrypter": 85, "./modes": 87 }], 84: [function (require, module, exports) {
    (function (Buffer) {
      var aes = require('./aes');
      var Transform = require('cipher-base');
      var inherits = require('inherits');
      var modes = require('./modes');
      var StreamCipher = require('./streamCipher');
      var AuthCipher = require('./authCipher');
      var ebtk = require('evp_bytestokey');

      inherits(Decipher, Transform);
      function Decipher(mode, key, iv) {
        if (!(this instanceof Decipher)) {
          return new Decipher(mode, key, iv);
        }
        Transform.call(this);
        this._cache = new Splitter();
        this._last = void 0;
        this._cipher = new aes.AES(key);
        this._prev = new Buffer(iv.length);
        iv.copy(this._prev);
        this._mode = mode;
        this._autopadding = true;
      }
      Decipher.prototype._update = function (data) {
        this._cache.add(data);
        var chunk;
        var thing;
        var out = [];
        while (chunk = this._cache.get(this._autopadding)) {
          thing = this._mode.decrypt(this, chunk);
          out.push(thing);
        }
        return Buffer.concat(out);
      };
      Decipher.prototype._final = function () {
        var chunk = this._cache.flush();
        if (this._autopadding) {
          return unpad(this._mode.decrypt(this, chunk));
        } else if (chunk) {
          throw new Error('data not multiple of block length');
        }
      };
      Decipher.prototype.setAutoPadding = function (setTo) {
        this._autopadding = !!setTo;
        return this;
      };
      function Splitter() {
        if (!(this instanceof Splitter)) {
          return new Splitter();
        }
        this.cache = new Buffer('');
      }
      Splitter.prototype.add = function (data) {
        this.cache = Buffer.concat([this.cache, data]);
      };

      Splitter.prototype.get = function (autoPadding) {
        var out;
        if (autoPadding) {
          if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
          }
        } else {
          if (this.cache.length >= 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
          }
        }
        return null;
      };
      Splitter.prototype.flush = function () {
        if (this.cache.length) {
          return this.cache;
        }
      };
      function unpad(last) {
        var padded = last[15];
        var i = -1;
        while (++i < padded) {
          if (last[i + (16 - padded)] !== padded) {
            throw new Error('unable to decrypt data');
          }
        }
        if (padded === 16) {
          return;
        }
        return last.slice(0, 16 - padded);
      }

      var modelist = {
        ECB: require('./modes/ecb'),
        CBC: require('./modes/cbc'),
        CFB: require('./modes/cfb'),
        CFB8: require('./modes/cfb8'),
        CFB1: require('./modes/cfb1'),
        OFB: require('./modes/ofb'),
        CTR: require('./modes/ctr'),
        GCM: require('./modes/ctr')
      };

      function createDecipheriv(suite, password, iv) {
        var config = modes[suite.toLowerCase()];
        if (!config) {
          throw new TypeError('invalid suite type');
        }
        if (typeof iv === 'string') {
          iv = new Buffer(iv);
        }
        if (typeof password === 'string') {
          password = new Buffer(password);
        }
        if (password.length !== config.key / 8) {
          throw new TypeError('invalid key length ' + password.length);
        }
        if (iv.length !== config.iv) {
          throw new TypeError('invalid iv length ' + iv.length);
        }
        if (config.type === 'stream') {
          return new StreamCipher(modelist[config.mode], password, iv, true);
        } else if (config.type === 'auth') {
          return new AuthCipher(modelist[config.mode], password, iv, true);
        }
        return new Decipher(modelist[config.mode], password, iv);
      }

      function createDecipher(suite, password) {
        var config = modes[suite.toLowerCase()];
        if (!config) {
          throw new TypeError('invalid suite type');
        }
        var keys = ebtk(password, false, config.key, config.iv);
        return createDecipheriv(suite, keys.key, keys.iv);
      }
      exports.createDecipher = createDecipher;
      exports.createDecipheriv = createDecipheriv;
    }).call(this, require("buffer").Buffer);
  }, { "./aes": 81, "./authCipher": 82, "./modes": 87, "./modes/cbc": 88, "./modes/cfb": 89, "./modes/cfb1": 90, "./modes/cfb8": 91, "./modes/ctr": 92, "./modes/ecb": 93, "./modes/ofb": 94, "./streamCipher": 95, "buffer": 108, "cipher-base": 109, "evp_bytestokey": 149, "inherits": 158 }], 85: [function (require, module, exports) {
    (function (Buffer) {
      var aes = require('./aes');
      var Transform = require('cipher-base');
      var inherits = require('inherits');
      var modes = require('./modes');
      var ebtk = require('evp_bytestokey');
      var StreamCipher = require('./streamCipher');
      var AuthCipher = require('./authCipher');
      inherits(Cipher, Transform);
      function Cipher(mode, key, iv) {
        if (!(this instanceof Cipher)) {
          return new Cipher(mode, key, iv);
        }
        Transform.call(this);
        this._cache = new Splitter();
        this._cipher = new aes.AES(key);
        this._prev = new Buffer(iv.length);
        iv.copy(this._prev);
        this._mode = mode;
        this._autopadding = true;
      }
      Cipher.prototype._update = function (data) {
        this._cache.add(data);
        var chunk;
        var thing;
        var out = [];
        while (chunk = this._cache.get()) {
          thing = this._mode.encrypt(this, chunk);
          out.push(thing);
        }
        return Buffer.concat(out);
      };
      Cipher.prototype._final = function () {
        var chunk = this._cache.flush();
        if (this._autopadding) {
          chunk = this._mode.encrypt(this, chunk);
          this._cipher.scrub();
          return chunk;
        } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
          this._cipher.scrub();
          throw new Error('data not multiple of block length');
        }
      };
      Cipher.prototype.setAutoPadding = function (setTo) {
        this._autopadding = !!setTo;
        return this;
      };

      function Splitter() {
        if (!(this instanceof Splitter)) {
          return new Splitter();
        }
        this.cache = new Buffer('');
      }
      Splitter.prototype.add = function (data) {
        this.cache = Buffer.concat([this.cache, data]);
      };

      Splitter.prototype.get = function () {
        if (this.cache.length > 15) {
          var out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
        return null;
      };
      Splitter.prototype.flush = function () {
        var len = 16 - this.cache.length;
        var padBuff = new Buffer(len);

        var i = -1;
        while (++i < len) {
          padBuff.writeUInt8(len, i);
        }
        var out = Buffer.concat([this.cache, padBuff]);
        return out;
      };
      var modelist = {
        ECB: require('./modes/ecb'),
        CBC: require('./modes/cbc'),
        CFB: require('./modes/cfb'),
        CFB8: require('./modes/cfb8'),
        CFB1: require('./modes/cfb1'),
        OFB: require('./modes/ofb'),
        CTR: require('./modes/ctr'),
        GCM: require('./modes/ctr')
      };

      function createCipheriv(suite, password, iv) {
        var config = modes[suite.toLowerCase()];
        if (!config) {
          throw new TypeError('invalid suite type');
        }
        if (typeof iv === 'string') {
          iv = new Buffer(iv);
        }
        if (typeof password === 'string') {
          password = new Buffer(password);
        }
        if (password.length !== config.key / 8) {
          throw new TypeError('invalid key length ' + password.length);
        }
        if (iv.length !== config.iv) {
          throw new TypeError('invalid iv length ' + iv.length);
        }
        if (config.type === 'stream') {
          return new StreamCipher(modelist[config.mode], password, iv);
        } else if (config.type === 'auth') {
          return new AuthCipher(modelist[config.mode], password, iv);
        }
        return new Cipher(modelist[config.mode], password, iv);
      }
      function createCipher(suite, password) {
        var config = modes[suite.toLowerCase()];
        if (!config) {
          throw new TypeError('invalid suite type');
        }
        var keys = ebtk(password, false, config.key, config.iv);
        return createCipheriv(suite, keys.key, keys.iv);
      }

      exports.createCipheriv = createCipheriv;
      exports.createCipher = createCipher;
    }).call(this, require("buffer").Buffer);
  }, { "./aes": 81, "./authCipher": 82, "./modes": 87, "./modes/cbc": 88, "./modes/cfb": 89, "./modes/cfb1": 90, "./modes/cfb8": 91, "./modes/ctr": 92, "./modes/ecb": 93, "./modes/ofb": 94, "./streamCipher": 95, "buffer": 108, "cipher-base": 109, "evp_bytestokey": 149, "inherits": 158 }], 86: [function (require, module, exports) {
    (function (Buffer) {
      var zeros = new Buffer(16);
      zeros.fill(0);
      module.exports = GHASH;
      function GHASH(key) {
        this.h = key;
        this.state = new Buffer(16);
        this.state.fill(0);
        this.cache = new Buffer('');
      }
      // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
      // by Juho Vähä-Herttua
      GHASH.prototype.ghash = function (block) {
        var i = -1;
        while (++i < block.length) {
          this.state[i] ^= block[i];
        }
        this._multiply();
      };

      GHASH.prototype._multiply = function () {
        var Vi = toArray(this.h);
        var Zi = [0, 0, 0, 0];
        var j, xi, lsb_Vi;
        var i = -1;
        while (++i < 128) {
          xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
          if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi = xor(Zi, Vi);
          }

          // Store the value of LSB(V_i)
          lsb_Vi = (Vi[3] & 1) !== 0;

          // V_i+1 = V_i >> 1
          for (j = 3; j > 0; j--) {
            Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
          }
          Vi[0] = Vi[0] >>> 1;

          // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
          if (lsb_Vi) {
            Vi[0] = Vi[0] ^ 0xe1 << 24;
          }
        }
        this.state = fromArray(Zi);
      };
      GHASH.prototype.update = function (buf) {
        this.cache = Buffer.concat([this.cache, buf]);
        var chunk;
        while (this.cache.length >= 16) {
          chunk = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          this.ghash(chunk);
        }
      };
      GHASH.prototype.final = function (abl, bl) {
        if (this.cache.length) {
          this.ghash(Buffer.concat([this.cache, zeros], 16));
        }
        this.ghash(fromArray([0, abl, 0, bl]));
        return this.state;
      };

      function toArray(buf) {
        return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
      }
      function fromArray(out) {
        out = out.map(fixup_uint32);
        var buf = new Buffer(16);
        buf.writeUInt32BE(out[0], 0);
        buf.writeUInt32BE(out[1], 4);
        buf.writeUInt32BE(out[2], 8);
        buf.writeUInt32BE(out[3], 12);
        return buf;
      }
      var uint_max = Math.pow(2, 32);
      function fixup_uint32(x) {
        var ret, x_pos;
        ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
        return ret;
      }
      function xor(a, b) {
        return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 87: [function (require, module, exports) {
    exports['aes-128-ecb'] = {
      cipher: 'AES',
      key: 128,
      iv: 0,
      mode: 'ECB',
      type: 'block'
    };
    exports['aes-192-ecb'] = {
      cipher: 'AES',
      key: 192,
      iv: 0,
      mode: 'ECB',
      type: 'block'
    };
    exports['aes-256-ecb'] = {
      cipher: 'AES',
      key: 256,
      iv: 0,
      mode: 'ECB',
      type: 'block'
    };
    exports['aes-128-cbc'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'CBC',
      type: 'block'
    };
    exports['aes-192-cbc'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'CBC',
      type: 'block'
    };
    exports['aes-256-cbc'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'CBC',
      type: 'block'
    };
    exports['aes128'] = exports['aes-128-cbc'];
    exports['aes192'] = exports['aes-192-cbc'];
    exports['aes256'] = exports['aes-256-cbc'];
    exports['aes-128-cfb'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'CFB',
      type: 'stream'
    };
    exports['aes-192-cfb'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'CFB',
      type: 'stream'
    };
    exports['aes-256-cfb'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'CFB',
      type: 'stream'
    };
    exports['aes-128-cfb8'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'CFB8',
      type: 'stream'
    };
    exports['aes-192-cfb8'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'CFB8',
      type: 'stream'
    };
    exports['aes-256-cfb8'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'CFB8',
      type: 'stream'
    };
    exports['aes-128-cfb1'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'CFB1',
      type: 'stream'
    };
    exports['aes-192-cfb1'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'CFB1',
      type: 'stream'
    };
    exports['aes-256-cfb1'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'CFB1',
      type: 'stream'
    };
    exports['aes-128-ofb'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'OFB',
      type: 'stream'
    };
    exports['aes-192-ofb'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'OFB',
      type: 'stream'
    };
    exports['aes-256-ofb'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'OFB',
      type: 'stream'
    };
    exports['aes-128-ctr'] = {
      cipher: 'AES',
      key: 128,
      iv: 16,
      mode: 'CTR',
      type: 'stream'
    };
    exports['aes-192-ctr'] = {
      cipher: 'AES',
      key: 192,
      iv: 16,
      mode: 'CTR',
      type: 'stream'
    };
    exports['aes-256-ctr'] = {
      cipher: 'AES',
      key: 256,
      iv: 16,
      mode: 'CTR',
      type: 'stream'
    };
    exports['aes-128-gcm'] = {
      cipher: 'AES',
      key: 128,
      iv: 12,
      mode: 'GCM',
      type: 'auth'
    };
    exports['aes-192-gcm'] = {
      cipher: 'AES',
      key: 192,
      iv: 12,
      mode: 'GCM',
      type: 'auth'
    };
    exports['aes-256-gcm'] = {
      cipher: 'AES',
      key: 256,
      iv: 12,
      mode: 'GCM',
      type: 'auth'
    };
  }, {}], 88: [function (require, module, exports) {
    var xor = require('buffer-xor');

    exports.encrypt = function (self, block) {
      var data = xor(block, self._prev);

      self._prev = self._cipher.encryptBlock(data);
      return self._prev;
    };

    exports.decrypt = function (self, block) {
      var pad = self._prev;

      self._prev = block;
      var out = self._cipher.decryptBlock(block);

      return xor(out, pad);
    };
  }, { "buffer-xor": 107 }], 89: [function (require, module, exports) {
    (function (Buffer) {
      var xor = require('buffer-xor');

      exports.encrypt = function (self, data, decrypt) {
        var out = new Buffer('');
        var len;

        while (data.length) {
          if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = new Buffer('');
          }

          if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
            data = data.slice(len);
          } else {
            out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
            break;
          }
        }

        return out;
      };
      function encryptStart(self, data, decrypt) {
        var len = data.length;
        var out = xor(data, self._cache);
        self._cache = self._cache.slice(len);
        self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "buffer-xor": 107 }], 90: [function (require, module, exports) {
    (function (Buffer) {
      function encryptByte(self, byteParam, decrypt) {
        var pad;
        var i = -1;
        var len = 8;
        var out = 0;
        var bit, value;
        while (++i < len) {
          pad = self._cipher.encryptBlock(self._prev);
          bit = byteParam & 1 << 7 - i ? 0x80 : 0;
          value = pad[0] ^ bit;
          out += (value & 0x80) >> i % 8;
          self._prev = shiftIn(self._prev, decrypt ? bit : value);
        }
        return out;
      }
      exports.encrypt = function (self, chunk, decrypt) {
        var len = chunk.length;
        var out = new Buffer(len);
        var i = -1;
        while (++i < len) {
          out[i] = encryptByte(self, chunk[i], decrypt);
        }
        return out;
      };
      function shiftIn(buffer, value) {
        var len = buffer.length;
        var i = -1;
        var out = new Buffer(buffer.length);
        buffer = Buffer.concat([buffer, new Buffer([value])]);
        while (++i < len) {
          out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
        }
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 91: [function (require, module, exports) {
    (function (Buffer) {
      function encryptByte(self, byteParam, decrypt) {
        var pad = self._cipher.encryptBlock(self._prev);
        var out = pad[0] ^ byteParam;
        self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])]);
        return out;
      }
      exports.encrypt = function (self, chunk, decrypt) {
        var len = chunk.length;
        var out = new Buffer(len);
        var i = -1;
        while (++i < len) {
          out[i] = encryptByte(self, chunk[i], decrypt);
        }
        return out;
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 92: [function (require, module, exports) {
    (function (Buffer) {
      var xor = require('buffer-xor');

      function incr32(iv) {
        var len = iv.length;
        var item;
        while (len--) {
          item = iv.readUInt8(len);
          if (item === 255) {
            iv.writeUInt8(0, len);
          } else {
            item++;
            iv.writeUInt8(item, len);
            break;
          }
        }
      }

      function getBlock(self) {
        var out = self._cipher.encryptBlock(self._prev);
        incr32(self._prev);
        return out;
      }

      exports.encrypt = function (self, chunk) {
        while (self._cache.length < chunk.length) {
          self._cache = Buffer.concat([self._cache, getBlock(self)]);
        }
        var pad = self._cache.slice(0, chunk.length);
        self._cache = self._cache.slice(chunk.length);
        return xor(chunk, pad);
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "buffer-xor": 107 }], 93: [function (require, module, exports) {
    exports.encrypt = function (self, block) {
      return self._cipher.encryptBlock(block);
    };
    exports.decrypt = function (self, block) {
      return self._cipher.decryptBlock(block);
    };
  }, {}], 94: [function (require, module, exports) {
    (function (Buffer) {
      var xor = require('buffer-xor');

      function getBlock(self) {
        self._prev = self._cipher.encryptBlock(self._prev);
        return self._prev;
      }

      exports.encrypt = function (self, chunk) {
        while (self._cache.length < chunk.length) {
          self._cache = Buffer.concat([self._cache, getBlock(self)]);
        }

        var pad = self._cache.slice(0, chunk.length);
        self._cache = self._cache.slice(chunk.length);
        return xor(chunk, pad);
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "buffer-xor": 107 }], 95: [function (require, module, exports) {
    (function (Buffer) {
      var aes = require('./aes');
      var Transform = require('cipher-base');
      var inherits = require('inherits');

      inherits(StreamCipher, Transform);
      module.exports = StreamCipher;
      function StreamCipher(mode, key, iv, decrypt) {
        if (!(this instanceof StreamCipher)) {
          return new StreamCipher(mode, key, iv);
        }
        Transform.call(this);
        this._cipher = new aes.AES(key);
        this._prev = new Buffer(iv.length);
        this._cache = new Buffer('');
        this._secCache = new Buffer('');
        this._decrypt = decrypt;
        iv.copy(this._prev);
        this._mode = mode;
      }
      StreamCipher.prototype._update = function (chunk) {
        return this._mode.encrypt(this, chunk, this._decrypt);
      };
      StreamCipher.prototype._final = function () {
        this._cipher.scrub();
      };
    }).call(this, require("buffer").Buffer);
  }, { "./aes": 81, "buffer": 108, "cipher-base": 109, "inherits": 158 }], 96: [function (require, module, exports) {
    var ebtk = require('evp_bytestokey');
    var aes = require('browserify-aes/browser');
    var DES = require('browserify-des');
    var desModes = require('browserify-des/modes');
    var aesModes = require('browserify-aes/modes');
    function createCipher(suite, password) {
      var keyLen, ivLen;
      suite = suite.toLowerCase();
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      var keyLen, ivLen;
      suite = suite.toLowerCase();
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }

    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) {
        return aes.createCipheriv(suite, key, iv);
      } else if (desModes[suite]) {
        return new DES({
          key: key,
          iv: iv,
          mode: suite
        });
      } else {
        throw new TypeError('invalid suite type');
      }
    }
    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) {
        return aes.createDecipheriv(suite, key, iv);
      } else if (desModes[suite]) {
        return new DES({
          key: key,
          iv: iv,
          mode: suite,
          decrypt: true
        });
      } else {
        throw new TypeError('invalid suite type');
      }
    }
    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers());
    }
    exports.listCiphers = exports.getCiphers = getCiphers;
  }, { "browserify-aes/browser": 83, "browserify-aes/modes": 87, "browserify-des": 97, "browserify-des/modes": 98, "evp_bytestokey": 149 }], 97: [function (require, module, exports) {
    (function (Buffer) {
      var CipherBase = require('cipher-base');
      var des = require('des.js');
      var inherits = require('inherits');

      var modes = {
        'des-ede3-cbc': des.CBC.instantiate(des.EDE),
        'des-ede3': des.EDE,
        'des-ede-cbc': des.CBC.instantiate(des.EDE),
        'des-ede': des.EDE,
        'des-cbc': des.CBC.instantiate(des.DES),
        'des-ecb': des.DES
      };
      modes.des = modes['des-cbc'];
      modes.des3 = modes['des-ede3-cbc'];
      module.exports = DES;
      inherits(DES, CipherBase);
      function DES(opts) {
        CipherBase.call(this);
        var modeName = opts.mode.toLowerCase();
        var mode = modes[modeName];
        var type;
        if (opts.decrypt) {
          type = 'decrypt';
        } else {
          type = 'encrypt';
        }
        var key = opts.key;
        if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
          key = Buffer.concat([key, key.slice(0, 8)]);
        }
        var iv = opts.iv;
        this._des = mode.create({
          key: key,
          iv: iv,
          type: type
        });
      }
      DES.prototype._update = function (data) {
        return new Buffer(this._des.update(data));
      };
      DES.prototype._final = function () {
        return new Buffer(this._des.final());
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "cipher-base": 109, "des.js": 117, "inherits": 158 }], 98: [function (require, module, exports) {
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    };
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    };
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    };
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    };
    exports['des-ede'] = {
      key: 16,
      iv: 0
    };
  }, {}], 99: [function (require, module, exports) {
    (function (Buffer) {
      var bn = require('bn.js');
      var randomBytes = require('randombytes');
      module.exports = crt;
      function blind(priv) {
        var r = getr(priv);
        var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
        return {
          blinder: blinder,
          unblinder: r.invm(priv.modulus)
        };
      }
      function crt(msg, priv) {
        var blinds = blind(priv);
        var len = priv.modulus.byteLength();
        var mod = bn.mont(priv.modulus);
        var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
        var c1 = blinded.toRed(bn.mont(priv.prime1));
        var c2 = blinded.toRed(bn.mont(priv.prime2));
        var qinv = priv.coefficient;
        var p = priv.prime1;
        var q = priv.prime2;
        var m1 = c1.redPow(priv.exponent1);
        var m2 = c2.redPow(priv.exponent2);
        m1 = m1.fromRed();
        m2 = m2.fromRed();
        var h = m1.isub(m2).imul(qinv).umod(p);
        h.imul(q);
        m2.iadd(h);
        return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
      }
      crt.getr = getr;
      function getr(priv) {
        var len = priv.modulus.byteLength();
        var r = new bn(randomBytes(len));
        while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
          r = new bn(randomBytes(len));
        }
        return r;
      }
    }).call(this, require("buffer").Buffer);
  }, { "bn.js": 78, "buffer": 108, "randombytes": 180 }], 100: [function (require, module, exports) {
    (function (Buffer) {
      const Sha3 = require('js-sha3');

      const hashLengths = [224, 256, 384, 512];

      var hash = function (bitcount) {
        if (bitcount !== undefined && hashLengths.indexOf(bitcount) == -1) throw new Error('Unsupported hash length');
        this.content = [];
        this.bitcount = bitcount ? 'keccak_' + bitcount : 'keccak_512';
      };

      hash.prototype.update = function (i) {
        if (Buffer.isBuffer(i)) this.content.push(i);else if (typeof i === 'string') this.content.push(new Buffer(i));else throw new Error('Unsupported argument to update');
        return this;
      };

      hash.prototype.digest = function (encoding) {
        var result = Sha3[this.bitcount](Buffer.concat(this.content));
        if (encoding === 'hex') return result;else if (encoding === 'binary' || encoding === undefined) return new Buffer(result, 'hex').toString('binary');else throw new Error('Unsupported encoding for digest: ' + encoding);
      };

      module.exports = {
        SHA3Hash: hash
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "js-sha3": 161 }], 101: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
        sign: 'rsa',
        hash: 'sha224',
        id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
      };
      exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
        sign: 'rsa',
        hash: 'sha256',
        id: new Buffer('3031300d060960864801650304020105000420', 'hex')
      };
      exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
        sign: 'rsa',
        hash: 'sha384',
        id: new Buffer('3041300d060960864801650304020205000430', 'hex')
      };
      exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
        sign: 'rsa',
        hash: 'sha512',
        id: new Buffer('3051300d060960864801650304020305000440', 'hex')
      };
      exports['RSA-SHA1'] = {
        sign: 'rsa',
        hash: 'sha1',
        id: new Buffer('3021300906052b0e03021a05000414', 'hex')
      };
      exports['ecdsa-with-SHA1'] = {
        sign: 'ecdsa',
        hash: 'sha1',
        id: new Buffer('', 'hex')
      };

      exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
        sign: 'dsa',
        hash: 'sha1',
        id: new Buffer('', 'hex')
      };
      exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
        sign: 'dsa',
        hash: 'sha224',
        id: new Buffer('', 'hex')
      };
      exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
        sign: 'dsa',
        hash: 'sha256',
        id: new Buffer('', 'hex')
      };
      exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
        sign: 'dsa',
        hash: 'sha384',
        id: new Buffer('', 'hex')
      };
      exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
        sign: 'dsa',
        hash: 'sha512',
        id: new Buffer('', 'hex')
      };
      exports['DSA-RIPEMD160'] = {
        sign: 'dsa',
        hash: 'rmd160',
        id: new Buffer('', 'hex')
      };
      exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
        sign: 'rsa',
        hash: 'rmd160',
        id: new Buffer('3021300906052b2403020105000414', 'hex')
      };
      exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
        sign: 'rsa',
        hash: 'md5',
        id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 102: [function (require, module, exports) {
    (function (Buffer) {
      var _algos = require('./algos');
      var createHash = require('create-hash');
      var inherits = require('inherits');
      var sign = require('./sign');
      var stream = require('stream');
      var verify = require('./verify');

      var algos = {};
      Object.keys(_algos).forEach(function (key) {
        algos[key] = algos[key.toLowerCase()] = _algos[key];
      });

      function Sign(algorithm) {
        stream.Writable.call(this);

        var data = algos[algorithm];
        if (!data) {
          throw new Error('Unknown message digest');
        }

        this._hashType = data.hash;
        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
      }
      inherits(Sign, stream.Writable);

      Sign.prototype._write = function _write(data, _, done) {
        this._hash.update(data);
        done();
      };

      Sign.prototype.update = function update(data, enc) {
        if (typeof data === 'string') {
          data = new Buffer(data, enc);
        }

        this._hash.update(data);
        return this;
      };

      Sign.prototype.sign = function signMethod(key, enc) {
        this.end();
        var hash = this._hash.digest();
        var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType);

        return enc ? sig.toString(enc) : sig;
      };

      function Verify(algorithm) {
        stream.Writable.call(this);

        var data = algos[algorithm];
        if (!data) {
          throw new Error('Unknown message digest');
        }

        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
      }
      inherits(Verify, stream.Writable);

      Verify.prototype._write = function _write(data, _, done) {
        this._hash.update(data);

        done();
      };

      Verify.prototype.update = function update(data, enc) {
        if (typeof data === 'string') {
          data = new Buffer(data, enc);
        }

        this._hash.update(data);
        return this;
      };

      Verify.prototype.verify = function verifyMethod(key, sig, enc) {
        if (typeof sig === 'string') {
          sig = new Buffer(sig, enc);
        }

        this.end();
        var hash = this._hash.digest();

        return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType);
      };

      function createSign(algorithm) {
        return new Sign(algorithm);
      }

      function createVerify(algorithm) {
        return new Verify(algorithm);
      }

      module.exports = {
        Sign: createSign,
        Verify: createVerify,
        createSign: createSign,
        createVerify: createVerify
      };
    }).call(this, require("buffer").Buffer);
  }, { "./algos": 101, "./sign": 104, "./verify": 105, "buffer": 108, "create-hash": 112, "inherits": 158, "stream": 209 }], 103: [function (require, module, exports) {
    'use strict';

    exports['1.3.132.0.10'] = 'secp256k1';

    exports['1.3.132.0.33'] = 'p224';

    exports['1.2.840.10045.3.1.1'] = 'p192';

    exports['1.2.840.10045.3.1.7'] = 'p256';

    exports['1.3.132.0.34'] = 'p384';

    exports['1.3.132.0.35'] = 'p521';
  }, {}], 104: [function (require, module, exports) {
    (function (Buffer) {
      // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
      var createHmac = require('create-hmac');
      var crt = require('browserify-rsa');
      var curves = require('./curves');
      var elliptic = require('elliptic');
      var parseKeys = require('parse-asn1');

      var BN = require('bn.js');
      var EC = elliptic.ec;

      function sign(hash, key, hashType, signType) {
        var priv = parseKeys(key);
        if (priv.curve) {
          if (signType !== 'ecdsa') throw new Error('wrong private key type');

          return ecSign(hash, priv);
        } else if (priv.type === 'dsa') {
          if (signType !== 'dsa') {
            throw new Error('wrong private key type');
          }
          return dsaSign(hash, priv, hashType);
        } else {
          if (signType !== 'rsa') throw new Error('wrong private key type');
        }

        var len = priv.modulus.byteLength();
        var pad = [0, 1];
        while (hash.length + pad.length + 1 < len) {
          pad.push(0xff);
        }
        pad.push(0x00);
        var i = -1;
        while (++i < hash.length) {
          pad.push(hash[i]);
        }

        var out = crt(pad, priv);
        return out;
      }

      function ecSign(hash, priv) {
        var curveId = curves[priv.curve.join('.')];
        if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));

        var curve = new EC(curveId);
        var key = curve.genKeyPair();

        key._importPrivate(priv.privateKey);
        var out = key.sign(hash);

        return new Buffer(out.toDER());
      }

      function dsaSign(hash, priv, algo) {
        var x = priv.params.priv_key;
        var p = priv.params.p;
        var q = priv.params.q;
        var g = priv.params.g;
        var r = new BN(0);
        var k;
        var H = bits2int(hash, q).mod(q);
        var s = false;
        var kv = getKey(x, q, hash, algo);
        while (s === false) {
          k = makeKey(q, kv, algo);
          r = makeR(g, k, p, q);
          s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
          if (!s.cmpn(0)) {
            s = false;
            r = new BN(0);
          }
        }
        return toDER(r, s);
      }

      function toDER(r, s) {
        r = r.toArray();
        s = s.toArray();

        // Pad values
        if (r[0] & 0x80) {
          r = [0].concat(r);
        }
        // Pad values
        if (s[0] & 0x80) {
          s = [0].concat(s);
        }

        var total = r.length + s.length + 4;
        var res = [0x30, total, 0x02, r.length];
        res = res.concat(r, [0x02, s.length], s);
        return new Buffer(res);
      }

      function getKey(x, q, hash, algo) {
        x = new Buffer(x.toArray());
        if (x.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - x.length);
          zeros.fill(0);
          x = Buffer.concat([zeros, x]);
        }
        var hlen = hash.length;
        var hbits = bits2octets(hash, q);
        var v = new Buffer(hlen);
        v.fill(1);
        var k = new Buffer(hlen);
        k.fill(0);
        k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
        k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
        return {
          k: k,
          v: v
        };
      }

      function bits2int(obits, q) {
        var bits = new BN(obits);
        var shift = (obits.length << 3) - q.bitLength();
        if (shift > 0) {
          bits.ishrn(shift);
        }
        return bits;
      }

      function bits2octets(bits, q) {
        bits = bits2int(bits, q);
        bits = bits.mod(q);
        var out = new Buffer(bits.toArray());
        if (out.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - out.length);
          zeros.fill(0);
          out = Buffer.concat([zeros, out]);
        }
        return out;
      }

      function makeKey(q, kv, algo) {
        var t, k;

        do {
          t = new Buffer('');

          while (t.length * 8 < q.bitLength()) {
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([t, kv.v]);
          }

          k = bits2int(t, q);
          kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
        } while (k.cmp(q) !== -1);

        return k;
      }

      function makeR(g, k, p, q) {
        return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
      }

      module.exports = sign;
      module.exports.getKey = getKey;
      module.exports.makeKey = makeKey;
    }).call(this, require("buffer").Buffer);
  }, { "./curves": 103, "bn.js": 78, "browserify-rsa": 99, "buffer": 108, "create-hmac": 115, "elliptic": 127, "parse-asn1": 169 }], 105: [function (require, module, exports) {
    (function (Buffer) {
      // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
      var curves = require('./curves');
      var elliptic = require('elliptic');
      var parseKeys = require('parse-asn1');

      var BN = require('bn.js');
      var EC = elliptic.ec;

      function verify(sig, hash, key, signType) {
        var pub = parseKeys(key);
        if (pub.type === 'ec') {
          if (signType !== 'ecdsa') {
            throw new Error('wrong public key type');
          }
          return ecVerify(sig, hash, pub);
        } else if (pub.type === 'dsa') {
          if (signType !== 'dsa') {
            throw new Error('wrong public key type');
          }
          return dsaVerify(sig, hash, pub);
        } else {
          if (signType !== 'rsa') {
            throw new Error('wrong public key type');
          }
        }
        var len = pub.modulus.byteLength();
        var pad = [1];
        var padNum = 0;
        while (hash.length + pad.length + 2 < len) {
          pad.push(0xff);
          padNum++;
        }
        pad.push(0x00);
        var i = -1;
        while (++i < hash.length) {
          pad.push(hash[i]);
        }
        pad = new Buffer(pad);
        var red = BN.mont(pub.modulus);
        sig = new BN(sig).toRed(red);

        sig = sig.redPow(new BN(pub.publicExponent));

        sig = new Buffer(sig.fromRed().toArray());
        var out = 0;
        if (padNum < 8) {
          out = 1;
        }
        len = Math.min(sig.length, pad.length);
        if (sig.length !== pad.length) {
          out = 1;
        }

        i = -1;
        while (++i < len) {
          out |= sig[i] ^ pad[i];
        }
        return out === 0;
      }

      function ecVerify(sig, hash, pub) {
        var curveId = curves[pub.data.algorithm.curve.join('.')];
        if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));

        var curve = new EC(curveId);
        var pubkey = pub.data.subjectPrivateKey.data;

        return curve.verify(hash, sig, pubkey);
      }

      function dsaVerify(sig, hash, pub) {
        var p = pub.data.p;
        var q = pub.data.q;
        var g = pub.data.g;
        var y = pub.data.pub_key;
        var unpacked = parseKeys.signature.decode(sig, 'der');
        var s = unpacked.s;
        var r = unpacked.r;
        checkValue(s, q);
        checkValue(r, q);
        var montp = BN.mont(p);
        var w = s.invm(q);
        var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
        return !v.cmp(r);
      }

      function checkValue(b, q) {
        if (b.cmpn(0) <= 0) {
          throw new Error('invalid sig');
        }
        if (b.cmp(q) >= q) {
          throw new Error('invalid sig');
        }
      }

      module.exports = verify;
    }).call(this, require("buffer").Buffer);
  }, { "./curves": 103, "bn.js": 78, "buffer": 108, "elliptic": 127, "parse-asn1": 169 }], 106: [function (require, module, exports) {
    (function (global) {
      'use strict';

      var buffer = require('buffer');
      var Buffer = buffer.Buffer;
      var SlowBuffer = buffer.SlowBuffer;
      var MAX_LEN = buffer.kMaxLength || 2147483647;
      exports.alloc = function alloc(size, fill, encoding) {
        if (typeof Buffer.alloc === 'function') {
          return Buffer.alloc(size, fill, encoding);
        }
        if (typeof encoding === 'number') {
          throw new TypeError('encoding must not be number');
        }
        if (typeof size !== 'number') {
          throw new TypeError('size must be a number');
        }
        if (size > MAX_LEN) {
          throw new RangeError('size is too large');
        }
        var enc = encoding;
        var _fill = fill;
        if (_fill === undefined) {
          enc = undefined;
          _fill = 0;
        }
        var buf = new Buffer(size);
        if (typeof _fill === 'string') {
          var fillBuf = new Buffer(_fill, enc);
          var flen = fillBuf.length;
          var i = -1;
          while (++i < size) {
            buf[i] = fillBuf[i % flen];
          }
        } else {
          buf.fill(_fill);
        }
        return buf;
      };
      exports.allocUnsafe = function allocUnsafe(size) {
        if (typeof Buffer.allocUnsafe === 'function') {
          return Buffer.allocUnsafe(size);
        }
        if (typeof size !== 'number') {
          throw new TypeError('size must be a number');
        }
        if (size > MAX_LEN) {
          throw new RangeError('size is too large');
        }
        return new Buffer(size);
      };
      exports.from = function from(value, encodingOrOffset, length) {
        if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
          return Buffer.from(value, encodingOrOffset, length);
        }
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number');
        }
        if (typeof value === 'string') {
          return new Buffer(value, encodingOrOffset);
        }
        if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
          var offset = encodingOrOffset;
          if (arguments.length === 1) {
            return new Buffer(value);
          }
          if (typeof offset === 'undefined') {
            offset = 0;
          }
          var len = length;
          if (typeof len === 'undefined') {
            len = value.byteLength - offset;
          }
          if (offset >= value.byteLength) {
            throw new RangeError('\'offset\' is out of bounds');
          }
          if (len > value.byteLength - offset) {
            throw new RangeError('\'length\' is out of bounds');
          }
          return new Buffer(value.slice(offset, offset + len));
        }
        if (Buffer.isBuffer(value)) {
          var out = new Buffer(value.length);
          value.copy(out, 0, 0, value.length);
          return out;
        }
        if (value) {
          if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
            return new Buffer(value);
          }
          if (value.type === 'Buffer' && Array.isArray(value.data)) {
            return new Buffer(value.data);
          }
        }

        throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
      };
      exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
        if (typeof Buffer.allocUnsafeSlow === 'function') {
          return Buffer.allocUnsafeSlow(size);
        }
        if (typeof size !== 'number') {
          throw new TypeError('size must be a number');
        }
        if (size >= MAX_LEN) {
          throw new RangeError('size is too large');
        }
        return new SlowBuffer(size);
      };
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "buffer": 108 }], 107: [function (require, module, exports) {
    (function (Buffer) {
      module.exports = function xor(a, b) {
        var length = Math.min(a.length, b.length);
        var buffer = new Buffer(length);

        for (var i = 0; i < length; ++i) {
          buffer[i] = a[i] ^ b[i];
        }

        return buffer;
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 108: [function (require, module, exports) {
    (function (global) {
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
       * @license  MIT
       */
      /* eslint-disable no-proto */

      'use strict';

      var base64 = require('base64-js');
      var ieee754 = require('ieee754');
      var isArray = require('isarray');

      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;

      /**
       * If `Buffer.TYPED_ARRAY_SUPPORT`:
       *   === true    Use Uint8Array implementation (fastest)
       *   === false   Use Object implementation (most compatible, even IE6)
       *
       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
       * Opera 11.6+, iOS 4.2+.
       *
       * Due to various browser bugs, sometimes the Object implementation will be used even
       * when the browser supports typed arrays.
       *
       * Note:
       *
       *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
       *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
       *
       *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
       *
       *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
       *     incorrect length in some situations.
      
       * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
       * get the Object implementation, which is slower but behaves correctly.
       */
      Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

      /*
       * Export kMaxLength after typed array support is determined.
       */
      exports.kMaxLength = kMaxLength();

      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () {
              return 42;
            } };
          return arr.foo() === 42 && // typed array instances can be augmented
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
        } catch (e) {
          return false;
        }
      }

      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
      }

      function createBuffer(that, length) {
        if (kMaxLength() < length) {
          throw new RangeError('Invalid typed array length');
        }
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          if (that === null) {
            that = new Buffer(length);
          }
          that.length = length;
        }

        return that;
      }

      /**
       * The Buffer constructor returns instances of `Uint8Array` that have their
       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
       * and the `Uint8Array` methods. Square bracket notation works as expected -- it
       * returns a single octet.
       *
       * The `Uint8Array` prototype remains unmodified.
       */

      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
          return new Buffer(arg, encodingOrOffset, length);
        }

        // Common case.
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new Error('If encoding is specified then the first argument must be a string');
          }
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }

      Buffer.poolSize = 8192; // not used by this implementation

      // TODO: Legacy, not needed anymore. Remove in next major version.
      Buffer._augment = function (arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };

      function from(that, value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number');
        }

        if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
          return fromArrayBuffer(that, value, encodingOrOffset, length);
        }

        if (typeof value === 'string') {
          return fromString(that, value, encodingOrOffset);
        }

        return fromObject(that, value);
      }

      /**
       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
       * if value is a number.
       * Buffer.from(str[, encoding])
       * Buffer.from(array)
       * Buffer.from(buffer)
       * Buffer.from(arrayBuffer[, byteOffset[, length]])
       **/
      Buffer.from = function (value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true
          });
        }
      }

      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be a number');
        } else if (size < 0) {
          throw new RangeError('"size" argument must not be negative');
        }
      }

      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(that, size);
        }
        if (fill !== undefined) {
          // Only pay attention to encoding if it's a string. This
          // prevents accidentally sending in a number that would
          // be interpretted as a start offset.
          return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        }
        return createBuffer(that, size);
      }

      /**
       * Creates a new filled Buffer instance.
       * alloc(size[, fill[, encoding]])
       **/
      Buffer.alloc = function (size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };

      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
        if (!Buffer.TYPED_ARRAY_SUPPORT) {
          for (var i = 0; i < size; ++i) {
            that[i] = 0;
          }
        }
        return that;
      }

      /**
       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
       * */
      Buffer.allocUnsafe = function (size) {
        return allocUnsafe(null, size);
      };
      /**
       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
       */
      Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(null, size);
      };

      function fromString(that, string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }

        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }

        var length = byteLength(string, encoding) | 0;
        that = createBuffer(that, length);

        var actual = that.write(string, encoding);

        if (actual !== length) {
          // Writing a hex string, for example, that contains invalid characters will
          // cause everything after the first invalid character to be ignored. (e.g.
          // 'abxxcd' will be treated as 'ab')
          that = that.slice(0, actual);
        }

        return that;
      }

      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) {
          that[i] = array[i] & 255;
        }
        return that;
      }

      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength; // this throws if `array` is not a valid ArrayBuffer

        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('\'offset\' is out of bounds');
        }

        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('\'length\' is out of bounds');
        }

        if (byteOffset === undefined && length === undefined) {
          array = new Uint8Array(array);
        } else if (length === undefined) {
          array = new Uint8Array(array, byteOffset);
        } else {
          array = new Uint8Array(array, byteOffset, length);
        }

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = array;
          that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          that = fromArrayLike(that, array);
        }
        return that;
      }

      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          that = createBuffer(that, len);

          if (that.length === 0) {
            return that;
          }

          obj.copy(that, 0, 0, len);
          return that;
        }

        if (obj) {
          if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
              return createBuffer(that, 0);
            }
            return fromArrayLike(that, obj);
          }

          if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike(that, obj.data);
          }
        }

        throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
      }

      function checked(length) {
        // Note: cannot use `length < kMaxLength()` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= kMaxLength()) {
          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
        }
        return length | 0;
      }

      function SlowBuffer(length) {
        if (+length != length) {
          // eslint-disable-line eqeqeq
          length = 0;
        }
        return Buffer.alloc(+length);
      }

      Buffer.isBuffer = function isBuffer(b) {
        return !!(b != null && b._isBuffer);
      };

      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('Arguments must be Buffers');
        }

        if (a === b) return 0;

        var x = a.length;
        var y = b.length;

        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true;
          default:
            return false;
        }
      };

      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        if (list.length === 0) {
          return Buffer.alloc(0);
        }

        var i;
        if (length === undefined) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }

        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };

      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length;
        }
        if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== 'string') {
          string = '' + string;
        }

        var len = string.length;
        if (len === 0) return 0;

        // Use a for loop to avoid recursion
        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len;
            case 'utf8':
            case 'utf-8':
            case undefined:
              return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2;
            case 'hex':
              return len >>> 1;
            case 'base64':
              return base64ToBytes(string).length;
            default:
              if (loweredCase) return utf8ToBytes(string).length; // assume utf8
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer.byteLength = byteLength;

      function slowToString(encoding, start, end) {
        var loweredCase = false;

        // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.

        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
        if (start === undefined || start < 0) {
          start = 0;
        }
        // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.
        if (start > this.length) {
          return '';
        }

        if (end === undefined || end > this.length) {
          end = this.length;
        }

        if (end <= 0) {
          return '';
        }

        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
        end >>>= 0;
        start >>>= 0;

        if (end <= start) {
          return '';
        }

        if (!encoding) encoding = 'utf8';

        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end);

            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end);

            case 'ascii':
              return asciiSlice(this, start, end);

            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end);

            case 'base64':
              return base64Slice(this, start, end);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
      }

      // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
      // Buffer instances.
      Buffer.prototype._isBuffer = true;

      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }

      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };

      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };

      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };

      Buffer.prototype.toString = function toString() {
        var length = this.length | 0;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };

      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer.compare(this, b) === 0;
      };

      Buffer.prototype.inspect = function inspect() {
        var str = '';
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
          if (this.length > max) str += ' ... ';
        }
        return '<Buffer ' + str + '>';
      };

      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) {
          throw new TypeError('Argument must be a Buffer');
        }

        if (start === undefined) {
          start = 0;
        }
        if (end === undefined) {
          end = target ? target.length : 0;
        }
        if (thisStart === undefined) {
          thisStart = 0;
        }
        if (thisEnd === undefined) {
          thisEnd = this.length;
        }

        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError('out of range index');
        }

        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }

        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;

        if (this === target) return 0;

        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);

        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);

        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
      //
      // Arguments:
      // - buffer - a Buffer to search
      // - val - a string, Buffer, or number
      // - byteOffset - an index into `buffer`; will be clamped to an int32
      // - encoding - an optional encoding, relevant is val is a string
      // - dir - true for indexOf, false for lastIndexOf
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1;

        // Normalize byteOffset
        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }
        byteOffset = +byteOffset; // Coerce to Number.
        if (isNaN(byteOffset)) {
          // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
          byteOffset = dir ? 0 : buffer.length - 1;
        }

        // Normalize byteOffset: negative offsets start from the end of the buffer
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;else return -1;
        }

        // Normalize val
        if (typeof val === 'string') {
          val = Buffer.from(val, encoding);
        }

        // Finally, search either indexOf (if dir is true) or lastIndexOf
        if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 0xFF; // Search for a byte value [0-255]
          if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }

        throw new TypeError('val must be string, number or Buffer');
      }

      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;

        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();
          if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }

        function read(buf, i) {
          if (indexSize === 1) {
            return buf[i];
          } else {
            return buf.readUInt16BE(i * indexSize);
          }
        }

        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }

        return -1;
      }

      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };

      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };

      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };

      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }

        // must be an even number of digits
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

        if (length > strLen / 2) {
          length = strLen / 2;
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }

      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }

      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }

      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }

      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }

      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }

      Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
          encoding = 'utf8';
          length = this.length;
          offset = 0;
          // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0;
          // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
          offset = offset | 0;
          if (isFinite(length)) {
            length = length | 0;
            if (encoding === undefined) encoding = 'utf8';
          } else {
            encoding = length;
            length = undefined;
          }
          // legacy write(string, encoding, offset, length) - remove in v0.13
        } else {
          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        }

        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;

        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }

        if (!encoding) encoding = 'utf8';

        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length);

            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length);

            case 'ascii':
              return asciiWrite(this, string, offset, length);

            case 'latin1':
            case 'binary':
              return latin1Write(this, string, offset, length);

            case 'base64':
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };

      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };

      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }

      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];

        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;

            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                  if (tempCodePoint > 0x7F) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }

          if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
          }

          res.push(codePoint);
          i += bytesPerSequence;
        }

        return decodeCodePointsArray(res);
      }

      // Based on http://stackoverflow.com/a/22747272/680742, the browser with
      // the lowest limit is Chrome, with 0x10000 args.
      // We go 1 magnitude less, for safety
      var MAX_ARGUMENTS_LENGTH = 0x1000;

      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
        }

        // Decode in chunks to avoid "call stack size exceeded".
        var res = '';
        var i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        }
        return res;
      }

      function asciiSlice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7F);
        }
        return ret;
      }

      function latin1Slice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }

      function hexSlice(buf, start, end) {
        var len = buf.length;

        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;

        var out = '';
        for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }
        return out;
      }

      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = '';
        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }

      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;

        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }

        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }

        if (end < start) end = start;

        var newBuf;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, undefined);
          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }

        return newBuf;
      };

      /*
       * Need to make sure that buffer isn't trying to write out of bounds.
       */
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
      }

      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        return val;
      };

      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }

        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }

        return val;
      };

      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };

      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };

      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };

      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);

        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
      };

      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);

        return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };

      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }
        mul *= 0x80;

        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

        return val;
      };

      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }
        mul *= 0x80;

        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

        return val;
      };

      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 0x80)) return this[offset];
        return (0xff - this[offset] + 1) * -1;
      };

      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);

        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };

      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);

        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };

      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };

      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };

      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };

      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };

      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
      }

      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var mul = 1;
        var i = 0;
        this[offset] = value & 0xFF;
        while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 0xFF;
        while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        this[offset] = value & 0xff;
        return offset + 1;
      };

      function objectWriteUInt16(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffff + value + 1;
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
          buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
        }
      }

      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };

      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };

      function objectWriteUInt32(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffffffff + value + 1;
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
          buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
        }
      }

      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };

      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };

      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);

          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 0xFF;
        while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);

          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 0xFF;
        while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        if (value < 0) value = 0xff + value + 1;
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };

      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };

      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };

      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (value < 0) value = 0xffffffff + value + 1;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };

      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
      }

      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }

      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };

      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }

      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };

      // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;

        // Copy 0 bytes; we're done
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;

        // Fatal error conditions
        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }
        if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
        if (end < 0) throw new RangeError('sourceEnd out of bounds');

        // Are we oob?
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }

        var len = end - start;
        var i;

        if (this === target && start < targetStart && targetStart < end) {
          // descending copy from end
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
          // ascending copy from start
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        }

        return len;
      };

      // Usage:
      //    buffer.fill(number[, offset[, end]])
      //    buffer.fill(buffer[, offset[, end]])
      //    buffer.fill(string[, offset[, end]][, encoding])
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) {
              val = code;
            }
          }
          if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }
          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        }

        // Invalid ranges are not set to a default, so can range check early.
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }

        if (end <= start) {
          return this;
        }

        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;

        if (!val) val = 0;

        var i;
        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }

        return this;
      };

      // HELPER FUNCTIONS
      // ================

      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

      function base64clean(str) {
        // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = stringtrim(str).replace(INVALID_BASE64_RE, '');
        // Node converts strings with length < 2 to ''
        if (str.length < 2) return '';
        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
        while (str.length % 4 !== 0) {
          str = str + '=';
        }
        return str;
      }

      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, '');
      }

      function toHex(n) {
        if (n < 16) return '0' + n.toString(16);
        return n.toString(16);
      }

      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];

        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);

          // is surrogate component
          if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
              // no lead yet
              if (codePoint > 0xDBFF) {
                // unexpected trail
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } else if (i + 1 === length) {
                // unpaired lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              }

              // valid lead
              leadSurrogate = codePoint;

              continue;
            }

            // 2 leads in a row
            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              leadSurrogate = codePoint;
              continue;
            }

            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }

          leadSurrogate = null;

          // encode utf8
          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else {
            throw new Error('Invalid code point');
          }
        }

        return bytes;
      }

      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          // Node's code seems to be doing this and not & 0x7F..
          byteArray.push(str.charCodeAt(i) & 0xFF);
        }
        return byteArray;
      }

      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;

          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }

        return byteArray;
      }

      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }

      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }

      function isnan(val) {
        return val !== val; // eslint-disable-line no-self-compare
      }
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "base64-js": 75, "ieee754": 156, "isarray": 160 }], 109: [function (require, module, exports) {
    (function (Buffer) {
      var Transform = require('stream').Transform;
      var inherits = require('inherits');
      var StringDecoder = require('string_decoder').StringDecoder;
      module.exports = CipherBase;
      inherits(CipherBase, Transform);
      function CipherBase(hashMode) {
        Transform.call(this);
        this.hashMode = typeof hashMode === 'string';
        if (this.hashMode) {
          this[hashMode] = this._finalOrDigest;
        } else {
          this.final = this._finalOrDigest;
        }
        this._decoder = null;
        this._encoding = null;
      }
      CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
        if (typeof data === 'string') {
          data = new Buffer(data, inputEnc);
        }
        var outData = this._update(data);
        if (this.hashMode) {
          return this;
        }
        if (outputEnc) {
          outData = this._toString(outData, outputEnc);
        }
        return outData;
      };

      CipherBase.prototype.setAutoPadding = function () {};

      CipherBase.prototype.getAuthTag = function () {
        throw new Error('trying to get auth tag in unsupported state');
      };

      CipherBase.prototype.setAuthTag = function () {
        throw new Error('trying to set auth tag in unsupported state');
      };

      CipherBase.prototype.setAAD = function () {
        throw new Error('trying to set aad in unsupported state');
      };

      CipherBase.prototype._transform = function (data, _, next) {
        var err;
        try {
          if (this.hashMode) {
            this._update(data);
          } else {
            this.push(this._update(data));
          }
        } catch (e) {
          err = e;
        } finally {
          next(err);
        }
      };
      CipherBase.prototype._flush = function (done) {
        var err;
        try {
          this.push(this._final());
        } catch (e) {
          err = e;
        } finally {
          done(err);
        }
      };
      CipherBase.prototype._finalOrDigest = function (outputEnc) {
        var outData = this._final() || new Buffer('');
        if (outputEnc) {
          outData = this._toString(outData, outputEnc, true);
        }
        return outData;
      };

      CipherBase.prototype._toString = function (value, enc, fin) {
        if (!this._decoder) {
          this._decoder = new StringDecoder(enc);
          this._encoding = enc;
        }
        if (this._encoding !== enc) {
          throw new Error('can\'t switch encodings');
        }
        var out = this._decoder.write(value);
        if (fin) {
          out += this._decoder.end();
        }
        return out;
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "inherits": 158, "stream": 209, "string_decoder": 210 }], 110: [function (require, module, exports) {
    (function (Buffer) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // NOTE: These type checking functions intentionally don't use `instanceof`
      // because it is fragile and can be easily faked with `Object.create()`.

      function isArray(arg) {
        if (Array.isArray) {
          return Array.isArray(arg);
        }
        return objectToString(arg) === '[object Array]';
      }
      exports.isArray = isArray;

      function isBoolean(arg) {
        return typeof arg === 'boolean';
      }
      exports.isBoolean = isBoolean;

      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;

      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;

      function isNumber(arg) {
        return typeof arg === 'number';
      }
      exports.isNumber = isNumber;

      function isString(arg) {
        return typeof arg === 'string';
      }
      exports.isString = isString;

      function isSymbol(arg) {
        return typeof arg === 'symbol';
      }
      exports.isSymbol = isSymbol;

      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;

      function isRegExp(re) {
        return objectToString(re) === '[object RegExp]';
      }
      exports.isRegExp = isRegExp;

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }
      exports.isObject = isObject;

      function isDate(d) {
        return objectToString(d) === '[object Date]';
      }
      exports.isDate = isDate;

      function isError(e) {
        return objectToString(e) === '[object Error]' || e instanceof Error;
      }
      exports.isError = isError;

      function isFunction(arg) {
        return typeof arg === 'function';
      }
      exports.isFunction = isFunction;

      function isPrimitive(arg) {
        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
        typeof arg === 'undefined';
      }
      exports.isPrimitive = isPrimitive;

      exports.isBuffer = Buffer.isBuffer;

      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
    }).call(this, { "isBuffer": require("../../is-buffer/index.js") });
  }, { "../../is-buffer/index.js": 159 }], 111: [function (require, module, exports) {
    (function (Buffer) {
      var elliptic = require('elliptic');
      var BN = require('bn.js');

      module.exports = function createECDH(curve) {
        return new ECDH(curve);
      };

      var aliases = {
        secp256k1: {
          name: 'secp256k1',
          byteLength: 32
        },
        secp224r1: {
          name: 'p224',
          byteLength: 28
        },
        prime256v1: {
          name: 'p256',
          byteLength: 32
        },
        prime192v1: {
          name: 'p192',
          byteLength: 24
        },
        ed25519: {
          name: 'ed25519',
          byteLength: 32
        },
        secp384r1: {
          name: 'p384',
          byteLength: 48
        },
        secp521r1: {
          name: 'p521',
          byteLength: 66
        }
      };

      aliases.p224 = aliases.secp224r1;
      aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
      aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
      aliases.p384 = aliases.secp384r1;
      aliases.p521 = aliases.secp521r1;

      function ECDH(curve) {
        this.curveType = aliases[curve];
        if (!this.curveType) {
          this.curveType = {
            name: curve
          };
        }
        this.curve = new elliptic.ec(this.curveType.name);
        this.keys = void 0;
      }

      ECDH.prototype.generateKeys = function (enc, format) {
        this.keys = this.curve.genKeyPair();
        return this.getPublicKey(enc, format);
      };

      ECDH.prototype.computeSecret = function (other, inenc, enc) {
        inenc = inenc || 'utf8';
        if (!Buffer.isBuffer(other)) {
          other = new Buffer(other, inenc);
        }
        var otherPub = this.curve.keyFromPublic(other).getPublic();
        var out = otherPub.mul(this.keys.getPrivate()).getX();
        return formatReturnValue(out, enc, this.curveType.byteLength);
      };

      ECDH.prototype.getPublicKey = function (enc, format) {
        var key = this.keys.getPublic(format === 'compressed', true);
        if (format === 'hybrid') {
          if (key[key.length - 1] % 2) {
            key[0] = 7;
          } else {
            key[0] = 6;
          }
        }
        return formatReturnValue(key, enc);
      };

      ECDH.prototype.getPrivateKey = function (enc) {
        return formatReturnValue(this.keys.getPrivate(), enc);
      };

      ECDH.prototype.setPublicKey = function (pub, enc) {
        enc = enc || 'utf8';
        if (!Buffer.isBuffer(pub)) {
          pub = new Buffer(pub, enc);
        }
        this.keys._importPublic(pub);
        return this;
      };

      ECDH.prototype.setPrivateKey = function (priv, enc) {
        enc = enc || 'utf8';
        if (!Buffer.isBuffer(priv)) {
          priv = new Buffer(priv, enc);
        }
        var _priv = new BN(priv);
        _priv = _priv.toString(16);
        this.keys._importPrivate(_priv);
        return this;
      };

      function formatReturnValue(bn, enc, len) {
        if (!Array.isArray(bn)) {
          bn = bn.toArray();
        }
        var buf = new Buffer(bn);
        if (len && buf.length < len) {
          var zeros = new Buffer(len - buf.length);
          zeros.fill(0);
          buf = Buffer.concat([zeros, buf]);
        }
        if (!enc) {
          return buf;
        } else {
          return buf.toString(enc);
        }
      }
    }).call(this, require("buffer").Buffer);
  }, { "bn.js": 78, "buffer": 108, "elliptic": 127 }], 112: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var inherits = require('inherits');
      var md5 = require('./md5');
      var rmd160 = require('ripemd160');
      var sha = require('sha.js');

      var Base = require('cipher-base');

      function HashNoConstructor(hash) {
        Base.call(this, 'digest');

        this._hash = hash;
        this.buffers = [];
      }

      inherits(HashNoConstructor, Base);

      HashNoConstructor.prototype._update = function (data) {
        this.buffers.push(data);
      };

      HashNoConstructor.prototype._final = function () {
        var buf = Buffer.concat(this.buffers);
        var r = this._hash(buf);
        this.buffers = null;

        return r;
      };

      function Hash(hash) {
        Base.call(this, 'digest');

        this._hash = hash;
      }

      inherits(Hash, Base);

      Hash.prototype._update = function (data) {
        this._hash.update(data);
      };

      Hash.prototype._final = function () {
        return this._hash.digest();
      };

      module.exports = function createHash(alg) {
        alg = alg.toLowerCase();
        if ('md5' === alg) return new HashNoConstructor(md5);
        if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160);

        return new Hash(sha(alg));
      };
    }).call(this, require("buffer").Buffer);
  }, { "./md5": 114, "buffer": 108, "cipher-base": 109, "inherits": 158, "ripemd160": 192, "sha.js": 202 }], 113: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var intSize = 4;
      var zeroBuffer = new Buffer(intSize);zeroBuffer.fill(0);
      var chrsz = 8;

      function toArray(buf, bigEndian) {
        if (buf.length % intSize !== 0) {
          var len = buf.length + (intSize - buf.length % intSize);
          buf = Buffer.concat([buf, zeroBuffer], len);
        }

        var arr = [];
        var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
        for (var i = 0; i < buf.length; i += intSize) {
          arr.push(fn.call(buf, i));
        }
        return arr;
      }

      function toBuffer(arr, size, bigEndian) {
        var buf = new Buffer(size);
        var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
        for (var i = 0; i < arr.length; i++) {
          fn.call(buf, arr[i], i * 4, true);
        }
        return buf;
      }

      function hash(buf, fn, hashSize, bigEndian) {
        if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
        var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
        return toBuffer(arr, hashSize, bigEndian);
      }
      exports.hash = hash;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 114: [function (require, module, exports) {
    'use strict';
    /*
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for more info.
     */

    var helpers = require('./helpers');

    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length
     */
    function core_md5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32;
      x[(len + 64 >>> 9 << 4) + 14] = len;

      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;

      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;

        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
      }
      return Array(a, b, c, d);
    }

    /*
     * These functions implement the four basic operations the algorithm uses.
     */
    function md5_cmn(q, a, b, x, s, t) {
      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
      return md5_cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
      return md5_cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
      return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
      return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
    }

    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */
    function safe_add(x, y) {
      var lsw = (x & 0xFFFF) + (y & 0xFFFF);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 0xFFFF;
    }

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    function bit_rol(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }

    module.exports = function md5(buf) {
      return helpers.hash(buf, core_md5, 16);
    };
  }, { "./helpers": 113 }], 115: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var createHash = require('create-hash/browser');
      var inherits = require('inherits');

      var Transform = require('stream').Transform;

      var ZEROS = new Buffer(128);
      ZEROS.fill(0);

      function Hmac(alg, key) {
        Transform.call(this);
        alg = alg.toLowerCase();
        if (typeof key === 'string') {
          key = new Buffer(key);
        }

        var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

        this._alg = alg;
        this._key = key;

        if (key.length > blocksize) {
          key = createHash(alg).update(key).digest();
        } else if (key.length < blocksize) {
          key = Buffer.concat([key, ZEROS], blocksize);
        }

        var ipad = this._ipad = new Buffer(blocksize);
        var opad = this._opad = new Buffer(blocksize);

        for (var i = 0; i < blocksize; i++) {
          ipad[i] = key[i] ^ 0x36;
          opad[i] = key[i] ^ 0x5C;
        }

        this._hash = createHash(alg).update(ipad);
      }

      inherits(Hmac, Transform);

      Hmac.prototype.update = function (data, enc) {
        this._hash.update(data, enc);

        return this;
      };

      Hmac.prototype._transform = function (data, _, next) {
        this._hash.update(data);

        next();
      };

      Hmac.prototype._flush = function (next) {
        this.push(this.digest());

        next();
      };

      Hmac.prototype.digest = function (enc) {
        var h = this._hash.digest();

        return createHash(this._alg).update(this._opad).update(h).digest(enc);
      };

      module.exports = function createHmac(alg, key) {
        return new Hmac(alg, key);
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "create-hash/browser": 112, "inherits": 158, "stream": 209 }], 116: [function (require, module, exports) {
    'use strict';

    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
    exports.createHash = exports.Hash = require('create-hash');
    exports.createHmac = exports.Hmac = require('create-hmac');

    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')));
    exports.getHashes = function () {
      return hashes;
    };

    var p = require('pbkdf2');
    exports.pbkdf2 = p.pbkdf2;
    exports.pbkdf2Sync = p.pbkdf2Sync;

    var aes = require('browserify-cipher');['Cipher', 'createCipher', 'Cipheriv', 'createCipheriv', 'Decipher', 'createDecipher', 'Decipheriv', 'createDecipheriv', 'getCiphers', 'listCiphers'].forEach(function (key) {
      exports[key] = aes[key];
    });

    var dh = require('diffie-hellman');['DiffieHellmanGroup', 'createDiffieHellmanGroup', 'getDiffieHellman', 'createDiffieHellman', 'DiffieHellman'].forEach(function (key) {
      exports[key] = dh[key];
    });

    var sign = require('browserify-sign');['createSign', 'Sign', 'createVerify', 'Verify'].forEach(function (key) {
      exports[key] = sign[key];
    });

    exports.createECDH = require('create-ecdh');

    var publicEncrypt = require('public-encrypt');['publicEncrypt', 'privateEncrypt', 'publicDecrypt', 'privateDecrypt'].forEach(function (key) {
      exports[key] = publicEncrypt[key];
    })

    // the least I can do is make error messages for the rest of the node.js/crypto api.
    ;['createCredentials'].forEach(function (name) {
      exports[name] = function () {
        throw new Error(['sorry, ' + name + ' is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
      };
    });
  }, { "browserify-cipher": 96, "browserify-sign": 102, "browserify-sign/algos": 101, "create-ecdh": 111, "create-hash": 112, "create-hmac": 115, "diffie-hellman": 123, "pbkdf2": 170, "public-encrypt": 174, "randombytes": 180 }], 117: [function (require, module, exports) {
    'use strict';

    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');
  }, { "./des/cbc": 118, "./des/cipher": 119, "./des/des": 120, "./des/ede": 121, "./des/utils": 122 }], 118: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var proto = {};

    function CBCState(iv) {
      assert.equal(iv.length, 8, 'Invalid IV length');

      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++) this.iv[i] = iv[i];
    }

    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);

      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }

      CBC.create = function create(options) {
        return new CBC(options);
      };

      return CBC;
    }

    exports.instantiate = instantiate;

    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };

    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;

      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++) iv[i] ^= inp[inOff + i];

        superProto._update.call(this, iv, 0, out, outOff);

        for (var i = 0; i < this.blockSize; i++) iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);

        for (var i = 0; i < this.blockSize; i++) out[outOff + i] ^= iv[i];

        for (var i = 0; i < this.blockSize; i++) iv[i] = inp[inOff + i];
      }
    };
  }, { "inherits": 158, "minimalistic-assert": 165 }], 119: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    function Cipher(options) {
      this.options = options;

      this.type = this.options.type;
      this.blockSize = 8;
      this._init();

      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;

    Cipher.prototype._init = function _init() {
      // Might be overrided
    };

    Cipher.prototype.update = function update(data) {
      if (data.length === 0) return [];

      if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
    };

    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++) this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;

      // Shift next
      return min;
    };

    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };

    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);

      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);

        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
      }

      // Write blocks
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }

      // Queue rest
      for (; inputOff < data.length; inputOff++, this.bufferOff++) this.buffer[this.bufferOff] = data[inputOff];

      return out;
    };

    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);

      // TODO(indutny): optimize it, this is far from optimal
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }

      // Buffer rest of the input
      inputOff += this._buffer(data, inputOff);

      return out;
    };

    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer) first = this.update(buffer);

      var last;
      if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();

      if (first) return first.concat(last);else return last;
    };

    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0) return false;

      while (off < buffer.length) buffer[off++] = 0;

      return true;
    };

    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff)) return [];

      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };

    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };

    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);

      return this._unpad(out);
    };
  }, { "minimalistic-assert": 165 }], 120: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var des = require('../des');
    var utils = des.utils;
    var Cipher = des.Cipher;

    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }

    function DES(options) {
      Cipher.call(this, options);

      var state = new DESState();
      this._desState = state;

      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module.exports = DES;

    DES.create = function create(options) {
      return new DES(options);
    };

    var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);

      assert.equal(key.length, this.blockSize, 'Invalid key length');

      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);

      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };

    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;

      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);

      // Initial Permutation
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];

      if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);

      l = state.tmp[0];
      r = state.tmp[1];

      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };

    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++) buffer[i] = value;

      return true;
    };

    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++) assert.equal(buffer[i], pad);

      return buffer.slice(0, buffer.length - pad);
    };

    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;

      // Apply f() x16 times
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils.expand(r, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);

        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }

      // Reverse Initial Permutation
      utils.rip(r, l, out, off);
    };

    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;

      // Apply f() x16 times
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils.expand(l, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);

        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }

      // Reverse Initial Permutation
      utils.rip(l, r, out, off);
    };
  }, { "../des": 117, "inherits": 158, "minimalistic-assert": 165 }], 121: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var des = require('../des');
    var Cipher = des.Cipher;
    var DES = des.DES;

    function EDEState(type, key) {
      assert.equal(key.length, 24, 'Invalid key length');

      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);

      if (type === 'encrypt') {
        this.ciphers = [DES.create({ type: 'encrypt', key: k1 }), DES.create({ type: 'decrypt', key: k2 }), DES.create({ type: 'encrypt', key: k3 })];
      } else {
        this.ciphers = [DES.create({ type: 'decrypt', key: k3 }), DES.create({ type: 'encrypt', key: k2 }), DES.create({ type: 'decrypt', key: k1 })];
      }
    }

    function EDE(options) {
      Cipher.call(this, options);

      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);

    module.exports = EDE;

    EDE.create = function create(options) {
      return new EDE(options);
    };

    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;

      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };

    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
  }, { "../des": 117, "inherits": 158, "minimalistic-assert": 165 }], 122: [function (require, module, exports) {
    'use strict';

    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };

    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 0xff;
      bytes[2 + off] = value >>> 8 & 0xff;
      bytes[3 + off] = value & 0xff;
    };

    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      }

      // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.r28shl = function r28shl(num, shift) {
      return num << shift & 0xfffffff | num >>> 28 - shift;
    };

    var pc2table = [
    // inL => outL
    14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26,

    // inR => outR
    15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;

      outL = (r & 1) << 5 | r >>> 27;
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r >>> i & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= r >>> i & 0x3f;
        outR <<= 6;
      }
      outR |= (r & 0x1f) << 1 | r >>> 31;

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };

    var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
      }
      return out >>> 0;
    };

    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size) str = '0' + str;

      var out = [];
      for (var i = 0; i < size; i += group) out.push(str.slice(i, i + group));
      return out.join(' ');
    };
  }, {}], 123: [function (require, module, exports) {
    (function (Buffer) {
      var generatePrime = require('./lib/generatePrime');
      var primes = require('./lib/primes.json');

      var DH = require('./lib/dh');

      function getDiffieHellman(mod) {
        var prime = new Buffer(primes[mod].prime, 'hex');
        var gen = new Buffer(primes[mod].gen, 'hex');

        return new DH(prime, gen);
      }

      var ENCODINGS = {
        'binary': true, 'hex': true, 'base64': true
      };

      function createDiffieHellman(prime, enc, generator, genc) {
        if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
          return createDiffieHellman(prime, 'binary', enc, generator);
        }

        enc = enc || 'binary';
        genc = genc || 'binary';
        generator = generator || new Buffer([2]);

        if (!Buffer.isBuffer(generator)) {
          generator = new Buffer(generator, genc);
        }

        if (typeof prime === 'number') {
          return new DH(generatePrime(prime, generator), generator, true);
        }

        if (!Buffer.isBuffer(prime)) {
          prime = new Buffer(prime, enc);
        }

        return new DH(prime, generator, true);
      }

      exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
      exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
    }).call(this, require("buffer").Buffer);
  }, { "./lib/dh": 124, "./lib/generatePrime": 125, "./lib/primes.json": 126, "buffer": 108 }], 124: [function (require, module, exports) {
    (function (Buffer) {
      var BN = require('bn.js');
      var MillerRabin = require('miller-rabin');
      var millerRabin = new MillerRabin();
      var TWENTYFOUR = new BN(24);
      var ELEVEN = new BN(11);
      var TEN = new BN(10);
      var THREE = new BN(3);
      var SEVEN = new BN(7);
      var primes = require('./generatePrime');
      var randomBytes = require('randombytes');
      module.exports = DH;

      function setPublicKey(pub, enc) {
        enc = enc || 'utf8';
        if (!Buffer.isBuffer(pub)) {
          pub = new Buffer(pub, enc);
        }
        this._pub = new BN(pub);
        return this;
      }

      function setPrivateKey(priv, enc) {
        enc = enc || 'utf8';
        if (!Buffer.isBuffer(priv)) {
          priv = new Buffer(priv, enc);
        }
        this._priv = new BN(priv);
        return this;
      }

      var primeCache = {};
      function checkPrime(prime, generator) {
        var gen = generator.toString('hex');
        var hex = [gen, prime.toString(16)].join('_');
        if (hex in primeCache) {
          return primeCache[hex];
        }
        var error = 0;

        if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
          //not a prime so +1
          error += 1;

          if (gen === '02' || gen === '05') {
            // we'd be able to check the generator
            // it would fail so +8
            error += 8;
          } else {
            //we wouldn't be able to test the generator
            // so +4
            error += 4;
          }
          primeCache[hex] = error;
          return error;
        }
        if (!millerRabin.test(prime.shrn(1))) {
          //not a safe prime
          error += 2;
        }
        var rem;
        switch (gen) {
          case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
              // unsuidable generator
              error += 8;
            }
            break;
          case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
              // prime mod 10 needs to equal 3 or 7
              error += 8;
            }
            break;
          default:
            error += 4;
        }
        primeCache[hex] = error;
        return error;
      }

      function DH(prime, generator, malleable) {
        this.setGenerator(generator);
        this.__prime = new BN(prime);
        this._prime = BN.mont(this.__prime);
        this._primeLen = prime.length;
        this._pub = undefined;
        this._priv = undefined;
        this._primeCode = undefined;
        if (malleable) {
          this.setPublicKey = setPublicKey;
          this.setPrivateKey = setPrivateKey;
        } else {
          this._primeCode = 8;
        }
      }
      Object.defineProperty(DH.prototype, 'verifyError', {
        enumerable: true,
        get: function () {
          if (typeof this._primeCode !== 'number') {
            this._primeCode = checkPrime(this.__prime, this.__gen);
          }
          return this._primeCode;
        }
      });
      DH.prototype.generateKeys = function () {
        if (!this._priv) {
          this._priv = new BN(randomBytes(this._primeLen));
        }
        this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
        return this.getPublicKey();
      };

      DH.prototype.computeSecret = function (other) {
        other = new BN(other);
        other = other.toRed(this._prime);
        var secret = other.redPow(this._priv).fromRed();
        var out = new Buffer(secret.toArray());
        var prime = this.getPrime();
        if (out.length < prime.length) {
          var front = new Buffer(prime.length - out.length);
          front.fill(0);
          out = Buffer.concat([front, out]);
        }
        return out;
      };

      DH.prototype.getPublicKey = function getPublicKey(enc) {
        return formatReturnValue(this._pub, enc);
      };

      DH.prototype.getPrivateKey = function getPrivateKey(enc) {
        return formatReturnValue(this._priv, enc);
      };

      DH.prototype.getPrime = function (enc) {
        return formatReturnValue(this.__prime, enc);
      };

      DH.prototype.getGenerator = function (enc) {
        return formatReturnValue(this._gen, enc);
      };

      DH.prototype.setGenerator = function (gen, enc) {
        enc = enc || 'utf8';
        if (!Buffer.isBuffer(gen)) {
          gen = new Buffer(gen, enc);
        }
        this.__gen = gen;
        this._gen = new BN(gen);
        return this;
      };

      function formatReturnValue(bn, enc) {
        var buf = new Buffer(bn.toArray());
        if (!enc) {
          return buf;
        } else {
          return buf.toString(enc);
        }
      }
    }).call(this, require("buffer").Buffer);
  }, { "./generatePrime": 125, "bn.js": 78, "buffer": 108, "miller-rabin": 164, "randombytes": 180 }], 125: [function (require, module, exports) {
    var randomBytes = require('randombytes');
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require('bn.js');
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;

    function _getPrimes() {
      if (primes !== null) return primes;

      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++) if (k % res[j] === 0) break;

        if (i !== j && res[j] <= sqrt) continue;

        res[i++] = k;
      }
      primes = res;
      return res;
    }

    function simpleSieve(p) {
      var primes = _getPrimes();

      for (var i = 0; i < primes.length; i++) if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) {
          return true;
        } else {
          return false;
        }
      }

      return true;
    }

    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }

    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new BN([0x8c, 0x7b]);
        } else {
          return new BN([0x8c, 0x27]);
        }
      }
      gen = new BN(gen);

      var num, n2;

      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    }
  }, { "bn.js": 78, "miller-rabin": 164, "randombytes": 180 }], 126: [function (require, module, exports) {
    module.exports = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
  }, {}], 127: [function (require, module, exports) {
    'use strict';

    var elliptic = exports;

    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves');

    // Protocols
    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');
  }, { "../package.json": 143, "./elliptic/curve": 130, "./elliptic/curves": 133, "./elliptic/ec": 134, "./elliptic/eddsa": 137, "./elliptic/hmac-drbg": 140, "./elliptic/utils": 142, "brorand": 79 }], 128: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

      // Useful for many curves
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;
        if (i >= 0) k++;
        acc = acc.dblp(k);

        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          // J +- J
          if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a]);
          naf[b] = getNAF(coeffs[b], wndWidth[b]);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [-3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3 /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (var i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (var j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0) zero = false;
          }
          if (!zero) break;
          k++;
          i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;

        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();

          if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
        }
      }
      // Zeroify references
      for (var i = 0; i < len; i++) wnd[i] = null;

      if (jacobianResult) return acc;else return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq() /*other*/{
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);

        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

      return [0x04].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed) return false;

      var doubles = this.precomputed.doubles;
      if (!doubles) return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++) r = r.dbl();
      return r;
    };
  }, { "../../elliptic": 127, "bn.js": 78 }], 129: [function (require, module, exports) {
    'use strict';

    var curve = require('../curve');
    var elliptic = require('../../elliptic');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;

    var assert = elliptic.utils.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      Base.call(this, 'edwards', conf);

      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC) return num;else return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red) y = y.toRed(this.red);

      // x^2 = (y^2 - 1) / (d y^2 + 1)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.one);
      var rhs = y2.redMul(this.d).redAdd(this.one);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');

      if (x.isOdd() !== odd) x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity()) return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          var h = this.z.redSqr();
          // J = F - 2 * H
          var j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        var e = c.redAdd(d);
        // H = (c * Z1)^2
        var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
        // J = E - 2 * H
        var j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;

      // Double in extended coordinates
      if (this.curve.extended) return this._extDbl();else return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;

      if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne) return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t) this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0) return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
      return false;
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }, { "../../elliptic": 127, "../curve": 130, "bn.js": 78, "inherits": 158 }], 130: [function (require, module, exports) {
    'use strict';

    var curve = exports;

    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');
  }, { "./base": 128, "./edwards": 129, "./mont": 131, "./short": 132 }], 131: [function (require, module, exports) {
    'use strict';

    var curve = require('../curve');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;

    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;

    function MontCurve(conf) {
      Base.call(this, 'mont', conf);

      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    Point.prototype.precompute = function precompute() {
      // No-op
    };

    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };
  }, { "../../elliptic": 127, "../curve": 130, "bn.js": 78, "inherits": 158 }], 132: [function (require, module, exports) {
    'use strict';

    var curve = require('../curve');
    var elliptic = require('../../elliptic');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = curve.base;

    var assert = elliptic.utils.assert;

    function ShortCurve(conf) {
      Base.call(this, 'short', conf);

      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function (vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf) return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;

      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed) return [this.x, this.y];

      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string') obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf) return p;

      // P + O = P
      if (p.inf) return this;

      // P + P = 2P
      if (this.eq(p)) return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p)) return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf) return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);

      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity()) return p;

      // P + O = P
      if (p.isInfinity()) return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity()) return p.toJ();

      // P + O = P
      if (p.isInfinity()) return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();

      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++) r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;

      if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine') return this.eq(p.toJ());

      if (this === p) return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
      return false;
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };
  }, { "../../elliptic": 127, "../curve": 130, "bn.js": 78, "inherits": 158 }], 133: [function (require, module, exports) {
    'use strict';

    var curves = exports;

    var hash = require('hash.js');
    var elliptic = require('../elliptic');

    var assert = elliptic.utils.assert;

    function PresetCurve(options) {
      if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
          return curve;
        }
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '0',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['9']
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658']
    });

    var pre;
    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [{
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      }, {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }],

      gRed: false,
      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
    });
  }, { "../elliptic": 127, "./precomputed/secp256k1": 141, "hash.js": 150 }], 134: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;

    var KeyPair = require('./key');
    var Signature = require('./signature');

    function EC(options) {
      if (!(this instanceof EC)) return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

        options = elliptic.curves[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof elliptic.curves.PresetCurve) options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options) options = {};

      // Instantiate Hmac_DRBG
      var drbg = new elliptic.hmacDRBG({
        hash: this.hash,
        pers: options.pers,
        entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
        nonce: this.n.toArray()
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      } while (true);
    };

    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options) options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new elliptic.hmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new BN(1));

      for (var iter = 0; true; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);

      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);

      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null) return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q)) return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };
  }, { "../../elliptic": 127, "./key": 135, "./signature": 136, "bn.js": 78 }], 135: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair) return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair) return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity()) return { result: false, reason: 'Invalid public key' };
      if (!pub.validate()) return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub) this.pub = this.ec.g.mul(this.priv);

      if (!enc) return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };
  }, { "bn.js": 78 }], 136: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;

    function Signature(options, enc) {
      if (options instanceof Signature) return options;

      if (this._importDER(options, enc)) return;

      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
      }
      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0 && r[1] & 0x80) {
        r = r.slice(1);
      }
      if (s[0] === 0 && s[1] & 0x80) {
        s = s.slice(1);
      }

      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 0xff);
      }
      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80) r = [0].concat(r);
      // Pad values
      if (s[0] & 0x80) s = [0].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [0x02];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [0x30];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }, { "../../elliptic": 127, "bn.js": 78 }], 137: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require('./key');
    var Signature = require('./signature');

    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA)) return new EDDSA(curve);

      var curve = elliptic.curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }

    module.exports = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature) return sig;
      return new Signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }, { "../../elliptic": 127, "./key": 138, "./signature": 139, "hash.js": 150 }], 138: [function (require, module, exports) {
    'use strict';

    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
    }

    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(eddsa, { pub: pub });
    };

    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair) return secret;
      return new KeyPair(eddsa, { secret: secret });
    };

    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };

    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };

    module.exports = KeyPair;
  }, { "../../elliptic": 127 }], 139: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var elliptic = require('../../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object') sig = parseBytes(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }

      assert(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R)) this._R = sig.R;
      if (sig.S instanceof BN) this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };

    module.exports = Signature;
  }, { "../../elliptic": 127, "bn.js": 78 }], 140: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');
    var elliptic = require('../elliptic');
    var utils = elliptic.utils;
    var assert = utils.assert;

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this.reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils.toArray(options.entropy, options.entropyEnc);
      var nonce = utils.toArray(options.nonce, options.nonceEnc);
      var pers = utils.toArray(options.pers, options.persEnc);
      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this.reseed = 1;
      this.reseedInterval = 0x1000000000000; // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0x00]);
      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;

      this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils.toBuffer(entropy, entropyEnc);
      add = utils.toBuffer(add, addEnc);

      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this.reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this.reseed > this.reseedInterval) throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils.toArray(add, addEnc);
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this.reseed++;
      return utils.encode(res, enc);
    };
  }, { "../elliptic": 127, "hash.js": 150 }], 141: [function (require, module, exports) {
    module.exports = {
      doubles: {
        step: 4,
        points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
      },
      naf: {
        wnd: 7,
        points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
      }
    };
  }, {}], 142: [function (require, module, exports) {
    'use strict';

    var utils = exports;
    var BN = require('bn.js');

    utils.assert = function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    };

    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
        return res;
      }
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi) res.push(hi, lo);else res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1) return '0' + word;else return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex') return toHex(arr);else return arr;
    };

    // Represent num in a w-NAF form
    function getNAF(num, w) {
      var naf = [];
      var ws = 1 << w + 1;
      var k = num.clone();
      while (k.cmpn(1) >= 0) {
        var z;
        if (k.isOdd()) {
          var mod = k.andln(ws - 1);
          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf.push(z);

        // Optimization, shift by word if possible
        var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;
        for (var i = 1; i < shift; i++) naf.push(0);
        k.iushrn(shift);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [[], []];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          var m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          var m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
  }, { "bn.js": 78 }], 143: [function (require, module, exports) {
    module.exports = {
      "_args": [[{
        "raw": "elliptic@^6.0.0",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      }, "/Users/julian/source/coin/ubq-wallet-swapgen/node_modules/browserify-sign"]],
      "_from": "elliptic@>=6.0.0 <7.0.0",
      "_id": "elliptic@6.3.2",
      "_inCache": true,
      "_installable": true,
      "_location": "/elliptic",
      "_nodeVersion": "6.3.0",
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/elliptic-6.3.2.tgz_1473938837205_0.3108903462998569"
      },
      "_npmUser": {
        "name": "indutny",
        "email": "fedor@indutny.com"
      },
      "_npmVersion": "3.10.3",
      "_phantomChildren": {},
      "_requested": {
        "raw": "elliptic@^6.0.0",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "_requiredBy": ["/browserify-sign", "/create-ecdh", "/secp256k1"],
      "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz",
      "_shasum": "e4c81e0829cf0a65ab70e998b8232723b5c1bc48",
      "_shrinkwrap": null,
      "_spec": "elliptic@^6.0.0",
      "_where": "/Users/julian/source/coin/ubq-wallet-swapgen/node_modules/browserify-sign",
      "author": {
        "name": "Fedor Indutny",
        "email": "fedor@indutny.com"
      },
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "dependencies": {
        "bn.js": "^4.4.0",
        "brorand": "^1.0.1",
        "hash.js": "^1.0.0",
        "inherits": "^2.0.1"
      },
      "description": "EC cryptography",
      "devDependencies": {
        "brfs": "^1.4.3",
        "coveralls": "^2.11.3",
        "grunt": "^0.4.5",
        "grunt-browserify": "^5.0.0",
        "grunt-contrib-connect": "^1.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^1.0.1",
        "grunt-mocha-istanbul": "^3.0.1",
        "grunt-saucelabs": "^8.6.2",
        "istanbul": "^0.4.2",
        "jscs": "^2.9.0",
        "jshint": "^2.6.0",
        "mocha": "^2.1.0"
      },
      "directories": {},
      "dist": {
        "shasum": "e4c81e0829cf0a65ab70e998b8232723b5c1bc48",
        "tarball": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz"
      },
      "files": ["lib"],
      "gitHead": "cbace4683a4a548dc0306ef36756151a20299cd5",
      "homepage": "https://github.com/indutny/elliptic",
      "keywords": ["EC", "Elliptic", "curve", "Cryptography"],
      "license": "MIT",
      "main": "lib/elliptic.js",
      "maintainers": [{
        "name": "indutny",
        "email": "fedor@indutny.com"
      }],
      "name": "elliptic",
      "optionalDependencies": {},
      "readme": "ERROR: No README data found!",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/indutny/elliptic.git"
      },
      "scripts": {
        "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "lint": "npm run jscs && npm run jshint",
        "test": "npm run lint && npm run unit",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "version": "grunt dist && git add dist/"
      },
      "version": "6.3.2"
    };
  }, {}], 144: [function (require, module, exports) {
    module.exports = {
      "genesisGasLimit": {
        "v": 5000,
        "d": "Gas limit of the Genesis block."
      },
      "genesisDifficulty": {
        "v": 17179869184,
        "d": "Difficulty of the Genesis block."
      },
      "genesisNonce": {
        "v": "0x0000000000000042",
        "d": "the geneis nonce"
      },
      "genesisExtraData": {
        "v": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
        "d": "extra data "
      },
      "genesisHash": {
        "v": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
        "d": "genesis hash"
      },
      "genesisStateRoot": {
        "v": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
        "d": "the genesis state root"
      },
      "minGasLimit": {
        "v": 5000,
        "d": "Minimum the gas limit may ever be."
      },
      "gasLimitBoundDivisor": {
        "v": 1024,
        "d": "The bound divisor of the gas limit, used in update calculations."
      },
      "minimumDifficulty": {
        "v": 131072,
        "d": "The minimum that the difficulty may ever be."
      },
      "difficultyBoundDivisor": {
        "v": 2048,
        "d": "The bound divisor of the difficulty, used in the update calculations."
      },
      "durationLimit": {
        "v": 13,
        "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
      },
      "maximumExtraDataSize": {
        "v": 32,
        "d": "Maximum size extra data may be after Genesis."
      },
      "epochDuration": {
        "v": 30000,
        "d": "Duration between proof-of-work epochs."
      },
      "stackLimit": {
        "v": 1024,
        "d": "Maximum size of VM stack allowed."
      },
      "callCreateDepth": {
        "v": 1024,
        "d": "Maximum depth of call/create stack."
      },

      "tierStepGas": {
        "v": [0, 2, 3, 5, 8, 10, 20],
        "d": "Once per operation, for a selection of them."
      },
      "expGas": {
        "v": 10,
        "d": "Once per EXP instuction."
      },
      "expByteGas": {
        "v": 10,
        "d": "Times ceil(log256(exponent)) for the EXP instruction."
      },

      "sha3Gas": {
        "v": 30,
        "d": "Once per SHA3 operation."
      },
      "sha3WordGas": {
        "v": 6,
        "d": "Once per word of the SHA3 operation's data."
      },
      "sloadGas": {
        "v": 50,
        "d": "Once per SLOAD operation."
      },
      "sstoreSetGas": {
        "v": 20000,
        "d": "Once per SSTORE operation if the zeroness changes from zero."
      },
      "sstoreResetGas": {
        "v": 5000,
        "d": "Once per SSTORE operation if the zeroness does not change from zero."
      },
      "sstoreRefundGas": {
        "v": 15000,
        "d": "Once per SSTORE operation if the zeroness changes to zero."
      },
      "jumpdestGas": {
        "v": 1,
        "d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
      },

      "logGas": {
        "v": 375,
        "d": "Per LOG* operation."
      },
      "logDataGas": {
        "v": 8,
        "d": "Per byte in a LOG* operation's data."
      },
      "logTopicGas": {
        "v": 375,
        "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
      },

      "createGas": {
        "v": 32000,
        "d": "Once per CREATE operation & contract-creation transaction."
      },

      "callGas": {
        "v": 40,
        "d": "Once per CALL operation & message call transaction."
      },
      "callStipend": {
        "v": 2300,
        "d": "Free gas given at beginning of call."
      },
      "callValueTransferGas": {
        "v": 9000,
        "d": "Paid for CALL when the value transfor is non-zero."
      },
      "callNewAccountGas": {
        "v": 25000,
        "d": "Paid for CALL when the destination address didn't exist prior."
      },

      "suicideRefundGas": {
        "v": 24000,
        "d": "Refunded following a suicide operation."
      },

      "memoryGas": {
        "v": 3,
        "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
      },
      "quadCoeffDiv": {
        "v": 512,
        "d": "Divisor for the quadratic particle of the memory cost equation."
      },

      "createDataGas": {
        "v": 200,
        "d": ""
      },
      "txGas": {
        "v": 21000,
        "d": "Per transaction. NOTE: Not payable on data of calls between transactions."
      },
      "txCreation": {
        "v": 32000,
        "d": "the cost of creating a contract via tx"
      },
      "txDataZeroGas": {
        "v": 4,
        "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
      },
      "txDataNonZeroGas": {
        "v": 68,
        "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
      },

      "copyGas": {
        "v": 3,
        "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
      },

      "ecrecoverGas": {
        "v": 3000,
        "d": ""
      },
      "sha256Gas": {
        "v": 60,
        "d": ""
      },
      "sha256WordGas": {
        "v": 12,
        "d": ""
      },
      "ripemd160Gas": {
        "v": 600,
        "d": ""
      },
      "ripemd160WordGas": {
        "v": 120,
        "d": ""
      },
      "identityGas": {
        "v": 15,
        "d": ""
      },
      "identityWordGas": {
        "v": 3,
        "d": ""
      },
      "minerReward": {
        "v": "5000000000000000000",
        "d": "the amount a miner get rewarded for mining a block"
      },
      "ommerReward": {
        "v": "625000000000000000",
        "d": "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
      },
      "niblingReward": {
        "v": "156250000000000000",
        "d": "the amount a miner gets for inculding a uncle"
      },
      "homeSteadForkNumber": {
        "v": 1000000,
        "d": "the block that the homestead fork started at"
      },
      "timebombPeriod": {
        "v": 100000,
        "d": "Exponential difficulty timebomb period"
      },
      "freeBlockPeriod": {
        "v": 2
      }
    };
  }, {}], 145: [function (require, module, exports) {
    module.exports = require('./params.json');
  }, { "./params.json": 144 }], 146: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      const ethUtil = require('ethereumjs-util');
      const fees = require('ethereum-common/params');
      const BN = ethUtil.BN;

      // secp256k1n/2
      const N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

      /**
       * Creates a new transaction object
       * @constructor
       * @class {Buffer|Array} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple. Or lastly an Object containing the Properties of the transaction like in the Usage example
       *
       * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
       * @example
       * var rawTx = {
       *   nonce: '00',
       *   gasPrice: '09184e72a000',
       *   gasLimit: '2710',
       *   to: '0000000000000000000000000000000000000000',
       *   value: '00',
       *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
       *   v: '1c',
       *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
       *   s '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
       * };
       * var tx = new Transaction(rawTx);
       * @prop {Buffer} raw The raw rlp decoded transaction
       * @prop {Buffer} nonce
       * @prop {Buffer} to the to address
       * @prop {Buffer} value the amount of ether sent
       * @prop {Buffer} data this will contain the data of the message or the init of a contract
       * @prop {Buffer} v EC signature parameter
       * @prop {Buffer} r EC signature parameter
       * @prop {Buffer} s EC recovery ID
       */
      const Transaction = module.exports = function (data) {
        // Define Properties
        const fields = [{
          name: 'nonce',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: 'gasPrice',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: 'gasLimit',
          alias: 'gas',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: 'to',
          allowZero: true,
          length: 20,
          default: new Buffer([])
        }, {
          name: 'value',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: 'data',
          alias: 'input',
          allowZero: true,
          default: new Buffer([])
        }, {
          name: 'v',
          length: 1,
          default: new Buffer([0x1c])
        }, {
          name: 'r',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }, {
          name: 's',
          length: 32,
          allowLess: true,
          default: new Buffer([])
        }];

        /**
         * Returns the rlp encoding of the transaction
         * @method serialize
         * @return {Buffer}
         */
        // attached serialize
        ethUtil.defineProperties(this, fields, data);

        /**
         * @prop {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
         */
        Object.defineProperty(this, 'from', {
          enumerable: true,
          configurable: true,
          get: this.getSenderAddress.bind(this)
        });

        this._homestead = true;
      };

      /**
       * If the tx's `to` is to the creation address
       * @method toCreationAddress
       * @return {Boolean}
       */
      Transaction.prototype.toCreationAddress = function () {
        return this.to.toString('hex') === '';
      };

      /**
       * Computes a sha3-256 hash of the serialized tx
       * @method hash
       * @param {Boolean} [signature=true] whether or not to inculde the signature
       * @return {Buffer}
       */
      Transaction.prototype.hash = function (signature) {
        let toHash;

        if (typeof signature === 'undefined') {
          signature = true;
        }

        toHash = signature ? this.raw : this.raw.slice(0, 6);

        // create hash
        return ethUtil.rlphash(toHash);
      };

      /**
       * returns the sender's address
       * @method getSenderAddress
       * @return {Buffer}
       */
      Transaction.prototype.getSenderAddress = function () {
        if (this._from) {
          return this._from;
        }
        const pubkey = this.getSenderPublicKey();
        this._from = ethUtil.publicToAddress(pubkey);
        return this._from;
      };

      /**
       * returns the public key of the sender
       * @method getSenderPublicKey
       * @return {Buffer}
       */
      Transaction.prototype.getSenderPublicKey = function () {
        if (!this._senderPubKey || !this._senderPubKey.length) {
          this.verifySignature();
        }

        return this._senderPubKey;
      };

      /**
       * Determines if the signature is valid
       * @method verifySignature
       * @return {Boolean}
       */
      Transaction.prototype.verifySignature = function () {
        const msgHash = this.hash(false);

        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
        if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
          return false;
        }

        try {
          this._senderPubKey = ethUtil.ecrecover(msgHash, this.v, this.r, this.s);
        } catch (e) {
          return false;
        }

        return !!this._senderPubKey;
      };

      /**
       * sign a transaction with a given a private key
       * @method sign
       * @param {Buffer} privateKey
       */
      Transaction.prototype.sign = function (privateKey) {
        const msgHash = this.hash(false);
        const sig = ethUtil.ecsign(msgHash, privateKey);
        Object.assign(this, sig);
      };

      /**
       * The amount of gas paid for the data in this tx
       * @method getDataFee
       * @return {BN}
       */
      Transaction.prototype.getDataFee = function () {
        const data = this.raw[5];
        const cost = new BN(0);
        for (var i = 0; i < data.length; i++) {
          data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
        }
        return cost;
      };

      /**
       * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
       * @method getBaseFee
       * @return {BN}
       */
      Transaction.prototype.getBaseFee = function () {
        const fee = this.getDataFee().iaddn(fees.txGas.v);
        if (this._homestead && this.toCreationAddress()) {
          fee.iaddn(fees.txCreation.v);
        }
        return fee;
      };

      /**
       * the up front amount that an account must have for this transaction to be valid
       * @method getUpfrontCost
       * @return {BN}
       */
      Transaction.prototype.getUpfrontCost = function () {
        return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
      };

      /**
       * validates the signature and checks to see if it has enough gas
       * @method validate
       * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
       * @return {Boolean|String}
       */
      Transaction.prototype.validate = function (stringError) {
        const errors = [];
        if (!this.verifySignature()) {
          errors.push('Invalid Signature');
        }

        if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
          errors.push([`gas limit is to low. Need at least ${ this.getBaseFee() }`]);
        }

        if (stringError === undefined || stringError === false) {
          return errors.length === 0;
        } else {
          return errors.join(' ');
        }
      };
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "ethereum-common/params": 145, "ethereumjs-util": 147 }], 147: [function (require, module, exports) {
    (function (Buffer) {
      const SHA3 = require('keccakjs');
      const secp256k1 = require('secp256k1');
      const assert = require('assert');
      const rlp = require('rlp');
      const BN = require('bn.js');
      const createHash = require('create-hash');

      /**
       * the max integer that this VM can handle (a ```BN```)
       * @var {BN} MAX_INTEGER
       */
      exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

      /**
       * 2^256 (a ```BN```)
       * @var {BN} TWO_POW256
       */
      exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

      /**
       * SHA3-256 hash of null (a ```String```)
       * @var {String} SHA3_NULL_S
       */
      exports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

      /**
       * SHA3-256 hash of null (a ```Buffer```)
       * @var {Buffer} SHA3_NULL
       */
      exports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex');

      /**
       * SHA3-256 of an RLP of an empty array (a ```String```)
       * @var {String} SHA3_RLP_ARRAY_S
       */
      exports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';

      /**
       * SHA3-256 of an RLP of an empty array (a ```Buffer```)
       * @var {Buffer} SHA3_RLP_ARRAY
       */
      exports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex');

      /**
       * SHA3-256 hash of the RLP of null  (a ```String```)
       * @var {String} SHA3_RLP_S
       */
      exports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';

      /**
       * SHA3-256 hash of the RLP of null (a ```Buffer```)
       * @var {Buffer} SHA3_RLP
       */
      exports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex');

      /**
       * [`BN`](https://github.com/indutny/bn.js)
       * @var {Function}
       */
      exports.BN = BN;

      /**
       * [`rlp`](https://github.com/ethereumjs/rlp)
       * @var {Function}
       */
      exports.rlp = rlp;

      /**
       * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
       * @var {Object}
       */
      exports.secp256k1 = secp256k1;

      /**
       * Returns a buffer filled with 0s
       * @method zeros
       * @param {Number} bytes  the number of bytes the buffer should be
       * @return {Buffer}
       */
      exports.zeros = function (bytes) {
        var buf = new Buffer(bytes);
        buf.fill(0);
        return buf;
      };

      /**
       * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
       * Or it truncates the beginning if it exceeds.
       * @method lsetLength
       * @param {Buffer|Array} msg the value to pad
       * @param {Number} length the number of bytes the output should be
       * @param {Boolean} [right=false] whether to start padding form the left or right
       * @return {Buffer|Array}
       */
      exports.setLengthLeft = exports.setLength = function (msg, length, right) {
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
          if (msg.length < length) {
            msg.copy(buf);
            return buf;
          }
          return msg.slice(0, length);
        } else {
          if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
          }
          return msg.slice(-length);
        }
      };

      /**
       * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
       * Or it truncates the beginning if it exceeds.
       * @method lsetLength
       * @param {Buffer|Array} msg the value to pad
       * @param {Number} length the number of bytes the output should be
       * @return {Buffer|Array}
       */
      exports.setLengthRight = function (msg, length) {
        return exports.setLength(msg, length, true);
      };

      /**
       * Trims leading zeros from a `Buffer` or an `Array`
       * @method unpad
       * @param {Buffer|Array|String} a
       * @return {Buffer|Array|String}
       */
      exports.unpad = exports.stripZeros = function (a) {
        a = exports.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === '0') {
          a = a.slice(1);
          first = a[0];
        }
        return a;
      };
      /**
       * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
       * @method toBuffer
       * @param {*} v the value
       */
      exports.toBuffer = function (v) {
        if (!Buffer.isBuffer(v)) {
          if (Array.isArray(v)) {
            v = new Buffer(v);
          } else if (typeof v === 'string') {
            if (exports.isHexPrefixed(v)) {
              v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
            } else {
              v = new Buffer(v);
            }
          } else if (typeof v === 'number') {
            v = exports.intToBuffer(v);
          } else if (v === null || v === undefined) {
            v = new Buffer([]);
          } else if (v.toArray) {
            // converts a BN to a Buffer
            v = new Buffer(v.toArray());
          } else {
            throw new Error('invalid type');
          }
        }
        return v;
      };

      /**
       * Converts a `Number` into a hex `String`
       * @method intToHex
       * @param {Number} i
       * @return {String}
       */
      exports.intToHex = function (i) {
        assert(i % 1 === 0, 'number is not a integer');
        assert(i >= 0, 'number must be positive');
        var hex = i.toString(16);
        if (hex.length % 2) {
          hex = '0' + hex;
        }

        return '0x' + hex;
      };

      /**
       * Converts an `Number` to a `Buffer`
       * @method intToBuffer
       * @param {Number} i
       * @return {Buffer}
       */
      exports.intToBuffer = function (i) {
        var hex = exports.intToHex(i);
        return new Buffer(hex.slice(2), 'hex');
      };

      /**
       * Converts a `Buffer` to a `Number`
       * @method bufferToInt
       * @param {Buffer} buf
       * @return {Number}
       */
      exports.bufferToInt = function (buf) {
        return parseInt(exports.bufferToHex(buf), 16);
      };

      /**
       * Converts a `Buffer` into a hex `String`
       * @method bufferToHex
       * @param {Buffer} buf
       * @return {String}
       */
      exports.bufferToHex = function (buf) {
        buf = exports.toBuffer(buf);
        if (buf.length === 0) {
          return 0;
        }

        return '0x' + buf.toString('hex');
      };

      /**
       * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
       * @method fromSigned
       * @param {Buffer} num
       * @return {BN}
       */
      exports.fromSigned = function (num) {
        return new BN(num).fromTwos(256);
      };

      /**
       * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
       * @method toUnsigned
       * @param {BN} num
       * @return {Buffer}
       */
      exports.toUnsigned = function (num) {
        return new Buffer(num.toTwos(256).toArray());
      };

      /**
       * Creates SHA-3 hash of the input
       * @method sha3
       * @param {Buffer|Array|String|Number} a the input data
       * @param {Number} [bytes=256] the SHA width
       * @return {Buffer}
       */
      exports.sha3 = function (a, bytes) {
        a = exports.toBuffer(a);
        if (!bytes) bytes = 256;

        var h = new SHA3(bytes);
        if (a) {
          h.update(a);
        }
        return new Buffer(h.digest('hex'), 'hex');
      };

      /**
       * Creates SHA256 hash of the input
       * @method sha256
       * @param {Buffer|Array|String|Number} a the input data
       * @return {Buffer}
       */
      exports.sha256 = function (a) {
        a = exports.toBuffer(a);
        return createHash('sha256').update(a).digest();
      };

      /**
       * Creates RIPEMD160 hash of the input
       * @method ripemd160
       * @param {Buffer|Array|String|Number} a the input data
       * @param {Boolean} padded whether it should be padded to 256 bits or not
       * @return {Buffer}
       */
      exports.ripemd160 = function (a, padded) {
        a = exports.toBuffer(a);
        var hash = createHash('rmd160').update(a).digest();
        if (padded === true) {
          return exports.setLength(hash, 32);
        } else {
          return hash;
        }
      };

      /**
       * Creates SHA-3 hash of the RLP encoded version of the input
       * @method rlphash
       * @param {Buffer|Array|String|Number} a the input data
       * @return {Buffer}
       */
      exports.rlphash = function (a) {
        return exports.sha3(rlp.encode(a));
      };

      /**
       * Checks if the private key satisfies the rules of the curve secp256k1.
       * @method isValidPrivate
       * @param {Buffer} privateKey
       * @return {Boolean}
       */
      exports.isValidPrivate = function (privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
      };

      /**
       * Checks if the public key satisfies the rules of the curve secp256k1
       * and the requirements of Ethereum.
       * @method isValidPublic
       * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
       * @param {Boolean} [sanitize=false] Accept public keys in other formats
       * @return {Boolean}
       */
      exports.isValidPublic = function (publicKey, sanitize) {
        if (publicKey.length === 64) {
          // Convert to SEC1 for secp256k1
          return secp256k1.publicKeyVerify(Buffer.concat([new Buffer([4]), publicKey]));
        }

        if (!sanitize) {
          return false;
        }

        return secp256k1.publicKeyVerify(publicKey);
      };

      /**
       * Returns the ethereum address of a given public key.
       * Accepts "Ethereum public keys" and SEC1 encoded keys.
       * @method publicToAddress
       * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
       * @param {Boolean} [sanitize=false] Accept public keys in other formats
       * @return {Buffer}
       */
      exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
        pubKey = exports.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
        }
        assert(pubKey.length === 64);
        // Only take the lower 160bits of the hash
        return exports.sha3(pubKey).slice(-20);
      };

      /**
       * Returns the ethereum public key of a given private key
       * @method privateToPublic
       * @param {Buffer} privateKey A private key must be 256 bits wide
       * @return {Buffer}
       */
      var privateToPublic = exports.privateToPublic = function (privateKey) {
        privateKey = exports.toBuffer(privateKey);
        // skip the type flag and use the X, Y points
        return secp256k1.publicKeyCreate(privateKey, false).slice(1);
      };

      /**
       * Converts a public key to the Ethereum format.
       * @method importPublic
       * @param {Buffer} publicKey
       * @return {Buffer}
       */
      exports.importPublic = function (publicKey) {
        publicKey = exports.toBuffer(publicKey);
        if (publicKey.length !== 64) {
          publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
      };

      /**
       * ECDSA sign
       * @method ecsign
       * @param {Buffer} msgHash
       * @param {Buffer} privateKey
       * @return {Object}
       */
      exports.ecsign = function (msgHash, privateKey) {
        var sig = secp256k1.sign(msgHash, privateKey);

        var ret = {};
        ret.r = sig.signature.slice(0, 32);
        ret.s = sig.signature.slice(32, 64);
        ret.v = sig.recovery + 27;
        return ret;
      };

      /**
       * ECDSA public key recovery from signature
       * @method ecrecover
       * @param {Buffer} msgHash
       * @param {Buffer} v
       * @param {Buffer} r
       * @param {Buffer} s
       * @return {Buffer} publicKey
       */
      exports.ecrecover = function (msgHash, v, r, s) {
        var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
        var recovery = exports.bufferToInt(v) - 27;
        if (recovery !== 0 && recovery !== 1) {
          throw new Error('Invalid signature v value');
        }
        var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
        return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
      };

      /**
       * Convert signature parameters into the format of `eth_sign` RPC method
       * @method toRpcSig
       * @param {Number} v
       * @param {Buffer} r
       * @param {Buffer} s
       * @return {String} sig
       */
      exports.toRpcSig = function (v, r, s) {
        // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
        // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
        return exports.bufferToHex(Buffer.concat([r, s, exports.toBuffer(v - 27)]));
      };

      /**
       * Convert signature format of the `eth_sign` RPC method to signature parameters
       * @method fromRpcSig
       * @param {String} sig
       * @return {Object}
       */
      exports.fromRpcSig = function (sig) {
        sig = exports.toBuffer(sig);

        var v = sig[64];
        // support both versions of `eth_sign` responses
        if (v < 27) {
          v += 27;
        }

        return {
          v: v,
          r: sig.slice(0, 32),
          s: sig.slice(32, 64)
        };
      };

      /**
       * Returns the ethereum address of a given private key
       * @method privateToAddress
       * @param {Buffer} privateKey A private key must be 256 bits wide
       * @return {Buffer}
       */
      exports.privateToAddress = function (privateKey) {
        return exports.publicToAddress(privateToPublic(privateKey));
      };

      /**
       * Checks if the address is a valid. Accepts checksummed addresses too
       * @method isValidAddress
       * @param {String} address
       * @return {Boolean}
       */
      exports.isValidAddress = function (address) {
        return (/^0x[0-9a-fA-F]{40}$/i.test(address)
        );
      };

      /**
       * Returns a checksummed address
       * @method toChecksumAddress
       * @param {String} address
       * @return {String}
       */
      exports.toChecksumAddress = function (address) {
        address = exports.stripHexPrefix(address).toLowerCase();
        var hash = exports.sha3(address).toString('hex');
        var ret = '0x';

        for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
          } else {
            ret += address[i];
          }
        }

        return ret;
      };

      /**
       * Checks if the address is a valid checksummed address
       * @method isValidChecksumAddress
       * @param {Buffer} address
       * @return {Boolean}
       */
      exports.isValidChecksumAddress = function (address) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
      };

      /**
       * Generates an address of a newly created contract
       * @method generateAddress
       * @param {Buffer} from the address which is creating this new address
       * @param {Buffer} nonce the nonce of the from account
       * @return {Buffer}
       */
      exports.generateAddress = function (from, nonce) {
        from = exports.toBuffer(from);
        nonce = new BN(nonce);

        if (nonce.isZero()) {
          // in RLP we want to encode null in the case of zero nonce
          // read the RLP documentation for an answer if you dare
          nonce = null;
        } else {
          nonce = new Buffer(nonce.toArray());
        }

        // Only take the lower 160bits of the hash
        return exports.rlphash([from, nonce]).slice(-20);
      };

      /**
       * Returns true if the supplied address belongs to a precompiled account
       * @method isPrecompiled
       * @param {Buffer|String} address
       * @return {Boolean}
       */
      exports.isPrecompiled = function (address) {
        var a = exports.unpad(address);
        return a.length === 1 && a[0] > 0 && a[0] < 5;
      };

      /**
       * Returns a `Boolean` on whether or not the a `String` starts with "0x"
       * @method isHexPrefixed
       * @param {String} str
       * @return {Boolean}
       */
      exports.isHexPrefixed = function (str) {
        return str.slice(0, 2) === '0x';
      };

      /**
       * Removes "0x" from a given `String`
       * @method stripHexPrefix
       * @param {String} str
       * @return {String}
       */
      exports.stripHexPrefix = function (str) {
        if (typeof str !== 'string') {
          return str;
        }
        return exports.isHexPrefixed(str) ? str.slice(2) : str;
      };

      /**
       * Adds "0x" to a given `String` if it does not already start with "0x"
       * @method addHexPrefix
       * @param {String} str
       * @return {String}
       */
      exports.addHexPrefix = function (str) {
        if (typeof str !== 'string') {
          return str;
        }

        return exports.isHexPrefixed(str) ? str : '0x' + str;
      };

      /**
       * Pads a `String` to have an even length
       * @method padToEven
       * @param {String} a
       * @return {String}
       */
      exports.padToEven = function (a) {
        if (a.length % 2) a = '0' + a;
        return a;
      };

      /**
       * Converts a `Buffer` or `Array` to JSON
       * @method BAToJSON
       * @param {Buffer|Array} ba
       * @return {Array|String|null}
       */
      exports.baToJSON = function (ba) {
        if (Buffer.isBuffer(ba)) {
          return '0x' + ba.toString('hex');
        } else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
          }
          return array;
        }
      };

      /**
       * Defines properties on a `Object`. It make the assumption that underlying data is binary.
       * @method defineProperties
       * @param {Object} self the `Object` to define properties on
       * @param {Array} fields an array fields to define. Fields can contain:
       * * `name` - the name of the properties
       * * `length` - the number of bytes the field can have
       * * `allowLess` - if the field can be less than the length
       * * `allowEmpty`
       * @param {*} data data to be validated against the definitions
       */
      exports.defineProperties = function (self, fields, data) {
        self.raw = [];
        self._fields = [];

        // attach the `toJSON`
        self.toJSON = function (label) {
          if (label) {
            var obj = {};
            self._fields.forEach(function (field) {
              obj[field] = '0x' + self[field].toString('hex');
            });
            return obj;
          }
          return exports.baToJSON(this.raw);
        };

        self.serialize = function serialize() {
          return rlp.encode(self.raw);
        };

        fields.forEach(function (field, i) {
          self._fields.push(field.name);
          function getter() {
            return self.raw[i];
          }
          function setter(v) {
            v = exports.toBuffer(v);

            if (v.toString('hex') === '00' && !field.allowZero) {
              v = new Buffer([]);
            }

            if (field.allowLess && field.length) {
              v = exports.stripZeros(v);
              assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
            } else if (!(field.allowZero && v.length === 0) && field.length) {
              assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
            }

            self.raw[i] = v;
          }

          Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
          });

          if (field.default) {
            self[field.name] = field.default;
          }

          // attach alias
          if (field.alias) {
            Object.defineProperty(self, field.alias, {
              enumerable: false,
              configurable: true,
              set: setter,
              get: getter
            });
          }
        });

        // if the constuctor is passed data
        if (data) {
          if (typeof data === 'string') {
            data = new Buffer(exports.stripHexPrefix(data), 'hex');
          }

          if (Buffer.isBuffer(data)) {
            data = rlp.decode(data);
          }

          if (Array.isArray(data)) {
            if (data.length > self._fields.length) {
              throw new Error('wrong number of fields in data');
            }

            // make sure all the items are buffers
            data.forEach(function (d, i) {
              self[self._fields[i]] = exports.toBuffer(d);
            });
          } else if (typeof data === 'object') {
            for (var prop in data) {
              if (self._fields.indexOf(prop) !== -1) {
                self[prop] = data[prop];
              }
            }
          } else {
            throw new Error('invalid data');
          }
        }
      };
    }).call(this, require("buffer").Buffer);
  }, { "assert": 74, "bn.js": 78, "buffer": 108, "create-hash": 112, "keccakjs": 162, "rlp": 193, "secp256k1": 195 }], 148: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function (n) {
      if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
      this._maxListeners = n;
      return this;
    };

    EventEmitter.prototype.emit = function (type) {
      var er, handler, len, args, i, listeners;

      if (!this._events) this._events = {};

      // If there is no 'error' event listener then throw.
      if (type === 'error') {
        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
          er = arguments[1];
          if (er instanceof Error) {
            throw er; // Unhandled 'error' event
          } else {
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
            err.context = er;
            throw err;
          }
        }
      }

      handler = this._events[type];

      if (isUndefined(handler)) return false;

      if (isFunction(handler)) {
        switch (arguments.length) {
          // fast cases
          case 1:
            handler.call(this);
            break;
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          // slower
          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;
        for (i = 0; i < len; i++) listeners[i].apply(this, args);
      }

      return true;
    };

    EventEmitter.prototype.addListener = function (type, listener) {
      var m;

      if (!isFunction(listener)) throw TypeError('listener must be a function');

      if (!this._events) this._events = {};

      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

      if (!this._events[type])
        // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;else if (isObject(this._events[type]))
        // If we've already got an array, just append.
        this._events[type].push(listener);else
        // Adding the second element, need to change to array.
        this._events[type] = [this._events[type], listener];

      // Check for listener leak
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }

        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
          if (typeof console.trace === 'function') {
            // not supported in IE 10
            console.trace();
          }
        }
      }

      return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.once = function (type, listener) {
      if (!isFunction(listener)) throw TypeError('listener must be a function');

      var fired = false;

      function g() {
        this.removeListener(type, g);

        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }

      g.listener = listener;
      this.on(type, g);

      return this;
    };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener = function (type, listener) {
      var list, position, length, i;

      if (!isFunction(listener)) throw TypeError('listener must be a function');

      if (!this._events || !this._events[type]) return this;

      list = this._events[type];
      length = list.length;
      position = -1;

      if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];
        if (this._events.removeListener) this.emit('removeListener', type, listener);
      } else if (isObject(list)) {
        for (i = length; i-- > 0;) {
          if (list[i] === listener || list[i].listener && list[i].listener === listener) {
            position = i;
            break;
          }
        }

        if (position < 0) return this;

        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }

        if (this._events.removeListener) this.emit('removeListener', type, listener);
      }

      return this;
    };

    EventEmitter.prototype.removeAllListeners = function (type) {
      var key, listeners;

      if (!this._events) return this;

      // not listening for removeListener, no need to emit
      if (!this._events.removeListener) {
        if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = {};
        return this;
      }

      listeners = this._events[type];

      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
      }
      delete this._events[type];

      return this;
    };

    EventEmitter.prototype.listeners = function (type) {
      var ret;
      if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
      return ret;
    };

    EventEmitter.prototype.listenerCount = function (type) {
      if (this._events) {
        var evlistener = this._events[type];

        if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
      }
      return 0;
    };

    EventEmitter.listenerCount = function (emitter, type) {
      return emitter.listenerCount(type);
    };

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isUndefined(arg) {
      return arg === void 0;
    }
  }, {}], 149: [function (require, module, exports) {
    (function (Buffer) {
      var md5 = require('create-hash/md5');
      module.exports = EVP_BytesToKey;
      function EVP_BytesToKey(password, salt, keyLen, ivLen) {
        if (!Buffer.isBuffer(password)) {
          password = new Buffer(password, 'binary');
        }
        if (salt && !Buffer.isBuffer(salt)) {
          salt = new Buffer(salt, 'binary');
        }
        keyLen = keyLen / 8;
        ivLen = ivLen || 0;
        var ki = 0;
        var ii = 0;
        var key = new Buffer(keyLen);
        var iv = new Buffer(ivLen);
        var addmd = 0;
        var md_buf;
        var i;
        var bufs = [];
        while (true) {
          if (addmd++ > 0) {
            bufs.push(md_buf);
          }
          bufs.push(password);
          if (salt) {
            bufs.push(salt);
          }
          md_buf = md5(Buffer.concat(bufs));
          bufs = [];
          i = 0;
          if (keyLen > 0) {
            while (true) {
              if (keyLen === 0) {
                break;
              }
              if (i === md_buf.length) {
                break;
              }
              key[ki++] = md_buf[i];
              keyLen--;
              i++;
            }
          }
          if (ivLen > 0 && i !== md_buf.length) {
            while (true) {
              if (ivLen === 0) {
                break;
              }
              if (i === md_buf.length) {
                break;
              }
              iv[ii++] = md_buf[i];
              ivLen--;
              i++;
            }
          }
          if (keyLen === 0 && ivLen === 0) {
            break;
          }
        }
        for (i = 0; i < md_buf.length; i++) {
          md_buf[i] = 0;
        }
        return {
          key: key,
          iv: iv
        };
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "create-hash/md5": 114 }], 150: [function (require, module, exports) {
    var hash = exports;

    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac');

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }, { "./hash/common": 151, "./hash/hmac": 152, "./hash/ripemd": 153, "./hash/sha": 154, "./hash/utils": 155 }], 151: [function (require, module, exports) {
    var hash = require('../hash');
    var utils = hash.utils;
    var assert = utils.assert;

    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;

    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;

        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);

      return this._digest(enc);
    };

    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++) res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++) res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (var t = 8; t < this.padLength; t++) res[i++] = 0;
      }

      return res;
    };
  }, { "../hash": 150 }], 152: [function (require, module, exports) {
    var hmac = exports;

    var hash = require('../hash');
    var utils = hash.utils;
    var assert = utils.assert;

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++) key.push(0);

      for (var i = 0; i < key.length; i++) key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (var i = 0; i < key.length; i++) key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }, { "../hash": 150 }], 153: [function (require, module, exports) {
    var hash = require('../hash');
    var utils = hash.utils;

    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = hash.common.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();

      BlockHash.call(this);

      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.endian = 'little';
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
    }

    function K(j) {
      if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
    }

    var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

    var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

    var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

    var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  }, { "../hash": 150 }], 154: [function (require, module, exports) {
    var hash = require('../hash');
    var utils = hash.utils;
    var assert = utils.assert;

    var rotr32 = utils.rotr32;
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = hash.common.BlockHash;

    var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

    var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

    var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

    function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();

      BlockHash.call(this);
      this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    exports.sha256 = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (; i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();

      SHA256.call(this);
      this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
    }
    utils.inherits(SHA224, SHA256);
    exports.sha224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
    };

    function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();

      BlockHash.call(this);
      this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    exports.sha512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++) W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

        var c0_hi = s0_512_hi(ah, al);
        var c0_lo = s0_512_lo(ah, al);
        var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };

    function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();

      SHA512.call(this);
      this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
    }
    utils.inherits(SHA384, SHA512);
    exports.sha384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
    };

    function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();

      BlockHash.call(this);
      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.W = new Array(80);
    }

    utils.inherits(SHA1, BlockHash);
    exports.sha1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++) W[i] = msg[start + i];

      for (; i < W.length; i++) W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (var i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
    };

    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }

    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }

    function p32(x, y, z) {
      return x ^ y ^ z;
    }

    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }

    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }

    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }

    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }

    function ft_1(s, x, y, z) {
      if (s === 0) return ch32(x, y, z);
      if (s === 1 || s === 3) return p32(x, y, z);
      if (s === 2) return maj32(x, y, z);
    }

    function ch64_hi(xh, xl, yh, yl, zh, zl) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh, zl) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2); // 34
      var c2_hi = rotr64_hi(xl, xh, 7); // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2); // 34
      var c2_lo = rotr64_lo(xl, xh, 7); // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9); // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9); // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29); // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29); // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
    }
  }, { "../hash": 150 }], 155: [function (require, module, exports) {
    var utils = exports;
    var inherits = require('inherits');

    function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi) res.push(hi, lo);else res.push(lo);
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0) msg = '0' + msg;
          for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
      }
      return res;
    }
    utils.toArray = toArray;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
      return res >>> 0;
    }
    utils.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    utils.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1) return '0' + word;else return word;
    }
    utils.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
    }
    utils.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    utils.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 0xff;
          res[k + 2] = m >>> 8 & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 0xff;
          res[k + 1] = m >>> 8 & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    utils.split32 = split32;

    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    utils.rotr32 = rotr32;

    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    utils.rotl32 = rotl32;

    function sum32(a, b) {
      return a + b >>> 0;
    }
    utils.sum32 = sum32;

    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    utils.sum32_3 = sum32_3;

    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    utils.sum32_4 = sum32_4;

    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    utils.sum32_5 = sum32_5;

    function assert(cond, msg) {
      if (!cond) throw new Error(msg || 'Assertion failed');
    }
    utils.assert = assert;

    utils.inherits = inherits;

    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;

    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    };
    exports.sum64_hi = sum64_hi;

    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    };
    exports.sum64_lo = sum64_lo;

    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    };
    exports.sum64_4_hi = sum64_4_hi;

    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    };
    exports.sum64_4_lo = sum64_4_lo;

    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    };
    exports.sum64_5_hi = sum64_5_hi;

    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    };
    exports.sum64_5_lo = sum64_5_lo;

    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    };
    exports.rotr64_hi = rotr64_hi;

    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    };
    exports.rotr64_lo = rotr64_lo;

    function shr64_hi(ah, al, num) {
      return ah >>> num;
    };
    exports.shr64_hi = shr64_hi;

    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    };
    exports.shr64_lo = shr64_lo;
  }, { "inherits": 158 }], 156: [function (require, module, exports) {
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };
  }, {}], 157: [function (require, module, exports) {

    var indexOf = [].indexOf;

    module.exports = function (arr, obj) {
      if (indexOf) return arr.indexOf(obj);
      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] === obj) return i;
      }
      return -1;
    };
  }, {}], 158: [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }, {}], 159: [function (require, module, exports) {
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */

    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };

    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
    }
  }, {}], 160: [function (require, module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
  }, {}], 161: [function (require, module, exports) {
    (function (global) {
      /*
       * js-sha3 v0.3.1
       * https://github.com/emn178/js-sha3
       *
       * Copyright 2015, emn178@gmail.com
       *
       * Licensed under the MIT license:
       * http://www.opensource.org/licenses/MIT
       */
      ;(function (root, undefined) {
        'use strict';

        var NODE_JS = typeof module != 'undefined';
        if (NODE_JS) {
          root = global;
          if (root.JS_SHA3_TEST) {
            root.navigator = { userAgent: 'Chrome' };
          }
        }
        var CHROME = (root.JS_SHA3_TEST || !NODE_JS) && navigator.userAgent.indexOf('Chrome') != -1;
        var HEX_CHARS = '0123456789abcdef'.split('');
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

        var blocks = [],
            s = [];

        var keccak_224 = function (message) {
          return keccak(message, 224, KECCAK_PADDING);
        };

        var keccak_256 = function (message) {
          return keccak(message, 256, KECCAK_PADDING);
        };

        var keccak_384 = function (message) {
          return keccak(message, 384, KECCAK_PADDING);
        };

        var sha3_224 = function (message) {
          return keccak(message, 224, PADDING);
        };

        var sha3_256 = function (message) {
          return keccak(message, 256, PADDING);
        };

        var sha3_384 = function (message) {
          return keccak(message, 384, PADDING);
        };

        var sha3_512 = function (message) {
          return keccak(message, 512, PADDING);
        };

        var keccak = function (message, bits, padding) {
          var notString = typeof message != 'string';
          if (notString && message.constructor == root.ArrayBuffer) {
            message = new Uint8Array(message);
          }

          if (bits === undefined) {
            bits = 512;
            padding = KECCAK_PADDING;
          }

          var block,
              code,
              end = false,
              index = 0,
              start = 0,
              length = message.length,
              n,
              i,
              h,
              l,
              c0,
              c1,
              c2,
              c3,
              c4,
              c5,
              c6,
              c7,
              c8,
              c9,
              b0,
              b1,
              b2,
              b3,
              b4,
              b5,
              b6,
              b7,
              b8,
              b9,
              b10,
              b11,
              b12,
              b13,
              b14,
              b15,
              b16,
              b17,
              b18,
              b19,
              b20,
              b21,
              b22,
              b23,
              b24,
              b25,
              b26,
              b27,
              b28,
              b29,
              b30,
              b31,
              b32,
              b33,
              b34,
              b35,
              b36,
              b37,
              b38,
              b39,
              b40,
              b41,
              b42,
              b43,
              b44,
              b45,
              b46,
              b47,
              b48,
              b49;
          var blockCount = (1600 - bits * 2) / 32;
          var byteCount = blockCount * 4;

          for (i = 0; i < 50; ++i) {
            s[i] = 0;
          }

          block = 0;
          do {
            blocks[0] = block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
            if (notString) {
              for (i = start; index < length && i < byteCount; ++index) {
                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
              }
            } else {
              for (i = start; index < length && i < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 0x80) {
                  blocks[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 0x800) {
                  blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                  blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                } else {
                  code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                  blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                }
              }
            }
            start = i - byteCount;
            if (index == length) {
              blocks[i >> 2] |= padding[i & 3];
              ++index;
            }
            block = blocks[blockCount];
            if (index > length && i < byteCount) {
              blocks[blockCount - 1] |= 0x80000000;
              end = true;
            }

            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }

            for (n = 0; n < 48; n += 2) {
              c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
              c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
              c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
              c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
              c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
              c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
              c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
              c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
              c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
              c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

              h = c8 ^ (c2 << 1 | c3 >>> 31);
              l = c9 ^ (c3 << 1 | c2 >>> 31);
              s[0] ^= h;
              s[1] ^= l;
              s[10] ^= h;
              s[11] ^= l;
              s[20] ^= h;
              s[21] ^= l;
              s[30] ^= h;
              s[31] ^= l;
              s[40] ^= h;
              s[41] ^= l;
              h = c0 ^ (c4 << 1 | c5 >>> 31);
              l = c1 ^ (c5 << 1 | c4 >>> 31);
              s[2] ^= h;
              s[3] ^= l;
              s[12] ^= h;
              s[13] ^= l;
              s[22] ^= h;
              s[23] ^= l;
              s[32] ^= h;
              s[33] ^= l;
              s[42] ^= h;
              s[43] ^= l;
              h = c2 ^ (c6 << 1 | c7 >>> 31);
              l = c3 ^ (c7 << 1 | c6 >>> 31);
              s[4] ^= h;
              s[5] ^= l;
              s[14] ^= h;
              s[15] ^= l;
              s[24] ^= h;
              s[25] ^= l;
              s[34] ^= h;
              s[35] ^= l;
              s[44] ^= h;
              s[45] ^= l;
              h = c4 ^ (c8 << 1 | c9 >>> 31);
              l = c5 ^ (c9 << 1 | c8 >>> 31);
              s[6] ^= h;
              s[7] ^= l;
              s[16] ^= h;
              s[17] ^= l;
              s[26] ^= h;
              s[27] ^= l;
              s[36] ^= h;
              s[37] ^= l;
              s[46] ^= h;
              s[47] ^= l;
              h = c6 ^ (c0 << 1 | c1 >>> 31);
              l = c7 ^ (c1 << 1 | c0 >>> 31);
              s[8] ^= h;
              s[9] ^= l;
              s[18] ^= h;
              s[19] ^= l;
              s[28] ^= h;
              s[29] ^= l;
              s[38] ^= h;
              s[39] ^= l;
              s[48] ^= h;
              s[49] ^= l;

              b0 = s[0];
              b1 = s[1];
              b32 = s[11] << 4 | s[10] >>> 28;
              b33 = s[10] << 4 | s[11] >>> 28;
              b14 = s[20] << 3 | s[21] >>> 29;
              b15 = s[21] << 3 | s[20] >>> 29;
              b46 = s[31] << 9 | s[30] >>> 23;
              b47 = s[30] << 9 | s[31] >>> 23;
              b28 = s[40] << 18 | s[41] >>> 14;
              b29 = s[41] << 18 | s[40] >>> 14;
              b20 = s[2] << 1 | s[3] >>> 31;
              b21 = s[3] << 1 | s[2] >>> 31;
              b2 = s[13] << 12 | s[12] >>> 20;
              b3 = s[12] << 12 | s[13] >>> 20;
              b34 = s[22] << 10 | s[23] >>> 22;
              b35 = s[23] << 10 | s[22] >>> 22;
              b16 = s[33] << 13 | s[32] >>> 19;
              b17 = s[32] << 13 | s[33] >>> 19;
              b48 = s[42] << 2 | s[43] >>> 30;
              b49 = s[43] << 2 | s[42] >>> 30;
              b40 = s[5] << 30 | s[4] >>> 2;
              b41 = s[4] << 30 | s[5] >>> 2;
              b22 = s[14] << 6 | s[15] >>> 26;
              b23 = s[15] << 6 | s[14] >>> 26;
              b4 = s[25] << 11 | s[24] >>> 21;
              b5 = s[24] << 11 | s[25] >>> 21;
              b36 = s[34] << 15 | s[35] >>> 17;
              b37 = s[35] << 15 | s[34] >>> 17;
              b18 = s[45] << 29 | s[44] >>> 3;
              b19 = s[44] << 29 | s[45] >>> 3;
              b10 = s[6] << 28 | s[7] >>> 4;
              b11 = s[7] << 28 | s[6] >>> 4;
              b42 = s[17] << 23 | s[16] >>> 9;
              b43 = s[16] << 23 | s[17] >>> 9;
              b24 = s[26] << 25 | s[27] >>> 7;
              b25 = s[27] << 25 | s[26] >>> 7;
              b6 = s[36] << 21 | s[37] >>> 11;
              b7 = s[37] << 21 | s[36] >>> 11;
              b38 = s[47] << 24 | s[46] >>> 8;
              b39 = s[46] << 24 | s[47] >>> 8;
              b30 = s[8] << 27 | s[9] >>> 5;
              b31 = s[9] << 27 | s[8] >>> 5;
              b12 = s[18] << 20 | s[19] >>> 12;
              b13 = s[19] << 20 | s[18] >>> 12;
              b44 = s[29] << 7 | s[28] >>> 25;
              b45 = s[28] << 7 | s[29] >>> 25;
              b26 = s[38] << 8 | s[39] >>> 24;
              b27 = s[39] << 8 | s[38] >>> 24;
              b8 = s[48] << 14 | s[49] >>> 18;
              b9 = s[49] << 14 | s[48] >>> 18;

              s[0] = b0 ^ ~b2 & b4;
              s[1] = b1 ^ ~b3 & b5;
              s[10] = b10 ^ ~b12 & b14;
              s[11] = b11 ^ ~b13 & b15;
              s[20] = b20 ^ ~b22 & b24;
              s[21] = b21 ^ ~b23 & b25;
              s[30] = b30 ^ ~b32 & b34;
              s[31] = b31 ^ ~b33 & b35;
              s[40] = b40 ^ ~b42 & b44;
              s[41] = b41 ^ ~b43 & b45;
              s[2] = b2 ^ ~b4 & b6;
              s[3] = b3 ^ ~b5 & b7;
              s[12] = b12 ^ ~b14 & b16;
              s[13] = b13 ^ ~b15 & b17;
              s[22] = b22 ^ ~b24 & b26;
              s[23] = b23 ^ ~b25 & b27;
              s[32] = b32 ^ ~b34 & b36;
              s[33] = b33 ^ ~b35 & b37;
              s[42] = b42 ^ ~b44 & b46;
              s[43] = b43 ^ ~b45 & b47;
              s[4] = b4 ^ ~b6 & b8;
              s[5] = b5 ^ ~b7 & b9;
              s[14] = b14 ^ ~b16 & b18;
              s[15] = b15 ^ ~b17 & b19;
              s[24] = b24 ^ ~b26 & b28;
              s[25] = b25 ^ ~b27 & b29;
              s[34] = b34 ^ ~b36 & b38;
              s[35] = b35 ^ ~b37 & b39;
              s[44] = b44 ^ ~b46 & b48;
              s[45] = b45 ^ ~b47 & b49;
              s[6] = b6 ^ ~b8 & b0;
              s[7] = b7 ^ ~b9 & b1;
              s[16] = b16 ^ ~b18 & b10;
              s[17] = b17 ^ ~b19 & b11;
              s[26] = b26 ^ ~b28 & b20;
              s[27] = b27 ^ ~b29 & b21;
              s[36] = b36 ^ ~b38 & b30;
              s[37] = b37 ^ ~b39 & b31;
              s[46] = b46 ^ ~b48 & b40;
              s[47] = b47 ^ ~b49 & b41;
              s[8] = b8 ^ ~b0 & b2;
              s[9] = b9 ^ ~b1 & b3;
              s[18] = b18 ^ ~b10 & b12;
              s[19] = b19 ^ ~b11 & b13;
              s[28] = b28 ^ ~b20 & b22;
              s[29] = b29 ^ ~b21 & b23;
              s[38] = b38 ^ ~b30 & b32;
              s[39] = b39 ^ ~b31 & b33;
              s[48] = b48 ^ ~b40 & b42;
              s[49] = b49 ^ ~b41 & b43;

              s[0] ^= RC[n];
              s[1] ^= RC[n + 1];
            }
          } while (!end);

          var hex = '';
          if (CHROME) {
            b0 = s[0];
            b1 = s[1];
            b2 = s[2];
            b3 = s[3];
            b4 = s[4];
            b5 = s[5];
            b6 = s[6];
            b7 = s[7];
            b8 = s[8];
            b9 = s[9];
            b10 = s[10];
            b11 = s[11];
            b12 = s[12];
            b13 = s[13];
            b14 = s[14];
            b15 = s[15];
            hex += HEX_CHARS[b0 >> 4 & 0x0F] + HEX_CHARS[b0 & 0x0F] + HEX_CHARS[b0 >> 12 & 0x0F] + HEX_CHARS[b0 >> 8 & 0x0F] + HEX_CHARS[b0 >> 20 & 0x0F] + HEX_CHARS[b0 >> 16 & 0x0F] + HEX_CHARS[b0 >> 28 & 0x0F] + HEX_CHARS[b0 >> 24 & 0x0F] + HEX_CHARS[b1 >> 4 & 0x0F] + HEX_CHARS[b1 & 0x0F] + HEX_CHARS[b1 >> 12 & 0x0F] + HEX_CHARS[b1 >> 8 & 0x0F] + HEX_CHARS[b1 >> 20 & 0x0F] + HEX_CHARS[b1 >> 16 & 0x0F] + HEX_CHARS[b1 >> 28 & 0x0F] + HEX_CHARS[b1 >> 24 & 0x0F] + HEX_CHARS[b2 >> 4 & 0x0F] + HEX_CHARS[b2 & 0x0F] + HEX_CHARS[b2 >> 12 & 0x0F] + HEX_CHARS[b2 >> 8 & 0x0F] + HEX_CHARS[b2 >> 20 & 0x0F] + HEX_CHARS[b2 >> 16 & 0x0F] + HEX_CHARS[b2 >> 28 & 0x0F] + HEX_CHARS[b2 >> 24 & 0x0F] + HEX_CHARS[b3 >> 4 & 0x0F] + HEX_CHARS[b3 & 0x0F] + HEX_CHARS[b3 >> 12 & 0x0F] + HEX_CHARS[b3 >> 8 & 0x0F] + HEX_CHARS[b3 >> 20 & 0x0F] + HEX_CHARS[b3 >> 16 & 0x0F] + HEX_CHARS[b3 >> 28 & 0x0F] + HEX_CHARS[b3 >> 24 & 0x0F] + HEX_CHARS[b4 >> 4 & 0x0F] + HEX_CHARS[b4 & 0x0F] + HEX_CHARS[b4 >> 12 & 0x0F] + HEX_CHARS[b4 >> 8 & 0x0F] + HEX_CHARS[b4 >> 20 & 0x0F] + HEX_CHARS[b4 >> 16 & 0x0F] + HEX_CHARS[b4 >> 28 & 0x0F] + HEX_CHARS[b4 >> 24 & 0x0F] + HEX_CHARS[b5 >> 4 & 0x0F] + HEX_CHARS[b5 & 0x0F] + HEX_CHARS[b5 >> 12 & 0x0F] + HEX_CHARS[b5 >> 8 & 0x0F] + HEX_CHARS[b5 >> 20 & 0x0F] + HEX_CHARS[b5 >> 16 & 0x0F] + HEX_CHARS[b5 >> 28 & 0x0F] + HEX_CHARS[b5 >> 24 & 0x0F] + HEX_CHARS[b6 >> 4 & 0x0F] + HEX_CHARS[b6 & 0x0F] + HEX_CHARS[b6 >> 12 & 0x0F] + HEX_CHARS[b6 >> 8 & 0x0F] + HEX_CHARS[b6 >> 20 & 0x0F] + HEX_CHARS[b6 >> 16 & 0x0F] + HEX_CHARS[b6 >> 28 & 0x0F] + HEX_CHARS[b6 >> 24 & 0x0F];

            if (bits >= 256) {
              hex += HEX_CHARS[b7 >> 4 & 0x0F] + HEX_CHARS[b7 & 0x0F] + HEX_CHARS[b7 >> 12 & 0x0F] + HEX_CHARS[b7 >> 8 & 0x0F] + HEX_CHARS[b7 >> 20 & 0x0F] + HEX_CHARS[b7 >> 16 & 0x0F] + HEX_CHARS[b7 >> 28 & 0x0F] + HEX_CHARS[b7 >> 24 & 0x0F];
            }
            if (bits >= 384) {
              hex += HEX_CHARS[b8 >> 4 & 0x0F] + HEX_CHARS[b8 & 0x0F] + HEX_CHARS[b8 >> 12 & 0x0F] + HEX_CHARS[b8 >> 8 & 0x0F] + HEX_CHARS[b8 >> 20 & 0x0F] + HEX_CHARS[b8 >> 16 & 0x0F] + HEX_CHARS[b8 >> 28 & 0x0F] + HEX_CHARS[b8 >> 24 & 0x0F] + HEX_CHARS[b9 >> 4 & 0x0F] + HEX_CHARS[b9 & 0x0F] + HEX_CHARS[b9 >> 12 & 0x0F] + HEX_CHARS[b9 >> 8 & 0x0F] + HEX_CHARS[b9 >> 20 & 0x0F] + HEX_CHARS[b9 >> 16 & 0x0F] + HEX_CHARS[b9 >> 28 & 0x0F] + HEX_CHARS[b9 >> 24 & 0x0F] + HEX_CHARS[b10 >> 4 & 0x0F] + HEX_CHARS[b10 & 0x0F] + HEX_CHARS[b10 >> 12 & 0x0F] + HEX_CHARS[b10 >> 8 & 0x0F] + HEX_CHARS[b10 >> 20 & 0x0F] + HEX_CHARS[b10 >> 16 & 0x0F] + HEX_CHARS[b10 >> 28 & 0x0F] + HEX_CHARS[b10 >> 24 & 0x0F] + HEX_CHARS[b11 >> 4 & 0x0F] + HEX_CHARS[b11 & 0x0F] + HEX_CHARS[b11 >> 12 & 0x0F] + HEX_CHARS[b11 >> 8 & 0x0F] + HEX_CHARS[b11 >> 20 & 0x0F] + HEX_CHARS[b11 >> 16 & 0x0F] + HEX_CHARS[b11 >> 28 & 0x0F] + HEX_CHARS[b11 >> 24 & 0x0F];
            }
            if (bits == 512) {
              hex += HEX_CHARS[b12 >> 4 & 0x0F] + HEX_CHARS[b12 & 0x0F] + HEX_CHARS[b12 >> 12 & 0x0F] + HEX_CHARS[b12 >> 8 & 0x0F] + HEX_CHARS[b12 >> 20 & 0x0F] + HEX_CHARS[b12 >> 16 & 0x0F] + HEX_CHARS[b12 >> 28 & 0x0F] + HEX_CHARS[b12 >> 24 & 0x0F] + HEX_CHARS[b13 >> 4 & 0x0F] + HEX_CHARS[b13 & 0x0F] + HEX_CHARS[b13 >> 12 & 0x0F] + HEX_CHARS[b13 >> 8 & 0x0F] + HEX_CHARS[b13 >> 20 & 0x0F] + HEX_CHARS[b13 >> 16 & 0x0F] + HEX_CHARS[b13 >> 28 & 0x0F] + HEX_CHARS[b13 >> 24 & 0x0F] + HEX_CHARS[b14 >> 4 & 0x0F] + HEX_CHARS[b14 & 0x0F] + HEX_CHARS[b14 >> 12 & 0x0F] + HEX_CHARS[b14 >> 8 & 0x0F] + HEX_CHARS[b14 >> 20 & 0x0F] + HEX_CHARS[b14 >> 16 & 0x0F] + HEX_CHARS[b14 >> 28 & 0x0F] + HEX_CHARS[b14 >> 24 & 0x0F] + HEX_CHARS[b15 >> 4 & 0x0F] + HEX_CHARS[b15 & 0x0F] + HEX_CHARS[b15 >> 12 & 0x0F] + HEX_CHARS[b15 >> 8 & 0x0F] + HEX_CHARS[b15 >> 20 & 0x0F] + HEX_CHARS[b15 >> 16 & 0x0F] + HEX_CHARS[b15 >> 28 & 0x0F] + HEX_CHARS[b15 >> 24 & 0x0F];
            }
          } else {
            for (i = 0, n = bits / 32; i < n; ++i) {
              h = s[i];
              hex += HEX_CHARS[h >> 4 & 0x0F] + HEX_CHARS[h & 0x0F] + HEX_CHARS[h >> 12 & 0x0F] + HEX_CHARS[h >> 8 & 0x0F] + HEX_CHARS[h >> 20 & 0x0F] + HEX_CHARS[h >> 16 & 0x0F] + HEX_CHARS[h >> 28 & 0x0F] + HEX_CHARS[h >> 24 & 0x0F];
            }
          }
          return hex;
        };

        if (!root.JS_SHA3_TEST && NODE_JS) {
          module.exports = {
            sha3_512: sha3_512,
            sha3_384: sha3_384,
            sha3_256: sha3_256,
            sha3_224: sha3_224,
            keccak_512: keccak,
            keccak_384: keccak_384,
            keccak_256: keccak_256,
            keccak_224: keccak_224
          };
        } else if (root) {
          root.sha3_512 = sha3_512;
          root.sha3_384 = sha3_384;
          root.sha3_256 = sha3_256;
          root.sha3_224 = sha3_224;
          root.keccak_512 = keccak;
          root.keccak_384 = keccak_384;
          root.keccak_256 = keccak_256;
          root.keccak_224 = keccak_224;
        }
      })(this);
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 162: [function (require, module, exports) {
    module.exports = require('browserify-sha3').SHA3Hash;
  }, { "browserify-sha3": 100 }], 163: [function (require, module, exports) {
    (function (global) {
      /**
       * marked - a markdown parser
       * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
       * https://github.com/chjj/marked
       */

      ;(function () {

        /**
         * Block-Level Grammar
         */

        var block = {
          newline: /^\n+/,
          code: /^( {4}[^\n]+\n*)+/,
          fences: noop,
          hr: /^( *[-*_]){3,} *(?:\n+|$)/,
          heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
          nptable: noop,
          lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
          blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
          list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
          html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
          def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
          table: noop,
          paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
          text: /^[^\n]+/
        };

        block.bullet = /(?:[*+-]|\d+\.)/;
        block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
        block.item = replace(block.item, 'gm')(/bull/g, block.bullet)();

        block.list = replace(block.list)(/bull/g, block.bullet)('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')('def', '\\n+(?=' + block.def.source + ')')();

        block.blockquote = replace(block.blockquote)('def', block.def)();

        block._tag = '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

        block.html = replace(block.html)('comment', /<!--[\s\S]*?-->/)('closed', /<(tag)[\s\S]+?<\/\1>/)('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g, block._tag)();

        block.paragraph = replace(block.paragraph)('hr', block.hr)('heading', block.heading)('lheading', block.lheading)('blockquote', block.blockquote)('tag', '<' + block._tag)('def', block.def)();

        /**
         * Normal Block Grammar
         */

        block.normal = merge({}, block);

        /**
         * GFM Block Grammar
         */

        block.gfm = merge({}, block.normal, {
          fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
          paragraph: /^/,
          heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
        });

        block.gfm.paragraph = replace(block.paragraph)('(?!', '(?!' + block.gfm.fences.source.replace('\\1', '\\2') + '|' + block.list.source.replace('\\1', '\\3') + '|')();

        /**
         * GFM + Tables Block Grammar
         */

        block.tables = merge({}, block.gfm, {
          nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
          table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
        });

        /**
         * Block Lexer
         */

        function Lexer(options) {
          this.tokens = [];
          this.tokens.links = {};
          this.options = options || marked.defaults;
          this.rules = block.normal;

          if (this.options.gfm) {
            if (this.options.tables) {
              this.rules = block.tables;
            } else {
              this.rules = block.gfm;
            }
          }
        }

        /**
         * Expose Block Rules
         */

        Lexer.rules = block;

        /**
         * Static Lex Method
         */

        Lexer.lex = function (src, options) {
          var lexer = new Lexer(options);
          return lexer.lex(src);
        };

        /**
         * Preprocessing
         */

        Lexer.prototype.lex = function (src) {
          src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ').replace(/\u00a0/g, ' ').replace(/\u2424/g, '\n');

          return this.token(src, true);
        };

        /**
         * Lexing
         */

        Lexer.prototype.token = function (src, top, bq) {
          var src = src.replace(/^ +$/gm, ''),
              next,
              loose,
              cap,
              bull,
              b,
              item,
              space,
              i,
              l;

          while (src) {
            // newline
            if (cap = this.rules.newline.exec(src)) {
              src = src.substring(cap[0].length);
              if (cap[0].length > 1) {
                this.tokens.push({
                  type: 'space'
                });
              }
            }

            // code
            if (cap = this.rules.code.exec(src)) {
              src = src.substring(cap[0].length);
              cap = cap[0].replace(/^ {4}/gm, '');
              this.tokens.push({
                type: 'code',
                text: !this.options.pedantic ? cap.replace(/\n+$/, '') : cap
              });
              continue;
            }

            // fences (gfm)
            if (cap = this.rules.fences.exec(src)) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'code',
                lang: cap[2],
                text: cap[3] || ''
              });
              continue;
            }

            // heading
            if (cap = this.rules.heading.exec(src)) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'heading',
                depth: cap[1].length,
                text: cap[2]
              });
              continue;
            }

            // table no leading pipe (gfm)
            if (top && (cap = this.rules.nptable.exec(src))) {
              src = src.substring(cap[0].length);

              item = {
                type: 'table',
                header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
                align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
                cells: cap[3].replace(/\n$/, '').split('\n')
              };

              for (i = 0; i < item.align.length; i++) {
                if (/^ *-+: *$/.test(item.align[i])) {
                  item.align[i] = 'right';
                } else if (/^ *:-+: *$/.test(item.align[i])) {
                  item.align[i] = 'center';
                } else if (/^ *:-+ *$/.test(item.align[i])) {
                  item.align[i] = 'left';
                } else {
                  item.align[i] = null;
                }
              }

              for (i = 0; i < item.cells.length; i++) {
                item.cells[i] = item.cells[i].split(/ *\| */);
              }

              this.tokens.push(item);

              continue;
            }

            // lheading
            if (cap = this.rules.lheading.exec(src)) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'heading',
                depth: cap[2] === '=' ? 1 : 2,
                text: cap[1]
              });
              continue;
            }

            // hr
            if (cap = this.rules.hr.exec(src)) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'hr'
              });
              continue;
            }

            // blockquote
            if (cap = this.rules.blockquote.exec(src)) {
              src = src.substring(cap[0].length);

              this.tokens.push({
                type: 'blockquote_start'
              });

              cap = cap[0].replace(/^ *> ?/gm, '');

              // Pass `top` to keep the current
              // "toplevel" state. This is exactly
              // how markdown.pl works.
              this.token(cap, top, true);

              this.tokens.push({
                type: 'blockquote_end'
              });

              continue;
            }

            // list
            if (cap = this.rules.list.exec(src)) {
              src = src.substring(cap[0].length);
              bull = cap[2];

              this.tokens.push({
                type: 'list_start',
                ordered: bull.length > 1
              });

              // Get each top-level item.
              cap = cap[0].match(this.rules.item);

              next = false;
              l = cap.length;
              i = 0;

              for (; i < l; i++) {
                item = cap[i];

                // Remove the list item's bullet
                // so it is seen as the next token.
                space = item.length;
                item = item.replace(/^ *([*+-]|\d+\.) +/, '');

                // Outdent whatever the
                // list item contains. Hacky.
                if (~item.indexOf('\n ')) {
                  space -= item.length;
                  item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
                }

                // Determine whether the next list item belongs here.
                // Backpedal if it does not belong in this list.
                if (this.options.smartLists && i !== l - 1) {
                  b = block.bullet.exec(cap[i + 1])[0];
                  if (bull !== b && !(bull.length > 1 && b.length > 1)) {
                    src = cap.slice(i + 1).join('\n') + src;
                    i = l - 1;
                  }
                }

                // Determine whether item is loose or not.
                // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
                // for discount behavior.
                loose = next || /\n\n(?!\s*$)/.test(item);
                if (i !== l - 1) {
                  next = item.charAt(item.length - 1) === '\n';
                  if (!loose) loose = next;
                }

                this.tokens.push({
                  type: loose ? 'loose_item_start' : 'list_item_start'
                });

                // Recurse.
                this.token(item, false, bq);

                this.tokens.push({
                  type: 'list_item_end'
                });
              }

              this.tokens.push({
                type: 'list_end'
              });

              continue;
            }

            // html
            if (cap = this.rules.html.exec(src)) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: this.options.sanitize ? 'paragraph' : 'html',
                pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
                text: cap[0]
              });
              continue;
            }

            // def
            if (!bq && top && (cap = this.rules.def.exec(src))) {
              src = src.substring(cap[0].length);
              this.tokens.links[cap[1].toLowerCase()] = {
                href: cap[2],
                title: cap[3]
              };
              continue;
            }

            // table (gfm)
            if (top && (cap = this.rules.table.exec(src))) {
              src = src.substring(cap[0].length);

              item = {
                type: 'table',
                header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
                align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
                cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
              };

              for (i = 0; i < item.align.length; i++) {
                if (/^ *-+: *$/.test(item.align[i])) {
                  item.align[i] = 'right';
                } else if (/^ *:-+: *$/.test(item.align[i])) {
                  item.align[i] = 'center';
                } else if (/^ *:-+ *$/.test(item.align[i])) {
                  item.align[i] = 'left';
                } else {
                  item.align[i] = null;
                }
              }

              for (i = 0; i < item.cells.length; i++) {
                item.cells[i] = item.cells[i].replace(/^ *\| *| *\| *$/g, '').split(/ *\| */);
              }

              this.tokens.push(item);

              continue;
            }

            // top-level paragraph
            if (top && (cap = this.rules.paragraph.exec(src))) {
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'paragraph',
                text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
              });
              continue;
            }

            // text
            if (cap = this.rules.text.exec(src)) {
              // Top-level should never reach here.
              src = src.substring(cap[0].length);
              this.tokens.push({
                type: 'text',
                text: cap[0]
              });
              continue;
            }

            if (src) {
              throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
            }
          }

          return this.tokens;
        };

        /**
         * Inline-Level Grammar
         */

        var inline = {
          escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
          autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
          url: noop,
          tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
          link: /^!?\[(inside)\]\(href\)/,
          reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
          nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
          strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
          em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
          code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
          br: /^ {2,}\n(?!\s*$)/,
          del: noop,
          text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
        };

        inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
        inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

        inline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)();

        inline.reflink = replace(inline.reflink)('inside', inline._inside)();

        /**
         * Normal Inline Grammar
         */

        inline.normal = merge({}, inline);

        /**
         * Pedantic Inline Grammar
         */

        inline.pedantic = merge({}, inline.normal, {
          strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
          em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
        });

        /**
         * GFM Inline Grammar
         */

        inline.gfm = merge({}, inline.normal, {
          escape: replace(inline.escape)('])', '~|])')(),
          url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
          del: /^~~(?=\S)([\s\S]*?\S)~~/,
          text: replace(inline.text)(']|', '~]|')('|', '|https?://|')()
        });

        /**
         * GFM + Line Breaks Inline Grammar
         */

        inline.breaks = merge({}, inline.gfm, {
          br: replace(inline.br)('{2,}', '*')(),
          text: replace(inline.gfm.text)('{2,}', '*')()
        });

        /**
         * Inline Lexer & Compiler
         */

        function InlineLexer(links, options) {
          this.options = options || marked.defaults;
          this.links = links;
          this.rules = inline.normal;
          this.renderer = this.options.renderer || new Renderer();
          this.renderer.options = this.options;

          if (!this.links) {
            throw new Error('Tokens array requires a `links` property.');
          }

          if (this.options.gfm) {
            if (this.options.breaks) {
              this.rules = inline.breaks;
            } else {
              this.rules = inline.gfm;
            }
          } else if (this.options.pedantic) {
            this.rules = inline.pedantic;
          }
        }

        /**
         * Expose Inline Rules
         */

        InlineLexer.rules = inline;

        /**
         * Static Lexing/Compiling Method
         */

        InlineLexer.output = function (src, links, options) {
          var inline = new InlineLexer(links, options);
          return inline.output(src);
        };

        /**
         * Lexing/Compiling
         */

        InlineLexer.prototype.output = function (src) {
          var out = '',
              link,
              text,
              href,
              cap;

          while (src) {
            // escape
            if (cap = this.rules.escape.exec(src)) {
              src = src.substring(cap[0].length);
              out += cap[1];
              continue;
            }

            // autolink
            if (cap = this.rules.autolink.exec(src)) {
              src = src.substring(cap[0].length);
              if (cap[2] === '@') {
                text = cap[1].charAt(6) === ':' ? this.mangle(cap[1].substring(7)) : this.mangle(cap[1]);
                href = this.mangle('mailto:') + text;
              } else {
                text = escape(cap[1]);
                href = text;
              }
              out += this.renderer.link(href, null, text);
              continue;
            }

            // url (gfm)
            if (!this.inLink && (cap = this.rules.url.exec(src))) {
              src = src.substring(cap[0].length);
              text = escape(cap[1]);
              href = text;
              out += this.renderer.link(href, null, text);
              continue;
            }

            // tag
            if (cap = this.rules.tag.exec(src)) {
              if (!this.inLink && /^<a /i.test(cap[0])) {
                this.inLink = true;
              } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
                this.inLink = false;
              }
              src = src.substring(cap[0].length);
              out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
              continue;
            }

            // link
            if (cap = this.rules.link.exec(src)) {
              src = src.substring(cap[0].length);
              this.inLink = true;
              out += this.outputLink(cap, {
                href: cap[2],
                title: cap[3]
              });
              this.inLink = false;
              continue;
            }

            // reflink, nolink
            if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {
              src = src.substring(cap[0].length);
              link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
              link = this.links[link.toLowerCase()];
              if (!link || !link.href) {
                out += cap[0].charAt(0);
                src = cap[0].substring(1) + src;
                continue;
              }
              this.inLink = true;
              out += this.outputLink(cap, link);
              this.inLink = false;
              continue;
            }

            // strong
            if (cap = this.rules.strong.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.strong(this.output(cap[2] || cap[1]));
              continue;
            }

            // em
            if (cap = this.rules.em.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.em(this.output(cap[2] || cap[1]));
              continue;
            }

            // code
            if (cap = this.rules.code.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.codespan(escape(cap[2], true));
              continue;
            }

            // br
            if (cap = this.rules.br.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.br();
              continue;
            }

            // del (gfm)
            if (cap = this.rules.del.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.del(this.output(cap[1]));
              continue;
            }

            // text
            if (cap = this.rules.text.exec(src)) {
              src = src.substring(cap[0].length);
              out += this.renderer.text(escape(this.smartypants(cap[0])));
              continue;
            }

            if (src) {
              throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
            }
          }

          return out;
        };

        /**
         * Compile Link
         */

        InlineLexer.prototype.outputLink = function (cap, link) {
          var href = escape(link.href),
              title = link.title ? escape(link.title) : null;

          return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));
        };

        /**
         * Smartypants Transformations
         */

        InlineLexer.prototype.smartypants = function (text) {
          if (!this.options.smartypants) return text;
          return text
          // em-dashes
          .replace(/---/g, '\u2014')
          // en-dashes
          .replace(/--/g, '\u2013')
          // opening singles
          .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
          // closing singles & apostrophes
          .replace(/'/g, '\u2019')
          // opening doubles
          .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
          // closing doubles
          .replace(/"/g, '\u201d')
          // ellipses
          .replace(/\.{3}/g, '\u2026');
        };

        /**
         * Mangle Links
         */

        InlineLexer.prototype.mangle = function (text) {
          if (!this.options.mangle) return text;
          var out = '',
              l = text.length,
              i = 0,
              ch;

          for (; i < l; i++) {
            ch = text.charCodeAt(i);
            if (Math.random() > 0.5) {
              ch = 'x' + ch.toString(16);
            }
            out += '&#' + ch + ';';
          }

          return out;
        };

        /**
         * Renderer
         */

        function Renderer(options) {
          this.options = options || {};
        }

        Renderer.prototype.code = function (code, lang, escaped) {
          if (this.options.highlight) {
            var out = this.options.highlight(code, lang);
            if (out != null && out !== code) {
              escaped = true;
              code = out;
            }
          }

          if (!lang) {
            return '<pre><code>' + (escaped ? code : escape(code, true)) + '\n</code></pre>';
          }

          return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? code : escape(code, true)) + '\n</code></pre>\n';
        };

        Renderer.prototype.blockquote = function (quote) {
          return '<blockquote>\n' + quote + '</blockquote>\n';
        };

        Renderer.prototype.html = function (html) {
          return html;
        };

        Renderer.prototype.heading = function (text, level, raw) {
          return '<h' + level + ' id="' + this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-') + '">' + text + '</h' + level + '>\n';
        };

        Renderer.prototype.hr = function () {
          return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
        };

        Renderer.prototype.list = function (body, ordered) {
          var type = ordered ? 'ol' : 'ul';
          return '<' + type + '>\n' + body + '</' + type + '>\n';
        };

        Renderer.prototype.listitem = function (text) {
          return '<li>' + text + '</li>\n';
        };

        Renderer.prototype.paragraph = function (text) {
          return '<p>' + text + '</p>\n';
        };

        Renderer.prototype.table = function (header, body) {
          return '<table>\n' + '<thead>\n' + header + '</thead>\n' + '<tbody>\n' + body + '</tbody>\n' + '</table>\n';
        };

        Renderer.prototype.tablerow = function (content) {
          return '<tr>\n' + content + '</tr>\n';
        };

        Renderer.prototype.tablecell = function (content, flags) {
          var type = flags.header ? 'th' : 'td';
          var tag = flags.align ? '<' + type + ' style="text-align:' + flags.align + '">' : '<' + type + '>';
          return tag + content + '</' + type + '>\n';
        };

        // span level renderer
        Renderer.prototype.strong = function (text) {
          return '<strong>' + text + '</strong>';
        };

        Renderer.prototype.em = function (text) {
          return '<em>' + text + '</em>';
        };

        Renderer.prototype.codespan = function (text) {
          return '<code>' + text + '</code>';
        };

        Renderer.prototype.br = function () {
          return this.options.xhtml ? '<br/>' : '<br>';
        };

        Renderer.prototype.del = function (text) {
          return '<del>' + text + '</del>';
        };

        Renderer.prototype.link = function (href, title, text) {
          if (this.options.sanitize) {
            try {
              var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
            } catch (e) {
              return '';
            }
            if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
              return '';
            }
          }
          var out = '<a href="' + href + '"';
          if (title) {
            out += ' title="' + title + '"';
          }
          out += '>' + text + '</a>';
          return out;
        };

        Renderer.prototype.image = function (href, title, text) {
          var out = '<img src="' + href + '" alt="' + text + '"';
          if (title) {
            out += ' title="' + title + '"';
          }
          out += this.options.xhtml ? '/>' : '>';
          return out;
        };

        Renderer.prototype.text = function (text) {
          return text;
        };

        /**
         * Parsing & Compiling
         */

        function Parser(options) {
          this.tokens = [];
          this.token = null;
          this.options = options || marked.defaults;
          this.options.renderer = this.options.renderer || new Renderer();
          this.renderer = this.options.renderer;
          this.renderer.options = this.options;
        }

        /**
         * Static Parse Method
         */

        Parser.parse = function (src, options, renderer) {
          var parser = new Parser(options, renderer);
          return parser.parse(src);
        };

        /**
         * Parse Loop
         */

        Parser.prototype.parse = function (src) {
          this.inline = new InlineLexer(src.links, this.options, this.renderer);
          this.tokens = src.reverse();

          var out = '';
          while (this.next()) {
            out += this.tok();
          }

          return out;
        };

        /**
         * Next Token
         */

        Parser.prototype.next = function () {
          return this.token = this.tokens.pop();
        };

        /**
         * Preview Next Token
         */

        Parser.prototype.peek = function () {
          return this.tokens[this.tokens.length - 1] || 0;
        };

        /**
         * Parse Text Tokens
         */

        Parser.prototype.parseText = function () {
          var body = this.token.text;

          while (this.peek().type === 'text') {
            body += '\n' + this.next().text;
          }

          return this.inline.output(body);
        };

        /**
         * Parse Current Token
         */

        Parser.prototype.tok = function () {
          switch (this.token.type) {
            case 'space':
              {
                return '';
              }
            case 'hr':
              {
                return this.renderer.hr();
              }
            case 'heading':
              {
                return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, this.token.text);
              }
            case 'code':
              {
                return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
              }
            case 'table':
              {
                var header = '',
                    body = '',
                    i,
                    row,
                    cell,
                    flags,
                    j;

                // header
                cell = '';
                for (i = 0; i < this.token.header.length; i++) {
                  flags = { header: true, align: this.token.align[i] };
                  cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), { header: true, align: this.token.align[i] });
                }
                header += this.renderer.tablerow(cell);

                for (i = 0; i < this.token.cells.length; i++) {
                  row = this.token.cells[i];

                  cell = '';
                  for (j = 0; j < row.length; j++) {
                    cell += this.renderer.tablecell(this.inline.output(row[j]), { header: false, align: this.token.align[j] });
                  }

                  body += this.renderer.tablerow(cell);
                }
                return this.renderer.table(header, body);
              }
            case 'blockquote_start':
              {
                var body = '';

                while (this.next().type !== 'blockquote_end') {
                  body += this.tok();
                }

                return this.renderer.blockquote(body);
              }
            case 'list_start':
              {
                var body = '',
                    ordered = this.token.ordered;

                while (this.next().type !== 'list_end') {
                  body += this.tok();
                }

                return this.renderer.list(body, ordered);
              }
            case 'list_item_start':
              {
                var body = '';

                while (this.next().type !== 'list_item_end') {
                  body += this.token.type === 'text' ? this.parseText() : this.tok();
                }

                return this.renderer.listitem(body);
              }
            case 'loose_item_start':
              {
                var body = '';

                while (this.next().type !== 'list_item_end') {
                  body += this.tok();
                }

                return this.renderer.listitem(body);
              }
            case 'html':
              {
                var html = !this.token.pre && !this.options.pedantic ? this.inline.output(this.token.text) : this.token.text;
                return this.renderer.html(html);
              }
            case 'paragraph':
              {
                return this.renderer.paragraph(this.inline.output(this.token.text));
              }
            case 'text':
              {
                return this.renderer.paragraph(this.parseText());
              }
          }
        };

        /**
         * Helpers
         */

        function escape(html, encode) {
          return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
        }

        function unescape(html) {
          // explicitly match decimal, hex, and named HTML entities 
          return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function (_, n) {
            n = n.toLowerCase();
            if (n === 'colon') return ':';
            if (n.charAt(0) === '#') {
              return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
            }
            return '';
          });
        }

        function replace(regex, opt) {
          regex = regex.source;
          opt = opt || '';
          return function self(name, val) {
            if (!name) return new RegExp(regex, opt);
            val = val.source || val;
            val = val.replace(/(^|[^\[])\^/g, '$1');
            regex = regex.replace(name, val);
            return self;
          };
        }

        function noop() {}
        noop.exec = noop;

        function merge(obj) {
          var i = 1,
              target,
              key;

          for (; i < arguments.length; i++) {
            target = arguments[i];
            for (key in target) {
              if (Object.prototype.hasOwnProperty.call(target, key)) {
                obj[key] = target[key];
              }
            }
          }

          return obj;
        }

        /**
         * Marked
         */

        function marked(src, opt, callback) {
          if (callback || typeof opt === 'function') {
            if (!callback) {
              callback = opt;
              opt = null;
            }

            opt = merge({}, marked.defaults, opt || {});

            var highlight = opt.highlight,
                tokens,
                pending,
                i = 0;

            try {
              tokens = Lexer.lex(src, opt);
            } catch (e) {
              return callback(e);
            }

            pending = tokens.length;

            var done = function (err) {
              if (err) {
                opt.highlight = highlight;
                return callback(err);
              }

              var out;

              try {
                out = Parser.parse(tokens, opt);
              } catch (e) {
                err = e;
              }

              opt.highlight = highlight;

              return err ? callback(err) : callback(null, out);
            };

            if (!highlight || highlight.length < 3) {
              return done();
            }

            delete opt.highlight;

            if (!pending) return done();

            for (; i < tokens.length; i++) {
              (function (token) {
                if (token.type !== 'code') {
                  return --pending || done();
                }
                return highlight(token.text, token.lang, function (err, code) {
                  if (err) return done(err);
                  if (code == null || code === token.text) {
                    return --pending || done();
                  }
                  token.text = code;
                  token.escaped = true;
                  --pending || done();
                });
              })(tokens[i]);
            }

            return;
          }
          try {
            if (opt) opt = merge({}, marked.defaults, opt);
            return Parser.parse(Lexer.lex(src, opt), opt);
          } catch (e) {
            e.message += '\nPlease report this to https://github.com/chjj/marked.';
            if ((opt || marked.defaults).silent) {
              return '<p>An error occured:</p><pre>' + escape(e.message + '', true) + '</pre>';
            }
            throw e;
          }
        }

        /**
         * Options
         */

        marked.options = marked.setOptions = function (opt) {
          merge(marked.defaults, opt);
          return marked;
        };

        marked.defaults = {
          gfm: true,
          tables: true,
          breaks: false,
          pedantic: false,
          sanitize: false,
          sanitizer: null,
          mangle: true,
          smartLists: false,
          silent: false,
          highlight: null,
          langPrefix: 'lang-',
          smartypants: false,
          headerPrefix: '',
          renderer: new Renderer(),
          xhtml: false
        };

        /**
         * Expose
         */

        marked.Parser = Parser;
        marked.parser = Parser.parse;

        marked.Renderer = Renderer;

        marked.Lexer = Lexer;
        marked.lexer = Lexer.lex;

        marked.InlineLexer = InlineLexer;
        marked.inlineLexer = InlineLexer.output;

        marked.parse = marked;

        if (typeof module !== 'undefined' && typeof exports === 'object') {
          module.exports = marked;
        } else if (typeof define === 'function' && define.amd) {
          define(function () {
            return marked;
          });
        } else {
          this.marked = marked;
        }
      }).call(function () {
        return this || (typeof window !== 'undefined' ? window : global);
      }());
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 164: [function (require, module, exports) {
    var bn = require('bn.js');
    var brorand = require('brorand');

    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;

    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };

    MillerRabin.prototype._rand = function _rand(n) {
      var len = n.bitLength();
      var buf = this.rand.generate(Math.ceil(len / 8));

      // Set low bits
      buf[0] |= 3;

      // Mask high bits
      var mask = len & 0x7;
      if (mask !== 0) buf[buf.length - 1] >>= 7 - mask;

      return new bn(buf);
    };

    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);

      if (!k) k = Math.max(1, len / 48 | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      var n2 = n1.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      var prime = true;
      for (; k > 0; k--) {
        var a = this._rand(n2);
        if (cb) cb(a);

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0) return false;
          if (x.cmp(rn1) === 0) break;
        }

        if (i === s) return false;
      }

      return prime;
    };

    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);

      if (!k) k = Math.max(1, len / 48 | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      var n2 = n1.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      for (; k > 0; k--) {
        var a = this._rand(n2);

        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0) break;
        }

        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }

      return false;
    };
  }, { "bn.js": 78, "brorand": 79 }], 165: [function (require, module, exports) {
    module.exports = assert;

    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
    };
  }, {}], 166: [function (require, module, exports) {
    module.exports = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
  }, {}], 167: [function (require, module, exports) {
    // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
    // Fedor, you are amazing.

    var asn1 = require('asn1.js');

    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
    });
    exports.RSAPrivateKey = RSAPrivateKey;

    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
      this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
    });
    exports.RSAPublicKey = RSAPublicKey;

    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
    });
    exports.PublicKey = PublicKey;

    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
      this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
    });

    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
      this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
    });
    exports.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
    });

    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
    });
    exports.DSAPrivateKey = DSAPrivateKey;

    exports.DSAparam = asn1.define('DSAparam', function () {
      this.int();
    });
    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
      this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
    });
    exports.ECPrivateKey = ECPrivateKey;
    var ECParameters = asn1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      });
    });

    exports.signature = asn1.define('signature', function () {
      this.seq().obj(this.key('r').int(), this.key('s').int());
    });
  }, { "asn1.js": 60 }], 168: [function (require, module, exports) {
    (function (Buffer) {
      // adapted from https://github.com/apatil/pemstrip
      var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
      var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m;
      var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
      var evp = require('evp_bytestokey');
      var ciphers = require('browserify-aes');
      module.exports = function (okey, password) {
        var key = okey.toString();
        var match = key.match(findProc);
        var decrypted;
        if (!match) {
          var match2 = key.match(fullRegex);
          decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
        } else {
          var suite = 'aes' + match[1];
          var iv = new Buffer(match[2], 'hex');
          var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
          var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
          var out = [];
          var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
          out.push(cipher.update(cipherText));
          out.push(cipher.final());
          decrypted = Buffer.concat(out);
        }
        var tag = key.match(startRegex)[1] + ' KEY';
        return {
          tag: tag,
          data: decrypted
        };
      };
    }).call(this, require("buffer").Buffer);
  }, { "browserify-aes": 83, "buffer": 108, "evp_bytestokey": 149 }], 169: [function (require, module, exports) {
    (function (Buffer) {
      var asn1 = require('./asn1');
      var aesid = require('./aesid.json');
      var fixProc = require('./fixProc');
      var ciphers = require('browserify-aes');
      var compat = require('pbkdf2');
      module.exports = parseKeys;

      function parseKeys(buffer) {
        var password;
        if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
          password = buffer.passphrase;
          buffer = buffer.key;
        }
        if (typeof buffer === 'string') {
          buffer = new Buffer(buffer);
        }

        var stripped = fixProc(buffer, password);

        var type = stripped.tag;
        var data = stripped.data;
        var subtype, ndata;
        switch (type) {
          case 'PUBLIC KEY':
            ndata = asn1.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch (subtype) {
              case '1.2.840.113549.1.1.1':
                return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
              case '1.2.840.10045.2.1':
                ndata.subjectPrivateKey = ndata.subjectPublicKey;
                return {
                  type: 'ec',
                  data: ndata
                };
              case '1.2.840.10040.4.1':
                ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                return {
                  type: 'dsa',
                  data: ndata.algorithm.params
                };
              default:
                throw new Error('unknown key id ' + subtype);
            }
            throw new Error('unknown key type ' + type);
          case 'ENCRYPTED PRIVATE KEY':
            data = asn1.EncryptedPrivateKey.decode(data, 'der');
            data = decrypt(data, password);
          // falls through
          case 'PRIVATE KEY':
            ndata = asn1.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch (subtype) {
              case '1.2.840.113549.1.1.1':
                return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
              case '1.2.840.10045.2.1':
                return {
                  curve: ndata.algorithm.curve,
                  privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                };
              case '1.2.840.10040.4.1':
                ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                return {
                  type: 'dsa',
                  params: ndata.algorithm.params
                };
              default:
                throw new Error('unknown key id ' + subtype);
            }
            throw new Error('unknown key type ' + type);
          case 'RSA PUBLIC KEY':
            return asn1.RSAPublicKey.decode(data, 'der');
          case 'RSA PRIVATE KEY':
            return asn1.RSAPrivateKey.decode(data, 'der');
          case 'DSA PRIVATE KEY':
            return {
              type: 'dsa',
              params: asn1.DSAPrivateKey.decode(data, 'der')
            };
          case 'EC PRIVATE KEY':
            data = asn1.ECPrivateKey.decode(data, 'der');
            return {
              curve: data.parameters.value,
              privateKey: data.privateKey
            };
          default:
            throw new Error('unknown key type ' + type);
        }
      }
      parseKeys.signature = asn1.signature;
      function decrypt(data, password) {
        var salt = data.algorithm.decrypt.kde.kdeparams.salt;
        var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
        var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
        var iv = data.algorithm.decrypt.cipher.iv;
        var cipherText = data.subjectPrivateKey;
        var keylen = parseInt(algo.split('-')[1], 10) / 8;
        var key = compat.pbkdf2Sync(password, salt, iters, keylen);
        var cipher = ciphers.createDecipheriv(algo, key, iv);
        var out = [];
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        return Buffer.concat(out);
      }
    }).call(this, require("buffer").Buffer);
  }, { "./aesid.json": 166, "./asn1": 167, "./fixProc": 168, "browserify-aes": 83, "buffer": 108, "pbkdf2": 170 }], 170: [function (require, module, exports) {
    (function (process, Buffer) {
      var createHmac = require('create-hmac');
      var checkParameters = require('./precondition');

      exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
        if (typeof digest === 'function') {
          callback = digest;
          digest = undefined;
        }

        checkParameters(iterations, keylen);
        if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');

        setTimeout(function () {
          callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest));
        });
      };

      var defaultEncoding;
      if (process.browser) {
        defaultEncoding = 'utf-8';
      } else {
        var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

        defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
      }

      exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
        if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding);
        if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding);

        checkParameters(iterations, keylen);

        digest = digest || 'sha1';

        var hLen;
        var l = 1;
        var DK = new Buffer(keylen);
        var block1 = new Buffer(salt.length + 4);
        salt.copy(block1, 0, 0, salt.length);

        var r;
        var T;

        for (var i = 1; i <= l; i++) {
          block1.writeUInt32BE(i, salt.length);
          var U = createHmac(digest, password).update(block1).digest();

          if (!hLen) {
            hLen = U.length;
            T = new Buffer(hLen);
            l = Math.ceil(keylen / hLen);
            r = keylen - (l - 1) * hLen;
          }

          U.copy(T, 0, 0, hLen);

          for (var j = 1; j < iterations; j++) {
            U = createHmac(digest, password).update(U).digest();
            for (var k = 0; k < hLen; k++) T[k] ^= U[k];
          }

          var destPos = (i - 1) * hLen;
          var len = i === l ? r : hLen;
          T.copy(DK, destPos, 0, len);
        }

        return DK;
      };
    }).call(this, require('_process'), require("buffer").Buffer);
  }, { "./precondition": 171, "_process": 173, "buffer": 108, "create-hmac": 115 }], 171: [function (require, module, exports) {
    var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
    module.exports = function (iterations, keylen) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number');
      }

      if (iterations < 0) {
        throw new TypeError('Bad iterations');
      }

      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number');
      }

      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length');
      }
    };
  }, {}], 172: [function (require, module, exports) {
    (function (process) {
      'use strict';

      if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
        module.exports = nextTick;
      } else {
        module.exports = process.nextTick;
      }

      function nextTick(fn, arg1, arg2, arg3) {
        if (typeof fn !== 'function') {
          throw new TypeError('"callback" argument must be a function');
        }
        var len = arguments.length;
        var args, i;
        switch (len) {
          case 0:
          case 1:
            return process.nextTick(fn);
          case 2:
            return process.nextTick(function afterTickOne() {
              fn.call(null, arg1);
            });
          case 3:
            return process.nextTick(function afterTickTwo() {
              fn.call(null, arg1, arg2);
            });
          case 4:
            return process.nextTick(function afterTickThree() {
              fn.call(null, arg1, arg2, arg3);
            });
          default:
            args = new Array(len - 1);
            i = 0;
            while (i < args.length) {
              args[i++] = arguments[i];
            }
            return process.nextTick(function afterTick() {
              fn.apply(null, args);
            });
        }
      }
    }).call(this, require('_process'));
  }, { "_process": 173 }], 173: [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }
    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };
    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
      return 0;
    };
  }, {}], 174: [function (require, module, exports) {
    exports.publicEncrypt = require('./publicEncrypt');
    exports.privateDecrypt = require('./privateDecrypt');

    exports.privateEncrypt = function privateEncrypt(key, buf) {
      return exports.publicEncrypt(key, buf, true);
    };

    exports.publicDecrypt = function publicDecrypt(key, buf) {
      return exports.privateDecrypt(key, buf, true);
    };
  }, { "./privateDecrypt": 176, "./publicEncrypt": 177 }], 175: [function (require, module, exports) {
    (function (Buffer) {
      var createHash = require('create-hash');
      module.exports = function (seed, len) {
        var t = new Buffer('');
        var i = 0,
            c;
        while (t.length < len) {
          c = i2ops(i++);
          t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
        }
        return t.slice(0, len);
      };

      function i2ops(c) {
        var out = new Buffer(4);
        out.writeUInt32BE(c, 0);
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "create-hash": 112 }], 176: [function (require, module, exports) {
    (function (Buffer) {
      var parseKeys = require('parse-asn1');
      var mgf = require('./mgf');
      var xor = require('./xor');
      var bn = require('bn.js');
      var crt = require('browserify-rsa');
      var createHash = require('create-hash');
      var withPublic = require('./withPublic');
      module.exports = function privateDecrypt(private_key, enc, reverse) {
        var padding;
        if (private_key.padding) {
          padding = private_key.padding;
        } else if (reverse) {
          padding = 1;
        } else {
          padding = 4;
        }

        var key = parseKeys(private_key);
        var k = key.modulus.byteLength();
        if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
          throw new Error('decryption error');
        }
        var msg;
        if (reverse) {
          msg = withPublic(new bn(enc), key);
        } else {
          msg = crt(enc, key);
        }
        var zBuffer = new Buffer(k - msg.length);
        zBuffer.fill(0);
        msg = Buffer.concat([zBuffer, msg], k);
        if (padding === 4) {
          return oaep(key, msg);
        } else if (padding === 1) {
          return pkcs1(key, msg, reverse);
        } else if (padding === 3) {
          return msg;
        } else {
          throw new Error('unknown padding');
        }
      };

      function oaep(key, msg) {
        var n = key.modulus;
        var k = key.modulus.byteLength();
        var mLen = msg.length;
        var iHash = createHash('sha1').update(new Buffer('')).digest();
        var hLen = iHash.length;
        var hLen2 = 2 * hLen;
        if (msg[0] !== 0) {
          throw new Error('decryption error');
        }
        var maskedSeed = msg.slice(1, hLen + 1);
        var maskedDb = msg.slice(hLen + 1);
        var seed = xor(maskedSeed, mgf(maskedDb, hLen));
        var db = xor(maskedDb, mgf(seed, k - hLen - 1));
        if (compare(iHash, db.slice(0, hLen))) {
          throw new Error('decryption error');
        }
        var i = hLen;
        while (db[i] === 0) {
          i++;
        }
        if (db[i++] !== 1) {
          throw new Error('decryption error');
        }
        return db.slice(i);
      }

      function pkcs1(key, msg, reverse) {
        var p1 = msg.slice(0, 2);
        var i = 2;
        var status = 0;
        while (msg[i++] !== 0) {
          if (i >= msg.length) {
            status++;
            break;
          }
        }
        var ps = msg.slice(2, i - 1);
        var p2 = msg.slice(i - 1, i);

        if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
          status++;
        }
        if (ps.length < 8) {
          status++;
        }
        if (status) {
          throw new Error('decryption error');
        }
        return msg.slice(i);
      }
      function compare(a, b) {
        a = new Buffer(a);
        b = new Buffer(b);
        var dif = 0;
        var len = a.length;
        if (a.length !== b.length) {
          dif++;
          len = Math.min(a.length, b.length);
        }
        var i = -1;
        while (++i < len) {
          dif += a[i] ^ b[i];
        }
        return dif;
      }
    }).call(this, require("buffer").Buffer);
  }, { "./mgf": 175, "./withPublic": 178, "./xor": 179, "bn.js": 78, "browserify-rsa": 99, "buffer": 108, "create-hash": 112, "parse-asn1": 169 }], 177: [function (require, module, exports) {
    (function (Buffer) {
      var parseKeys = require('parse-asn1');
      var randomBytes = require('randombytes');
      var createHash = require('create-hash');
      var mgf = require('./mgf');
      var xor = require('./xor');
      var bn = require('bn.js');
      var withPublic = require('./withPublic');
      var crt = require('browserify-rsa');

      var constants = {
        RSA_PKCS1_OAEP_PADDING: 4,
        RSA_PKCS1_PADDIN: 1,
        RSA_NO_PADDING: 3
      };

      module.exports = function publicEncrypt(public_key, msg, reverse) {
        var padding;
        if (public_key.padding) {
          padding = public_key.padding;
        } else if (reverse) {
          padding = 1;
        } else {
          padding = 4;
        }
        var key = parseKeys(public_key);
        var paddedMsg;
        if (padding === 4) {
          paddedMsg = oaep(key, msg);
        } else if (padding === 1) {
          paddedMsg = pkcs1(key, msg, reverse);
        } else if (padding === 3) {
          paddedMsg = new bn(msg);
          if (paddedMsg.cmp(key.modulus) >= 0) {
            throw new Error('data too long for modulus');
          }
        } else {
          throw new Error('unknown padding');
        }
        if (reverse) {
          return crt(paddedMsg, key);
        } else {
          return withPublic(paddedMsg, key);
        }
      };

      function oaep(key, msg) {
        var k = key.modulus.byteLength();
        var mLen = msg.length;
        var iHash = createHash('sha1').update(new Buffer('')).digest();
        var hLen = iHash.length;
        var hLen2 = 2 * hLen;
        if (mLen > k - hLen2 - 2) {
          throw new Error('message too long');
        }
        var ps = new Buffer(k - mLen - hLen2 - 2);
        ps.fill(0);
        var dblen = k - hLen - 1;
        var seed = randomBytes(hLen);
        var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
        var maskedSeed = xor(seed, mgf(maskedDb, hLen));
        return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
      }
      function pkcs1(key, msg, reverse) {
        var mLen = msg.length;
        var k = key.modulus.byteLength();
        if (mLen > k - 11) {
          throw new Error('message too long');
        }
        var ps;
        if (reverse) {
          ps = new Buffer(k - mLen - 3);
          ps.fill(0xff);
        } else {
          ps = nonZero(k - mLen - 3);
        }
        return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
      }
      function nonZero(len, crypto) {
        var out = new Buffer(len);
        var i = 0;
        var cache = randomBytes(len * 2);
        var cur = 0;
        var num;
        while (i < len) {
          if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
          }
          num = cache[cur++];
          if (num) {
            out[i++] = num;
          }
        }
        return out;
      }
    }).call(this, require("buffer").Buffer);
  }, { "./mgf": 175, "./withPublic": 178, "./xor": 179, "bn.js": 78, "browserify-rsa": 99, "buffer": 108, "create-hash": 112, "parse-asn1": 169, "randombytes": 180 }], 178: [function (require, module, exports) {
    (function (Buffer) {
      var bn = require('bn.js');
      function withPublic(paddedMsg, key) {
        return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
      }

      module.exports = withPublic;
    }).call(this, require("buffer").Buffer);
  }, { "bn.js": 78, "buffer": 108 }], 179: [function (require, module, exports) {
    module.exports = function xor(a, b) {
      var len = a.length;
      var i = -1;
      while (++i < len) {
        a[i] ^= b[i];
      }
      return a;
    };
  }, {}], 180: [function (require, module, exports) {
    (function (process, global, Buffer) {
      'use strict';

      function oldBrowser() {
        throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
      }

      var crypto = global.crypto || global.msCrypto;

      if (crypto && crypto.getRandomValues) {
        module.exports = randomBytes;
      } else {
        module.exports = oldBrowser;
      }

      function randomBytes(size, cb) {
        // phantomjs needs to throw
        if (size > 65536) throw new Error('requested too many random bytes');
        // in case browserify  isn't using the Uint8Array version
        var rawBytes = new global.Uint8Array(size);

        // This will not work in older browsers.
        // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        if (size > 0) {
          // getRandomValues fails on IE if size == 0
          crypto.getRandomValues(rawBytes);
        }
        // phantomjs doesn't like a buffer being passed here
        var bytes = new Buffer(rawBytes.buffer);

        if (typeof cb === 'function') {
          return process.nextTick(function () {
            cb(null, bytes);
          });
        }

        return bytes;
      }
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer);
  }, { "_process": 173, "buffer": 108 }], 181: [function (require, module, exports) {
    module.exports = require("./lib/_stream_duplex.js");
  }, { "./lib/_stream_duplex.js": 182 }], 182: [function (require, module, exports) {
    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.

    'use strict';

    /*<replacement>*/

    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        keys.push(key);
      }return keys;
    };
    /*</replacement>*/

    module.exports = Duplex;

    /*<replacement>*/
    var processNextTick = require('process-nextick-args');
    /*</replacement>*/

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    var Readable = require('./_stream_readable');
    var Writable = require('./_stream_writable');

    util.inherits(Duplex, Readable);

    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }

    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      processNextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }
  }, { "./_stream_readable": 184, "./_stream_writable": 186, "core-util-is": 110, "inherits": 158, "process-nextick-args": 172 }], 183: [function (require, module, exports) {
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.

    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, { "./_stream_transform": 185, "core-util-is": 110, "inherits": 158 }], 184: [function (require, module, exports) {
    (function (process) {
      'use strict';

      module.exports = Readable;

      /*<replacement>*/
      var processNextTick = require('process-nextick-args');
      /*</replacement>*/

      /*<replacement>*/
      var isArray = require('isarray');
      /*</replacement>*/

      Readable.ReadableState = ReadableState;

      /*<replacement>*/
      var EE = require('events').EventEmitter;

      var EElistenerCount = function (emitter, type) {
        return emitter.listeners(type).length;
      };
      /*</replacement>*/

      /*<replacement>*/
      var Stream;
      (function () {
        try {
          Stream = require('st' + 'ream');
        } catch (_) {} finally {
          if (!Stream) Stream = require('events').EventEmitter;
        }
      })();
      /*</replacement>*/

      var Buffer = require('buffer').Buffer;
      /*<replacement>*/
      var bufferShim = require('buffer-shims');
      /*</replacement>*/

      /*<replacement>*/
      var util = require('core-util-is');
      util.inherits = require('inherits');
      /*</replacement>*/

      /*<replacement>*/
      var debugUtil = require('util');
      var debug = void 0;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog('stream');
      } else {
        debug = function () {};
      }
      /*</replacement>*/

      var BufferList = require('./internal/streams/BufferList');
      var StringDecoder;

      util.inherits(Readable, Stream);

      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === 'function') {
          return emitter.prependListener(event, fn);
        } else {
          // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.
          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
        }
      }

      var Duplex;
      function ReadableState(options, stream) {
        Duplex = Duplex || require('./_stream_duplex');

        options = options || {};

        // object stream flag. Used to make read(n) ignore n and to
        // make all the buffer merging and length checks go away
        this.objectMode = !!options.objectMode;

        if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

        // the point at which it stops calling _read() to fill the buffer
        // Note: 0 is a valid value, means "don't call _read preemptively ever"
        var hwm = options.highWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

        // cast to ints.
        this.highWaterMark = ~~this.highWaterMark;

        // A linked list is used to store data chunks instead of an array because the
        // linked list can remove elements from the beginning faster than
        // array.shift()
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;

        // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.
        this.sync = true;

        // whenever we return null, then we set a flag to say
        // that we're awaiting a 'readable' event emission.
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;

        // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.
        this.defaultEncoding = options.defaultEncoding || 'utf8';

        // when piping, we only care about 'readable' events that happen
        // after read()ing all the bytes and not getting any pushback.
        this.ranOut = false;

        // the number of writers that are awaiting a drain event in .pipe()s
        this.awaitDrain = 0;

        // if true, a maybeReadMore has been scheduled
        this.readingMore = false;

        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }

      var Duplex;
      function Readable(options) {
        Duplex = Duplex || require('./_stream_duplex');

        if (!(this instanceof Readable)) return new Readable(options);

        this._readableState = new ReadableState(options, this);

        // legacy
        this.readable = true;

        if (options && typeof options.read === 'function') this._read = options.read;

        Stream.call(this);
      }

      // Manually shove something into the read() buffer.
      // This returns true if the highWaterMark has not been hit yet,
      // similar to how Writable.write() returns true if you should
      // write() some more.
      Readable.prototype.push = function (chunk, encoding) {
        var state = this._readableState;

        if (!state.objectMode && typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = bufferShim.from(chunk, encoding);
            encoding = '';
          }
        }

        return readableAddChunk(this, state, chunk, encoding, false);
      };

      // Unshift should *always* be something directly out of read()
      Readable.prototype.unshift = function (chunk) {
        var state = this._readableState;
        return readableAddChunk(this, state, chunk, '', true);
      };

      Readable.prototype.isPaused = function () {
        return this._readableState.flowing === false;
      };

      function readableAddChunk(stream, state, chunk, encoding, addToFront) {
        var er = chunkInvalid(state, chunk);
        if (er) {
          stream.emit('error', er);
        } else if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (state.ended && !addToFront) {
            var e = new Error('stream.push() after EOF');
            stream.emit('error', e);
          } else if (state.endEmitted && addToFront) {
            var _e = new Error('stream.unshift() after end event');
            stream.emit('error', _e);
          } else {
            var skipAdd;
            if (state.decoder && !addToFront && !encoding) {
              chunk = state.decoder.write(chunk);
              skipAdd = !state.objectMode && chunk.length === 0;
            }

            if (!addToFront) state.reading = false;

            // Don't add to the buffer if we've decoded to an empty string chunk and
            // we're not in object mode
            if (!skipAdd) {
              // if we want the data now, just emit it.
              if (state.flowing && state.length === 0 && !state.sync) {
                stream.emit('data', chunk);
                stream.read(0);
              } else {
                // update the buffer info.
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                if (state.needReadable) emitReadable(stream);
              }
            }

            maybeReadMore(stream, state);
          }
        } else if (!addToFront) {
          state.reading = false;
        }

        return needMoreData(state);
      }

      // if it's past the high water mark, we can push in some more.
      // Also, if we have no data yet, we can stand some
      // more bytes.  This is to work around cases where hwm=0,
      // such as the repl.  Also, if the push() triggered a
      // readable event, and the user called read(largeNumber) such that
      // needReadable was set, then we ought to push more, so that another
      // 'readable' event will be triggered.
      function needMoreData(state) {
        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
      }

      // backwards compatibility.
      Readable.prototype.setEncoding = function (enc) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this._readableState.decoder = new StringDecoder(enc);
        this._readableState.encoding = enc;
        return this;
      };

      // Don't raise the hwm > 8MB
      var MAX_HWM = 0x800000;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          // Get the next highest power of 2 to prevent increasing hwm excessively in
          // tiny amounts
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }

      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.
      function howMuchToRead(n, state) {
        if (n <= 0 || state.length === 0 && state.ended) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          // Only flow one buffer at a time
          if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
        }
        // If we're asking for more than the current hwm, then raise the hwm.
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length) return n;
        // Don't have enough
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }

      // you can override either this method, or the async _read(n) below.
      Readable.prototype.read = function (n) {
        debug('read', n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;

        if (n !== 0) state.emittedReadable = false;

        // if we're doing read(0) to trigger a readable event, but we
        // already have a bunch of data in the buffer, then just trigger
        // the 'readable' event and move on.
        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug('read: emitReadable', state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
          return null;
        }

        n = howMuchToRead(n, state);

        // if we've ended, and we're now clear, then finish it up.
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
          return null;
        }

        // All the actual chunk generation logic needs to be
        // *below* the call to _read.  The reason is that in certain
        // synthetic stream cases, such as passthrough streams, _read
        // may be a completely synchronous operation which may change
        // the state of the read buffer, providing enough data when
        // before there was *not* enough.
        //
        // So, the steps are:
        // 1. Figure out what the state of things will be after we do
        // a read from the buffer.
        //
        // 2. If that resulting state will trigger a _read, then call _read.
        // Note that this may be asynchronous, or synchronous.  Yes, it is
        // deeply ugly to write APIs this way, but that still doesn't mean
        // that the Readable class should behave improperly, as streams are
        // designed to be sync/async agnostic.
        // Take note if the _read call is sync or async (ie, if the read call
        // has returned yet), so that we know whether or not it's safe to emit
        // 'readable' etc.
        //
        // 3. Actually pull the requested chunks out of the buffer and return.

        // if we need a readable event, then we need to do some reading.
        var doRead = state.needReadable;
        debug('need readable', doRead);

        // if we currently have less than the highWaterMark, then also read some
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug('length less than watermark', doRead);
        }

        // however, if we've ended, then there's no point, and if we're already
        // reading, then it's unnecessary.
        if (state.ended || state.reading) {
          doRead = false;
          debug('reading or ended', doRead);
        } else if (doRead) {
          debug('do read');
          state.reading = true;
          state.sync = true;
          // if the length is currently zero, then we *need* a readable event.
          if (state.length === 0) state.needReadable = true;
          // call internal read method
          this._read(state.highWaterMark);
          state.sync = false;
          // If _read pushed data synchronously, then `reading` will be false,
          // and we need to re-evaluate how much data we can return to the user.
          if (!state.reading) n = howMuchToRead(nOrig, state);
        }

        var ret;
        if (n > 0) ret = fromList(n, state);else ret = null;

        if (ret === null) {
          state.needReadable = true;
          n = 0;
        } else {
          state.length -= n;
        }

        if (state.length === 0) {
          // If we have nothing in the buffer, then we want to know
          // as soon as we *do* get something into the buffer.
          if (!state.ended) state.needReadable = true;

          // If we tried to read() past the EOF, then emit end on the next tick.
          if (nOrig !== n && state.ended) endReadable(this);
        }

        if (ret !== null) this.emit('data', ret);

        return ret;
      };

      function chunkInvalid(state, chunk) {
        var er = null;
        if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
          er = new TypeError('Invalid non-string/buffer chunk');
        }
        return er;
      }

      function onEofChunk(stream, state) {
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;

        // emit 'readable' now to make sure it gets picked up.
        emitReadable(stream);
      }

      // Don't emit readable right away in sync mode, because this can trigger
      // another read() call => stack overflow.  This way, it might trigger
      // a nextTick recursion warning, but that's not so bad.
      function emitReadable(stream) {
        var state = stream._readableState;
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug('emitReadable', state.flowing);
          state.emittedReadable = true;
          if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
        }
      }

      function emitReadable_(stream) {
        debug('emit readable');
        stream.emit('readable');
        flow(stream);
      }

      // at this point, the user has presumably seen the 'readable' event,
      // and called read() to consume some data.  that may have triggered
      // in turn another _read(n) call, in which case reading = true if
      // it's in progress.
      // However, if we're not ended, or reading, and the length < hwm,
      // then go ahead and try to read some more preemptively.
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          processNextTick(maybeReadMore_, stream, state);
        }
      }

      function maybeReadMore_(stream, state) {
        var len = state.length;
        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
          debug('maybeReadMore read 0');
          stream.read(0);
          if (len === state.length)
            // didn't get any data, stop spinning.
            break;else len = state.length;
        }
        state.readingMore = false;
      }

      // abstract method.  to be overridden in specific implementation classes.
      // call cb(er, data) where data is <= n in length.
      // for virtual (non-string, non-buffer) streams, "length" is somewhat
      // arbitrary, and perhaps not very meaningful.
      Readable.prototype._read = function (n) {
        this.emit('error', new Error('not implemented'));
      };

      Readable.prototype.pipe = function (dest, pipeOpts) {
        var src = this;
        var state = this._readableState;

        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

        var endFn = doEnd ? onend : cleanup;
        if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

        dest.on('unpipe', onunpipe);
        function onunpipe(readable) {
          debug('onunpipe');
          if (readable === src) {
            cleanup();
          }
        }

        function onend() {
          debug('onend');
          dest.end();
        }

        // when the dest drains, it reduces the awaitDrain counter
        // on the source.  This would be more elegant with a .once()
        // handler in flow(), but adding and removing repeatedly is
        // too slow.
        var ondrain = pipeOnDrain(src);
        dest.on('drain', ondrain);

        var cleanedUp = false;
        function cleanup() {
          debug('cleanup');
          // cleanup event handlers once the pipe is broken
          dest.removeListener('close', onclose);
          dest.removeListener('finish', onfinish);
          dest.removeListener('drain', ondrain);
          dest.removeListener('error', onerror);
          dest.removeListener('unpipe', onunpipe);
          src.removeListener('end', onend);
          src.removeListener('end', cleanup);
          src.removeListener('data', ondata);

          cleanedUp = true;

          // if the reader is waiting for a drain event from this
          // specific writer, then it would cause it to never start
          // flowing again.
          // So, if this is awaiting a drain, then we just call it now.
          // If we don't know, then assume that we are waiting for one.
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }

        // If the user pushes more data while we're writing to dest then we'll end up
        // in ondata again. However, we only want to increase awaitDrain once because
        // dest will only emit one 'drain' event for the multiple writes.
        // => Introduce a guard on increasing awaitDrain.
        var increasedAwaitDrain = false;
        src.on('data', ondata);
        function ondata(chunk) {
          debug('ondata');
          increasedAwaitDrain = false;
          var ret = dest.write(chunk);
          if (false === ret && !increasedAwaitDrain) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug('false write response, pause', src._readableState.awaitDrain);
              src._readableState.awaitDrain++;
              increasedAwaitDrain = true;
            }
            src.pause();
          }
        }

        // if the dest has an error, then stop piping into it.
        // however, don't suppress the throwing behavior for this.
        function onerror(er) {
          debug('onerror', er);
          unpipe();
          dest.removeListener('error', onerror);
          if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
        }

        // Make sure our error handler is attached before userland ones.
        prependListener(dest, 'error', onerror);

        // Both close and finish should trigger unpipe, but only once.
        function onclose() {
          dest.removeListener('finish', onfinish);
          unpipe();
        }
        dest.once('close', onclose);
        function onfinish() {
          debug('onfinish');
          dest.removeListener('close', onclose);
          unpipe();
        }
        dest.once('finish', onfinish);

        function unpipe() {
          debug('unpipe');
          src.unpipe(dest);
        }

        // tell the dest that it's being piped to
        dest.emit('pipe', src);

        // start the flow if it hasn't been started already.
        if (!state.flowing) {
          debug('pipe resume');
          src.resume();
        }

        return dest;
      };

      function pipeOnDrain(src) {
        return function () {
          var state = src._readableState;
          debug('pipeOnDrain', state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
          }
        };
      }

      Readable.prototype.unpipe = function (dest) {
        var state = this._readableState;

        // if we're not piping anywhere, then do nothing.
        if (state.pipesCount === 0) return this;

        // just one destination.  most common case.
        if (state.pipesCount === 1) {
          // passed in one, but it's not the right one.
          if (dest && dest !== state.pipes) return this;

          if (!dest) dest = state.pipes;

          // got a match.
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit('unpipe', this);
          return this;
        }

        // slow case. multiple pipe destinations.

        if (!dest) {
          // remove all.
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;

          for (var _i = 0; _i < len; _i++) {
            dests[_i].emit('unpipe', this);
          }return this;
        }

        // try to find the right one.
        var i = indexOf(state.pipes, dest);
        if (i === -1) return this;

        state.pipes.splice(i, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];

        dest.emit('unpipe', this);

        return this;
      };

      // set up data events if they are asked for
      // Ensure readable listeners eventually get something
      Readable.prototype.on = function (ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);

        if (ev === 'data') {
          // Start flowing on next tick if stream isn't explicitly paused
          if (this._readableState.flowing !== false) this.resume();
        } else if (ev === 'readable') {
          var state = this._readableState;
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) {
              processNextTick(nReadingNextTick, this);
            } else if (state.length) {
              emitReadable(this, state);
            }
          }
        }

        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;

      function nReadingNextTick(self) {
        debug('readable nexttick read 0');
        self.read(0);
      }

      // pause() and resume() are remnants of the legacy readable stream API
      // If the user uses them, then switch into old mode.
      Readable.prototype.resume = function () {
        var state = this._readableState;
        if (!state.flowing) {
          debug('resume');
          state.flowing = true;
          resume(this, state);
        }
        return this;
      };

      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          processNextTick(resume_, stream, state);
        }
      }

      function resume_(stream, state) {
        if (!state.reading) {
          debug('resume read 0');
          stream.read(0);
        }

        state.resumeScheduled = false;
        state.awaitDrain = 0;
        stream.emit('resume');
        flow(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }

      Readable.prototype.pause = function () {
        debug('call pause flowing=%j', this._readableState.flowing);
        if (false !== this._readableState.flowing) {
          debug('pause');
          this._readableState.flowing = false;
          this.emit('pause');
        }
        return this;
      };

      function flow(stream) {
        var state = stream._readableState;
        debug('flow', state.flowing);
        while (state.flowing && stream.read() !== null) {}
      }

      // wrap an old-style stream as the async data source.
      // This is *not* part of the readable stream interface.
      // It is an ugly unfortunate mess of history.
      Readable.prototype.wrap = function (stream) {
        var state = this._readableState;
        var paused = false;

        var self = this;
        stream.on('end', function () {
          debug('wrapped end');
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) self.push(chunk);
          }

          self.push(null);
        });

        stream.on('data', function (chunk) {
          debug('wrapped data');
          if (state.decoder) chunk = state.decoder.write(chunk);

          // don't skip over falsy values in objectMode
          if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

          var ret = self.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });

        // proxy all the other methods.
        // important when wrapping filters and duplexes.
        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === 'function') {
            this[i] = function (method) {
              return function () {
                return stream[method].apply(stream, arguments);
              };
            }(i);
          }
        }

        // proxy certain important events.
        var events = ['error', 'close', 'destroy', 'pause', 'resume'];
        forEach(events, function (ev) {
          stream.on(ev, self.emit.bind(self, ev));
        });

        // when we try to consume some more bytes, simply unpause the
        // underlying stream.
        self._read = function (n) {
          debug('wrapped _read', n);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };

        return self;
      };

      // exposed for testing purposes only.
      Readable._fromList = fromList;

      // Pluck off n bytes from an array of buffers.
      // Length is the combined lengths of all the buffers in the list.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.
      function fromList(n, state) {
        // nothing buffered
        if (state.length === 0) return null;

        var ret;
        if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
          // read it all, truncate the list
          if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          // read part of list
          ret = fromListPartial(n, state.buffer, state.decoder);
        }

        return ret;
      }

      // Extracts only enough buffered data to satisfy the amount requested.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.
      function fromListPartial(n, list, hasStrings) {
        var ret;
        if (n < list.head.data.length) {
          // slice is the same for buffers and strings
          ret = list.head.data.slice(0, n);
          list.head.data = list.head.data.slice(n);
        } else if (n === list.head.data.length) {
          // first chunk is a perfect match
          ret = list.shift();
        } else {
          // result spans more than one buffer
          ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
        }
        return ret;
      }

      // Copies a specified amount of characters from the list of buffered data
      // chunks.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.
      function copyFromBufferString(n, list) {
        var p = list.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length) ret += str;else ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next) list.head = p.next;else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }

      // Copies a specified amount of bytes from the list of buffered data chunks.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.
      function copyFromBuffer(n, list) {
        var ret = bufferShim.allocUnsafe(n);
        var p = list.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next) list.head = p.next;else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
        return ret;
      }

      function endReadable(stream) {
        var state = stream._readableState;

        // If we get here before consuming all the bytes, then that is a
        // bug in node.  Should never happen.
        if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

        if (!state.endEmitted) {
          state.ended = true;
          processNextTick(endReadableNT, state, stream);
        }
      }

      function endReadableNT(state, stream) {
        // Check that we didn't get one last unshift.
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit('end');
        }
      }

      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i);
        }
      }

      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }
        return -1;
      }
    }).call(this, require('_process'));
  }, { "./_stream_duplex": 182, "./internal/streams/BufferList": 187, "_process": 173, "buffer": 108, "buffer-shims": 106, "core-util-is": 110, "events": 148, "inherits": 158, "isarray": 160, "process-nextick-args": 172, "string_decoder/": 210, "util": 80 }], 185: [function (require, module, exports) {
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.

    'use strict';

    module.exports = Transform;

    var Duplex = require('./_stream_duplex');

    /*<replacement>*/
    var util = require('core-util-is');
    util.inherits = require('inherits');
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }
  }, { "./_stream_duplex": 182, "core-util-is": 110, "inherits": 158 }], 186: [function (require, module, exports) {
    (function (process) {
      // A bit simpler than readable streams.
      // Implement an async ._write(chunk, encoding, cb), and it'll handle all
      // the drain event emission and buffering.

      'use strict';

      module.exports = Writable;

      /*<replacement>*/
      var processNextTick = require('process-nextick-args');
      /*</replacement>*/

      /*<replacement>*/
      var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
      /*</replacement>*/

      Writable.WritableState = WritableState;

      /*<replacement>*/
      var util = require('core-util-is');
      util.inherits = require('inherits');
      /*</replacement>*/

      /*<replacement>*/
      var internalUtil = {
        deprecate: require('util-deprecate')
      };
      /*</replacement>*/

      /*<replacement>*/
      var Stream;
      (function () {
        try {
          Stream = require('st' + 'ream');
        } catch (_) {} finally {
          if (!Stream) Stream = require('events').EventEmitter;
        }
      })();
      /*</replacement>*/

      var Buffer = require('buffer').Buffer;
      /*<replacement>*/
      var bufferShim = require('buffer-shims');
      /*</replacement>*/

      util.inherits(Writable, Stream);

      function nop() {}

      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk;
        this.encoding = encoding;
        this.callback = cb;
        this.next = null;
      }

      var Duplex;
      function WritableState(options, stream) {
        Duplex = Duplex || require('./_stream_duplex');

        options = options || {};

        // object stream flag to indicate whether or not this stream
        // contains buffers or objects.
        this.objectMode = !!options.objectMode;

        if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

        // the point at which write() starts returning false
        // Note: 0 is a valid value, means that we always return false if
        // the entire buffer is not flushed immediately on write()
        var hwm = options.highWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

        // cast to ints.
        this.highWaterMark = ~~this.highWaterMark;

        this.needDrain = false;
        // at the start of calling end()
        this.ending = false;
        // when end() has been called, and returned
        this.ended = false;
        // when 'finish' is emitted
        this.finished = false;

        // should we decode strings into buffers before passing to _write?
        // this is here so that some node-core streams can optimize string
        // handling at a lower level.
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;

        // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.
        this.defaultEncoding = options.defaultEncoding || 'utf8';

        // not an actual buffer we keep track of, but a measurement
        // of how much we're waiting to get pushed to some underlying
        // socket or file.
        this.length = 0;

        // a flag to see when we're in the middle of a write.
        this.writing = false;

        // when true all writes will be buffered until .uncork() call
        this.corked = 0;

        // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.
        this.sync = true;

        // a flag to know if we're processing previously buffered items, which
        // may call the _write() callback in the same tick, so that we don't
        // end up in an overlapped onwrite situation.
        this.bufferProcessing = false;

        // the callback that's passed to _write(chunk,cb)
        this.onwrite = function (er) {
          onwrite(stream, er);
        };

        // the callback that the user supplies to write(chunk,encoding,cb)
        this.writecb = null;

        // the amount that is being written when _write is called.
        this.writelen = 0;

        this.bufferedRequest = null;
        this.lastBufferedRequest = null;

        // number of pending user-supplied write callbacks
        // this must be 0 before 'finish' can be emitted
        this.pendingcb = 0;

        // emit prefinish if the only thing we're waiting for is _write cbs
        // This is relevant for synchronous Transform streams
        this.prefinished = false;

        // True if the error was already emitted and should not be thrown again
        this.errorEmitted = false;

        // count buffered requests
        this.bufferedRequestCount = 0;

        // allocate the first CorkedRequest, there is always
        // one allocated and free to use, and we maintain at most two
        this.corkedRequestsFree = new CorkedRequest(this);
      }

      WritableState.prototype.getBuffer = function writableStateGetBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };

      (function () {
        try {
          Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function () {
              return this.getBuffer();
            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
          });
        } catch (_) {}
      })();

      var Duplex;
      function Writable(options) {
        Duplex = Duplex || require('./_stream_duplex');

        // Writable ctor is applied to Duplexes, though they're not
        // instanceof Writable, they're instanceof Readable.
        if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

        this._writableState = new WritableState(options, this);

        // legacy.
        this.writable = true;

        if (options) {
          if (typeof options.write === 'function') this._write = options.write;

          if (typeof options.writev === 'function') this._writev = options.writev;
        }

        Stream.call(this);
      }

      // Otherwise people can pipe Writable streams, which is just wrong.
      Writable.prototype.pipe = function () {
        this.emit('error', new Error('Cannot pipe, not readable'));
      };

      function writeAfterEnd(stream, cb) {
        var er = new Error('write after end');
        // TODO: defer error events consistently everywhere, not just the cb
        stream.emit('error', er);
        processNextTick(cb, er);
      }

      // If we get something that is not a buffer, string, null, or undefined,
      // and we're not in objectMode, then that's an error.
      // Otherwise stream chunks are all considered to be of length=1, and the
      // watermarks determine how many objects to keep in the buffer, rather than
      // how many bytes or characters.
      function validChunk(stream, state, chunk, cb) {
        var valid = true;
        var er = false;
        // Always throw error if a null is written
        // if we are not in object mode then throw
        // if it is not a buffer, string, or undefined.
        if (chunk === null) {
          er = new TypeError('May not write null values to stream');
        } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
          er = new TypeError('Invalid non-string/buffer chunk');
        }
        if (er) {
          stream.emit('error', er);
          processNextTick(cb, er);
          valid = false;
        }
        return valid;
      }

      Writable.prototype.write = function (chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;

        if (typeof encoding === 'function') {
          cb = encoding;
          encoding = null;
        }

        if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

        if (typeof cb !== 'function') cb = nop;

        if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, chunk, encoding, cb);
        }

        return ret;
      };

      Writable.prototype.cork = function () {
        var state = this._writableState;

        state.corked++;
      };

      Writable.prototype.uncork = function () {
        var state = this._writableState;

        if (state.corked) {
          state.corked--;

          if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
        }
      };

      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        // node::ParseEncoding() requires lower case.
        if (typeof encoding === 'string') encoding = encoding.toLowerCase();
        if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };

      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
          chunk = bufferShim.from(chunk, encoding);
        }
        return chunk;
      }

      // if we're already writing something, then just put this
      // in the queue, and wait our turn.  Otherwise, call _write
      // If we return false, then we need a drain event, so set that flag.
      function writeOrBuffer(stream, state, chunk, encoding, cb) {
        chunk = decodeChunk(state, chunk, encoding);

        if (Buffer.isBuffer(chunk)) encoding = 'buffer';
        var len = state.objectMode ? 1 : chunk.length;

        state.length += len;

        var ret = state.length < state.highWaterMark;
        // we must ensure that previous needDrain will not be reset to false.
        if (!ret) state.needDrain = true;

        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }

        return ret;
      }

      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }

      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;
        if (sync) processNextTick(cb, er);else cb(er);

        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
      }

      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }

      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;

        onwriteStateUpdate(state);

        if (er) onwriteError(stream, state, sync, er, cb);else {
          // Check if we're actually ready to finish, but don't emit yet
          var finished = needFinish(state);

          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }

          if (sync) {
            /*<replacement>*/
            asyncWrite(afterWrite, stream, state, finished, cb);
            /*</replacement>*/
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }

      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }

      // Must force callback to be called on nextTick, so that we don't
      // emit 'drain' before the write() consumer gets the 'false' return
      // value, and has a chance to attach a 'drain' listener.
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit('drain');
        }
      }

      // if there's something in the buffer waiting, then process it
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;

        if (stream._writev && entry && entry.next) {
          // Fast case, write everything using _writev()
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;

          var count = 0;
          while (entry) {
            buffer[count] = entry;
            entry = entry.next;
            count += 1;
          }

          doWrite(stream, state, true, state.length, buffer, '', holder.finish);

          // doWrite is almost always async, defer these to save a bit of time
          // as the hot path ends with doWrite
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
        } else {
          // Slow case, write chunks one-by-one
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;

            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) {
              break;
            }
          }

          if (entry === null) state.lastBufferedRequest = null;
        }

        state.bufferedRequestCount = 0;
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }

      Writable.prototype._write = function (chunk, encoding, cb) {
        cb(new Error('not implemented'));
      };

      Writable.prototype._writev = null;

      Writable.prototype.end = function (chunk, encoding, cb) {
        var state = this._writableState;

        if (typeof chunk === 'function') {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === 'function') {
          cb = encoding;
          encoding = null;
        }

        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

        // .end() fully uncorks
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }

        // ignore unnecessary end() calls.
        if (!state.ending && !state.finished) endWritable(this, state, cb);
      };

      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }

      function prefinish(stream, state) {
        if (!state.prefinished) {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }

      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          if (state.pendingcb === 0) {
            prefinish(stream, state);
            state.finished = true;
            stream.emit('finish');
          } else {
            prefinish(stream, state);
          }
        }
        return need;
      }

      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished) processNextTick(cb);else stream.once('finish', cb);
        }
        state.ended = true;
        stream.writable = false;
      }

      // It seems a linked list but it is not
      // there will be only 2 of these for each stream
      function CorkedRequest(state) {
        var _this = this;

        this.next = null;
        this.entry = null;

        this.finish = function (err) {
          var entry = _this.entry;
          _this.entry = null;
          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }
          if (state.corkedRequestsFree) {
            state.corkedRequestsFree.next = _this;
          } else {
            state.corkedRequestsFree = _this;
          }
        };
      }
    }).call(this, require('_process'));
  }, { "./_stream_duplex": 182, "_process": 173, "buffer": 108, "buffer-shims": 106, "core-util-is": 110, "events": 148, "inherits": 158, "process-nextick-args": 172, "util-deprecate": 211 }], 187: [function (require, module, exports) {
    'use strict';

    var Buffer = require('buffer').Buffer;
    /*<replacement>*/
    var bufferShim = require('buffer-shims');
    /*</replacement>*/

    module.exports = BufferList;

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return bufferShim.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = bufferShim.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };
  }, { "buffer": 108, "buffer-shims": 106 }], 188: [function (require, module, exports) {
    module.exports = require("./lib/_stream_passthrough.js");
  }, { "./lib/_stream_passthrough.js": 183 }], 189: [function (require, module, exports) {
    (function (process) {
      var Stream = function () {
        try {
          return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
        } catch (_) {}
      }();
      exports = module.exports = require('./lib/_stream_readable.js');
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = require('./lib/_stream_writable.js');
      exports.Duplex = require('./lib/_stream_duplex.js');
      exports.Transform = require('./lib/_stream_transform.js');
      exports.PassThrough = require('./lib/_stream_passthrough.js');

      if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
        module.exports = Stream;
      }
    }).call(this, require('_process'));
  }, { "./lib/_stream_duplex.js": 182, "./lib/_stream_passthrough.js": 183, "./lib/_stream_readable.js": 184, "./lib/_stream_transform.js": 185, "./lib/_stream_writable.js": 186, "_process": 173 }], 190: [function (require, module, exports) {
    module.exports = require("./lib/_stream_transform.js");
  }, { "./lib/_stream_transform.js": 185 }], 191: [function (require, module, exports) {
    module.exports = require("./lib/_stream_writable.js");
  }, { "./lib/_stream_writable.js": 186 }], 192: [function (require, module, exports) {
    (function (Buffer) {
      /*
      CryptoJS v3.1.2
      code.google.com/p/crypto-js
      (c) 2009-2013 by Jeff Mott. All rights reserved.
      code.google.com/p/crypto-js/wiki/License
      */
      /** @preserve
      (c) 2012 by Cédric Mesnil. All rights reserved.
      
      Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      
          - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
          - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */

      // constants table
      var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

      var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

      var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

      var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

      var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
      var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

      function bytesToWords(bytes) {
        var words = [];
        for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
          words[b >>> 5] |= bytes[i] << 24 - b % 32;
        }
        return words;
      }

      function wordsToBytes(words) {
        var bytes = [];
        for (var b = 0; b < words.length * 32; b += 8) {
          bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
        }
        return bytes;
      }

      function processBlock(H, M, offset) {
        // swap endian
        for (var i = 0; i < 16; i++) {
          var offset_i = offset + i;
          var M_offset_i = M[offset_i];

          // Swap
          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
        }

        // Working variables
        var al, bl, cl, dl, el;
        var ar, br, cr, dr, er;

        ar = al = H[0];
        br = bl = H[1];
        cr = cl = H[2];
        dr = dl = H[3];
        er = el = H[4];

        // computation
        var t;
        for (i = 0; i < 80; i += 1) {
          t = al + M[offset + zl[i]] | 0;
          if (i < 16) {
            t += f1(bl, cl, dl) + hl[0];
          } else if (i < 32) {
            t += f2(bl, cl, dl) + hl[1];
          } else if (i < 48) {
            t += f3(bl, cl, dl) + hl[2];
          } else if (i < 64) {
            t += f4(bl, cl, dl) + hl[3];
          } else {
            // if (i<80) {
            t += f5(bl, cl, dl) + hl[4];
          }
          t = t | 0;
          t = rotl(t, sl[i]);
          t = t + el | 0;
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = t;

          t = ar + M[offset + zr[i]] | 0;
          if (i < 16) {
            t += f5(br, cr, dr) + hr[0];
          } else if (i < 32) {
            t += f4(br, cr, dr) + hr[1];
          } else if (i < 48) {
            t += f3(br, cr, dr) + hr[2];
          } else if (i < 64) {
            t += f2(br, cr, dr) + hr[3];
          } else {
            // if (i<80) {
            t += f1(br, cr, dr) + hr[4];
          }

          t = t | 0;
          t = rotl(t, sr[i]);
          t = t + er | 0;
          ar = er;
          er = dr;
          dr = rotl(cr, 10);
          cr = br;
          br = t;
        }

        // intermediate hash value
        t = H[1] + cl + dr | 0;
        H[1] = H[2] + dl + er | 0;
        H[2] = H[3] + el + ar | 0;
        H[3] = H[4] + al + br | 0;
        H[4] = H[0] + bl + cr | 0;
        H[0] = t;
      }

      function f1(x, y, z) {
        return x ^ y ^ z;
      }

      function f2(x, y, z) {
        return x & y | ~x & z;
      }

      function f3(x, y, z) {
        return (x | ~y) ^ z;
      }

      function f4(x, y, z) {
        return x & z | y & ~z;
      }

      function f5(x, y, z) {
        return x ^ (y | ~z);
      }

      function rotl(x, n) {
        return x << n | x >>> 32 - n;
      }

      function ripemd160(message) {
        var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

        if (typeof message === 'string') {
          message = new Buffer(message, 'utf8');
        }

        var m = bytesToWords(message);

        var nBitsLeft = message.length * 8;
        var nBitsTotal = message.length * 8;

        // Add padding
        m[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;

        for (var i = 0; i < m.length; i += 16) {
          processBlock(H, m, i);
        }

        // swap endian
        for (i = 0; i < 5; i++) {
          // shortcut
          var H_i = H[i];

          // Swap
          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        }

        var digestbytes = wordsToBytes(H);
        return new Buffer(digestbytes);
      }

      module.exports = ripemd160;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 193: [function (require, module, exports) {
    (function (Buffer) {
      const assert = require('assert');
      /**
       * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
       * This function takes in a data, convert it to buffer if not, and a length for recursion
       *
       * @param {Buffer,String,Integer,Array} data - will be converted to buffer
       * @returns {Buffer} - returns buffer of encoded data
       **/
      exports.encode = function (input) {
        if (input instanceof Array) {
          var output = [];
          for (var i = 0; i < input.length; i++) {
            output.push(exports.encode(input[i]));
          }
          var buf = Buffer.concat(output);
          return Buffer.concat([encodeLength(buf.length, 192), buf]);
        } else {
          input = toBuffer(input);
          if (input.length === 1 && input[0] < 128) {
            return input;
          } else {
            return Buffer.concat([encodeLength(input.length, 128), input]);
          }
        }
      };

      function safeParseInt(v, base) {
        if (v.slice(0, 2) === '00') {
          throw new Error('invalid RLP: extra zeros');
        }

        return parseInt(v, base);
      }

      function encodeLength(len, offset) {
        if (len < 56) {
          return new Buffer([len + offset]);
        } else {
          var hexLength = intToHex(len);
          var lLength = hexLength.length / 2;
          var firstByte = intToHex(offset + 55 + lLength);
          return new Buffer(firstByte + hexLength, 'hex');
        }
      }

      /**
       * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}
       * @param {Buffer,String,Integer,Array} data - will be converted to buffer
       * @returns {Array} - returns decode Array of Buffers containg the original message
       **/
      exports.decode = function (input, stream) {
        if (!input || input.length === 0) {
          return new Buffer([]);
        }

        input = toBuffer(input);
        var decoded = _decode(input);

        if (stream) {
          return decoded;
        }

        assert.equal(decoded.remainder.length, 0, 'invalid remainder');
        return decoded.data;
      };

      exports.getLength = function (input) {
        if (!input || input.length === 0) {
          return new Buffer([]);
        }

        input = toBuffer(input);
        var firstByte = input[0];
        if (firstByte <= 0x7f) {
          return input.length;
        } else if (firstByte <= 0xb7) {
          return firstByte - 0x7f;
        } else if (firstByte <= 0xbf) {
          return firstByte - 0xb6;
        } else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          return firstByte - 0xbf;
        } else {
          // a list  over 55 bytes long
          var llength = firstByte - 0xf6;
          var length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          return llength + length;
        }
      };

      function _decode(input) {
        var length, llength, data, innerRemainder, d;
        var decoded = [];
        var firstByte = input[0];

        if (firstByte <= 0x7f) {
          // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
          return {
            data: input.slice(0, 1),
            remainder: input.slice(1)
          };
        } else if (firstByte <= 0xb7) {
          // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
          // The range of the first byte is [0x80, 0xb7]
          length = firstByte - 0x7f;

          // set 0x80 null to 0
          if (firstByte === 0x80) {
            data = new Buffer([]);
          } else {
            data = input.slice(1, length);
          }

          if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid rlp encoding: byte must be less 0x80');
          }

          return {
            data: data,
            remainder: input.slice(length)
          };
        } else if (firstByte <= 0xbf) {
          llength = firstByte - 0xb6;
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          data = input.slice(llength, length + llength);
          if (data.length < length) {
            throw new Error('invalid RLP');
          }

          return {
            data: data,
            remainder: input.slice(length + llength)
          };
        } else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          length = firstByte - 0xbf;
          innerRemainder = input.slice(1, length);
          while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
          }

          return {
            data: decoded,
            remainder: input.slice(length)
          };
        } else {
          // a list  over 55 bytes long
          llength = firstByte - 0xf6;
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          var totalLength = llength + length;
          if (totalLength > input.length) {
            throw new Error('invalid rlp: total length is larger than the data');
          }

          innerRemainder = input.slice(llength, totalLength);
          if (innerRemainder.length === 0) {
            throw new Error('invalid rlp, List has a invalid length');
          }

          while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
          }
          return {
            data: decoded,
            remainder: input.slice(totalLength)
          };
        }
      }

      function isHexPrefixed(str) {
        return str.slice(0, 2) === '0x';
      }

      // Removes 0x from a given String
      function stripHexPrefix(str) {
        if (typeof str !== 'string') {
          return str;
        }
        return isHexPrefixed(str) ? str.slice(2) : str;
      }

      function intToHex(i) {
        var hex = i.toString(16);
        if (hex.length % 2) {
          hex = '0' + hex;
        }

        return hex;
      }

      function padToEven(a) {
        if (a.length % 2) a = '0' + a;
        return a;
      }

      function intToBuffer(i) {
        var hex = intToHex(i);
        return new Buffer(hex, 'hex');
      }

      function toBuffer(v) {
        if (!Buffer.isBuffer(v)) {
          if (typeof v === 'string') {
            if (isHexPrefixed(v)) {
              v = new Buffer(padToEven(stripHexPrefix(v)), 'hex');
            } else {
              v = new Buffer(v);
            }
          } else if (typeof v === 'number') {
            if (!v) {
              v = new Buffer([]);
            } else {
              v = intToBuffer(v);
            }
          } else if (v === null || v === undefined) {
            v = new Buffer([]);
          } else if (v.toArray) {
            // converts a BN to a Buffer
            v = new Buffer(v.toArray());
          } else {
            throw new Error('invalid type');
          }
        }
        return v;
      }
    }).call(this, require("buffer").Buffer);
  }, { "assert": 74, "buffer": 108 }], 194: [function (require, module, exports) {
    (function (Buffer) {
      var pbkdf2Sync = require('pbkdf2').pbkdf2Sync;

      var MAX_VALUE = 0x7fffffff;

      // N = Cpu cost, r = Memory cost, p = parallelization cost
      function scrypt(key, salt, N, r, p, dkLen, progressCallback) {
        if (N === 0 || (N & N - 1) !== 0) throw Error('N must be > 0 and a power of 2');

        if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large');
        if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large');

        var XY = new Buffer(256 * r);
        var V = new Buffer(128 * r * N);

        // pseudo global
        var B32 = new Int32Array(16); // salsa20_8
        var x = new Int32Array(16); // salsa20_8
        var _X = new Buffer(64); // blockmix_salsa8

        // pseudo global
        var B = pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256');

        var tickCallback;
        if (progressCallback) {
          var totalOps = p * N * 2;
          var currentOp = 0;

          tickCallback = function () {
            ++currentOp;

            // send progress notifications once every 1,000 ops
            if (currentOp % 1000 === 0) {
              progressCallback({
                current: currentOp,
                total: totalOps,
                percent: currentOp / totalOps * 100.0
              });
            }
          };
        }

        for (var i = 0; i < p; i++) {
          smix(B, i * 128 * r, r, N, V, XY);
        }

        return pbkdf2Sync(key, B, 1, dkLen, 'sha256');

        // all of these functions are actually moved to the top
        // due to function hoisting

        function smix(B, Bi, r, N, V, XY) {
          var Xi = 0;
          var Yi = 128 * r;
          var i;

          B.copy(XY, Xi, Bi, Bi + Yi);

          for (i = 0; i < N; i++) {
            XY.copy(V, i * Yi, Xi, Xi + Yi);
            blockmix_salsa8(XY, Xi, Yi, r);

            if (tickCallback) tickCallback();
          }

          for (i = 0; i < N; i++) {
            var offset = Xi + (2 * r - 1) * 64;
            var j = XY.readUInt32LE(offset) & N - 1;
            blockxor(V, j * Yi, XY, Xi, Yi);
            blockmix_salsa8(XY, Xi, Yi, r);

            if (tickCallback) tickCallback();
          }

          XY.copy(B, Bi, Xi, Xi + Yi);
        }

        function blockmix_salsa8(BY, Bi, Yi, r) {
          var i;

          arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);

          for (i = 0; i < 2 * r; i++) {
            blockxor(BY, i * 64, _X, 0, 64);
            salsa20_8(_X);
            arraycopy(_X, 0, BY, Yi + i * 64, 64);
          }

          for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + i * 2 * 64, BY, Bi + i * 64, 64);
          }

          for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);
          }
        }

        function R(a, b) {
          return a << b | a >>> 32 - b;
        }

        function salsa20_8(B) {
          var i;

          for (i = 0; i < 16; i++) {
            B32[i] = (B[i * 4 + 0] & 0xff) << 0;
            B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
            B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
            B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
            // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
          }

          arraycopy(B32, 0, x, 0, 16);

          for (i = 8; i > 0; i -= 2) {
            x[4] ^= R(x[0] + x[12], 7);
            x[8] ^= R(x[4] + x[0], 9);
            x[12] ^= R(x[8] + x[4], 13);
            x[0] ^= R(x[12] + x[8], 18);
            x[9] ^= R(x[5] + x[1], 7);
            x[13] ^= R(x[9] + x[5], 9);
            x[1] ^= R(x[13] + x[9], 13);
            x[5] ^= R(x[1] + x[13], 18);
            x[14] ^= R(x[10] + x[6], 7);
            x[2] ^= R(x[14] + x[10], 9);
            x[6] ^= R(x[2] + x[14], 13);
            x[10] ^= R(x[6] + x[2], 18);
            x[3] ^= R(x[15] + x[11], 7);
            x[7] ^= R(x[3] + x[15], 9);
            x[11] ^= R(x[7] + x[3], 13);
            x[15] ^= R(x[11] + x[7], 18);
            x[1] ^= R(x[0] + x[3], 7);
            x[2] ^= R(x[1] + x[0], 9);
            x[3] ^= R(x[2] + x[1], 13);
            x[0] ^= R(x[3] + x[2], 18);
            x[6] ^= R(x[5] + x[4], 7);
            x[7] ^= R(x[6] + x[5], 9);
            x[4] ^= R(x[7] + x[6], 13);
            x[5] ^= R(x[4] + x[7], 18);
            x[11] ^= R(x[10] + x[9], 7);
            x[8] ^= R(x[11] + x[10], 9);
            x[9] ^= R(x[8] + x[11], 13);
            x[10] ^= R(x[9] + x[8], 18);
            x[12] ^= R(x[15] + x[14], 7);
            x[13] ^= R(x[12] + x[15], 9);
            x[14] ^= R(x[13] + x[12], 13);
            x[15] ^= R(x[14] + x[13], 18);
          }

          for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];

          for (i = 0; i < 16; i++) {
            var bi = i * 4;
            B[bi + 0] = B32[i] >> 0 & 0xff;
            B[bi + 1] = B32[i] >> 8 & 0xff;
            B[bi + 2] = B32[i] >> 16 & 0xff;
            B[bi + 3] = B32[i] >> 24 & 0xff;
            // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
          }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, Di, len) {
          for (var i = 0; i < len; i++) {
            D[Di + i] ^= S[Si + i];
          }
        }
      }

      function arraycopy(src, srcPos, dest, destPos, length) {
        if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
          src.copy(dest, destPos, srcPos, srcPos + length);
        } else {
          while (length--) {
            dest[destPos++] = src[srcPos++];
          }
        }
      }

      module.exports = scrypt;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108, "pbkdf2": 170 }], 195: [function (require, module, exports) {
    'use strict';

    module.exports = require('./lib')(require('./lib/elliptic'));
  }, { "./lib": 199, "./lib/elliptic": 198 }], 196: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var toString = Object.prototype.toString;

      // TypeError
      exports.isArray = function (value, message) {
        if (!Array.isArray(value)) throw TypeError(message);
      };

      exports.isBoolean = function (value, message) {
        if (toString.call(value) !== '[object Boolean]') throw TypeError(message);
      };

      exports.isBuffer = function (value, message) {
        if (!Buffer.isBuffer(value)) throw TypeError(message);
      };

      exports.isFunction = function (value, message) {
        if (toString.call(value) !== '[object Function]') throw TypeError(message);
      };

      exports.isNumber = function (value, message) {
        if (toString.call(value) !== '[object Number]') throw TypeError(message);
      };

      exports.isObject = function (value, message) {
        if (toString.call(value) !== '[object Object]') throw TypeError(message);
      };

      // RangeError
      exports.isBufferLength = function (buffer, length, message) {
        if (buffer.length !== length) throw RangeError(message);
      };

      exports.isBufferLength2 = function (buffer, length1, length2, message) {
        if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message);
      };

      exports.isLengthGTZero = function (value, message) {
        if (value.length === 0) throw RangeError(message);
      };

      exports.isNumberInInterval = function (number, x, y, message) {
        if (number <= x || number >= y) throw RangeError(message);
      };
    }).call(this, { "isBuffer": require("../../is-buffer/index.js") });
  }, { "../../is-buffer/index.js": 159 }], 197: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var bip66 = require('bip66');

      var EC_PRIVKEY_EXPORT_DER_COMPRESSED = new Buffer([
      // begin
      0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
      // private key
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // middle
      0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
      // public key
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

      var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = new Buffer([
      // begin
      0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
      // private key
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // middle
      0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
      // public key
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

      var ZERO_BUFFER_32 = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

      exports.privateKeyExport = function (privateKey, publicKey, compressed) {
        var result = new Buffer(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
      };

      exports.privateKeyImport = function (privateKey) {
        var length = privateKey.length;

        // sequence header
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 0x30) return;
        index += 1;

        // sequence length constructor
        if (length < index + 1 || !(privateKey[index] & 0x80)) return;

        var lenb = privateKey[index] & 0x7f;
        index += 1;
        if (lenb < 1 || lenb > 2) return;
        if (length < index + lenb) return;

        // sequence length
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len) return;

        // sequence element 0: version number (=1)
        if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
          return;
        }
        index += 3;

        // sequence element 1: octet string, up to 32 bytes
        if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
          return;
        }

        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
      };

      exports.signatureExport = function (sigObj) {
        var r = Buffer.concat([new Buffer([0]), sigObj.r]);
        for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

        var s = Buffer.concat([new Buffer([0]), sigObj.s]);
        for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

        return bip66.encode(r.slice(posR), s.slice(posS));
      };

      exports.signatureImport = function (sig) {
        var r = new Buffer(ZERO_BUFFER_32);
        var s = new Buffer(ZERO_BUFFER_32);

        try {
          var sigObj = bip66.decode(sig);
          if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
          if (sigObj.r.length > 32) throw new Error('R length is too long');
          if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
          if (sigObj.s.length > 32) throw new Error('S length is too long');
        } catch (err) {
          return;
        }

        sigObj.r.copy(r, 32 - sigObj.r.length);
        sigObj.s.copy(s, 32 - sigObj.s.length);

        return { r: r, s: s };
      };

      exports.signatureImportLax = function (sig) {
        var r = new Buffer(ZERO_BUFFER_32);
        var s = new Buffer(ZERO_BUFFER_32);

        var length = sig.length;
        var index = 0;

        // sequence tag byte
        if (sig[index++] !== 0x30) return;

        // sequence length byte
        var lenbyte = sig[index++];
        if (lenbyte & 0x80) {
          index += lenbyte - 0x80;
          if (index > length) return;
        }

        // sequence tag byte for r
        if (sig[index++] !== 0x02) return;

        // length for r
        var rlen = sig[index++];
        if (rlen & 0x80) {
          lenbyte = rlen - 0x80;
          if (index + lenbyte > length) return;
          for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
          for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index];
        }
        if (rlen > length - index) return;
        var rindex = index;
        index += rlen;

        // sequence tag byte for s
        if (sig[index++] !== 0x02) return;

        // length for s
        var slen = sig[index++];
        if (slen & 0x80) {
          lenbyte = slen - 0x80;
          if (index + lenbyte > length) return;
          for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
          for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index];
        }
        if (slen > length - index) return;
        var sindex = index;
        index += slen;

        // ignore leading zeros in r
        for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
        // copy r value
        if (rlen > 32) return;
        var rvalue = sig.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);

        // ignore leading zeros in s
        for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
        // copy s value
        if (slen > 32) return;
        var svalue = sig.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);

        return { r: r, s: s };
      };
    }).call(this, require("buffer").Buffer);
  }, { "bip66": 77, "buffer": 108 }], 198: [function (require, module, exports) {
    (function (Buffer) {
      'use strict';

      var createHash = require('create-hash');
      var BN = require('bn.js');
      var EC = require('elliptic').ec;

      var messages = require('../messages.json');

      var ec = new EC('secp256k1');
      var ecparams = ec.curve;

      function loadCompressedPublicKey(first, xBuffer) {
        var x = new BN(xBuffer);

        // overflow
        if (x.cmp(ecparams.p) >= 0) return null;
        x = x.toRed(ecparams.red);

        // compute corresponding Y
        var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
        if (first === 0x03 !== y.isOdd()) y = y.redNeg();

        return ec.keyPair({ pub: { x: x, y: y } });
      }

      function loadUncompressedPublicKey(first, xBuffer, yBuffer) {
        var x = new BN(xBuffer);
        var y = new BN(yBuffer);

        // overflow
        if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;

        x = x.toRed(ecparams.red);
        y = y.toRed(ecparams.red);

        // is odd flag
        if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;

        // x*x*x + b = y*y
        var x3 = x.redSqr().redIMul(x);
        if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;

        return ec.keyPair({ pub: { x: x, y: y } });
      }

      function loadPublicKey(publicKey) {
        var first = publicKey[0];
        switch (first) {
          case 0x02:
          case 0x03:
            if (publicKey.length !== 33) return null;
            return loadCompressedPublicKey(first, publicKey.slice(1, 33));
          case 0x04:
          case 0x06:
          case 0x07:
            if (publicKey.length !== 65) return null;
            return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65));
          default:
            return null;
        }
      }

      exports.privateKeyVerify = function (privateKey) {
        var bn = new BN(privateKey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero();
      };

      exports.privateKeyExport = function (privateKey, compressed) {
        var d = new BN(privateKey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);

        return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
      };

      exports.privateKeyTweakAdd = function (privateKey, tweak) {
        var bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);

        bn.iadd(new BN(privateKey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);

        return bn.toArrayLike(Buffer, 'be', 32);
      };

      exports.privateKeyTweakMul = function (privateKey, tweak) {
        var bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);

        bn.imul(new BN(privateKey));
        if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n);

        return bn.toArrayLike(Buffer, 'be', 32);
      };

      exports.publicKeyCreate = function (privateKey, compressed) {
        var d = new BN(privateKey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);

        return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
      };

      exports.publicKeyConvert = function (publicKey, compressed) {
        var pair = loadPublicKey(publicKey);
        if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

        return new Buffer(pair.getPublic(compressed, true));
      };

      exports.publicKeyVerify = function (publicKey) {
        return loadPublicKey(publicKey) !== null;
      };

      exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
        var pair = loadPublicKey(publicKey);
        if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);

        return new Buffer(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed));
      };

      exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
        var pair = loadPublicKey(publicKey);
        if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);

        return new Buffer(pair.pub.mul(tweak).encode(true, compressed));
      };

      exports.publicKeyCombine = function (publicKeys, compressed) {
        var pairs = new Array(publicKeys.length);
        for (var i = 0; i < publicKeys.length; ++i) {
          pairs[i] = loadPublicKey(publicKeys[i]);
          if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
        }

        var point = pairs[0].pub;
        for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub);
        if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);

        return new Buffer(point.encode(true, compressed));
      };

      exports.signatureNormalize = function (signature) {
        var r = new BN(signature.slice(0, 32));
        var s = new BN(signature.slice(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

        var result = new Buffer(signature);
        if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);

        return result;
      };

      exports.signatureExport = function (signature) {
        var r = signature.slice(0, 32);
        var s = signature.slice(32, 64);
        if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

        return { r: r, s: s };
      };

      exports.signatureImport = function (sigObj) {
        var r = new BN(sigObj.r);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);

        var s = new BN(sigObj.s);
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);

        return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
      };

      exports.sign = function (message, privateKey, noncefn, data) {
        if (typeof noncefn === 'function') {
          var getNonce = noncefn;
          noncefn = function (counter) {
            var nonce = getNonce(message, privateKey, null, data, counter);
            if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);

            return new BN(nonce);
          };
        }

        var d = new BN(privateKey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);

        var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data });
        return {
          signature: Buffer.concat([result.r.toArrayLike(Buffer, 'be', 32), result.s.toArrayLike(Buffer, 'be', 32)]),
          recovery: result.recoveryParam
        };
      };

      exports.verify = function (message, signature, publicKey) {
        var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

        var sigr = new BN(sigObj.r);
        var sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false;

        var pair = loadPublicKey(publicKey);
        if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

        return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y });
      };

      exports.recover = function (message, signature, recovery, compressed) {
        var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

        var sigr = new BN(sigObj.r);
        var sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);

        try {
          if (sigr.isZero() || sigs.isZero()) throw new Error();

          var point = ec.recoverPubKey(message, sigObj, recovery);
          return new Buffer(point.encode(true, compressed));
        } catch (err) {
          throw new Error(messages.ECDSA_RECOVER_FAIL);
        }
      };

      exports.ecdh = function (publicKey, privateKey) {
        var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
        return createHash('sha256').update(shared).digest();
      };

      exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
        var pair = loadPublicKey(publicKey);
        if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);

        var scalar = new BN(privateKey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL);

        return new Buffer(pair.pub.mul(scalar).encode(true, compressed));
      };
    }).call(this, require("buffer").Buffer);
  }, { "../messages.json": 200, "bn.js": 78, "buffer": 108, "create-hash": 112, "elliptic": 127 }], 199: [function (require, module, exports) {
    'use strict';

    var assert = require('./assert');
    var der = require('./der');
    var messages = require('./messages.json');

    function initCompressedValue(value, defaultValue) {
      if (value === undefined) return defaultValue;

      assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);
      return value;
    }

    module.exports = function (secp256k1) {
      return {
        privateKeyVerify: function (privateKey) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);
        },

        privateKeyExport: function (privateKey, compressed) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);
          var publicKey = secp256k1.privateKeyExport(privateKey, compressed);

          return der.privateKeyExport(privateKey, publicKey, compressed);
        },

        privateKeyImport: function (privateKey) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);

          privateKey = der.privateKeyImport(privateKey);
          if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;

          throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);
        },

        privateKeyTweakAdd: function (privateKey, tweak) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
          assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

          return secp256k1.privateKeyTweakAdd(privateKey, tweak);
        },

        privateKeyTweakMul: function (privateKey, tweak) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
          assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

          return secp256k1.privateKeyTweakMul(privateKey, tweak);
        },

        publicKeyCreate: function (privateKey, compressed) {
          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.publicKeyCreate(privateKey, compressed);
        },

        publicKeyConvert: function (publicKey, compressed) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.publicKeyConvert(publicKey, compressed);
        },

        publicKeyVerify: function (publicKey) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          return secp256k1.publicKeyVerify(publicKey);
        },

        publicKeyTweakAdd: function (publicKey, tweak, compressed) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
          assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);
        },

        publicKeyTweakMul: function (publicKey, tweak, compressed) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
          assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);
        },

        publicKeyCombine: function (publicKeys, compressed) {
          assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);
          assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);
          for (var i = 0; i < publicKeys.length; ++i) {
            assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
          }

          compressed = initCompressedValue(compressed, true);

          return secp256k1.publicKeyCombine(publicKeys, compressed);
        },

        signatureNormalize: function (signature) {
          assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          return secp256k1.signatureNormalize(signature);
        },

        signatureExport: function (signature) {
          assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          var sigObj = secp256k1.signatureExport(signature);
          return der.signatureExport(sigObj);
        },

        signatureImport: function (sig) {
          assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          var sigObj = der.signatureImport(sig);
          if (sigObj) return secp256k1.signatureImport(sigObj);

          throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
        },

        signatureImportLax: function (sig) {
          assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          var sigObj = der.signatureImportLax(sig);
          if (sigObj) return secp256k1.signatureImport(sigObj);

          throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
        },

        sign: function (message, privateKey, options) {
          assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
          assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          var data = null;
          var noncefn = null;
          if (options !== undefined) {
            assert.isObject(options, messages.OPTIONS_TYPE_INVALID);

            if (options.data !== undefined) {
              assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);
              assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);
              data = options.data;
            }

            if (options.noncefn !== undefined) {
              assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);
              noncefn = options.noncefn;
            }
          }

          return secp256k1.sign(message, privateKey, noncefn, data);
        },

        verify: function (message, signature, publicKey) {
          assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
          assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

          assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          return secp256k1.verify(message, signature, publicKey);
        },

        recover: function (message, signature, recovery, compressed) {
          assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
          assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);

          assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
          assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);

          assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);
          assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.recover(message, signature, recovery, compressed);
        },

        ecdh: function (publicKey, privateKey) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          return secp256k1.ecdh(publicKey, privateKey);
        },

        ecdhUnsafe: function (publicKey, privateKey, compressed) {
          assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
          assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);

          assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
          assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);

          compressed = initCompressedValue(compressed, true);

          return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);
        }
      };
    };
  }, { "./assert": 196, "./der": 197, "./messages.json": 200 }], 200: [function (require, module, exports) {
    module.exports = {
      "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
      "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
      "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
      "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
      "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
      "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
      "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
      "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
      "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
      "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
      "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
      "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
      "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
      "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
      "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
      "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
      "ECDH_FAIL": "scalar was invalid (zero or overflow)",
      "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
      "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
      "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
      "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
      "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
      "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
      "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
      "MSG32_TYPE_INVALID": "message should be a Buffer",
      "MSG32_LENGTH_INVALID": "message length is invalid",
      "OPTIONS_TYPE_INVALID": "options should be an Object",
      "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
      "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
      "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
      "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
      "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
      "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
      "TWEAK_LENGTH_INVALID": "tweak length is invalid"
    };
  }, {}], 201: [function (require, module, exports) {
    (function (Buffer) {
      // prototype class for hash functions
      function Hash(blockSize, finalSize) {
        this._block = new Buffer(blockSize);
        this._finalSize = finalSize;
        this._blockSize = blockSize;
        this._len = 0;
        this._s = 0;
      }

      Hash.prototype.update = function (data, enc) {
        if (typeof data === 'string') {
          enc = enc || 'utf8';
          data = new Buffer(data, enc);
        }

        var l = this._len += data.length;
        var s = this._s || 0;
        var f = 0;
        var buffer = this._block;

        while (s < l) {
          var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
          var ch = t - f;

          for (var i = 0; i < ch; i++) {
            buffer[s % this._blockSize + i] = data[i + f];
          }

          s += ch;
          f += ch;

          if (s % this._blockSize === 0) {
            this._update(buffer);
          }
        }
        this._s = s;

        return this;
      };

      Hash.prototype.digest = function (enc) {
        // Suppose the length of the message M, in bits, is l
        var l = this._len * 8;

        // Append the bit 1 to the end of the message
        this._block[this._len % this._blockSize] = 0x80;

        // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
        this._block.fill(0, this._len % this._blockSize + 1);

        if (l % (this._blockSize * 8) >= this._finalSize * 8) {
          this._update(this._block);
          this._block.fill(0);
        }

        // to this append the block which is equal to the number l written in binary
        // TODO: handle case where l is > Math.pow(2, 29)
        this._block.writeInt32BE(l, this._blockSize - 4);

        var hash = this._update(this._block) || this._hash();

        return enc ? hash.toString(enc) : hash;
      };

      Hash.prototype._update = function () {
        throw new Error('_update must be implemented by subclass');
      };

      module.exports = Hash;
    }).call(this, require("buffer").Buffer);
  }, { "buffer": 108 }], 202: [function (require, module, exports) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();

      var Algorithm = exports[algorithm];
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');

      return new Algorithm();
    };

    exports.sha = require('./sha');
    exports.sha1 = require('./sha1');
    exports.sha224 = require('./sha224');
    exports.sha256 = require('./sha256');
    exports.sha384 = require('./sha384');
    exports.sha512 = require('./sha512');
  }, { "./sha": 203, "./sha1": 204, "./sha224": 205, "./sha256": 206, "./sha384": 207, "./sha512": 208 }], 203: [function (require, module, exports) {
    (function (Buffer) {
      /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
       * in FIPS PUB 180-1
       * This source code is derived from sha1.js of the same repository.
       * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
       * operation was added.
       */

      var inherits = require('inherits');
      var Hash = require('./hash');

      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

      var W = new Array(80);

      function Sha() {
        this.init();
        this._w = W;

        Hash.call(this, 64, 56);
      }

      inherits(Sha, Hash);

      Sha.prototype.init = function () {
        this._a = 0x67452301;
        this._b = 0xefcdab89;
        this._c = 0x98badcfe;
        this._d = 0x10325476;
        this._e = 0xc3d2e1f0;

        return this;
      };

      function rotl5(num) {
        return num << 5 | num >>> 27;
      }

      function rotl30(num) {
        return num << 30 | num >>> 2;
      }

      function ft(s, b, c, d) {
        if (s === 0) return b & c | ~b & d;
        if (s === 2) return b & c | b & d | c & d;
        return b ^ c ^ d;
      }

      Sha.prototype._update = function (M) {
        var W = this._w;

        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
        for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }

        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };

      Sha.prototype._hash = function () {
        var H = new Buffer(20);

        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);

        return H;
      };

      module.exports = Sha;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "buffer": 108, "inherits": 158 }], 204: [function (require, module, exports) {
    (function (Buffer) {
      /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
       * in FIPS PUB 180-1
       * Version 2.1a Copyright Paul Johnston 2000 - 2002.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       * Distributed under the BSD License
       * See http://pajhome.org.uk/crypt/md5 for details.
       */

      var inherits = require('inherits');
      var Hash = require('./hash');

      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

      var W = new Array(80);

      function Sha1() {
        this.init();
        this._w = W;

        Hash.call(this, 64, 56);
      }

      inherits(Sha1, Hash);

      Sha1.prototype.init = function () {
        this._a = 0x67452301;
        this._b = 0xefcdab89;
        this._c = 0x98badcfe;
        this._d = 0x10325476;
        this._e = 0xc3d2e1f0;

        return this;
      };

      function rotl1(num) {
        return num << 1 | num >>> 31;
      }

      function rotl5(num) {
        return num << 5 | num >>> 27;
      }

      function rotl30(num) {
        return num << 30 | num >>> 2;
      }

      function ft(s, b, c, d) {
        if (s === 0) return b & c | ~b & d;
        if (s === 2) return b & c | b & d | c & d;
        return b ^ c ^ d;
      }

      Sha1.prototype._update = function (M) {
        var W = this._w;

        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
        for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

        for (var j = 0; j < 80; ++j) {
          var s = ~~(j / 20);
          var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

          e = d;
          d = c;
          c = rotl30(b);
          b = a;
          a = t;
        }

        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
      };

      Sha1.prototype._hash = function () {
        var H = new Buffer(20);

        H.writeInt32BE(this._a | 0, 0);
        H.writeInt32BE(this._b | 0, 4);
        H.writeInt32BE(this._c | 0, 8);
        H.writeInt32BE(this._d | 0, 12);
        H.writeInt32BE(this._e | 0, 16);

        return H;
      };

      module.exports = Sha1;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "buffer": 108, "inherits": 158 }], 205: [function (require, module, exports) {
    (function (Buffer) {
      /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */

      var inherits = require('inherits');
      var Sha256 = require('./sha256');
      var Hash = require('./hash');

      var W = new Array(64);

      function Sha224() {
        this.init();

        this._w = W; // new Array(64)

        Hash.call(this, 64, 56);
      }

      inherits(Sha224, Sha256);

      Sha224.prototype.init = function () {
        this._a = 0xc1059ed8;
        this._b = 0x367cd507;
        this._c = 0x3070dd17;
        this._d = 0xf70e5939;
        this._e = 0xffc00b31;
        this._f = 0x68581511;
        this._g = 0x64f98fa7;
        this._h = 0xbefa4fa4;

        return this;
      };

      Sha224.prototype._hash = function () {
        var H = new Buffer(28);

        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);

        return H;
      };

      module.exports = Sha224;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "./sha256": 206, "buffer": 108, "inherits": 158 }], 206: [function (require, module, exports) {
    (function (Buffer) {
      /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */

      var inherits = require('inherits');
      var Hash = require('./hash');

      var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];

      var W = new Array(64);

      function Sha256() {
        this.init();

        this._w = W; // new Array(64)

        Hash.call(this, 64, 56);
      }

      inherits(Sha256, Hash);

      Sha256.prototype.init = function () {
        this._a = 0x6a09e667;
        this._b = 0xbb67ae85;
        this._c = 0x3c6ef372;
        this._d = 0xa54ff53a;
        this._e = 0x510e527f;
        this._f = 0x9b05688c;
        this._g = 0x1f83d9ab;
        this._h = 0x5be0cd19;

        return this;
      };

      function ch(x, y, z) {
        return z ^ x & (y ^ z);
      }

      function maj(x, y, z) {
        return x & y | z & (x | y);
      }

      function sigma0(x) {
        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
      }

      function sigma1(x) {
        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
      }

      function gamma0(x) {
        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
      }

      function gamma1(x) {
        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
      }

      Sha256.prototype._update = function (M) {
        var W = this._w;

        var a = this._a | 0;
        var b = this._b | 0;
        var c = this._c | 0;
        var d = this._d | 0;
        var e = this._e | 0;
        var f = this._f | 0;
        var g = this._g | 0;
        var h = this._h | 0;

        for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
        for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;

        for (var j = 0; j < 64; ++j) {
          var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
          var T2 = sigma0(a) + maj(a, b, c) | 0;

          h = g;
          g = f;
          f = e;
          e = d + T1 | 0;
          d = c;
          c = b;
          b = a;
          a = T1 + T2 | 0;
        }

        this._a = a + this._a | 0;
        this._b = b + this._b | 0;
        this._c = c + this._c | 0;
        this._d = d + this._d | 0;
        this._e = e + this._e | 0;
        this._f = f + this._f | 0;
        this._g = g + this._g | 0;
        this._h = h + this._h | 0;
      };

      Sha256.prototype._hash = function () {
        var H = new Buffer(32);

        H.writeInt32BE(this._a, 0);
        H.writeInt32BE(this._b, 4);
        H.writeInt32BE(this._c, 8);
        H.writeInt32BE(this._d, 12);
        H.writeInt32BE(this._e, 16);
        H.writeInt32BE(this._f, 20);
        H.writeInt32BE(this._g, 24);
        H.writeInt32BE(this._h, 28);

        return H;
      };

      module.exports = Sha256;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "buffer": 108, "inherits": 158 }], 207: [function (require, module, exports) {
    (function (Buffer) {
      var inherits = require('inherits');
      var SHA512 = require('./sha512');
      var Hash = require('./hash');

      var W = new Array(160);

      function Sha384() {
        this.init();
        this._w = W;

        Hash.call(this, 128, 112);
      }

      inherits(Sha384, SHA512);

      Sha384.prototype.init = function () {
        this._ah = 0xcbbb9d5d;
        this._bh = 0x629a292a;
        this._ch = 0x9159015a;
        this._dh = 0x152fecd8;
        this._eh = 0x67332667;
        this._fh = 0x8eb44a87;
        this._gh = 0xdb0c2e0d;
        this._hh = 0x47b5481d;

        this._al = 0xc1059ed8;
        this._bl = 0x367cd507;
        this._cl = 0x3070dd17;
        this._dl = 0xf70e5939;
        this._el = 0xffc00b31;
        this._fl = 0x68581511;
        this._gl = 0x64f98fa7;
        this._hl = 0xbefa4fa4;

        return this;
      };

      Sha384.prototype._hash = function () {
        var H = new Buffer(48);

        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }

        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);

        return H;
      };

      module.exports = Sha384;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "./sha512": 208, "buffer": 108, "inherits": 158 }], 208: [function (require, module, exports) {
    (function (Buffer) {
      var inherits = require('inherits');
      var Hash = require('./hash');

      var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

      var W = new Array(160);

      function Sha512() {
        this.init();
        this._w = W;

        Hash.call(this, 128, 112);
      }

      inherits(Sha512, Hash);

      Sha512.prototype.init = function () {
        this._ah = 0x6a09e667;
        this._bh = 0xbb67ae85;
        this._ch = 0x3c6ef372;
        this._dh = 0xa54ff53a;
        this._eh = 0x510e527f;
        this._fh = 0x9b05688c;
        this._gh = 0x1f83d9ab;
        this._hh = 0x5be0cd19;

        this._al = 0xf3bcc908;
        this._bl = 0x84caa73b;
        this._cl = 0xfe94f82b;
        this._dl = 0x5f1d36f1;
        this._el = 0xade682d1;
        this._fl = 0x2b3e6c1f;
        this._gl = 0xfb41bd6b;
        this._hl = 0x137e2179;

        return this;
      };

      function Ch(x, y, z) {
        return z ^ x & (y ^ z);
      }

      function maj(x, y, z) {
        return x & y | z & (x | y);
      }

      function sigma0(x, xl) {
        return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
      }

      function sigma1(x, xl) {
        return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
      }

      function Gamma0(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
      }

      function Gamma0l(x, xl) {
        return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
      }

      function Gamma1(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
      }

      function Gamma1l(x, xl) {
        return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
      }

      function getCarry(a, b) {
        return a >>> 0 < b >>> 0 ? 1 : 0;
      }

      Sha512.prototype._update = function (M) {
        var W = this._w;

        var ah = this._ah | 0;
        var bh = this._bh | 0;
        var ch = this._ch | 0;
        var dh = this._dh | 0;
        var eh = this._eh | 0;
        var fh = this._fh | 0;
        var gh = this._gh | 0;
        var hh = this._hh | 0;

        var al = this._al | 0;
        var bl = this._bl | 0;
        var cl = this._cl | 0;
        var dl = this._dl | 0;
        var el = this._el | 0;
        var fl = this._fl | 0;
        var gl = this._gl | 0;
        var hl = this._hl | 0;

        for (var i = 0; i < 32; i += 2) {
          W[i] = M.readInt32BE(i * 4);
          W[i + 1] = M.readInt32BE(i * 4 + 4);
        }
        for (; i < 160; i += 2) {
          var xh = W[i - 15 * 2];
          var xl = W[i - 15 * 2 + 1];
          var gamma0 = Gamma0(xh, xl);
          var gamma0l = Gamma0l(xl, xh);

          xh = W[i - 2 * 2];
          xl = W[i - 2 * 2 + 1];
          var gamma1 = Gamma1(xh, xl);
          var gamma1l = Gamma1l(xl, xh);

          // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
          var Wi7h = W[i - 7 * 2];
          var Wi7l = W[i - 7 * 2 + 1];

          var Wi16h = W[i - 16 * 2];
          var Wi16l = W[i - 16 * 2 + 1];

          var Wil = gamma0l + Wi7l | 0;
          var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
          Wil = Wil + gamma1l | 0;
          Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
          Wil = Wil + Wi16l | 0;
          Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;

          W[i] = Wih;
          W[i + 1] = Wil;
        }

        for (var j = 0; j < 160; j += 2) {
          Wih = W[j];
          Wil = W[j + 1];

          var majh = maj(ah, bh, ch);
          var majl = maj(al, bl, cl);

          var sigma0h = sigma0(ah, al);
          var sigma0l = sigma0(al, ah);
          var sigma1h = sigma1(eh, el);
          var sigma1l = sigma1(el, eh);

          // t1 = h + sigma1 + ch + K[j] + W[j]
          var Kih = K[j];
          var Kil = K[j + 1];

          var chh = Ch(eh, fh, gh);
          var chl = Ch(el, fl, gl);

          var t1l = hl + sigma1l | 0;
          var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
          t1l = t1l + chl | 0;
          t1h = t1h + chh + getCarry(t1l, chl) | 0;
          t1l = t1l + Kil | 0;
          t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
          t1l = t1l + Wil | 0;
          t1h = t1h + Wih + getCarry(t1l, Wil) | 0;

          // t2 = sigma0 + maj
          var t2l = sigma0l + majl | 0;
          var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;

          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          el = dl + t1l | 0;
          eh = dh + t1h + getCarry(el, dl) | 0;
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          al = t1l + t2l | 0;
          ah = t1h + t2h + getCarry(al, t1l) | 0;
        }

        this._al = this._al + al | 0;
        this._bl = this._bl + bl | 0;
        this._cl = this._cl + cl | 0;
        this._dl = this._dl + dl | 0;
        this._el = this._el + el | 0;
        this._fl = this._fl + fl | 0;
        this._gl = this._gl + gl | 0;
        this._hl = this._hl + hl | 0;

        this._ah = this._ah + ah + getCarry(this._al, al) | 0;
        this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
        this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
        this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
        this._eh = this._eh + eh + getCarry(this._el, el) | 0;
        this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
        this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
        this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
      };

      Sha512.prototype._hash = function () {
        var H = new Buffer(64);

        function writeInt64BE(h, l, offset) {
          H.writeInt32BE(h, offset);
          H.writeInt32BE(l, offset + 4);
        }

        writeInt64BE(this._ah, this._al, 0);
        writeInt64BE(this._bh, this._bl, 8);
        writeInt64BE(this._ch, this._cl, 16);
        writeInt64BE(this._dh, this._dl, 24);
        writeInt64BE(this._eh, this._el, 32);
        writeInt64BE(this._fh, this._fl, 40);
        writeInt64BE(this._gh, this._gl, 48);
        writeInt64BE(this._hh, this._hl, 56);

        return H;
      };

      module.exports = Sha512;
    }).call(this, require("buffer").Buffer);
  }, { "./hash": 201, "buffer": 108, "inherits": 158 }], 209: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    module.exports = Stream;

    var EE = require('events').EventEmitter;
    var inherits = require('inherits');

    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/readable.js');
    Stream.Writable = require('readable-stream/writable.js');
    Stream.Duplex = require('readable-stream/duplex.js');
    Stream.Transform = require('readable-stream/transform.js');
    Stream.PassThrough = require('readable-stream/passthrough.js');

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EE.call(this);
    }

    Stream.prototype.pipe = function (dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }

      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };
  }, { "events": 148, "inherits": 158, "readable-stream/duplex.js": 181, "readable-stream/passthrough.js": 188, "readable-stream/readable.js": 189, "readable-stream/transform.js": 190, "readable-stream/writable.js": 191 }], 210: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var Buffer = require('buffer').Buffer;

    var isBufferEncoding = Buffer.isEncoding || function (encoding) {
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    var StringDecoder = exports.StringDecoder = function (encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    };

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function (buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function (buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = buffer.length >= 3 ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function (buffer) {
      var res = '';
      if (buffer && buffer.length) res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }
  }, { "buffer": 108 }], 211: [function (require, module, exports) {
    (function (global) {

      /**
       * Module exports.
       */

      module.exports = deprecate;

      /**
       * Mark that a method should not be used.
       * Returns a modified function which warns once by default.
       *
       * If `localStorage.noDeprecation = true` is set, then it is a no-op.
       *
       * If `localStorage.throwDeprecation = true` is set, then deprecated functions
       * will throw an Error when invoked.
       *
       * If `localStorage.traceDeprecation = true` is set, then deprecated functions
       * will invoke `console.trace()` instead of `console.error()`.
       *
       * @param {Function} fn - the function to deprecate
       * @param {String} msg - the string to print to the console when `fn` is invoked
       * @returns {Function} a new "deprecated" version of `fn`
       * @api public
       */

      function deprecate(fn, msg) {
        if (config('noDeprecation')) {
          return fn;
        }

        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config('throwDeprecation')) {
              throw new Error(msg);
            } else if (config('traceDeprecation')) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }

        return deprecated;
      }

      /**
       * Checks `localStorage` for boolean values for the given `name`.
       *
       * @param {String} name
       * @returns {Boolean}
       * @api private
       */

      function config(name) {
        // accessing global.localStorage can trigger a DOMException in sandboxed iframes
        try {
          if (!global.localStorage) return false;
        } catch (_) {
          return false;
        }
        var val = global.localStorage[name];
        if (null == val) return false;
        return String(val).toLowerCase() === 'true';
      }
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 212: [function (require, module, exports) {
    arguments[4][158][0].apply(exports, arguments);
  }, { "dup": 158 }], 213: [function (require, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
    };
  }, {}], 214: [function (require, module, exports) {
    (function (process, global) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var formatRegExp = /%[sdj%]/g;
      exports.format = function (f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }
          return objects.join(' ');
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
          if (x === '%%') return '%';
          if (i >= len) return x;
          switch (x) {
            case '%s':
              return String(args[i++]);
            case '%d':
              return Number(args[i++]);
            case '%j':
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return '[Circular]';
              }
            default:
              return x;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += ' ' + x;
          } else {
            str += ' ' + inspect(x);
          }
        }
        return str;
      };

      // Mark that a method should not be used.
      // Returns a modified function which warns once by default.
      // If --no-deprecation is set, then it is a no-op.
      exports.deprecate = function (fn, msg) {
        // Allow for deprecating things in the process of starting up.
        if (isUndefined(global.process)) {
          return function () {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }

        if (process.noDeprecation === true) {
          return fn;
        }

        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }

        return deprecated;
      };

      var debugs = {};
      var debugEnviron;
      exports.debuglog = function (set) {
        if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
            var pid = process.pid;
            debugs[set] = function () {
              var msg = exports.format.apply(exports, arguments);
              console.error('%s %d: %s', set, pid, msg);
            };
          } else {
            debugs[set] = function () {};
          }
        }
        return debugs[set];
      };

      /**
       * Echos the value of a value. Trys to print the value out
       * in the best way possible given the different types.
       *
       * @param {Object} obj The object to print out.
       * @param {Object} opts Optional options object that alters the output.
       */
      /* legacy: obj, showHidden, depth, colors*/
      function inspect(obj, opts) {
        // default options
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        // legacy...
        if (arguments.length >= 3) ctx.depth = arguments[2];
        if (arguments.length >= 4) ctx.colors = arguments[3];
        if (isBoolean(opts)) {
          // legacy...
          ctx.showHidden = opts;
        } else if (opts) {
          // got an "options" object
          exports._extend(ctx, opts);
        }
        // set default options
        if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
        if (isUndefined(ctx.depth)) ctx.depth = 2;
        if (isUndefined(ctx.colors)) ctx.colors = false;
        if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
        if (ctx.colors) ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      exports.inspect = inspect;

      // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
      inspect.colors = {
        'bold': [1, 22],
        'italic': [3, 23],
        'underline': [4, 24],
        'inverse': [7, 27],
        'white': [37, 39],
        'grey': [90, 39],
        'black': [30, 39],
        'blue': [34, 39],
        'cyan': [36, 39],
        'green': [32, 39],
        'magenta': [35, 39],
        'red': [31, 39],
        'yellow': [33, 39]
      };

      // Don't use 'blue' not visible on cmd.exe
      inspect.styles = {
        'special': 'cyan',
        'number': 'yellow',
        'boolean': 'yellow',
        'undefined': 'grey',
        'null': 'bold',
        'string': 'green',
        'date': 'magenta',
        // "name": intentionally not styling
        'regexp': 'red'
      };

      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];

        if (style) {
          return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
        } else {
          return str;
        }
      }

      function stylizeNoColor(str, styleType) {
        return str;
      }

      function arrayToHash(array) {
        var hash = {};

        array.forEach(function (val, idx) {
          hash[val] = true;
        });

        return hash;
      }

      function formatValue(ctx, value, recurseTimes) {
        // Provide a hook for user-specified inspect functions.
        // Check that value is an object with an inspect function on it
        if (ctx.customInspect && value && isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }

        // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }

        // Look up the keys of the object.
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);

        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }

        // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
          return formatError(value);
        }

        // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
          }
          if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), 'date');
          }
          if (isError(value)) {
            return formatError(value);
          }
        }

        var base = '',
            array = false,
            braces = ['{', '}'];

        // Make Array say that they are Array
        if (isArray(value)) {
          array = true;
          braces = ['[', ']'];
        }

        // Make functions say that they are functions
        if (isFunction(value)) {
          var n = value.name ? ': ' + value.name : '';
          base = ' [Function' + n + ']';
        }

        // Make RegExps say that they are RegExps
        if (isRegExp(value)) {
          base = ' ' + RegExp.prototype.toString.call(value);
        }

        // Make dates with properties first say the date
        if (isDate(value)) {
          base = ' ' + Date.prototype.toUTCString.call(value);
        }

        // Make error with message first say the error
        if (isError(value)) {
          base = ' ' + formatError(value);
        }

        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }

        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
          } else {
            return ctx.stylize('[Object]', 'special');
          }
        }

        ctx.seen.push(value);

        var output;
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function (key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }

        ctx.seen.pop();

        return reduceToSingleString(output, base, braces);
      }

      function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
        if (isString(value)) {
          var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
          return ctx.stylize(simple, 'string');
        }
        if (isNumber(value)) return ctx.stylize('' + value, 'number');
        if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
        // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize('null', 'null');
      }

      function formatError(value) {
        return '[' + Error.prototype.toString.call(value) + ']';
      }

      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
          } else {
            output.push('');
          }
        }
        keys.forEach(function (key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
          }
        });
        return output;
      }

      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize('[Getter/Setter]', 'special');
          } else {
            str = ctx.stylize('[Getter]', 'special');
          }
        } else {
          if (desc.set) {
            str = ctx.stylize('[Setter]', 'special');
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = '[' + key + ']';
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf('\n') > -1) {
              if (array) {
                str = str.split('\n').map(function (line) {
                  return '  ' + line;
                }).join('\n').substr(2);
              } else {
                str = '\n' + str.split('\n').map(function (line) {
                  return '   ' + line;
                }).join('\n');
              }
            }
          } else {
            str = ctx.stylize('[Circular]', 'special');
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify('' + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
          }
        }

        return name + ': ' + str;
      }

      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function (prev, cur) {
          numLinesEst++;
          if (cur.indexOf('\n') >= 0) numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
        }, 0);

        if (length > 60) {
          return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
        }

        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
      }

      // NOTE: These type checking functions intentionally don't use `instanceof`
      // because it is fragile and can be easily faked with `Object.create()`.
      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;

      function isBoolean(arg) {
        return typeof arg === 'boolean';
      }
      exports.isBoolean = isBoolean;

      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;

      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;

      function isNumber(arg) {
        return typeof arg === 'number';
      }
      exports.isNumber = isNumber;

      function isString(arg) {
        return typeof arg === 'string';
      }
      exports.isString = isString;

      function isSymbol(arg) {
        return typeof arg === 'symbol';
      }
      exports.isSymbol = isSymbol;

      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;

      function isRegExp(re) {
        return isObject(re) && objectToString(re) === '[object RegExp]';
      }
      exports.isRegExp = isRegExp;

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }
      exports.isObject = isObject;

      function isDate(d) {
        return isObject(d) && objectToString(d) === '[object Date]';
      }
      exports.isDate = isDate;

      function isError(e) {
        return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
      }
      exports.isError = isError;

      function isFunction(arg) {
        return typeof arg === 'function';
      }
      exports.isFunction = isFunction;

      function isPrimitive(arg) {
        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
        typeof arg === 'undefined';
      }
      exports.isPrimitive = isPrimitive;

      exports.isBuffer = require('./support/isBuffer');

      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }

      function pad(n) {
        return n < 10 ? '0' + n.toString(10) : n.toString(10);
      }

      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

      // 26 Feb 16:19:34
      function timestamp() {
        var d = new Date();
        var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
        return [d.getDate(), months[d.getMonth()], time].join(' ');
      }

      // log is just a thin wrapper to console.log that prepends a timestamp
      exports.log = function () {
        console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
      };

      /**
       * Inherit the prototype methods from one constructor into another.
       *
       * The Function.prototype.inherits from lang.js rewritten as a standalone
       * function (not on Function.prototype). NOTE: If this file is to be loaded
       * during bootstrapping this function needs to be rewritten using some native
       * functions as prototype setup using normal JavaScript does not work as
       * expected during bootstrapping (see mirror.js in r114903).
       *
       * @param {function} ctor Constructor function which needs to inherit the
       *     prototype.
       * @param {function} superCtor Constructor function to inherit prototype from.
       */
      exports.inherits = require('inherits');

      exports._extend = function (origin, add) {
        // Don't do anything if add isn't an object
        if (!add || !isObject(add)) return origin;

        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };

      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, { "./support/isBuffer": 213, "_process": 173, "inherits": 212 }], 215: [function (require, module, exports) {
    (function (global) {

      var rng;

      var crypto = global.crypto || global.msCrypto; // for IE 11
      if (crypto && crypto.getRandomValues) {
        // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
        // Moderately fast, high quality
        var _rnds8 = new Uint8Array(16);
        rng = function whatwgRNG() {
          crypto.getRandomValues(_rnds8);
          return _rnds8;
        };
      }

      if (!rng) {
        // Math.random()-based (RNG)
        //
        // If all else fails, use Math.random().  It's fast, but is of unspecified
        // quality.
        var _rnds = new Array(16);
        rng = function () {
          for (var i = 0, r; i < 16; i++) {
            if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
            _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
          }

          return _rnds;
        };
      }

      module.exports = rng;
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}], 216: [function (require, module, exports) {
    //     uuid.js
    //
    //     Copyright (c) 2010-2012 Robert Kieffer
    //     MIT License - http://opensource.org/licenses/mit-license.php

    // Unique ID creation requires a high quality random # generator.  We feature
    // detect to determine the best RNG source, normalizing to a function that
    // returns 128-bits of randomness, since that's what's usually required
    var _rng = require('./rng');

    // Maps for number <-> hex string conversion
    var _byteToHex = [];
    var _hexToByte = {};
    for (var i = 0; i < 256; i++) {
      _byteToHex[i] = (i + 0x100).toString(16).substr(1);
      _hexToByte[_byteToHex[i]] = i;
    }

    // **`parse()` - Parse a UUID into it's component bytes**
    function parse(s, buf, offset) {
      var i = buf && offset || 0,
          ii = 0;

      buf = buf || [];
      s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {
        if (ii < 16) {
          // Don't overflow!
          buf[i + ii++] = _hexToByte[oct];
        }
      });

      // Zero out remaining bytes if string was short
      while (ii < 16) {
        buf[i + ii++] = 0;
      }

      return buf;
    }

    // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
    function unparse(buf, offset) {
      var i = offset || 0,
          bth = _byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
    }

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    // random #'s we need to init node and clockseq
    var _seedBytes = _rng();

    // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
    var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

    // Per 4.2.2, randomize (14 bit) clockseq
    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

    // Previous uuid creation time
    var _lastMSecs = 0,
        _lastNSecs = 0;

    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};

      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      var node = options.node || _nodeId;
      for (var n = 0; n < 6; n++) {
        b[i + n] = node[n];
      }

      return buf ? buf : unparse(b);
    }

    // **`v4()` - Generate random UUID**

    // See https://github.com/broofa/node-uuid for API details
    function v4(options, buf, offset) {
      // Deprecated - 'format' argument, as supported in v1.2
      var i = buf && offset || 0;

      if (typeof options == 'string') {
        buf = options == 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || _rng)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ii++) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || unparse(rnds);
    }

    // Export public API
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    uuid.parse = parse;
    uuid.unparse = unparse;

    module.exports = uuid;
  }, { "./rng": 215 }], 217: [function (require, module, exports) {
    var indexOf = require('indexof');

    var Object_keys = function (obj) {
      if (Object.keys) return Object.keys(obj);else {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
      }
    };

    var forEach = function (xs, fn) {
      if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
      }
    };

    var defineProp = function () {
      try {
        Object.defineProperty({}, '_', {});
        return function (obj, name, value) {
          Object.defineProperty(obj, name, {
            writable: true,
            enumerable: false,
            configurable: true,
            value: value
          });
        };
      } catch (e) {
        return function (obj, name, value) {
          obj[name] = value;
        };
      }
    }();

    var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

    function Context() {}
    Context.prototype = {};

    var Script = exports.Script = function NodeScript(code) {
      if (!(this instanceof Script)) return new Script(code);
      this.code = code;
    };

    Script.prototype.runInContext = function (context) {
      if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
      }

      var iframe = document.createElement('iframe');
      if (!iframe.style) iframe.style = {};
      iframe.style.display = 'none';

      document.body.appendChild(iframe);

      var win = iframe.contentWindow;
      var wEval = win.eval,
          wExecScript = win.execScript;

      if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
      }

      forEach(Object_keys(context), function (key) {
        win[key] = context[key];
      });
      forEach(globals, function (key) {
        if (context[key]) {
          win[key] = context[key];
        }
      });

      var winKeys = Object_keys(win);

      var res = wEval.call(win, this.code);

      forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
          context[key] = win[key];
        }
      });

      forEach(globals, function (key) {
        if (!(key in context)) {
          defineProp(context, key, win[key]);
        }
      });

      document.body.removeChild(iframe);

      return res;
    };

    Script.prototype.runInThisContext = function () {
      return eval(this.code); // maybe...
    };

    Script.prototype.runInNewContext = function (context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);

      forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
      });

      return res;
    };

    forEach(Object_keys(Script.prototype), function (name) {
      exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
      };
    });

    exports.createScript = function (code) {
      return exports.Script(code);
    };

    exports.createContext = Script.createContext = function (context) {
      var copy = new Context();
      if (typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
          copy[key] = context[key];
        });
      }
      return copy;
    };
  }, { "indexof": 157 }] }, {}, [30]);